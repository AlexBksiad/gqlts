scalar AnyScalar

type DataPoint {
  x: Float
  y: Float
  serviceName: String
}

scalar Date

scalar DateTime

input DeployStackInput {
  stackId: String
  dockerComposeYaml: String!
  stackName: String!
  region: Region!
  envFiles: [EnvFileInput]
  envVars: [EnvVarInput]!
  template: TemplateInput!
}

type DesployStackOutput {
  _id: String
  firstTimeDeployment: Boolean
}

enum Direction {
  ASC
  DESC
}

type EnvFile {
  stackId: String
  path: String
  content: String
  parsedEnvAsJson: String
}

input EnvFileInput {
  path: String
  content: String
  stackId: String
  servicesDockerComposeNames: [String]
}

input EnvVarInput {
  key: String!
  value: String!
}

type Error {
  message: String
  name: String
}

input GetLogsInput {
  serviceNames: [String]!
  from: String
  to: String
  untilInsertId: String
}

type GetLogsNodes {
  nodes: [LogsNode]
  lastInsertId: String
}

input GetTemplateInput {
  githubUrl: String
  dockerComposePath: String
}

type GithubData {
  username: String
  token: String
  scopes: [String]
}

type GitProfile {
  prettyName: String
  url: String
  type: GitProvider
}

enum GitProvider {
  GITHUB
}

type GitRepo {
  url: String
  prettyName: String
  type: GitProvider
}

input GitRepoInput {
  url: String
  prettyName: String
  type: GitProvider
}

scalar Json

"""JsonString"""
scalar JsonString

input LoginInput {
  idToken: String!
  githubToken: String!
  scopes: [String]
}

type LoginOutput {
  token: String
  expiresIn: Int
  isSignup: Boolean
}

input LoginWithGithubInput {
  githubToken: String!
}

type LogsNode {
  datetime: String
  line: String
  service: String
}

input MetricsInput {
  lastHours: Int
  binSecondsWidth: Int
  serviceNames: [String!]!
  nowUnix: Int
}

type Mutation {
  deployStack(input: DeployStackInput): DesployStackOutput
  login(input: LoginInput): LoginOutput
  loginWithGithub(input: LoginWithGithubInput): LoginOutput
  uploadEnvFiles(input: UploadEnvFilesInput): Boolean
  newFromGithubRepo(input: NewFromGithubRepoInput): NewFromGithubRepoOutput
}

input NewFromGithubRepoInput {
  githubUrl: String
  dockerComposePath: String
  dockerComposeYaml: String
  stackName: String
  newRepoName: String
  region: Region
  envFiles: [EnvFileInput]
}

type NewFromGithubRepoOutput {
  stackId: String
}

scalar ObjectId

type OnBoardingCheckList {
  signup: Boolean
  emailVerified: Boolean
  deployedFirstStack: Boolean
  sharedFirstStack: Boolean
}

type PageInfo {
  startCursor: AnyScalar
  endCursor: AnyScalar
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  mongoke_version: String
  User(where: UserWhere): User
  Users(where: UserWhere, cursorField: UserFields, first: Int, last: Int, after: AnyScalar, before: AnyScalar, direction: Direction): UserConnection!
  Stack(where: StackWhere): Stack
  Stacks(where: StackWhere, cursorField: StackFields, first: Int, last: Int, after: AnyScalar, before: AnyScalar, direction: Direction): StackConnection!
  getLogs(input: GetLogsInput): GetLogsNodes
  getRequestsCountMetrics(input: MetricsInput): [DataPoint]
  getRequestsLatencyMetrics(input: MetricsInput): [DataPoint]
  getTemplate(input: GetTemplateInput): Template
  userGithubIntegrationStatus: UserGithubIntegrationStatusOutput
  getUserOnBoardingCheckList: OnBoardingCheckList
  getTemplates: [Template]
}

enum Region {
  asia_east1
  asia_northeast1
  europe_north1
  europe_west1
  europe_west4
  us_central1
  us_east1
  us_east4
  us_west1
}

type Service {
  name: String
  cloudConsoleName: String
  status: StackStatus
  image: String
  url: String
  error: Error
  environmentJson: String
  envFilesPaths: [String]
  isActive: Boolean
  ramMbSize: Int
  vcpusCount: Int
}

type Stack {
  name: String
  status: StackStatus
  template: StackTemplate
  pulumiStackName: String
  region: Region
  pulumiStateUrl: String
  envFiles: [EnvFile]
  interpolationEnvVarsJson: String
  _id: ObjectId
  createdAtUnix: Float
  deployedByUserUid: String
  dockerComposeYaml: String
  services: [Service]
  assoicatedGitRepo: GitRepo
  deploymentsCount: Int
  lastDeploymentError: Error
}

type StackConnection {
  nodes: [Stack]!
  edges: [StackEdge]!
  pageInfo: PageInfo!
}

type StackEdge {
  node: Stack
  cursor: AnyScalar
}

enum StackFields {
  name
  status
  pulumiStackName
  region
  pulumiStateUrl
  interpolationEnvVarsJson
  _id
  createdAtUnix
  deployedByUserUid
  dockerComposeYaml
  deploymentsCount
}

type StackGitIntegration {
  url: String
}

enum StackStatus {
  CREATING
  ACTIVE
  ERROR
}

type StackTemplate {
  gitRepo: GitRepo
  title: String
  description: String
  iconSrc: String
  dockerComposeYaml: String
  dockerComposePath: String
  envVarsSchemaJson: String
}

input StackWhere {
  and: [StackWhere]
  or: [StackWhere]
  name: WhereString
  status: WhereStackStatus
  pulumiStackName: WhereString
  region: WhereRegion
  pulumiStateUrl: WhereString
  interpolationEnvVarsJson: WhereString
  _id: WhereObjectId
  createdAtUnix: WhereFloat
  deployedByUserUid: WhereString
  dockerComposeYaml: WhereString
  deploymentsCount: WhereInt
}

type Template {
  gitRepo: GitRepo
  title: String
  envFiles: [TemplateEnvFile]
  description: String
  iconSrc: String
  dockerComposeYaml: String
  dockerComposePath: String
  envVarsSchemaJson: JsonString
}

type TemplateEnvFile {
  path: String
  content: String
  servicesDockerComposeNames: [String]
}

input TemplateInput {
  gitRepo: GitRepoInput!
  title: String!
  description: String!
  iconSrc: String!
  dockerComposeYaml: String!
  dockerComposePath: String!
  envVarsSchemaJson: JsonString!
}

scalar Time

input UploadEnvFilesInput {
  files: [EnvFileInput]
  stackId: String
  overwrite: Boolean
}

type User {
  uid: String
  photoUrl: String
  githubData: GithubData
  displayName: String
  email: String
  gitIntegration: GitProfile
  stacksReferences(where: StackWhere, cursorField: StackFields, first: Int, last: Int, after: AnyScalar, before: AnyScalar, direction: Direction): StackConnection!
}

type UserConnection {
  nodes: [User]!
  edges: [UserEdge]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User
  cursor: AnyScalar
}

enum UserFields {
  uid
  photoUrl
  displayName
  email
}

type UserGithubIntegrationStatusOutput {
  scopes: [String]
  completeSupport: Boolean
}

input UserWhere {
  and: [UserWhere]
  or: [UserWhere]
  uid: WhereString
  photoUrl: WhereString
  displayName: WhereString
  email: WhereString
}

input WhereBoolean {
  in: [Boolean]
  nin: [Boolean]
  eq: Boolean
  neq: Boolean
}

input WhereFloat {
  in: [Float]
  nin: [Float]
  eq: Float
  neq: Float
}

input WhereGitProvider {
  in: [GitProvider]
  nin: [GitProvider]
  eq: GitProvider
  neq: GitProvider
}

input WhereID {
  in: [ID]
  nin: [ID]
  eq: ID
  neq: ID
}

input WhereInt {
  in: [Int]
  nin: [Int]
  eq: Int
  neq: Int
}

input WhereObjectId {
  in: [ObjectId]
  nin: [ObjectId]
  eq: ObjectId
  neq: ObjectId
}

input WhereRegion {
  in: [Region]
  nin: [Region]
  eq: Region
  neq: Region
}

input WhereStackStatus {
  in: [StackStatus]
  nin: [StackStatus]
  eq: StackStatus
  neq: StackStatus
}

input WhereString {
  in: [String]
  nin: [String]
  eq: String
  neq: String
}
