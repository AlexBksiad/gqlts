import {FieldsSelection,Observable} from 'genql-runtime'

export type Scalars = {
    String: string,
    ID: string,
    URI: string,
    Int: number,
    Float: number,
    DateTime: any,
    HTML: string,
    Boolean: boolean,
    GitObjectID: any,
    GitTimestamp: any,
    GitSSHRemote: any,
    Date: any,
    PreciseDateTime: any,
    X509Certificate: any,
    GitRefname: any,
}


/** The query root of GitHub's GraphQL interface. */
export interface Query{
    /** Look up a code of conduct by its key */
    codeOfConduct: (CodeOfConduct|null)
    /** Look up a code of conduct by its key */
    codesOfConduct: ((CodeOfConduct|null)[]|null)
    /** Look up an enterprise by URL slug. */
    enterprise: (Enterprise|null)
    /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
    enterpriseAdministratorInvitation: (EnterpriseAdministratorInvitation|null)
    /** Look up a pending enterprise administrator invitation by invitation token. */
    enterpriseAdministratorInvitationByToken: (EnterpriseAdministratorInvitation|null)
    /** Look up an open source license by its key */
    license: (License|null)
    /** Return a list of known open source licenses */
    licenses: (License|null)[]
    /** Get alphabetically sorted list of Marketplace categories */
    marketplaceCategories: MarketplaceCategory[]
    /** Look up a Marketplace category by its slug. */
    marketplaceCategory: (MarketplaceCategory|null)
    /** Look up a single Marketplace listing */
    marketplaceListing: (MarketplaceListing|null)
    /** Look up Marketplace listings */
    marketplaceListings: MarketplaceListingConnection
    /** Return information about the GitHub instance */
    meta: GitHubMetadata
    /** Fetches an object given its ID. */
    node: (Node|null)
    /** Lookup nodes by a list of IDs. */
    nodes: (Node|null)[]
    /** Lookup a organization by login. */
    organization: (Organization|null)
    /** The client's rate limit information. */
    rateLimit: (RateLimit|null)
    /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
    relay: Query
    /** Lookup a given repository by the owner and repository name. */
    repository: (Repository|null)
    /** Lookup a repository owner (ie. either a User or an Organization) by login. */
    repositoryOwner: (RepositoryOwner|null)
    /** Lookup resource by a URL. */
    resource: (UniformResourceLocatable|null)
    /** Perform a search across resources. */
    search: SearchResultItemConnection
    /** GitHub Security Advisories */
    securityAdvisories: SecurityAdvisoryConnection
    /** Fetch a Security Advisory by its GHSA ID */
    securityAdvisory: (SecurityAdvisory|null)
    /** Software Vulnerabilities documented by GitHub Security Advisories */
    securityVulnerabilities: SecurityVulnerabilityConnection
    /**
     * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
     * Look up a single Sponsors Listing
     */
    sponsorsListing: (SponsorsListing|null)
    /** Look up a topic by name. */
    topic: (Topic|null)
    /** Lookup a user by login. */
    user: (User|null)
    /** The currently authenticated user. */
    viewer: User
    __typename: 'Query'
}


/** The Code of Conduct for a repository */
export interface CodeOfConduct extends Node{
    /** The body of the Code of Conduct */
    body: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The key for the Code of Conduct */
    key: Scalars["String"]
    /** The formal name of the Code of Conduct */
    name: Scalars["String"]
    /** The HTTP path for this Code of Conduct */
    resourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this Code of Conduct */
    url: (Scalars["URI"]|null)
    __typename: 'CodeOfConduct'
}


/** An object with an ID. */
export interface Node{
    /** ID of the object. */
    id: Scalars["ID"]
    __typename: 'CodeOfConduct'|'Enterprise'|'EnterpriseUserAccount'|'Organization'|'UserStatus'|'User'|'Package'|'PackageVersion'|'PackageFile'|'Release'|'ReleaseAsset'|'Ref'|'PullRequest'|'UserContentEdit'|'Label'|'Issue'|'Reaction'|'Repository'|'Project'|'ProjectColumn'|'ProjectCard'|'RegistryPackage'|'RegistryPackageVersion'|'RegistryPackageDependency'|'RegistryPackageFile'|'RegistryPackageTag'|'Topic'|'License'|'BranchProtectionRule'|'PushAllowance'|'App'|'Team'|'TeamDiscussion'|'TeamDiscussionComment'|'OrganizationInvitation'|'ReviewDismissalAllowance'|'CommitComment'|'Commit'|'CheckSuite'|'CheckRun'|'Push'|'Deployment'|'DeploymentStatus'|'Status'|'StatusContext'|'StatusCheckRollup'|'Tree'|'DependencyGraphManifest'|'DeployKey'|'Language'|'Milestone'|'PinnedIssue'|'RepositoryTopic'|'RepositoryVulnerabilityAlert'|'SecurityAdvisory'|'IssueComment'|'AssignedEvent'|'Bot'|'Mannequin'|'ClosedEvent'|'CrossReferencedEvent'|'DemilestonedEvent'|'LabeledEvent'|'LockedEvent'|'MilestonedEvent'|'ReferencedEvent'|'RenamedTitleEvent'|'ReopenedEvent'|'SubscribedEvent'|'TransferredEvent'|'UnassignedEvent'|'UnlabeledEvent'|'UnlockedEvent'|'UnsubscribedEvent'|'UserBlockedEvent'|'AddedToProjectEvent'|'CommentDeletedEvent'|'ConnectedEvent'|'ConvertedNoteToIssueEvent'|'DisconnectedEvent'|'MarkedAsDuplicateEvent'|'MentionedEvent'|'MovedColumnsInProjectEvent'|'PinnedEvent'|'RemovedFromProjectEvent'|'UnmarkedAsDuplicateEvent'|'UnpinnedEvent'|'PullRequestCommit'|'ReviewRequest'|'PullRequestReviewThread'|'PullRequestReviewComment'|'PullRequestReview'|'BaseRefForcePushedEvent'|'CommitCommentThread'|'DeployedEvent'|'DeploymentEnvironmentChangedEvent'|'HeadRefDeletedEvent'|'HeadRefForcePushedEvent'|'HeadRefRestoredEvent'|'MergedEvent'|'ReviewDismissedEvent'|'ReviewRequestRemovedEvent'|'ReviewRequestedEvent'|'AutomaticBaseChangeFailedEvent'|'AutomaticBaseChangeSucceededEvent'|'BaseRefChangedEvent'|'ConvertToDraftEvent'|'PullRequestCommitCommentThread'|'ReadyForReviewEvent'|'Gist'|'GistComment'|'SponsorsListing'|'SponsorsTier'|'Sponsorship'|'PublicKey'|'SavedReply'|'MembersCanDeleteReposClearAuditEntry'|'MembersCanDeleteReposDisableAuditEntry'|'MembersCanDeleteReposEnableAuditEntry'|'OauthApplicationCreateAuditEntry'|'OrgAddBillingManagerAuditEntry'|'OrgAddMemberAuditEntry'|'OrgBlockUserAuditEntry'|'OrgConfigDisableCollaboratorsOnlyAuditEntry'|'OrgConfigEnableCollaboratorsOnlyAuditEntry'|'OrgCreateAuditEntry'|'OrgDisableOauthAppRestrictionsAuditEntry'|'OrgDisableSamlAuditEntry'|'OrgDisableTwoFactorRequirementAuditEntry'|'OrgEnableOauthAppRestrictionsAuditEntry'|'OrgEnableSamlAuditEntry'|'OrgEnableTwoFactorRequirementAuditEntry'|'OrgInviteMemberAuditEntry'|'OrgInviteToBusinessAuditEntry'|'OrgOauthAppAccessApprovedAuditEntry'|'OrgOauthAppAccessDeniedAuditEntry'|'OrgOauthAppAccessRequestedAuditEntry'|'OrgRemoveBillingManagerAuditEntry'|'OrgRemoveMemberAuditEntry'|'OrgRemoveOutsideCollaboratorAuditEntry'|'OrgRestoreMemberAuditEntry'|'OrgUnblockUserAuditEntry'|'OrgUpdateDefaultRepositoryPermissionAuditEntry'|'OrgUpdateMemberAuditEntry'|'OrgUpdateMemberRepositoryCreationPermissionAuditEntry'|'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry'|'PrivateRepositoryForkingDisableAuditEntry'|'PrivateRepositoryForkingEnableAuditEntry'|'RepoAccessAuditEntry'|'RepoAddMemberAuditEntry'|'RepoAddTopicAuditEntry'|'RepoArchivedAuditEntry'|'RepoChangeMergeSettingAuditEntry'|'RepoConfigDisableAnonymousGitAccessAuditEntry'|'RepoConfigDisableCollaboratorsOnlyAuditEntry'|'RepoConfigDisableContributorsOnlyAuditEntry'|'RepoConfigDisableSockpuppetDisallowedAuditEntry'|'RepoConfigEnableAnonymousGitAccessAuditEntry'|'RepoConfigEnableCollaboratorsOnlyAuditEntry'|'RepoConfigEnableContributorsOnlyAuditEntry'|'RepoConfigEnableSockpuppetDisallowedAuditEntry'|'RepoConfigLockAnonymousGitAccessAuditEntry'|'RepoConfigUnlockAnonymousGitAccessAuditEntry'|'RepoCreateAuditEntry'|'RepoDestroyAuditEntry'|'RepoRemoveMemberAuditEntry'|'RepoRemoveTopicAuditEntry'|'RepositoryVisibilityChangeDisableAuditEntry'|'RepositoryVisibilityChangeEnableAuditEntry'|'TeamAddMemberAuditEntry'|'TeamAddRepositoryAuditEntry'|'TeamChangeParentTeamAuditEntry'|'TeamRemoveMemberAuditEntry'|'TeamRemoveRepositoryAuditEntry'|'IpAllowListEntry'|'OrganizationIdentityProvider'|'ExternalIdentity'|'EnterpriseServerInstallation'|'EnterpriseServerUserAccount'|'EnterpriseServerUserAccountEmail'|'EnterpriseServerUserAccountsUpload'|'EnterpriseRepositoryInfo'|'EnterpriseAdministratorInvitation'|'RepositoryInvitation'|'EnterpriseIdentityProvider'|'MarketplaceCategory'|'MarketplaceListing'|'Blob'|'PackageTag'|'Tag'
}


/** An account to manage multiple organizations with consolidated policy and billing. */
export interface Enterprise extends Node{
    /** A URL pointing to the enterprise's public avatar. */
    avatarUrl: Scalars["URI"]
    /** Enterprise billing informationÂ visible to enterprise billing managers. */
    billingInfo: (EnterpriseBillingInfo|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The description of the enterprise. */
    description: (Scalars["String"]|null)
    /** The description of the enterprise as HTML. */
    descriptionHTML: Scalars["HTML"]
    id: Scalars["ID"]
    /** The location of the enterprise. */
    location: (Scalars["String"]|null)
    /** A list of users who are members of this enterprise. */
    members: EnterpriseMemberConnection
    /** The name of the enterprise. */
    name: Scalars["String"]
    /** A list of organizations that belong to this enterprise. */
    organizations: OrganizationConnection
    /** Enterprise information only visible to enterprise owners. */
    ownerInfo: (EnterpriseOwnerInfo|null)
    /** The HTTP path for this enterprise. */
    resourcePath: Scalars["URI"]
    /** The URL-friendly identifier for the enterprise. */
    slug: Scalars["String"]
    /** The HTTP URL for this enterprise. */
    url: Scalars["URI"]
    /** A list of user accounts on this enterprise. */
    userAccounts: EnterpriseUserAccountConnection
    /** Is the current viewer an admin of this enterprise? */
    viewerIsAdmin: Scalars["Boolean"]
    /** The URL of the enterprise website. */
    websiteUrl: (Scalars["URI"]|null)
    __typename: 'Enterprise'
}


/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfo{
    /** The number of licenseable users/emails across the enterprise. */
    allLicensableUsersCount: Scalars["Int"]
    /** The number of data packs used by all organizations owned by the enterprise. */
    assetPacks: Scalars["Int"]
    /**
     * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
     * The number of available seats across all owned organizations based on the unique number of billable users.
     */
    availableSeats: Scalars["Int"]
    /** The bandwidth quota in GB for all organizations owned by the enterprise. */
    bandwidthQuota: Scalars["Float"]
    /** The bandwidth usage in GB for all organizations owned by the enterprise. */
    bandwidthUsage: Scalars["Float"]
    /** The bandwidth usage as a percentage of the bandwidth quota. */
    bandwidthUsagePercentage: Scalars["Int"]
    /**
     * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
     * The total seats across all organizations owned by the enterprise.
     */
    seats: Scalars["Int"]
    /** The storage quota in GB for all organizations owned by the enterprise. */
    storageQuota: Scalars["Float"]
    /** The storage usage in GB for all organizations owned by the enterprise. */
    storageUsage: Scalars["Float"]
    /** The storage usage as a percentage of the storage quota. */
    storageUsagePercentage: Scalars["Int"]
    /** The number of available licenses across all owned organizations based on the unique number of billable users. */
    totalAvailableLicenses: Scalars["Int"]
    /** The total number of licenses allocated. */
    totalLicenses: Scalars["Int"]
    __typename: 'EnterpriseBillingInfo'
}


/** The possible GitHub Enterprise deployments where this user can exist. */
export type EnterpriseUserDeployment = 'CLOUD' | 'SERVER'


/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export type OrderDirection = 'ASC' | 'DESC'


/** Properties by which enterprise member connections can be ordered. */
export type EnterpriseMemberOrderField = 'CREATED_AT' | 'LOGIN'


/** The possible roles for enterprise membership. */
export type EnterpriseUserAccountMembershipRole = 'MEMBER' | 'OWNER'


/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnection{
    /** A list of edges. */
    edges: ((EnterpriseMemberEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseMember|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseMemberConnection'
}


/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** Whether the user does not have a license for the enterprise. */
    isUnlicensed: Scalars["Boolean"]
    /** The item at the end of the edge. */
    node: (EnterpriseMember|null)
    __typename: 'EnterpriseMemberEdge'
}


/** An object that is a member of an enterprise. */
export type EnterpriseMember=EnterpriseUserAccount|User


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccount extends Actor,Node{
    /** A URL pointing to the enterprise user account's public avatar. */
    avatarUrl: Scalars["URI"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The enterprise in which this user account exists. */
    enterprise: Enterprise
    id: Scalars["ID"]
    /** An identifier for the enterprise user account, a login or email address */
    login: Scalars["String"]
    /** The name of the enterprise user account */
    name: (Scalars["String"]|null)
    /** A list of enterprise organizations this user is a member of. */
    organizations: EnterpriseOrganizationMembershipConnection
    /** The HTTP path for this user. */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this user. */
    url: Scalars["URI"]
    /** The user within the enterprise. */
    user: (User|null)
    __typename: 'EnterpriseUserAccount'
}


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface Actor{
    /** A URL pointing to the actor's public avatar. */
    avatarUrl: Scalars["URI"]
    /** The username of the actor. */
    login: Scalars["String"]
    /** The HTTP path for this actor. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this actor. */
    url: Scalars["URI"]
    __typename: 'EnterpriseUserAccount'|'Organization'|'User'|'Bot'|'Mannequin'
}


/** Properties by which organization connections can be ordered. */
export type OrganizationOrderField = 'CREATED_AT' | 'LOGIN'


/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnection{
    /** A list of edges. */
    edges: ((EnterpriseOrganizationMembershipEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Organization|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseOrganizationMembershipConnection'
}


/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Organization|null)
    /** The role of the user in the enterprise membership. */
    role: EnterpriseUserAccountMembershipRole
    __typename: 'EnterpriseOrganizationMembershipEdge'
}


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface Organization extends Actor,MemberStatusable,Node,PackageOwner,ProfileOwner,ProjectOwner,RegistryPackageOwner,RegistryPackageSearch,RepositoryOwner,Sponsorable,UniformResourceLocatable{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems: Scalars["Boolean"]
    /** Audit log entries of the organization */
    auditLog: OrganizationAuditEntryConnection
    /** A URL pointing to the organization's public avatar. */
    avatarUrl: Scalars["URI"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The organization's public profile description. */
    description: (Scalars["String"]|null)
    /** The organization's public profile description rendered to HTML. */
    descriptionHTML: (Scalars["String"]|null)
    /** The organization's public email. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The setting value for whether the organization has an IP allow list enabled. */
    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue
    /** The IP addresses that are allowed to access resources owned by the organization. */
    ipAllowListEntries: IpAllowListEntryConnection
    /** Whether the organization has verified its profile email and website. */
    isVerified: Scalars["Boolean"]
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase: ProfileItemShowcase
    /** The organization's public profile location. */
    location: (Scalars["String"]|null)
    /** The organization's login name. */
    login: Scalars["String"]
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses: UserStatusConnection
    /** A list of users who are members of this organization. */
    membersWithRole: OrganizationMemberConnection
    /** The organization's public profile name. */
    name: (Scalars["String"]|null)
    /** The HTTP path creating a new team */
    newTeamResourcePath: Scalars["URI"]
    /** The HTTP URL creating a new team */
    newTeamUrl: Scalars["URI"]
    /** The billing email for the organization. */
    organizationBillingEmail: (Scalars["String"]|null)
    /** A list of packages under the owner. */
    packages: PackageConnection
    /** A list of users who have been invited to join this organization. */
    pendingMembers: UserConnection
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems: PinnableItemConnection
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems: PinnableItemConnection
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining: Scalars["Int"]
    /** Find project by number. */
    project: (Project|null)
    /** A list of projects under the owner. */
    projects: ProjectConnection
    /** The HTTP path listing organization's projects */
    projectsResourcePath: Scalars["URI"]
    /** The HTTP URL listing organization's projects */
    projectsUrl: Scalars["URI"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages: RegistryPackageConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery: RegistryPackageConnection
    /** A list of repositories that the user owns. */
    repositories: RepositoryConnection
    /** Find Repository. */
    repository: (Repository|null)
    /**
     * When true the organization requires all members, billing managers, and outside
     * collaborators to enable two-factor authentication.
     */
    requiresTwoFactorAuthentication: (Scalars["Boolean"]|null)
    /** The HTTP path for this organization. */
    resourcePath: Scalars["URI"]
    /** The Organization's SAML identity providers */
    samlIdentityProvider: (OrganizationIdentityProvider|null)
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing: (SponsorsListing|null)
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer: SponsorshipConnection
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor: SponsorshipConnection
    /** Find an organization's team by its slug. */
    team: (Team|null)
    /** A list of teams in this organization. */
    teams: TeamConnection
    /** The HTTP path listing organization's teams */
    teamsResourcePath: Scalars["URI"]
    /** The HTTP URL listing organization's teams */
    teamsUrl: Scalars["URI"]
    /** The organization's Twitter username. */
    twitterUsername: (Scalars["String"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this organization. */
    url: Scalars["URI"]
    /** Organization is adminable by the viewer. */
    viewerCanAdminister: Scalars["Boolean"]
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems: Scalars["Boolean"]
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"]
    /** Viewer can create repositories on this organization */
    viewerCanCreateRepositories: Scalars["Boolean"]
    /** Viewer can create teams on this organization. */
    viewerCanCreateTeams: Scalars["Boolean"]
    /** Viewer is an active member of this organization. */
    viewerIsAMember: Scalars["Boolean"]
    /** The organization's public profile URL. */
    websiteUrl: (Scalars["URI"]|null)
    __typename: 'Organization'
}


/** Entities that have members who can set status messages. */
export interface MemberStatusable{
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses: UserStatusConnection
    __typename: 'Organization'|'Team'
}


/** Properties by which user status connections can be ordered. */
export type UserStatusOrderField = 'UPDATED_AT'


/** The connection type for UserStatus. */
export interface UserStatusConnection{
    /** A list of edges. */
    edges: ((UserStatusEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((UserStatus|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'UserStatusConnection'
}


/** An edge in a connection. */
export interface UserStatusEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (UserStatus|null)
    __typename: 'UserStatusEdge'
}


/** The user's description of what they're currently doing. */
export interface UserStatus extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** An emoji summarizing the user's status. */
    emoji: (Scalars["String"]|null)
    /** The status emoji as HTML. */
    emojiHTML: (Scalars["HTML"]|null)
    /** If set, the status will not be shown after this date. */
    expiresAt: (Scalars["DateTime"]|null)
    /** ID of the object. */
    id: Scalars["ID"]
    /** Whether this status indicates the user is not fully available on GitHub. */
    indicatesLimitedAvailability: Scalars["Boolean"]
    /** A brief message describing what the user is doing. */
    message: (Scalars["String"]|null)
    /** The organization whose members can see this status. If null, this status is publicly visible. */
    organization: (Organization|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The user who has this status. */
    user: User
    __typename: 'UserStatus'
}


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface User extends Actor,Node,PackageOwner,ProfileOwner,ProjectOwner,RegistryPackageOwner,RegistryPackageSearch,RepositoryOwner,Sponsorable,UniformResourceLocatable{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems: Scalars["Boolean"]
    /** A URL pointing to the user's public avatar. */
    avatarUrl: Scalars["URI"]
    /** The user's public profile bio. */
    bio: (Scalars["String"]|null)
    /** The user's public profile bio as HTML. */
    bioHTML: Scalars["HTML"]
    /** A list of commit comments made by this user. */
    commitComments: CommitCommentConnection
    /** The user's public profile company. */
    company: (Scalars["String"]|null)
    /** The user's public profile company as HTML. */
    companyHTML: Scalars["HTML"]
    /** The collection of contributions this user has made to different repositories. */
    contributionsCollection: ContributionsCollection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The user's publicly visible profile email. */
    email: Scalars["String"]
    /** A list of users the given user is followed by. */
    followers: FollowerConnection
    /** A list of users the given user is following. */
    following: FollowingConnection
    /** Find gist by repo name. */
    gist: (Gist|null)
    /** A list of gist comments made by this user. */
    gistComments: GistCommentConnection
    /** A list of the Gists the user has created. */
    gists: GistConnection
    /** The hovercard information for this user in a given context */
    hovercard: Hovercard
    id: Scalars["ID"]
    /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
    isBountyHunter: Scalars["Boolean"]
    /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
    isCampusExpert: Scalars["Boolean"]
    /** Whether or not this user is a GitHub Developer Program member. */
    isDeveloperProgramMember: Scalars["Boolean"]
    /** Whether or not this user is a GitHub employee. */
    isEmployee: Scalars["Boolean"]
    /** Whether or not the user has marked themselves as for hire. */
    isHireable: Scalars["Boolean"]
    /** Whether or not this user is a site administrator. */
    isSiteAdmin: Scalars["Boolean"]
    /** Whether or not this user is the viewing user. */
    isViewer: Scalars["Boolean"]
    /** A list of issue comments made by this user. */
    issueComments: IssueCommentConnection
    /** A list of issues associated with this user. */
    issues: IssueConnection
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase: ProfileItemShowcase
    /** The user's public profile location. */
    location: (Scalars["String"]|null)
    /** The username used to login. */
    login: Scalars["String"]
    /** The user's public profile name. */
    name: (Scalars["String"]|null)
    /** Find an organization by its login that the user belongs to. */
    organization: (Organization|null)
    /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
    organizationVerifiedDomainEmails: Scalars["String"][]
    /** A list of organizations the user belongs to. */
    organizations: OrganizationConnection
    /** A list of packages under the owner. */
    packages: PackageConnection
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems: PinnableItemConnection
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems: PinnableItemConnection
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining: Scalars["Int"]
    /** Find project by number. */
    project: (Project|null)
    /** A list of projects under the owner. */
    projects: ProjectConnection
    /** The HTTP path listing user's projects */
    projectsResourcePath: Scalars["URI"]
    /** The HTTP URL listing user's projects */
    projectsUrl: Scalars["URI"]
    /** A list of public keys associated with this user. */
    publicKeys: PublicKeyConnection
    /** A list of pull requests associated with this user. */
    pullRequests: PullRequestConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages: RegistryPackageConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery: RegistryPackageConnection
    /** A list of repositories that the user owns. */
    repositories: RepositoryConnection
    /** A list of repositories that the user recently contributed to. */
    repositoriesContributedTo: RepositoryConnection
    /** Find Repository. */
    repository: (Repository|null)
    /** The HTTP path for this user */
    resourcePath: Scalars["URI"]
    /** Replies this user has saved */
    savedReplies: (SavedReplyConnection|null)
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing: (SponsorsListing|null)
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer: SponsorshipConnection
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor: SponsorshipConnection
    /** Repositories the user has starred. */
    starredRepositories: StarredRepositoryConnection
    /** The user's description of what they're currently doing. */
    status: (UserStatus|null)
    /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
    topRepositories: RepositoryConnection
    /** The user's Twitter username. */
    twitterUsername: (Scalars["String"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this user */
    url: Scalars["URI"]
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems: Scalars["Boolean"]
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"]
    /** Whether or not the viewer is able to follow the user. */
    viewerCanFollow: Scalars["Boolean"]
    /** Whether or not this user is followed by the viewer. */
    viewerIsFollowing: Scalars["Boolean"]
    /** A list of repositories the given user is watching. */
    watching: RepositoryConnection
    /** A URL pointing to the user's public website/blog. */
    websiteUrl: (Scalars["URI"]|null)
    __typename: 'User'
}


/** Represents an owner of a package. */
export interface PackageOwner{
    id: Scalars["ID"]
    /** A list of packages under the owner. */
    packages: PackageConnection
    __typename: 'Organization'|'User'|'Repository'
}


/** Properties by which package connections can be ordered. */
export type PackageOrderField = 'CREATED_AT'


/** The connection type for Package. */
export interface PackageConnection{
    /** A list of edges. */
    edges: ((PackageEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Package|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PackageConnection'
}


/** An edge in a connection. */
export interface PackageEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Package|null)
    __typename: 'PackageEdge'
}


/** Information for an uploaded package. */
export interface Package extends Node{
    id: Scalars["ID"]
    /** Find the latest version for the package. */
    latestVersion: (PackageVersion|null)
    /** Identifies the name of the package. */
    name: Scalars["String"]
    /** Identifies the type of the package. */
    packageType: PackageType
    /** The repository this package belongs to. */
    repository: (Repository|null)
    /** Statistics about package activity. */
    statistics: (PackageStatistics|null)
    /** Find package version by version string. */
    version: (PackageVersion|null)
    /** list of versions for this package */
    versions: PackageVersionConnection
    __typename: 'Package'
}


/** Information about a specific package version. */
export interface PackageVersion extends Node{
    /** List of files associated with this package version */
    files: PackageFileConnection
    id: Scalars["ID"]
    /** The package associated with this version. */
    package: (Package|null)
    /** The platform this version was built for. */
    platform: (Scalars["String"]|null)
    /** Whether or not this version is a pre-release. */
    preRelease: Scalars["Boolean"]
    /** The README of this package version. */
    readme: (Scalars["String"]|null)
    /** The release associated with this package version. */
    release: (Release|null)
    /** Statistics about package activity. */
    statistics: (PackageVersionStatistics|null)
    /** The package version summary. */
    summary: (Scalars["String"]|null)
    /** The version string. */
    version: Scalars["String"]
    __typename: 'PackageVersion'
}


/** Properties by which package file connections can be ordered. */
export type PackageFileOrderField = 'CREATED_AT'


/** The connection type for PackageFile. */
export interface PackageFileConnection{
    /** A list of edges. */
    edges: ((PackageFileEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PackageFile|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PackageFileConnection'
}


/** An edge in a connection. */
export interface PackageFileEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PackageFile|null)
    __typename: 'PackageFileEdge'
}


/** A file in a package version. */
export interface PackageFile extends Node{
    id: Scalars["ID"]
    /** MD5 hash of the file. */
    md5: (Scalars["String"]|null)
    /** Name of the file. */
    name: Scalars["String"]
    /** The package version this file belongs to. */
    packageVersion: (PackageVersion|null)
    /** SHA1 hash of the file. */
    sha1: (Scalars["String"]|null)
    /** SHA256 hash of the file. */
    sha256: (Scalars["String"]|null)
    /** Size of the file in bytes. */
    size: (Scalars["Int"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** URL to download the asset. */
    url: (Scalars["URI"]|null)
    __typename: 'PackageFile'
}


/** Information about pagination in a connection. */
export interface PageInfo{
    /** When paginating forwards, the cursor to continue. */
    endCursor: (Scalars["String"]|null)
    /** When paginating forwards, are there more items? */
    hasNextPage: Scalars["Boolean"]
    /** When paginating backwards, are there more items? */
    hasPreviousPage: Scalars["Boolean"]
    /** When paginating backwards, the cursor to continue. */
    startCursor: (Scalars["String"]|null)
    __typename: 'PageInfo'
}


/** A release contains the content for a release. */
export interface Release extends Node,UniformResourceLocatable{
    /** The author of the release */
    author: (User|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The description of the release. */
    description: (Scalars["String"]|null)
    /** The description of this release rendered to HTML. */
    descriptionHTML: (Scalars["HTML"]|null)
    id: Scalars["ID"]
    /** Whether or not the release is a draft */
    isDraft: Scalars["Boolean"]
    /** Whether or not the release is a prerelease */
    isPrerelease: Scalars["Boolean"]
    /** The title of the release. */
    name: (Scalars["String"]|null)
    /** Identifies the date and time when the release was created. */
    publishedAt: (Scalars["DateTime"]|null)
    /** List of releases assets which are dependent on this release. */
    releaseAssets: ReleaseAssetConnection
    /** The HTTP path for this issue */
    resourcePath: Scalars["URI"]
    /** A description of the release, rendered to HTML without any links in it. */
    shortDescriptionHTML: (Scalars["HTML"]|null)
    /** The Git tag the release points to */
    tag: (Ref|null)
    /** The name of the release's Git tag */
    tagName: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this issue */
    url: Scalars["URI"]
    __typename: 'Release'
}


/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatable{
    /** The HTML path to this resource. */
    resourcePath: Scalars["URI"]
    /** The URL to this resource. */
    url: Scalars["URI"]
    __typename: 'Organization'|'User'|'Release'|'PullRequest'|'Issue'|'Repository'|'TeamDiscussion'|'TeamDiscussionComment'|'Commit'|'CheckRun'|'Milestone'|'RepositoryTopic'|'Bot'|'Mannequin'|'ClosedEvent'|'CrossReferencedEvent'|'PullRequestCommit'|'MergedEvent'|'ReviewDismissedEvent'|'ConvertToDraftEvent'|'ReadyForReviewEvent'|'Gist'
}


/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnection{
    /** A list of edges. */
    edges: ((ReleaseAssetEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ReleaseAsset|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ReleaseAssetConnection'
}


/** An edge in a connection. */
export interface ReleaseAssetEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ReleaseAsset|null)
    __typename: 'ReleaseAssetEdge'
}


/** A release asset contains the content for a release asset. */
export interface ReleaseAsset extends Node{
    /** The asset's content-type */
    contentType: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The number of times this asset was downloaded */
    downloadCount: Scalars["Int"]
    /** Identifies the URL where you can download the release asset via the browser. */
    downloadUrl: Scalars["URI"]
    id: Scalars["ID"]
    /** Identifies the title of the release asset. */
    name: Scalars["String"]
    /** Release that the asset is associated with */
    release: (Release|null)
    /** The size (in bytes) of the asset */
    size: Scalars["Int"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The user that performed the upload */
    uploadedBy: User
    /** Identifies the URL of the release asset. */
    url: Scalars["URI"]
    __typename: 'ReleaseAsset'
}


/** Represents a Git reference. */
export interface Ref extends Node{
    /** A list of pull requests with this ref as the head ref. */
    associatedPullRequests: PullRequestConnection
    id: Scalars["ID"]
    /** The ref name. */
    name: Scalars["String"]
    /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
    prefix: Scalars["String"]
    /** The repository the ref belongs to. */
    repository: Repository
    /**
     * The object the ref points to.
     * 
     * **Upcoming Change on 2019-07-01 UTC**
     * **Description:** Type for `target` will change from `GitObject!` to `GitObject`.
     * **Reason:** The `target` field may return `null` values and is changing to nullable
     */
    target: GitObject
    __typename: 'Ref'
}


/** Properties by which issue connections can be ordered. */
export type IssueOrderField = 'COMMENTS' | 'CREATED_AT' | 'UPDATED_AT'


/** The possible states of a pull request. */
export type PullRequestState = 'CLOSED' | 'MERGED' | 'OPEN'


/** The connection type for PullRequest. */
export interface PullRequestConnection{
    /** A list of edges. */
    edges: ((PullRequestEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequest|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestConnection'
}


/** An edge in a connection. */
export interface PullRequestEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequest|null)
    __typename: 'PullRequestEdge'
}


/** A repository pull request. */
export interface PullRequest extends Assignable,Closable,Comment,Labelable,Lockable,Node,Reactable,RepositoryNode,Subscribable,UniformResourceLocatable,Updatable,UpdatableComment{
    /** Reason that the conversation was locked. */
    activeLockReason: (LockReason|null)
    /** The number of additions in this pull request. */
    additions: Scalars["Int"]
    /** A list of Users assigned to this object. */
    assignees: UserConnection
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** Identifies the base Ref associated with the pull request. */
    baseRef: (Ref|null)
    /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
    baseRefName: Scalars["String"]
    /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
    baseRefOid: Scalars["GitObjectID"]
    /** The repository associated with this pull request's base Ref. */
    baseRepository: (Repository|null)
    /** The body as Markdown. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Whether or not the pull request is rebaseable. */
    canBeRebased: Scalars["Boolean"]
    /** The number of changed files in this pull request. */
    changedFiles: Scalars["Int"]
    /** The HTTP path for the checks of this pull request. */
    checksResourcePath: Scalars["URI"]
    /** The HTTP URL for the checks of this pull request. */
    checksUrl: Scalars["URI"]
    /** `true` if the pull request is closed */
    closed: Scalars["Boolean"]
    /** Identifies the date and time when the object was closed. */
    closedAt: (Scalars["DateTime"]|null)
    /** A list of comments associated with the pull request. */
    comments: IssueCommentConnection
    /** A list of commits present in this pull request's head branch not present in the base branch. */
    commits: PullRequestCommitConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The number of deletions in this pull request. */
    deletions: Scalars["Int"]
    /** The actor who edited this pull request's body. */
    editor: (Actor|null)
    /** Lists the files changed within this pull request. */
    files: (PullRequestChangedFileConnection|null)
    /** Identifies the head Ref associated with the pull request. */
    headRef: (Ref|null)
    /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
    headRefName: Scalars["String"]
    /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
    headRefOid: Scalars["GitObjectID"]
    /** The repository associated with this pull request's head Ref. */
    headRepository: (Repository|null)
    /** The owner of the repository associated with this pull request's head Ref. */
    headRepositoryOwner: (RepositoryOwner|null)
    /** The hovercard information for this issue */
    hovercard: Hovercard
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** The head and base repositories are different. */
    isCrossRepository: Scalars["Boolean"]
    /** Identifies if the pull request is a draft. */
    isDraft: Scalars["Boolean"]
    /** A list of labels associated with the object. */
    labels: (LabelConnection|null)
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** `true` if the pull request is locked */
    locked: Scalars["Boolean"]
    /** Indicates whether maintainers can modify the pull request. */
    maintainerCanModify: Scalars["Boolean"]
    /** The commit that was created when this pull request was merged. */
    mergeCommit: (Commit|null)
    /** Detailed information about the current pull request merge state status. */
    mergeStateStatus: MergeStateStatus
    /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
    mergeable: MergeableState
    /** Whether or not the pull request was merged. */
    merged: Scalars["Boolean"]
    /** The date and time that the pull request was merged. */
    mergedAt: (Scalars["DateTime"]|null)
    /** The actor who merged the pull request. */
    mergedBy: (Actor|null)
    /** Identifies the milestone associated with the pull request. */
    milestone: (Milestone|null)
    /** Identifies the pull request number. */
    number: Scalars["Int"]
    /** A list of Users that are participating in the Pull Request conversation. */
    participants: UserConnection
    /** The permalink to the pull request. */
    permalink: Scalars["URI"]
    /**
     * The commit that GitHub automatically generated to test if this pull request
     * could be merged. This field will not return a value if the pull request is
     * merged, or if the test merge commit is still being generated. See the
     * `mergeable` field for more details on the mergeability of the pull request.
     */
    potentialMergeCommit: (Commit|null)
    /** List of project cards associated with this pull request. */
    projectCards: ProjectCardConnection
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path for this pull request. */
    resourcePath: Scalars["URI"]
    /** The HTTP path for reverting this pull request. */
    revertResourcePath: Scalars["URI"]
    /** The HTTP URL for reverting this pull request. */
    revertUrl: Scalars["URI"]
    /** The current status of this pull request with respect to code review. */
    reviewDecision: (PullRequestReviewDecision|null)
    /** A list of review requests associated with the pull request. */
    reviewRequests: (ReviewRequestConnection|null)
    /** The list of all review threads for this pull request. */
    reviewThreads: PullRequestReviewThreadConnection
    /** A list of reviews associated with the pull request. */
    reviews: (PullRequestReviewConnection|null)
    /** Identifies the state of the pull request. */
    state: PullRequestState
    /** A list of reviewer suggestions based on commit history and past review comments. */
    suggestedReviewers: (SuggestedReviewer|null)[]
    /**
     * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
     * A list of events, comments, commits, etc. associated with the pull request.
     */
    timeline: PullRequestTimelineConnection
    /** A list of events, comments, commits, etc. associated with the pull request. */
    timelineItems: PullRequestTimelineItemsConnection
    /** Identifies the pull request title. */
    title: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this pull request. */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Whether or not the viewer can apply suggestion. */
    viewerCanApplySuggestion: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    __typename: 'PullRequest'
}


/** An object that can have users assigned to it. */
export interface Assignable{
    /** A list of Users assigned to this object. */
    assignees: UserConnection
    __typename: 'PullRequest'|'Issue'
}


/** The connection type for User. */
export interface UserConnection{
    /** A list of edges. */
    edges: ((UserEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'UserConnection'
}


/** Represents a user. */
export interface UserEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (User|null)
    __typename: 'UserEdge'
}


/** An object that can be closed */
export interface Closable{
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"]
    /** Identifies the date and time when the object was closed. */
    closedAt: (Scalars["DateTime"]|null)
    __typename: 'PullRequest'|'Issue'|'Project'|'Milestone'
}


/** Represents a comment. */
export interface Comment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** The body as Markdown. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'PullRequest'|'Issue'|'TeamDiscussion'|'TeamDiscussionComment'|'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'|'GistComment'
}


/** A comment author association with repository. */
export type CommentAuthorAssociation = 'COLLABORATOR' | 'CONTRIBUTOR' | 'FIRST_TIMER' | 'FIRST_TIME_CONTRIBUTOR' | 'MEMBER' | 'NONE' | 'OWNER'


/** A list of edits to content. */
export interface UserContentEditConnection{
    /** A list of edges. */
    edges: ((UserContentEditEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((UserContentEdit|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'UserContentEditConnection'
}


/** An edge in a connection. */
export interface UserContentEditEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (UserContentEdit|null)
    __typename: 'UserContentEditEdge'
}


/** An edit on user content */
export interface UserContentEdit extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the date and time when the object was deleted. */
    deletedAt: (Scalars["DateTime"]|null)
    /** The actor who deleted this content */
    deletedBy: (Actor|null)
    /** A summary of the changes for this edit */
    diff: (Scalars["String"]|null)
    /** When this content was edited */
    editedAt: Scalars["DateTime"]
    /** The actor who edited this content */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'UserContentEdit'
}


/** An object that can have labels assigned to it. */
export interface Labelable{
    /** A list of labels associated with the object. */
    labels: (LabelConnection|null)
    __typename: 'PullRequest'|'Issue'
}


/** Properties by which label connections can be ordered. */
export type LabelOrderField = 'CREATED_AT' | 'NAME'


/** The connection type for Label. */
export interface LabelConnection{
    /** A list of edges. */
    edges: ((LabelEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Label|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'LabelConnection'
}


/** An edge in a connection. */
export interface LabelEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Label|null)
    __typename: 'LabelEdge'
}


/** A label for categorizing Issues or Milestones with a given Repository. */
export interface Label extends Node{
    /** Identifies the label color. */
    color: Scalars["String"]
    /** Identifies the date and time when the label was created. */
    createdAt: (Scalars["DateTime"]|null)
    /** A brief description of this label. */
    description: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** Indicates whether or not this is a default label. */
    isDefault: Scalars["Boolean"]
    /** A list of issues associated with this label. */
    issues: IssueConnection
    /** Identifies the label name. */
    name: Scalars["String"]
    /** A list of pull requests associated with this label. */
    pullRequests: PullRequestConnection
    /** The repository associated with this label. */
    repository: Repository
    /** The HTTP path for this label. */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the label was last updated. */
    updatedAt: (Scalars["DateTime"]|null)
    /** The HTTP URL for this label. */
    url: Scalars["URI"]
    __typename: 'Label'
}


/** The possible states of an issue. */
export type IssueState = 'CLOSED' | 'OPEN'


/** The connection type for Issue. */
export interface IssueConnection{
    /** A list of edges. */
    edges: ((IssueEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Issue|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'IssueConnection'
}


/** An edge in a connection. */
export interface IssueEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Issue|null)
    __typename: 'IssueEdge'
}


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface Issue extends Assignable,Closable,Comment,Labelable,Lockable,Node,Reactable,RepositoryNode,Subscribable,UniformResourceLocatable,Updatable,UpdatableComment{
    /** Reason that the conversation was locked. */
    activeLockReason: (LockReason|null)
    /** A list of Users assigned to this object. */
    assignees: UserConnection
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** Identifies the body of the issue. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** Identifies the body of the issue rendered to text. */
    bodyText: Scalars["String"]
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"]
    /** Identifies the date and time when the object was closed. */
    closedAt: (Scalars["DateTime"]|null)
    /** A list of comments associated with the Issue. */
    comments: IssueCommentConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    /** The hovercard information for this issue */
    hovercard: Hovercard
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** A list of labels associated with the object. */
    labels: (LabelConnection|null)
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** `true` if the object is locked */
    locked: Scalars["Boolean"]
    /** Identifies the milestone associated with the issue. */
    milestone: (Milestone|null)
    /** Identifies the issue number. */
    number: Scalars["Int"]
    /** A list of Users that are participating in the Issue conversation. */
    participants: UserConnection
    /** List of project cards associated with this issue. */
    projectCards: ProjectCardConnection
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path for this issue */
    resourcePath: Scalars["URI"]
    /** Identifies the state of the issue. */
    state: IssueState
    /**
     * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
     * A list of events, comments, commits, etc. associated with the issue.
     */
    timeline: IssueTimelineConnection
    /** A list of events, comments, commits, etc. associated with the issue. */
    timelineItems: IssueTimelineItemsConnection
    /** Identifies the issue title. */
    title: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this issue */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    __typename: 'Issue'
}


/** An object that can be locked. */
export interface Lockable{
    /** Reason that the conversation was locked. */
    activeLockReason: (LockReason|null)
    /** `true` if the object is locked */
    locked: Scalars["Boolean"]
    __typename: 'PullRequest'|'Issue'
}


/** The possible reasons that an issue or pull request was locked. */
export type LockReason = 'OFF_TOPIC' | 'RESOLVED' | 'SPAM' | 'TOO_HEATED'


/** Represents a subject that can be reacted on. */
export interface Reactable{
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    __typename: 'PullRequest'|'Issue'|'TeamDiscussion'|'TeamDiscussionComment'|'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'
}


/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroup{
    /** Identifies the emoji reaction. */
    content: ReactionContent
    /** Identifies when the reaction was created. */
    createdAt: (Scalars["DateTime"]|null)
    /** The subject that was reacted to. */
    subject: Reactable
    /** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
    users: ReactingUserConnection
    /** Whether or not the authenticated user has left a reaction on the subject. */
    viewerHasReacted: Scalars["Boolean"]
    __typename: 'ReactionGroup'
}


/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export type ReactionContent = 'CONFUSED' | 'EYES' | 'HEART' | 'HOORAY' | 'LAUGH' | 'ROCKET' | 'THUMBS_DOWN' | 'THUMBS_UP'


/** The connection type for User. */
export interface ReactingUserConnection{
    /** A list of edges. */
    edges: ((ReactingUserEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ReactingUserConnection'
}


/** Represents a user that's made a reaction. */
export interface ReactingUserEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    node: User
    /** The moment when the user made the reaction. */
    reactedAt: Scalars["DateTime"]
    __typename: 'ReactingUserEdge'
}


/** A list of fields that reactions can be ordered by. */
export type ReactionOrderField = 'CREATED_AT'


/** A list of reactions that have been left on the subject. */
export interface ReactionConnection{
    /** A list of edges. */
    edges: ((ReactionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Reaction|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** Whether or not the authenticated user has left a reaction on the subject. */
    viewerHasReacted: Scalars["Boolean"]
    __typename: 'ReactionConnection'
}


/** An edge in a connection. */
export interface ReactionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Reaction|null)
    __typename: 'ReactionEdge'
}


/** An emoji reaction to a particular piece of content. */
export interface Reaction extends Node{
    /** Identifies the emoji reaction. */
    content: ReactionContent
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The reactable piece of content */
    reactable: Reactable
    /** Identifies the user who created this reaction. */
    user: (User|null)
    __typename: 'Reaction'
}


/** Represents a object that belongs to a repository. */
export interface RepositoryNode{
    /** The repository associated with this node. */
    repository: Repository
    __typename: 'PullRequest'|'Issue'|'CommitComment'|'RepositoryVulnerabilityAlert'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'|'CommitCommentThread'|'PullRequestCommitCommentThread'
}


/** A repository contains the content for a project. */
export interface Repository extends Node,PackageOwner,ProjectOwner,RegistryPackageOwner,RegistryPackageSearch,RepositoryInfo,Starrable,Subscribable,UniformResourceLocatable{
    /** A list of users that can be assigned to issues in this repository. */
    assignableUsers: UserConnection
    /** A list of branch protection rules for this repository. */
    branchProtectionRules: BranchProtectionRuleConnection
    /** Returns the code of conduct for this repository */
    codeOfConduct: (CodeOfConduct|null)
    /** A list of collaborators associated with the repository. */
    collaborators: (RepositoryCollaboratorConnection|null)
    /** A list of commit comments associated with the repository. */
    commitComments: CommitCommentConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The Ref associated with the repository's default branch. */
    defaultBranchRef: (Ref|null)
    /** Whether or not branches are automatically deleted when merged in this repository. */
    deleteBranchOnMerge: Scalars["Boolean"]
    /** A list of dependency manifests contained in the repository */
    dependencyGraphManifests: (DependencyGraphManifestConnection|null)
    /** A list of deploy keys that are on this repository. */
    deployKeys: DeployKeyConnection
    /** Deployments associated with the repository */
    deployments: DeploymentConnection
    /** The description of the repository. */
    description: (Scalars["String"]|null)
    /** The description of the repository rendered to HTML. */
    descriptionHTML: Scalars["HTML"]
    /** The number of kilobytes this repository occupies on disk. */
    diskUsage: (Scalars["Int"]|null)
    /** Returns how many forks there are of this repository in the whole network. */
    forkCount: Scalars["Int"]
    /** A list of direct forked repositories. */
    forks: RepositoryConnection
    /** The funding links for this repository */
    fundingLinks: FundingLink[]
    /** Indicates if the repository has issues feature enabled. */
    hasIssuesEnabled: Scalars["Boolean"]
    /** Indicates if the repository has the Projects feature enabled. */
    hasProjectsEnabled: Scalars["Boolean"]
    /** Indicates if the repository has wiki feature enabled. */
    hasWikiEnabled: Scalars["Boolean"]
    /** The repository's URL. */
    homepageUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** Indicates if the repository is unmaintained. */
    isArchived: Scalars["Boolean"]
    /** Returns whether or not this repository disabled. */
    isDisabled: Scalars["Boolean"]
    /** Identifies if the repository is a fork. */
    isFork: Scalars["Boolean"]
    /** Indicates if the repository has been locked or not. */
    isLocked: Scalars["Boolean"]
    /** Identifies if the repository is a mirror. */
    isMirror: Scalars["Boolean"]
    /** Identifies if the repository is private. */
    isPrivate: Scalars["Boolean"]
    /** Identifies if the repository is a template that can be used to generate new repositories. */
    isTemplate: Scalars["Boolean"]
    /** Returns a single issue from the current repository by number. */
    issue: (Issue|null)
    /** Returns a single issue-like object from the current repository by number. */
    issueOrPullRequest: (IssueOrPullRequest|null)
    /** A list of issues that have been opened in the repository. */
    issues: IssueConnection
    /** Returns a single label by name */
    label: (Label|null)
    /** A list of labels associated with the repository. */
    labels: (LabelConnection|null)
    /** A list containing a breakdown of the language composition of the repository. */
    languages: (LanguageConnection|null)
    /** The license associated with the repository */
    licenseInfo: (License|null)
    /** The reason the repository has been locked. */
    lockReason: (RepositoryLockReason|null)
    /** A list of Users that can be mentioned in the context of the repository. */
    mentionableUsers: UserConnection
    /** Whether or not PRs are merged with a merge commit on this repository. */
    mergeCommitAllowed: Scalars["Boolean"]
    /** Returns a single milestone from the current repository by number. */
    milestone: (Milestone|null)
    /** A list of milestones associated with the repository. */
    milestones: (MilestoneConnection|null)
    /** The repository's original mirror URL. */
    mirrorUrl: (Scalars["URI"]|null)
    /** The name of the repository. */
    name: Scalars["String"]
    /** The repository's name with owner. */
    nameWithOwner: Scalars["String"]
    /** A Git object in the repository */
    object: (GitObject|null)
    /** The image used to represent this repository in Open Graph data. */
    openGraphImageUrl: Scalars["URI"]
    /** The User owner of the repository. */
    owner: RepositoryOwner
    /** A list of packages under the owner. */
    packages: PackageConnection
    /** The repository parent, if this is a fork. */
    parent: (Repository|null)
    /** A list of pinned issues for this repository. */
    pinnedIssues: (PinnedIssueConnection|null)
    /** The primary language of the repository's code. */
    primaryLanguage: (Language|null)
    /** Find project by number. */
    project: (Project|null)
    /** A list of projects under the owner. */
    projects: ProjectConnection
    /** The HTTP path listing the repository's projects */
    projectsResourcePath: Scalars["URI"]
    /** The HTTP URL listing the repository's projects */
    projectsUrl: Scalars["URI"]
    /** Returns a single pull request from the current repository by number. */
    pullRequest: (PullRequest|null)
    /** A list of pull requests that have been opened in the repository. */
    pullRequests: PullRequestConnection
    /** Identifies when the repository was last pushed to. */
    pushedAt: (Scalars["DateTime"]|null)
    /** Whether or not rebase-merging is enabled on this repository. */
    rebaseMergeAllowed: Scalars["Boolean"]
    /** Fetch a given ref from the repository */
    ref: (Ref|null)
    /** Fetch a list of refs from the repository */
    refs: (RefConnection|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages: RegistryPackageConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery: RegistryPackageConnection
    /** Lookup a single release given various criteria. */
    release: (Release|null)
    /** List of releases which are dependent on this repository. */
    releases: ReleaseConnection
    /** A list of applied repository-topic associations for this repository. */
    repositoryTopics: RepositoryTopicConnection
    /** The HTTP path for this repository */
    resourcePath: Scalars["URI"]
    /** A description of the repository, rendered to HTML without any links in it. */
    shortDescriptionHTML: Scalars["HTML"]
    /** Whether or not squash-merging is enabled on this repository. */
    squashMergeAllowed: Scalars["Boolean"]
    /** The SSH URL to clone this repository */
    sshUrl: Scalars["GitSSHRemote"]
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection
    /**
     * Returns a list of all submodules in this repository parsed from the
     * .gitmodules file as of the default branch's HEAD commit.
     */
    submodules: SubmoduleConnection
    /** Temporary authentication token for cloning this repository. */
    tempCloneToken: (Scalars["String"]|null)
    /** The repository from which this repository was generated, if any. */
    templateRepository: (Repository|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this repository */
    url: Scalars["URI"]
    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
    usesCustomOpenGraphImage: Scalars["Boolean"]
    /** Indicates whether the viewer has admin permissions on this repository. */
    viewerCanAdminister: Scalars["Boolean"]
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Indicates whether the viewer can update the topics of this repository. */
    viewerCanUpdateTopics: Scalars["Boolean"]
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"]
    /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
    viewerPermission: (RepositoryPermission|null)
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    /** A list of vulnerability alerts that are on this repository. */
    vulnerabilityAlerts: (RepositoryVulnerabilityAlertConnection|null)
    /** A list of users watching the repository. */
    watchers: UserConnection
    __typename: 'Repository'
}


/** Represents an owner of a Project. */
export interface ProjectOwner{
    id: Scalars["ID"]
    /** Find project by number. */
    project: (Project|null)
    /** A list of projects under the owner. */
    projects: ProjectConnection
    /** The HTTP path listing owners projects */
    projectsResourcePath: Scalars["URI"]
    /** The HTTP URL listing owners projects */
    projectsUrl: Scalars["URI"]
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects: Scalars["Boolean"]
    __typename: 'Organization'|'User'|'Repository'
}


/** Projects manage issues, pull requests and notes within a project owner. */
export interface Project extends Closable,Node,Updatable{
    /** The project's description body. */
    body: (Scalars["String"]|null)
    /** The projects description body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"]
    /** Identifies the date and time when the object was closed. */
    closedAt: (Scalars["DateTime"]|null)
    /** List of columns in the project */
    columns: ProjectColumnConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The actor who originally created the project. */
    creator: (Actor|null)
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The project's name. */
    name: Scalars["String"]
    /** The project's number. */
    number: Scalars["Int"]
    /** The project's owner. Currently limited to repositories, organizations, and users. */
    owner: ProjectOwner
    /** List of pending cards in this project */
    pendingCards: ProjectCardConnection
    /** The HTTP path for this project */
    resourcePath: Scalars["URI"]
    /** Whether the project is open or closed. */
    state: ProjectState
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this project */
    url: Scalars["URI"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    __typename: 'Project'
}


/** Entities that can be updated. */
export interface Updatable{
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    __typename: 'PullRequest'|'Issue'|'Project'|'TeamDiscussion'|'TeamDiscussionComment'|'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'|'GistComment'
}


/** The connection type for ProjectColumn. */
export interface ProjectColumnConnection{
    /** A list of edges. */
    edges: ((ProjectColumnEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ProjectColumn|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ProjectColumnConnection'
}


/** An edge in a connection. */
export interface ProjectColumnEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ProjectColumn|null)
    __typename: 'ProjectColumnEdge'
}


/** A column inside a project. */
export interface ProjectColumn extends Node{
    /** List of cards in the column */
    cards: ProjectCardConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The project column's name. */
    name: Scalars["String"]
    /** The project that contains this column. */
    project: Project
    /** The semantic purpose of the column */
    purpose: (ProjectColumnPurpose|null)
    /** The HTTP path for this project column */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this project column */
    url: Scalars["URI"]
    __typename: 'ProjectColumn'
}


/** The possible archived states of a project card. */
export type ProjectCardArchivedState = 'ARCHIVED' | 'NOT_ARCHIVED'


/** The connection type for ProjectCard. */
export interface ProjectCardConnection{
    /** A list of edges. */
    edges: ((ProjectCardEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ProjectCard|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ProjectCardConnection'
}


/** An edge in a connection. */
export interface ProjectCardEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ProjectCard|null)
    __typename: 'ProjectCardEdge'
}


/** A card in a project. */
export interface ProjectCard extends Node{
    /**
     * The project column this card is associated under. A card may only belong to one
     * project column at a time. The column field will be null if the card is created
     * in a pending state and has yet to be associated with a column. Once cards are
     * associated with a column, they will not become pending in the future.
     */
    column: (ProjectColumn|null)
    /** The card content item */
    content: (ProjectCardItem|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The actor who created this card */
    creator: (Actor|null)
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Whether the card is archived */
    isArchived: Scalars["Boolean"]
    /** The card note */
    note: (Scalars["String"]|null)
    /** The project that contains this card. */
    project: Project
    /** The HTTP path for this card */
    resourcePath: Scalars["URI"]
    /** The state of ProjectCard */
    state: (ProjectCardState|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this card */
    url: Scalars["URI"]
    __typename: 'ProjectCard'
}


/** Types that can be inside Project Cards. */
export type ProjectCardItem=Issue|PullRequest


/** Various content states of a ProjectCard */
export type ProjectCardState = 'CONTENT_ONLY' | 'NOTE_ONLY' | 'REDACTED'


/** The semantic purpose of the column - todo, in progress, or done. */
export type ProjectColumnPurpose = 'DONE' | 'IN_PROGRESS' | 'TODO'


/** State of the project; either 'open' or 'closed' */
export type ProjectState = 'CLOSED' | 'OPEN'


/** Properties by which project connections can be ordered. */
export type ProjectOrderField = 'CREATED_AT' | 'NAME' | 'UPDATED_AT'


/** A list of projects associated with the owner. */
export interface ProjectConnection{
    /** A list of edges. */
    edges: ((ProjectEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Project|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ProjectConnection'
}


/** An edge in a connection. */
export interface ProjectEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Project|null)
    __typename: 'ProjectEdge'
}


/** Represents an owner of a registry package. */
export interface RegistryPackageOwner{
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages: RegistryPackageConnection
    __typename: 'Organization'|'User'|'Repository'
}


/** The possible types of a registry package. */
export type RegistryPackageType = 'DEBIAN' | 'DOCKER' | 'MAVEN' | 'NPM' | 'NUGET' | 'PYTHON' | 'RUBYGEMS'


/** The connection type for RegistryPackage. */
export interface RegistryPackageConnection{
    /** A list of edges. */
    edges: ((RegistryPackageEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RegistryPackage|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RegistryPackageConnection'
}


/** An edge in a connection. */
export interface RegistryPackageEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RegistryPackage|null)
    __typename: 'RegistryPackageEdge'
}


/** A registry package contains the content for an uploaded package. */
export interface RegistryPackage extends Node{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * The package type color
     */
    color: Scalars["String"]
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find the latest version for the package.
     */
    latestVersion: (RegistryPackageVersion|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the title of the package.
     */
    name: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the title of the package, with the owner prefixed.
     */
    nameWithOwner: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * Find the package file identified by the guid.
     */
    packageFileByGuid: (RegistryPackageFile|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * Find the package file identified by the sha256.
     */
    packageFileBySha256: (RegistryPackageFile|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the type of the package.
     */
    packageType: RegistryPackageType
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * List the prerelease versions for this package.
     */
    preReleaseVersions: (RegistryPackageVersionConnection|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * The type of the package.
     */
    registryPackageType: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * repository that the release is associated with
     */
    repository: (Repository|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Statistics about package activity.
     */
    statistics: (RegistryPackageStatistics|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * list of tags for this package
     */
    tags: RegistryPackageTagConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * List the topics for this package.
     */
    topics: (TopicConnection|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by version string.
     */
    version: (RegistryPackageVersion|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by version string.
     */
    versionByPlatform: (RegistryPackageVersion|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by manifest SHA256.
     */
    versionBySha256: (RegistryPackageVersion|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * list of versions for this package
     */
    versions: RegistryPackageVersionConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * List package versions with a specific metadatum.
     */
    versionsByMetadatum: (RegistryPackageVersionConnection|null)
    __typename: 'RegistryPackage'
}


/** A package version contains the information about a specific package version. */
export interface RegistryPackageVersion extends Node{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Whether or not this version has been deleted.
     */
    deleted: Scalars["Boolean"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * list of dependencies for this package
     */
    dependencies: RegistryPackageDependencyConnection
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * A file associated with this registry package version
     */
    fileByName: (RegistryPackageFile|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * List of files associated with this registry package version
     */
    files: RegistryPackageFileConnection
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * A single line of text to install this package version.
     */
    installationCommand: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the package manifest for this package version.
     */
    manifest: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the platform this version was built for.
     */
    platform: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Indicates whether this version is a pre-release.
     */
    preRelease: Scalars["Boolean"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * The README of this package version
     */
    readme: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * The HTML README of this package version
     */
    readmeHtml: (Scalars["HTML"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Registry package associated with this version.
     */
    registryPackage: (RegistryPackage|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Release associated with this package.
     */
    release: (Release|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha256.
     */
    sha256: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the size.
     */
    size: (Scalars["Int"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Statistics about package activity.
     */
    statistics: (RegistryPackageVersionStatistics|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the package version summary.
     */
    summary: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Time at which the most recent file upload for this package version finished
     */
    updatedAt: Scalars["DateTime"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the version number.
     */
    version: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Can the current viewer edit this Package version.
     */
    viewerCanEdit: Scalars["Boolean"]
    __typename: 'RegistryPackageVersion'
}


/** The possible types of a registry package dependency. */
export type RegistryPackageDependencyType = 'BUNDLED' | 'DEFAULT' | 'DEV' | 'OPTIONAL' | 'PEER' | 'TEST'


/** The connection type for RegistryPackageDependency. */
export interface RegistryPackageDependencyConnection{
    /** A list of edges. */
    edges: ((RegistryPackageDependencyEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RegistryPackageDependency|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RegistryPackageDependencyConnection'
}


/** An edge in a connection. */
export interface RegistryPackageDependencyEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RegistryPackageDependency|null)
    __typename: 'RegistryPackageDependencyEdge'
}


/** A package dependency contains the information needed to satisfy a dependency. */
export interface RegistryPackageDependency extends Node{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the type of dependency.
     */
    dependencyType: RegistryPackageDependencyType
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the name of the dependency.
     */
    name: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the version of the dependency.
     */
    version: Scalars["String"]
    __typename: 'RegistryPackageDependency'
}


/** A file in a specific registry package version. */
export interface RegistryPackageFile extends Node{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * A unique identifier for this file.
     */
    guid: (Scalars["String"]|null)
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the md5.
     */
    md5: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * URL to download the asset metadata.
     */
    metadataUrl: Scalars["URI"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Name of the file
     */
    name: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * The package version this file belongs to.
     */
    packageVersion: RegistryPackageVersion
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha1.
     */
    sha1: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha256.
     */
    sha256: (Scalars["String"]|null)
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the size.
     */
    size: (Scalars["Int"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * URL to download the asset.
     */
    url: Scalars["URI"]
    __typename: 'RegistryPackageFile'
}


/** The connection type for RegistryPackageFile. */
export interface RegistryPackageFileConnection{
    /** A list of edges. */
    edges: ((RegistryPackageFileEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RegistryPackageFile|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RegistryPackageFileConnection'
}


/** An edge in a connection. */
export interface RegistryPackageFileEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RegistryPackageFile|null)
    __typename: 'RegistryPackageFileEdge'
}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface RegistryPackageVersionStatistics{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this month.
     */
    downloadsThisMonth: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this week.
     */
    downloadsThisWeek: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this year.
     */
    downloadsThisYear: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded today.
     */
    downloadsToday: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded since it was created.
     */
    downloadsTotalCount: Scalars["Int"]
    __typename: 'RegistryPackageVersionStatistics'
}


/** The connection type for RegistryPackageVersion. */
export interface RegistryPackageVersionConnection{
    /** A list of edges. */
    edges: ((RegistryPackageVersionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RegistryPackageVersion|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RegistryPackageVersionConnection'
}


/** An edge in a connection. */
export interface RegistryPackageVersionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RegistryPackageVersion|null)
    __typename: 'RegistryPackageVersionEdge'
}


/** Represents a object that contains package activity statistics such as downloads. */
export interface RegistryPackageStatistics{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this month.
     */
    downloadsThisMonth: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this week.
     */
    downloadsThisWeek: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this year.
     */
    downloadsThisYear: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded today.
     */
    downloadsToday: Scalars["Int"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded since it was created.
     */
    downloadsTotalCount: Scalars["Int"]
    __typename: 'RegistryPackageStatistics'
}


/** The connection type for RegistryPackageTag. */
export interface RegistryPackageTagConnection{
    /** A list of edges. */
    edges: ((RegistryPackageTagEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RegistryPackageTag|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RegistryPackageTagConnection'
}


/** An edge in a connection. */
export interface RegistryPackageTagEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RegistryPackageTag|null)
    __typename: 'RegistryPackageTagEdge'
}


/** A version tag contains the mapping between a tag name and a version. */
export interface RegistryPackageTag extends Node{
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
     * Identifies the tag name of the version.
     */
    name: Scalars["String"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
     * version that the tag is associated with
     */
    version: (RegistryPackageVersion|null)
    __typename: 'RegistryPackageTag'
}


/** The connection type for Topic. */
export interface TopicConnection{
    /** A list of edges. */
    edges: ((TopicEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Topic|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TopicConnection'
}


/** An edge in a connection. */
export interface TopicEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Topic|null)
    __typename: 'TopicEdge'
}


/** A topic aggregates entities that are related to a subject. */
export interface Topic extends Node,Starrable{
    id: Scalars["ID"]
    /** The topic's name. */
    name: Scalars["String"]
    /**
     * A list of related topics, including aliases of this topic, sorted with the most relevant
     * first. Returns up to 10 Topics.
     */
    relatedTopics: Topic[]
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"]
    __typename: 'Topic'
}


/** Things that can be starred. */
export interface Starrable{
    id: Scalars["ID"]
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"]
    __typename: 'Repository'|'Topic'|'Gist'
}


/** Properties by which star connections can be ordered. */
export type StarOrderField = 'STARRED_AT'


/** The connection type for User. */
export interface StargazerConnection{
    /** A list of edges. */
    edges: ((StargazerEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'StargazerConnection'
}


/** Represents a user that's starred a repository. */
export interface StargazerEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    node: User
    /** Identifies when the item was starred. */
    starredAt: Scalars["DateTime"]
    __typename: 'StargazerEdge'
}


/** Represents an interface to search packages on an object. */
export interface RegistryPackageSearch{
    id: Scalars["ID"]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery: RegistryPackageConnection
    __typename: 'Organization'|'User'|'Repository'
}


/** A subset of repository info. */
export interface RepositoryInfo{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The description of the repository. */
    description: (Scalars["String"]|null)
    /** The description of the repository rendered to HTML. */
    descriptionHTML: Scalars["HTML"]
    /** Returns how many forks there are of this repository in the whole network. */
    forkCount: Scalars["Int"]
    /** Indicates if the repository has issues feature enabled. */
    hasIssuesEnabled: Scalars["Boolean"]
    /** Indicates if the repository has the Projects feature enabled. */
    hasProjectsEnabled: Scalars["Boolean"]
    /** Indicates if the repository has wiki feature enabled. */
    hasWikiEnabled: Scalars["Boolean"]
    /** The repository's URL. */
    homepageUrl: (Scalars["URI"]|null)
    /** Indicates if the repository is unmaintained. */
    isArchived: Scalars["Boolean"]
    /** Identifies if the repository is a fork. */
    isFork: Scalars["Boolean"]
    /** Indicates if the repository has been locked or not. */
    isLocked: Scalars["Boolean"]
    /** Identifies if the repository is a mirror. */
    isMirror: Scalars["Boolean"]
    /** Identifies if the repository is private. */
    isPrivate: Scalars["Boolean"]
    /** Identifies if the repository is a template that can be used to generate new repositories. */
    isTemplate: Scalars["Boolean"]
    /** The license associated with the repository */
    licenseInfo: (License|null)
    /** The reason the repository has been locked. */
    lockReason: (RepositoryLockReason|null)
    /** The repository's original mirror URL. */
    mirrorUrl: (Scalars["URI"]|null)
    /** The name of the repository. */
    name: Scalars["String"]
    /** The repository's name with owner. */
    nameWithOwner: Scalars["String"]
    /** The image used to represent this repository in Open Graph data. */
    openGraphImageUrl: Scalars["URI"]
    /** The User owner of the repository. */
    owner: RepositoryOwner
    /** Identifies when the repository was last pushed to. */
    pushedAt: (Scalars["DateTime"]|null)
    /** The HTTP path for this repository */
    resourcePath: Scalars["URI"]
    /** A description of the repository, rendered to HTML without any links in it. */
    shortDescriptionHTML: Scalars["HTML"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this repository */
    url: Scalars["URI"]
    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
    usesCustomOpenGraphImage: Scalars["Boolean"]
    __typename: 'Repository'
}


/** A repository's open source license */
export interface License extends Node{
    /** The full text of the license */
    body: Scalars["String"]
    /** The conditions set by the license */
    conditions: (LicenseRule|null)[]
    /** A human-readable description of the license */
    description: (Scalars["String"]|null)
    /** Whether the license should be featured */
    featured: Scalars["Boolean"]
    /** Whether the license should be displayed in license pickers */
    hidden: Scalars["Boolean"]
    id: Scalars["ID"]
    /** Instructions on how to implement the license */
    implementation: (Scalars["String"]|null)
    /** The lowercased SPDX ID of the license */
    key: Scalars["String"]
    /** The limitations set by the license */
    limitations: (LicenseRule|null)[]
    /** The license full name specified by <https://spdx.org/licenses> */
    name: Scalars["String"]
    /** Customary short name if applicable (e.g, GPLv3) */
    nickname: (Scalars["String"]|null)
    /** The permissions set by the license */
    permissions: (LicenseRule|null)[]
    /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
    pseudoLicense: Scalars["Boolean"]
    /** Short identifier specified by <https://spdx.org/licenses> */
    spdxId: (Scalars["String"]|null)
    /** URL to the license on <https://choosealicense.com> */
    url: (Scalars["URI"]|null)
    __typename: 'License'
}


/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRule{
    /** A description of the rule */
    description: Scalars["String"]
    /** The machine-readable rule key */
    key: Scalars["String"]
    /** The human-readable rule label */
    label: Scalars["String"]
    __typename: 'LicenseRule'
}


/** The possible reasons a given repository could be in a locked state. */
export type RepositoryLockReason = 'BILLING' | 'MIGRATING' | 'MOVING' | 'RENAME'


/** Represents an owner of a Repository. */
export interface RepositoryOwner{
    /** A URL pointing to the owner's public avatar. */
    avatarUrl: Scalars["URI"]
    id: Scalars["ID"]
    /** The username used to login. */
    login: Scalars["String"]
    /** A list of repositories that the user owns. */
    repositories: RepositoryConnection
    /** Find Repository. */
    repository: (Repository|null)
    /** The HTTP URL for the owner. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for the owner. */
    url: Scalars["URI"]
    __typename: 'Organization'|'User'
}


/** The affiliation of a user to a repository */
export type RepositoryAffiliation = 'COLLABORATOR' | 'ORGANIZATION_MEMBER' | 'OWNER'


/** Properties by which repository connections can be ordered. */
export type RepositoryOrderField = 'CREATED_AT' | 'NAME' | 'PUSHED_AT' | 'STARGAZERS' | 'UPDATED_AT'


/** The privacy of a repository */
export type RepositoryPrivacy = 'PRIVATE' | 'PUBLIC'


/** A list of repositories owned by the subject. */
export interface RepositoryConnection{
    /** A list of edges. */
    edges: ((RepositoryEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Repository|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** The total size in kilobytes of all repositories in the connection. */
    totalDiskUsage: Scalars["Int"]
    __typename: 'RepositoryConnection'
}


/** An edge in a connection. */
export interface RepositoryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Repository|null)
    __typename: 'RepositoryEdge'
}


/** Entities that can be subscribed to for web and email notifications. */
export interface Subscribable{
    id: Scalars["ID"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    __typename: 'PullRequest'|'Issue'|'Repository'|'Team'|'TeamDiscussion'|'Commit'
}


/** The possible states of a subscription. */
export type SubscriptionState = 'IGNORED' | 'SUBSCRIBED' | 'UNSUBSCRIBED'


/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnection{
    /** A list of edges. */
    edges: ((BranchProtectionRuleEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((BranchProtectionRule|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'BranchProtectionRuleConnection'
}


/** An edge in a connection. */
export interface BranchProtectionRuleEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (BranchProtectionRule|null)
    __typename: 'BranchProtectionRuleEdge'
}


/** A branch protection rule. */
export interface BranchProtectionRule extends Node{
    /** A list of conflicts matching branches protection rule and other branch protection rules */
    branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection
    /** The actor who created this branch protection rule. */
    creator: (Actor|null)
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** Will new commits pushed to matching branches dismiss pull request review approvals. */
    dismissesStaleReviews: Scalars["Boolean"]
    id: Scalars["ID"]
    /** Can admins overwrite branch protection. */
    isAdminEnforced: Scalars["Boolean"]
    /** Repository refs that are protected by this rule */
    matchingRefs: RefConnection
    /** Identifies the protection rule pattern. */
    pattern: Scalars["String"]
    /** A list push allowances for this branch protection rule. */
    pushAllowances: PushAllowanceConnection
    /** The repository associated with this branch protection rule. */
    repository: (Repository|null)
    /** Number of approving reviews required to update matching branches. */
    requiredApprovingReviewCount: (Scalars["Int"]|null)
    /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
    requiredStatusCheckContexts: ((Scalars["String"]|null)[]|null)
    /** Are approving reviews required to update matching branches. */
    requiresApprovingReviews: Scalars["Boolean"]
    /** Are reviews from code owners required to update matching branches. */
    requiresCodeOwnerReviews: Scalars["Boolean"]
    /** Are commits required to be signed. */
    requiresCommitSignatures: Scalars["Boolean"]
    /** Are status checks required to update matching branches. */
    requiresStatusChecks: Scalars["Boolean"]
    /** Are branches required to be up to date before merging. */
    requiresStrictStatusChecks: Scalars["Boolean"]
    /** Is pushing to matching branches restricted. */
    restrictsPushes: Scalars["Boolean"]
    /** Is dismissal of pull request reviews restricted. */
    restrictsReviewDismissals: Scalars["Boolean"]
    /** A list review dismissal allowances for this branch protection rule. */
    reviewDismissalAllowances: ReviewDismissalAllowanceConnection
    __typename: 'BranchProtectionRule'
}


/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnection{
    /** A list of edges. */
    edges: ((BranchProtectionRuleConflictEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((BranchProtectionRuleConflict|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'BranchProtectionRuleConflictConnection'
}


/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (BranchProtectionRuleConflict|null)
    __typename: 'BranchProtectionRuleConflictEdge'
}


/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflict{
    /** Identifies the branch protection rule. */
    branchProtectionRule: (BranchProtectionRule|null)
    /** Identifies the conflicting branch protection rule. */
    conflictingBranchProtectionRule: (BranchProtectionRule|null)
    /** Identifies the branch ref that has conflicting rules */
    ref: (Ref|null)
    __typename: 'BranchProtectionRuleConflict'
}


/** The connection type for Ref. */
export interface RefConnection{
    /** A list of edges. */
    edges: ((RefEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Ref|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RefConnection'
}


/** An edge in a connection. */
export interface RefEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Ref|null)
    __typename: 'RefEdge'
}


/** The connection type for PushAllowance. */
export interface PushAllowanceConnection{
    /** A list of edges. */
    edges: ((PushAllowanceEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PushAllowance|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PushAllowanceConnection'
}


/** An edge in a connection. */
export interface PushAllowanceEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PushAllowance|null)
    __typename: 'PushAllowanceEdge'
}


/** A team, user or app who has the ability to push to a protected branch. */
export interface PushAllowance extends Node{
    /** The actor that can push. */
    actor: (PushAllowanceActor|null)
    /** Identifies the branch protection rule associated with the allowed user or team. */
    branchProtectionRule: (BranchProtectionRule|null)
    id: Scalars["ID"]
    __typename: 'PushAllowance'
}


/** Types that can be an actor. */
export type PushAllowanceActor=App|Team|User


/** A GitHub App. */
export interface App extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The description of the app. */
    description: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The hex color code, without the leading '#', for the logo background. */
    logoBackgroundColor: Scalars["String"]
    /** A URL pointing to the app's logo. */
    logoUrl: Scalars["URI"]
    /** The name of the app. */
    name: Scalars["String"]
    /** A slug based on the name of the app for use in URLs. */
    slug: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The URL to the app's homepage. */
    url: Scalars["URI"]
    __typename: 'App'
}


/** A team of users in an organization. */
export interface Team extends MemberStatusable,Node,Subscribable{
    /** A list of teams that are ancestors of this team. */
    ancestors: TeamConnection
    /** A URL pointing to the team's avatar. */
    avatarUrl: (Scalars["URI"]|null)
    /** List of child teams belonging to this team */
    childTeams: TeamConnection
    /** The slug corresponding to the organization and team. */
    combinedSlug: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The description of the team. */
    description: (Scalars["String"]|null)
    /** Find a team discussion by its number. */
    discussion: (TeamDiscussion|null)
    /** A list of team discussions. */
    discussions: TeamDiscussionConnection
    /** The HTTP path for team discussions */
    discussionsResourcePath: Scalars["URI"]
    /** The HTTP URL for team discussions */
    discussionsUrl: Scalars["URI"]
    /** The HTTP path for editing this team */
    editTeamResourcePath: Scalars["URI"]
    /** The HTTP URL for editing this team */
    editTeamUrl: Scalars["URI"]
    id: Scalars["ID"]
    /** A list of pending invitations for users to this team */
    invitations: (OrganizationInvitationConnection|null)
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses: UserStatusConnection
    /** A list of users who are members of this team. */
    members: TeamMemberConnection
    /** The HTTP path for the team' members */
    membersResourcePath: Scalars["URI"]
    /** The HTTP URL for the team' members */
    membersUrl: Scalars["URI"]
    /** The name of the team. */
    name: Scalars["String"]
    /** The HTTP path creating a new team */
    newTeamResourcePath: Scalars["URI"]
    /** The HTTP URL creating a new team */
    newTeamUrl: Scalars["URI"]
    /** The organization that owns this team. */
    organization: Organization
    /** The parent team of the team. */
    parentTeam: (Team|null)
    /** The level of privacy the team has. */
    privacy: TeamPrivacy
    /** A list of repositories this team has access to. */
    repositories: TeamRepositoryConnection
    /** The HTTP path for this team's repositories */
    repositoriesResourcePath: Scalars["URI"]
    /** The HTTP URL for this team's repositories */
    repositoriesUrl: Scalars["URI"]
    /** The HTTP path for this team */
    resourcePath: Scalars["URI"]
    /** What algorithm is used for review assignment for this team */
    reviewRequestDelegationAlgorithm: (TeamReviewAssignmentAlgorithm|null)
    /** True if review assignment is enabled for this team */
    reviewRequestDelegationEnabled: Scalars["Boolean"]
    /** How many team members are required for review assignment for this team */
    reviewRequestDelegationMemberCount: (Scalars["Int"]|null)
    /** When assigning team members via delegation, whether the entire team should be notified as well. */
    reviewRequestDelegationNotifyTeam: Scalars["Boolean"]
    /** The slug corresponding to the team. */
    slug: Scalars["String"]
    /** The HTTP path for this team's teams */
    teamsResourcePath: Scalars["URI"]
    /** The HTTP URL for this team's teams */
    teamsUrl: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this team */
    url: Scalars["URI"]
    /** Team is adminable by the viewer. */
    viewerCanAdminister: Scalars["Boolean"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    __typename: 'Team'
}


/** The connection type for Team. */
export interface TeamConnection{
    /** A list of edges. */
    edges: ((TeamEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Team|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TeamConnection'
}


/** An edge in a connection. */
export interface TeamEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Team|null)
    __typename: 'TeamEdge'
}


/** Properties by which team connections can be ordered. */
export type TeamOrderField = 'NAME'


/** A team discussion. */
export interface TeamDiscussion extends Comment,Deletable,Node,Reactable,Subscribable,UniformResourceLocatable,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the discussion's team. */
    authorAssociation: CommentAuthorAssociation
    /** The body as Markdown. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Identifies the discussion body hash. */
    bodyVersion: Scalars["String"]
    /** A list of comments on this discussion. */
    comments: TeamDiscussionCommentConnection
    /** The HTTP path for discussion comments */
    commentsResourcePath: Scalars["URI"]
    /** The HTTP URL for discussion comments */
    commentsUrl: Scalars["URI"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** Whether or not the discussion is pinned. */
    isPinned: Scalars["Boolean"]
    /** Whether or not the discussion is only visible to team members and org admins. */
    isPrivate: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Identifies the discussion within its team. */
    number: Scalars["Int"]
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The HTTP path for this discussion */
    resourcePath: Scalars["URI"]
    /** The team that defines the context of this discussion. */
    team: Team
    /** The title of the discussion */
    title: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this discussion */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Whether or not the current viewer can pin this discussion. */
    viewerCanPin: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    __typename: 'TeamDiscussion'
}


/** Entities that can be deleted. */
export interface Deletable{
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    __typename: 'TeamDiscussion'|'TeamDiscussionComment'|'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'|'GistComment'
}


/** Comments that can be updated. */
export interface UpdatableComment{
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    __typename: 'PullRequest'|'Issue'|'TeamDiscussion'|'TeamDiscussionComment'|'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'PullRequestReview'|'GistComment'
}


/** The possible errors that will prevent a user from updating a comment. */
export type CommentCannotUpdateReason = 'ARCHIVED' | 'DENIED' | 'INSUFFICIENT_ACCESS' | 'LOCKED' | 'LOGIN_REQUIRED' | 'MAINTENANCE' | 'VERIFIED_EMAIL_REQUIRED'


/** Properties by which team discussion comment connections can be ordered. */
export type TeamDiscussionCommentOrderField = 'NUMBER'


/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnection{
    /** A list of edges. */
    edges: ((TeamDiscussionCommentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((TeamDiscussionComment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TeamDiscussionCommentConnection'
}


/** An edge in a connection. */
export interface TeamDiscussionCommentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (TeamDiscussionComment|null)
    __typename: 'TeamDiscussionCommentEdge'
}


/** A comment on a team discussion. */
export interface TeamDiscussionComment extends Comment,Deletable,Node,Reactable,UniformResourceLocatable,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the comment's team. */
    authorAssociation: CommentAuthorAssociation
    /** The body as Markdown. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** The current version of the body content. */
    bodyVersion: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The discussion this comment is about. */
    discussion: TeamDiscussion
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Identifies the comment number. */
    number: Scalars["Int"]
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The HTTP path for this comment */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this comment */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'TeamDiscussionComment'
}


/** Properties by which team discussion connections can be ordered. */
export type TeamDiscussionOrderField = 'CREATED_AT'


/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnection{
    /** A list of edges. */
    edges: ((TeamDiscussionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((TeamDiscussion|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TeamDiscussionConnection'
}


/** An edge in a connection. */
export interface TeamDiscussionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (TeamDiscussion|null)
    __typename: 'TeamDiscussionEdge'
}


/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnection{
    /** A list of edges. */
    edges: ((OrganizationInvitationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((OrganizationInvitation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'OrganizationInvitationConnection'
}


/** An edge in a connection. */
export interface OrganizationInvitationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (OrganizationInvitation|null)
    __typename: 'OrganizationInvitationEdge'
}


/** An Invitation for a user to an organization. */
export interface OrganizationInvitation extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The email address of the user invited to the organization. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The type of invitation that was sent (e.g. email, user). */
    invitationType: OrganizationInvitationType
    /** The user who was invited to the organization. */
    invitee: (User|null)
    /** The user who created the invitation. */
    inviter: User
    /** The organization the invite is for */
    organization: Organization
    /** The user's pending role in the organization (e.g. member, owner). */
    role: OrganizationInvitationRole
    __typename: 'OrganizationInvitation'
}


/** The possible organization invitation types. */
export type OrganizationInvitationType = 'EMAIL' | 'USER'


/** The possible organization invitation roles. */
export type OrganizationInvitationRole = 'ADMIN' | 'BILLING_MANAGER' | 'DIRECT_MEMBER' | 'REINSTATE'


/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export type TeamMembershipType = 'ALL' | 'CHILD_TEAM' | 'IMMEDIATE'


/** Properties by which team member connections can be ordered. */
export type TeamMemberOrderField = 'CREATED_AT' | 'LOGIN'


/** The possible team member roles; either 'maintainer' or 'member'. */
export type TeamMemberRole = 'MAINTAINER' | 'MEMBER'


/** The connection type for User. */
export interface TeamMemberConnection{
    /** A list of edges. */
    edges: ((TeamMemberEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TeamMemberConnection'
}


/** Represents a user who is a member of a team. */
export interface TeamMemberEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The HTTP path to the organization's member access page. */
    memberAccessResourcePath: Scalars["URI"]
    /** The HTTP URL to the organization's member access page. */
    memberAccessUrl: Scalars["URI"]
    node: User
    /** The role the member has on the team. */
    role: TeamMemberRole
    __typename: 'TeamMemberEdge'
}


/** The possible team privacy values. */
export type TeamPrivacy = 'SECRET' | 'VISIBLE'


/** Properties by which team repository connections can be ordered. */
export type TeamRepositoryOrderField = 'CREATED_AT' | 'NAME' | 'PERMISSION' | 'PUSHED_AT' | 'STARGAZERS' | 'UPDATED_AT'


/** The connection type for Repository. */
export interface TeamRepositoryConnection{
    /** A list of edges. */
    edges: ((TeamRepositoryEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Repository|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'TeamRepositoryConnection'
}


/** Represents a team repository. */
export interface TeamRepositoryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    node: Repository
    /**
     * The permission level the team has on the repository
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission: RepositoryPermission
    __typename: 'TeamRepositoryEdge'
}


/** The access level to a repository */
export type RepositoryPermission = 'ADMIN' | 'MAINTAIN' | 'READ' | 'TRIAGE' | 'WRITE'


/** The possible team review assignment algorithms */
export type TeamReviewAssignmentAlgorithm = 'LOAD_BALANCE' | 'ROUND_ROBIN'


/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnection{
    /** A list of edges. */
    edges: ((ReviewDismissalAllowanceEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ReviewDismissalAllowance|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ReviewDismissalAllowanceConnection'
}


/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ReviewDismissalAllowance|null)
    __typename: 'ReviewDismissalAllowanceEdge'
}


/** A team or user who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowance extends Node{
    /** The actor that can dismiss. */
    actor: (ReviewDismissalAllowanceActor|null)
    /** Identifies the branch protection rule associated with the allowed user or team. */
    branchProtectionRule: (BranchProtectionRule|null)
    id: Scalars["ID"]
    __typename: 'ReviewDismissalAllowance'
}


/** Types that can be an actor. */
export type ReviewDismissalAllowanceActor=Team|User


/** Collaborators affiliation level with a subject. */
export type CollaboratorAffiliation = 'ALL' | 'DIRECT' | 'OUTSIDE'


/** The connection type for User. */
export interface RepositoryCollaboratorConnection{
    /** A list of edges. */
    edges: ((RepositoryCollaboratorEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RepositoryCollaboratorConnection'
}


/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    node: User
    /**
     * The permission the user has on the repository.
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission: RepositoryPermission
    /** A list of sources for the user's access to the repository. */
    permissionSources: (PermissionSource[]|null)
    __typename: 'RepositoryCollaboratorEdge'
}


/** A level of permission and source for a user's access to a repository. */
export interface PermissionSource{
    /** The organization the repository belongs to. */
    organization: Organization
    /** The level of access this source has granted to the user. */
    permission: DefaultRepositoryPermissionField
    /** The source of this permission. */
    source: PermissionGranter
    __typename: 'PermissionSource'
}


/** The possible default permissions for repositories. */
export type DefaultRepositoryPermissionField = 'ADMIN' | 'NONE' | 'READ' | 'WRITE'


/** Types that can grant permissions on a repository to a user */
export type PermissionGranter=Organization|Repository|Team


/** The connection type for CommitComment. */
export interface CommitCommentConnection{
    /** A list of edges. */
    edges: ((CommitCommentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CommitComment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CommitCommentConnection'
}


/** An edge in a connection. */
export interface CommitCommentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CommitComment|null)
    __typename: 'CommitCommentEdge'
}


/** Represents a comment on a given Commit. */
export interface CommitComment extends Comment,Deletable,Minimizable,Node,Reactable,RepositoryNode,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** Identifies the comment body. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Identifies the commit associated with the comment, if the commit exists. */
    commit: (Commit|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Returns why the comment was minimized. */
    minimizedReason: (Scalars["String"]|null)
    /** Identifies the file path associated with the comment. */
    path: (Scalars["String"]|null)
    /** Identifies the line position associated with the comment. */
    position: (Scalars["Int"]|null)
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path permalink for this commit comment. */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL permalink for this commit comment. */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'CommitComment'
}


/** Entities that can be minimized. */
export interface Minimizable{
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"]
    /** Returns why the comment was minimized. */
    minimizedReason: (Scalars["String"]|null)
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"]
    __typename: 'CommitComment'|'IssueComment'|'PullRequestReviewComment'|'GistComment'
}


/** Represents a Git commit. */
export interface Commit extends GitObject,Node,Subscribable,UniformResourceLocatable{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"]
    /** The number of additions in this commit. */
    additions: Scalars["Int"]
    /** The pull requests associated with a commit */
    associatedPullRequests: (PullRequestConnection|null)
    /** Authorship details of the commit. */
    author: (GitActor|null)
    /** Check if the committer and the author match. */
    authoredByCommitter: Scalars["Boolean"]
    /** The datetime when this commit was authored. */
    authoredDate: Scalars["DateTime"]
    /** Fetches `git blame` information. */
    blame: Blame
    /** The number of changed files in this commit. */
    changedFiles: Scalars["Int"]
    /** The check suites associated with a commit. */
    checkSuites: (CheckSuiteConnection|null)
    /** Comments made on the commit. */
    comments: CommitCommentConnection
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"]
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"]
    /** The datetime when this commit was committed. */
    committedDate: Scalars["DateTime"]
    /** Check if commited via GitHub web UI. */
    committedViaWeb: Scalars["Boolean"]
    /** Committership details of the commit. */
    committer: (GitActor|null)
    /** The number of deletions in this commit. */
    deletions: Scalars["Int"]
    /** The deployments associated with a commit. */
    deployments: (DeploymentConnection|null)
    /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
    history: CommitHistoryConnection
    id: Scalars["ID"]
    /** The Git commit message */
    message: Scalars["String"]
    /** The Git commit message body */
    messageBody: Scalars["String"]
    /** The commit message body rendered to HTML. */
    messageBodyHTML: Scalars["HTML"]
    /** The Git commit message headline */
    messageHeadline: Scalars["String"]
    /** The commit message headline rendered to HTML. */
    messageHeadlineHTML: Scalars["HTML"]
    /** The Git object ID */
    oid: Scalars["GitObjectID"]
    /** The organization this commit was made on behalf of. */
    onBehalfOf: (Organization|null)
    /** The parents of a commit. */
    parents: CommitConnection
    /** The datetime when this commit was pushed. */
    pushedDate: (Scalars["DateTime"]|null)
    /** The Repository this commit belongs to */
    repository: Repository
    /** The HTTP path for this commit */
    resourcePath: Scalars["URI"]
    /** Commit signing information, if present. */
    signature: (GitSignature|null)
    /** Status information for this commit */
    status: (Status|null)
    /** Check and Status rollup information for this commit. */
    statusCheckRollup: (StatusCheckRollup|null)
    /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
    submodules: SubmoduleConnection
    /**
     * Returns a URL to download a tarball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    tarballUrl: Scalars["URI"]
    /** Commit's root Tree */
    tree: Tree
    /** The HTTP path for the tree of this commit */
    treeResourcePath: Scalars["URI"]
    /** The HTTP URL for the tree of this commit */
    treeUrl: Scalars["URI"]
    /** The HTTP URL for this commit */
    url: Scalars["URI"]
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe: Scalars["Boolean"]
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription: (SubscriptionState|null)
    /**
     * Returns a URL to download a zipball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    zipballUrl: Scalars["URI"]
    __typename: 'Commit'
}


/** Represents a Git object. */
export interface GitObject{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"]
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"]
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"]
    id: Scalars["ID"]
    /** The Git object ID */
    oid: Scalars["GitObjectID"]
    /** The Repository the Git object belongs to */
    repository: Repository
    __typename: 'Commit'|'Tree'|'Blob'|'Tag'
}


/** Properties by which pull_requests connections can be ordered. */
export type PullRequestOrderField = 'CREATED_AT' | 'UPDATED_AT'


/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActor{
    /** A URL pointing to the author's public avatar. */
    avatarUrl: Scalars["URI"]
    /** The timestamp of the Git action (authoring or committing). */
    date: (Scalars["GitTimestamp"]|null)
    /** The email in the Git commit. */
    email: (Scalars["String"]|null)
    /** The name in the Git commit. */
    name: (Scalars["String"]|null)
    /** The GitHub user corresponding to the email field. Null if no such user exists. */
    user: (User|null)
    __typename: 'GitActor'
}


/** Represents a Git blame. */
export interface Blame{
    /** The list of ranges from a Git blame. */
    ranges: BlameRange[]
    __typename: 'Blame'
}


/** Represents a range of information from a Git blame. */
export interface BlameRange{
    /**
     * Identifies the recency of the change, from 1 (new) to 10 (old). This is
     * calculated as a 2-quantile and determines the length of distance between the
     * median age of all the changes in the file and the recency of the current
     * range's change.
     */
    age: Scalars["Int"]
    /** Identifies the line author */
    commit: Commit
    /** The ending line for the range */
    endingLine: Scalars["Int"]
    /** The starting line for the range */
    startingLine: Scalars["Int"]
    __typename: 'BlameRange'
}


/** The connection type for CheckSuite. */
export interface CheckSuiteConnection{
    /** A list of edges. */
    edges: ((CheckSuiteEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CheckSuite|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CheckSuiteConnection'
}


/** An edge in a connection. */
export interface CheckSuiteEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CheckSuite|null)
    __typename: 'CheckSuiteEdge'
}


/** A check suite. */
export interface CheckSuite extends Node{
    /** The GitHub App which created this check suite. */
    app: (App|null)
    /** The name of the branch for this check suite. */
    branch: (Ref|null)
    /** The check runs associated with a check suite. */
    checkRuns: (CheckRunConnection|null)
    /** The commit for this check suite */
    commit: Commit
    /** The conclusion of this check suite. */
    conclusion: (CheckConclusionState|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** A list of open pull requests matching the check suite. */
    matchingPullRequests: (PullRequestConnection|null)
    /** The push that triggered this check suite. */
    push: (Push|null)
    /** The repository associated with this check suite. */
    repository: Repository
    /** The HTTP path for this check suite */
    resourcePath: Scalars["URI"]
    /** The status of this check suite. */
    status: CheckStatusState
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this check suite */
    url: Scalars["URI"]
    __typename: 'CheckSuite'
}


/** The possible types of check runs. */
export type CheckRunType = 'ALL' | 'LATEST'


/** The possible states for a check suite or run status. */
export type CheckStatusState = 'COMPLETED' | 'IN_PROGRESS' | 'QUEUED' | 'REQUESTED'


/** The connection type for CheckRun. */
export interface CheckRunConnection{
    /** A list of edges. */
    edges: ((CheckRunEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CheckRun|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CheckRunConnection'
}


/** An edge in a connection. */
export interface CheckRunEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CheckRun|null)
    __typename: 'CheckRunEdge'
}


/** A check run. */
export interface CheckRun extends Node,UniformResourceLocatable{
    /** The check run's annotations */
    annotations: (CheckAnnotationConnection|null)
    /** The check suite that this run is a part of. */
    checkSuite: CheckSuite
    /** Identifies the date and time when the check run was completed. */
    completedAt: (Scalars["DateTime"]|null)
    /** The conclusion of the check run. */
    conclusion: (CheckConclusionState|null)
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The URL from which to find full details of the check run on the integrator's site. */
    detailsUrl: (Scalars["URI"]|null)
    /** A reference for the check run on the integrator's system. */
    externalId: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The name of the check for this check run. */
    name: Scalars["String"]
    /** The permalink to the check run summary. */
    permalink: Scalars["URI"]
    /** The repository associated with this check run. */
    repository: Repository
    /** The HTTP path for this check run. */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the check run was started. */
    startedAt: (Scalars["DateTime"]|null)
    /** The current status of the check run. */
    status: CheckStatusState
    /** A string representing the check run's summary */
    summary: (Scalars["String"]|null)
    /** A string representing the check run's text */
    text: (Scalars["String"]|null)
    /** A string representing the check run */
    title: (Scalars["String"]|null)
    /** The HTTP URL for this check run. */
    url: Scalars["URI"]
    __typename: 'CheckRun'
}


/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnection{
    /** A list of edges. */
    edges: ((CheckAnnotationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CheckAnnotation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CheckAnnotationConnection'
}


/** An edge in a connection. */
export interface CheckAnnotationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CheckAnnotation|null)
    __typename: 'CheckAnnotationEdge'
}


/** A single check annotation. */
export interface CheckAnnotation{
    /** The annotation's severity level. */
    annotationLevel: (CheckAnnotationLevel|null)
    /** The path to the file that this annotation was made on. */
    blobUrl: Scalars["URI"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The position of this annotation. */
    location: CheckAnnotationSpan
    /** The annotation's message. */
    message: Scalars["String"]
    /** The path that this annotation was made on. */
    path: Scalars["String"]
    /** Additional information about the annotation. */
    rawDetails: (Scalars["String"]|null)
    /** The annotation's title */
    title: (Scalars["String"]|null)
    __typename: 'CheckAnnotation'
}


/** Represents an annotation's information level. */
export type CheckAnnotationLevel = 'FAILURE' | 'NOTICE' | 'WARNING'


/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpan{
    /** End position (inclusive). */
    end: CheckAnnotationPosition
    /** Start position (inclusive). */
    start: CheckAnnotationPosition
    __typename: 'CheckAnnotationSpan'
}


/** A character position in a check annotation. */
export interface CheckAnnotationPosition{
    /** Column number (1 indexed). */
    column: (Scalars["Int"]|null)
    /** Line number (1 indexed). */
    line: Scalars["Int"]
    __typename: 'CheckAnnotationPosition'
}


/** The possible states for a check suite or run conclusion. */
export type CheckConclusionState = 'ACTION_REQUIRED' | 'CANCELLED' | 'FAILURE' | 'NEUTRAL' | 'SKIPPED' | 'STALE' | 'SUCCESS' | 'TIMED_OUT'


/** A Git push. */
export interface Push extends Node{
    id: Scalars["ID"]
    /** The SHA after the push */
    nextSha: (Scalars["GitObjectID"]|null)
    /** The permalink for this push. */
    permalink: Scalars["URI"]
    /** The SHA before the push */
    previousSha: (Scalars["GitObjectID"]|null)
    /** The user who pushed */
    pusher: User
    /** The repository that was pushed to */
    repository: Repository
    __typename: 'Push'
}


/** Properties by which deployment connections can be ordered. */
export type DeploymentOrderField = 'CREATED_AT'


/** The connection type for Deployment. */
export interface DeploymentConnection{
    /** A list of edges. */
    edges: ((DeploymentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Deployment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'DeploymentConnection'
}


/** An edge in a connection. */
export interface DeploymentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Deployment|null)
    __typename: 'DeploymentEdge'
}


/** Represents triggered deployment instance. */
export interface Deployment extends Node{
    /** Identifies the commit sha of the deployment. */
    commit: (Commit|null)
    /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
    commitOid: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the actor who triggered the deployment. */
    creator: Actor
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The deployment description. */
    description: (Scalars["String"]|null)
    /** The latest environment to which this deployment was made. */
    environment: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The latest environment to which this deployment was made. */
    latestEnvironment: (Scalars["String"]|null)
    /** The latest status of this deployment. */
    latestStatus: (DeploymentStatus|null)
    /** The original environment to which this deployment was made. */
    originalEnvironment: (Scalars["String"]|null)
    /** Extra information that a deployment system might need. */
    payload: (Scalars["String"]|null)
    /** Identifies the Ref of the deployment, if the deployment was created by ref. */
    ref: (Ref|null)
    /** Identifies the repository associated with the deployment. */
    repository: Repository
    /** The current state of the deployment. */
    state: (DeploymentState|null)
    /** A list of statuses associated with the deployment. */
    statuses: (DeploymentStatusConnection|null)
    /** The deployment task. */
    task: (Scalars["String"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'Deployment'
}


/** Describes the status of a given deployment attempt. */
export interface DeploymentStatus extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the actor who triggered the deployment. */
    creator: Actor
    /** Identifies the deployment associated with status. */
    deployment: Deployment
    /** Identifies the description of the deployment. */
    description: (Scalars["String"]|null)
    /** Identifies the environment of the deployment at the time of this deployment status */
    environment: (Scalars["String"]|null)
    /** Identifies the environment URL of the deployment. */
    environmentUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** Identifies the log URL of the deployment. */
    logUrl: (Scalars["URI"]|null)
    /** Identifies the current state of the deployment. */
    state: DeploymentStatusState
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'DeploymentStatus'
}


/** The possible states for a deployment status. */
export type DeploymentStatusState = 'ERROR' | 'FAILURE' | 'INACTIVE' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED' | 'SUCCESS'


/** The possible states in which a deployment can be. */
export type DeploymentState = 'ABANDONED' | 'ACTIVE' | 'DESTROYED' | 'ERROR' | 'FAILURE' | 'INACTIVE' | 'IN_PROGRESS' | 'PENDING' | 'QUEUED'


/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnection{
    /** A list of edges. */
    edges: ((DeploymentStatusEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((DeploymentStatus|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'DeploymentStatusConnection'
}


/** An edge in a connection. */
export interface DeploymentStatusEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (DeploymentStatus|null)
    __typename: 'DeploymentStatusEdge'
}


/** The connection type for Commit. */
export interface CommitHistoryConnection{
    /** A list of edges. */
    edges: ((CommitEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Commit|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CommitHistoryConnection'
}


/** An edge in a connection. */
export interface CommitEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Commit|null)
    __typename: 'CommitEdge'
}


/** The connection type for Commit. */
export interface CommitConnection{
    /** A list of edges. */
    edges: ((CommitEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Commit|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CommitConnection'
}


/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignature{
    /** Email used to sign this object. */
    email: Scalars["String"]
    /** True if the signature is valid and verified by GitHub. */
    isValid: Scalars["Boolean"]
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload: Scalars["String"]
    /** ASCII-armored signature header from object. */
    signature: Scalars["String"]
    /** GitHub user corresponding to the email signing this commit. */
    signer: (User|null)
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state: GitSignatureState
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub: Scalars["Boolean"]
    __typename: 'GpgSignature'|'SmimeSignature'|'UnknownSignature'
}


/** The state of a Git signature. */
export type GitSignatureState = 'BAD_CERT' | 'BAD_EMAIL' | 'EXPIRED_KEY' | 'GPGVERIFY_ERROR' | 'GPGVERIFY_UNAVAILABLE' | 'INVALID' | 'MALFORMED_SIG' | 'NOT_SIGNING_KEY' | 'NO_USER' | 'OCSP_ERROR' | 'OCSP_PENDING' | 'OCSP_REVOKED' | 'UNKNOWN_KEY' | 'UNKNOWN_SIG_TYPE' | 'UNSIGNED' | 'UNVERIFIED_EMAIL' | 'VALID'


/** Represents a commit status. */
export interface Status extends Node{
    /** The commit this status is attached to. */
    commit: (Commit|null)
    /** Looks up an individual status context by context name. */
    context: (StatusContext|null)
    /** The individual status contexts for this commit. */
    contexts: StatusContext[]
    id: Scalars["ID"]
    /** The combined commit status. */
    state: StatusState
    __typename: 'Status'
}


/** Represents an individual commit status context */
export interface StatusContext extends Node{
    /** The avatar of the OAuth application or the user that created the status */
    avatarUrl: (Scalars["URI"]|null)
    /** This commit this status context is attached to. */
    commit: (Commit|null)
    /** The name of this status context. */
    context: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The actor who created this status context. */
    creator: (Actor|null)
    /** The description for this status context. */
    description: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The state of this status context. */
    state: StatusState
    /** The URL for this status context. */
    targetUrl: (Scalars["URI"]|null)
    __typename: 'StatusContext'
}


/** The possible commit status states. */
export type StatusState = 'ERROR' | 'EXPECTED' | 'FAILURE' | 'PENDING' | 'SUCCESS'


/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollup extends Node{
    /** The commit the status and check runs are attached to. */
    commit: (Commit|null)
    /** A list of status contexts and check runs for this commit. */
    contexts: StatusCheckRollupContextConnection
    id: Scalars["ID"]
    /** The combined status for the commit. */
    state: StatusState
    __typename: 'StatusCheckRollup'
}


/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnection{
    /** A list of edges. */
    edges: ((StatusCheckRollupContextEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((StatusCheckRollupContext|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'StatusCheckRollupContextConnection'
}


/** An edge in a connection. */
export interface StatusCheckRollupContextEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (StatusCheckRollupContext|null)
    __typename: 'StatusCheckRollupContextEdge'
}


/** Types that can be inside a StatusCheckRollup context. */
export type StatusCheckRollupContext=CheckRun|StatusContext


/** The connection type for Submodule. */
export interface SubmoduleConnection{
    /** A list of edges. */
    edges: ((SubmoduleEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Submodule|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SubmoduleConnection'
}


/** An edge in a connection. */
export interface SubmoduleEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Submodule|null)
    __typename: 'SubmoduleEdge'
}


/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface Submodule{
    /** The branch of the upstream submodule for tracking updates */
    branch: (Scalars["String"]|null)
    /** The git URL of the submodule repository */
    gitUrl: Scalars["URI"]
    /** The name of the submodule in .gitmodules */
    name: Scalars["String"]
    /** The path in the superproject that this submodule is located in */
    path: Scalars["String"]
    /** The commit revision of the subproject repository being tracked by the submodule */
    subprojectCommitOid: (Scalars["GitObjectID"]|null)
    __typename: 'Submodule'
}


/** Represents a Git tree. */
export interface Tree extends GitObject,Node{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"]
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"]
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"]
    /** A list of tree entries. */
    entries: (TreeEntry[]|null)
    id: Scalars["ID"]
    /** The Git object ID */
    oid: Scalars["GitObjectID"]
    /** The Repository the Git object belongs to */
    repository: Repository
    __typename: 'Tree'
}


/** Represents a Git tree entry. */
export interface TreeEntry{
    /** Entry file mode. */
    mode: Scalars["Int"]
    /** Entry file name. */
    name: Scalars["String"]
    /** Entry file object. */
    object: (GitObject|null)
    /** Entry file Git object ID. */
    oid: Scalars["GitObjectID"]
    /** The Repository the tree entry belongs to */
    repository: Repository
    /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
    submodule: (Submodule|null)
    /** Entry file type. */
    type: Scalars["String"]
    __typename: 'TreeEntry'
}


/** The connection type for DependencyGraphManifest. */
export interface DependencyGraphManifestConnection{
    /** A list of edges. */
    edges: ((DependencyGraphManifestEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((DependencyGraphManifest|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'DependencyGraphManifestConnection'
}


/** An edge in a connection. */
export interface DependencyGraphManifestEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (DependencyGraphManifest|null)
    __typename: 'DependencyGraphManifestEdge'
}


/** Dependency manifest for a repository */
export interface DependencyGraphManifest extends Node{
    /** Path to view the manifest file blob */
    blobPath: Scalars["String"]
    /** A list of manifest dependencies */
    dependencies: (DependencyGraphDependencyConnection|null)
    /** The number of dependencies listed in the manifest */
    dependenciesCount: (Scalars["Int"]|null)
    /** Is the manifest too big to parse? */
    exceedsMaxSize: Scalars["Boolean"]
    /** Fully qualified manifest filename */
    filename: Scalars["String"]
    id: Scalars["ID"]
    /** Were we able to parse the manifest? */
    parseable: Scalars["Boolean"]
    /** The repository containing the manifest */
    repository: Repository
    __typename: 'DependencyGraphManifest'
}


/** The connection type for DependencyGraphDependency. */
export interface DependencyGraphDependencyConnection{
    /** A list of edges. */
    edges: ((DependencyGraphDependencyEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((DependencyGraphDependency|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'DependencyGraphDependencyConnection'
}


/** An edge in a connection. */
export interface DependencyGraphDependencyEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (DependencyGraphDependency|null)
    __typename: 'DependencyGraphDependencyEdge'
}


/** A dependency manifest entry */
export interface DependencyGraphDependency{
    /** Does the dependency itself have dependencies? */
    hasDependencies: Scalars["Boolean"]
    /** The dependency package manager */
    packageManager: (Scalars["String"]|null)
    /** The required package name */
    packageName: Scalars["String"]
    /** The repository containing the package */
    repository: (Repository|null)
    /** The dependency version requirements */
    requirements: Scalars["String"]
    __typename: 'DependencyGraphDependency'
}


/** The connection type for DeployKey. */
export interface DeployKeyConnection{
    /** A list of edges. */
    edges: ((DeployKeyEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((DeployKey|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'DeployKeyConnection'
}


/** An edge in a connection. */
export interface DeployKeyEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (DeployKey|null)
    __typename: 'DeployKeyEdge'
}


/** A repository deploy key. */
export interface DeployKey extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** The deploy key. */
    key: Scalars["String"]
    /** Whether or not the deploy key is read only. */
    readOnly: Scalars["Boolean"]
    /** The deploy key title. */
    title: Scalars["String"]
    /** Whether or not the deploy key has been verified. */
    verified: Scalars["Boolean"]
    __typename: 'DeployKey'
}


/** A funding platform link for a repository. */
export interface FundingLink{
    /** The funding platform this link is for. */
    platform: FundingPlatform
    /** The configured URL for this funding link. */
    url: Scalars["URI"]
    __typename: 'FundingLink'
}


/** The possible funding platforms for repository funding links. */
export type FundingPlatform = 'COMMUNITY_BRIDGE' | 'CUSTOM' | 'GITHUB' | 'ISSUEHUNT' | 'KO_FI' | 'LIBERAPAY' | 'OPEN_COLLECTIVE' | 'OTECHIE' | 'PATREON' | 'TIDELIFT'


/** Used for return value of Repository.issueOrPullRequest. */
export type IssueOrPullRequest=Issue|PullRequest


/** Properties by which language connections can be ordered. */
export type LanguageOrderField = 'SIZE'


/** A list of languages associated with the parent. */
export interface LanguageConnection{
    /** A list of edges. */
    edges: ((LanguageEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Language|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** The total size in bytes of files written in that language. */
    totalSize: Scalars["Int"]
    __typename: 'LanguageConnection'
}


/** Represents the language of a repository. */
export interface LanguageEdge{
    cursor: Scalars["String"]
    node: Language
    /** The number of bytes of code written in the language. */
    size: Scalars["Int"]
    __typename: 'LanguageEdge'
}


/** Represents a given language found in repositories. */
export interface Language extends Node{
    /** The color defined for the current language. */
    color: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The name of the current language. */
    name: Scalars["String"]
    __typename: 'Language'
}


/** Represents a Milestone object on a given repository. */
export interface Milestone extends Closable,Node,UniformResourceLocatable{
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed: Scalars["Boolean"]
    /** Identifies the date and time when the object was closed. */
    closedAt: (Scalars["DateTime"]|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the actor who created the milestone. */
    creator: (Actor|null)
    /** Identifies the description of the milestone. */
    description: (Scalars["String"]|null)
    /** Identifies the due date of the milestone. */
    dueOn: (Scalars["DateTime"]|null)
    id: Scalars["ID"]
    /** Just for debugging on review-lab */
    issuePrioritiesDebug: Scalars["String"]
    /** A list of issues associated with the milestone. */
    issues: IssueConnection
    /** Identifies the number of the milestone. */
    number: Scalars["Int"]
    /** A list of pull requests associated with the milestone. */
    pullRequests: PullRequestConnection
    /** The repository associated with this milestone. */
    repository: Repository
    /** The HTTP path for this milestone */
    resourcePath: Scalars["URI"]
    /** Identifies the state of the milestone. */
    state: MilestoneState
    /** Identifies the title of the milestone. */
    title: Scalars["String"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this milestone */
    url: Scalars["URI"]
    __typename: 'Milestone'
}


/** The possible states of a milestone. */
export type MilestoneState = 'CLOSED' | 'OPEN'


/** Properties by which milestone connections can be ordered. */
export type MilestoneOrderField = 'CREATED_AT' | 'DUE_DATE' | 'NUMBER' | 'UPDATED_AT'


/** The connection type for Milestone. */
export interface MilestoneConnection{
    /** A list of edges. */
    edges: ((MilestoneEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Milestone|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'MilestoneConnection'
}


/** An edge in a connection. */
export interface MilestoneEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Milestone|null)
    __typename: 'MilestoneEdge'
}


/** The connection type for PinnedIssue. */
export interface PinnedIssueConnection{
    /** A list of edges. */
    edges: ((PinnedIssueEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PinnedIssue|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PinnedIssueConnection'
}


/** An edge in a connection. */
export interface PinnedIssueEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PinnedIssue|null)
    __typename: 'PinnedIssueEdge'
}


/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssue extends Node{
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The issue that was pinned. */
    issue: Issue
    /** The actor that pinned this issue. */
    pinnedBy: Actor
    /** The repository that this issue was pinned to. */
    repository: Repository
    __typename: 'PinnedIssue'
}


/** Properties by which ref connections can be ordered. */
export type RefOrderField = 'ALPHABETICAL' | 'TAG_COMMIT_DATE'


/** Properties by which release connections can be ordered. */
export type ReleaseOrderField = 'CREATED_AT' | 'NAME'


/** The connection type for Release. */
export interface ReleaseConnection{
    /** A list of edges. */
    edges: ((ReleaseEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Release|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ReleaseConnection'
}


/** An edge in a connection. */
export interface ReleaseEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Release|null)
    __typename: 'ReleaseEdge'
}


/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnection{
    /** A list of edges. */
    edges: ((RepositoryTopicEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RepositoryTopic|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RepositoryTopicConnection'
}


/** An edge in a connection. */
export interface RepositoryTopicEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RepositoryTopic|null)
    __typename: 'RepositoryTopicEdge'
}


/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopic extends Node,UniformResourceLocatable{
    id: Scalars["ID"]
    /** The HTTP path for this repository-topic. */
    resourcePath: Scalars["URI"]
    /** The topic. */
    topic: Topic
    /** The HTTP URL for this repository-topic. */
    url: Scalars["URI"]
    __typename: 'RepositoryTopic'
}


/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnection{
    /** A list of edges. */
    edges: ((RepositoryVulnerabilityAlertEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RepositoryVulnerabilityAlert|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RepositoryVulnerabilityAlertConnection'
}


/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RepositoryVulnerabilityAlert|null)
    __typename: 'RepositoryVulnerabilityAlertEdge'
}


/** A alert for a repository with an affected vulnerability. */
export interface RepositoryVulnerabilityAlert extends Node,RepositoryNode{
    /** When was the alert created? */
    createdAt: Scalars["DateTime"]
    /** The reason the alert was dismissed */
    dismissReason: (Scalars["String"]|null)
    /** When was the alert dimissed? */
    dismissedAt: (Scalars["DateTime"]|null)
    /** The user who dismissed the alert */
    dismisser: (User|null)
    id: Scalars["ID"]
    /** The associated repository */
    repository: Repository
    /** The associated security advisory */
    securityAdvisory: (SecurityAdvisory|null)
    /** The associated security vulnerablity */
    securityVulnerability: (SecurityVulnerability|null)
    /** The vulnerable manifest filename */
    vulnerableManifestFilename: Scalars["String"]
    /** The vulnerable manifest path */
    vulnerableManifestPath: Scalars["String"]
    /** The vulnerable requirements */
    vulnerableRequirements: (Scalars["String"]|null)
    __typename: 'RepositoryVulnerabilityAlert'
}


/** A GitHub Security Advisory */
export interface SecurityAdvisory extends Node{
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** This is a long plaintext description of the advisory */
    description: Scalars["String"]
    /** The GitHub Security Advisory ID */
    ghsaId: Scalars["String"]
    id: Scalars["ID"]
    /** A list of identifiers for this advisory */
    identifiers: SecurityAdvisoryIdentifier[]
    /** The organization that originated the advisory */
    origin: Scalars["String"]
    /** The permalink for the advisory */
    permalink: (Scalars["URI"]|null)
    /** When the advisory was published */
    publishedAt: Scalars["DateTime"]
    /** A list of references for this advisory */
    references: SecurityAdvisoryReference[]
    /** The severity of the advisory */
    severity: SecurityAdvisorySeverity
    /** A short plaintext summary of the advisory */
    summary: Scalars["String"]
    /** When the advisory was last updated */
    updatedAt: Scalars["DateTime"]
    /** Vulnerabilities associated with this Advisory */
    vulnerabilities: SecurityVulnerabilityConnection
    /** When the advisory was withdrawn, if it has been withdrawn */
    withdrawnAt: (Scalars["DateTime"]|null)
    __typename: 'SecurityAdvisory'
}


/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifier{
    /** The identifier type, e.g. GHSA, CVE */
    type: Scalars["String"]
    /** The identifier */
    value: Scalars["String"]
    __typename: 'SecurityAdvisoryIdentifier'
}


/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReference{
    /** A publicly accessible reference */
    url: Scalars["URI"]
    __typename: 'SecurityAdvisoryReference'
}


/** Severity of the vulnerability. */
export type SecurityAdvisorySeverity = 'CRITICAL' | 'HIGH' | 'LOW' | 'MODERATE'


/** The possible ecosystems of a security vulnerability's package. */
export type SecurityAdvisoryEcosystem = 'COMPOSER' | 'MAVEN' | 'NPM' | 'NUGET' | 'PIP' | 'RUBYGEMS'


/** Properties by which security vulnerability connections can be ordered. */
export type SecurityVulnerabilityOrderField = 'UPDATED_AT'


/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnection{
    /** A list of edges. */
    edges: ((SecurityVulnerabilityEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((SecurityVulnerability|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SecurityVulnerabilityConnection'
}


/** An edge in a connection. */
export interface SecurityVulnerabilityEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (SecurityVulnerability|null)
    __typename: 'SecurityVulnerabilityEdge'
}


/** An individual vulnerability within an Advisory */
export interface SecurityVulnerability{
    /** The Advisory associated with this Vulnerability */
    advisory: SecurityAdvisory
    /** The first version containing a fix for the vulnerability */
    firstPatchedVersion: (SecurityAdvisoryPackageVersion|null)
    /** A description of the vulnerable package */
    package: SecurityAdvisoryPackage
    /** The severity of the vulnerability within this package */
    severity: SecurityAdvisorySeverity
    /** When the vulnerability was last updated */
    updatedAt: Scalars["DateTime"]
    /**
     * A string that describes the vulnerable package versions.
     * This string follows a basic syntax with a few forms.
     * + `= 0.2.0` denotes a single vulnerable version.
     * + `<= 1.0.8` denotes a version range up to and including the specified version
     * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
     * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
     * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
     */
    vulnerableVersionRange: Scalars["String"]
    __typename: 'SecurityVulnerability'
}


/** An individual package version */
export interface SecurityAdvisoryPackageVersion{
    /** The package name or version */
    identifier: Scalars["String"]
    __typename: 'SecurityAdvisoryPackageVersion'
}


/** An individual package */
export interface SecurityAdvisoryPackage{
    /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
    ecosystem: SecurityAdvisoryEcosystem
    /** The package name */
    name: Scalars["String"]
    __typename: 'SecurityAdvisoryPackage'
}


/** The connection type for IssueComment. */
export interface IssueCommentConnection{
    /** A list of edges. */
    edges: ((IssueCommentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((IssueComment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'IssueCommentConnection'
}


/** An edge in a connection. */
export interface IssueCommentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (IssueComment|null)
    __typename: 'IssueCommentEdge'
}


/** Represents a comment on an Issue. */
export interface IssueComment extends Comment,Deletable,Minimizable,Node,Reactable,RepositoryNode,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** The body as Markdown. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"]
    /** Identifies the issue associated with the comment. */
    issue: Issue
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Returns why the comment was minimized. */
    minimizedReason: (Scalars["String"]|null)
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /**
     * Returns the pull request associated with the comment, if this comment was made on a
     * pull request.
     */
    pullRequest: (PullRequest|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path for this issue comment */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this issue comment */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'IssueComment'
}


/** Detail needed to display a hovercard for a user */
export interface Hovercard{
    /** Each of the contexts for this hovercard */
    contexts: HovercardContext[]
    __typename: 'Hovercard'
}


/** An individual line of a hovercard */
export interface HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    __typename: 'GenericHovercardContext'|'OrganizationTeamsHovercardContext'|'OrganizationsHovercardContext'|'ReviewStatusHovercardContext'|'ViewerHovercardContext'
}


/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnection{
    /** A list of edges. */
    edges: ((IssueTimelineItemEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((IssueTimelineItem|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'IssueTimelineConnection'
}


/** An edge in a connection. */
export interface IssueTimelineItemEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (IssueTimelineItem|null)
    __typename: 'IssueTimelineItemEdge'
}


/** An item in an issue timeline */
export type IssueTimelineItem=AssignedEvent|ClosedEvent|Commit|CrossReferencedEvent|DemilestonedEvent|IssueComment|LabeledEvent|LockedEvent|MilestonedEvent|ReferencedEvent|RenamedTitleEvent|ReopenedEvent|SubscribedEvent|TransferredEvent|UnassignedEvent|UnlabeledEvent|UnlockedEvent|UnsubscribedEvent|UserBlockedEvent


/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the assignable associated with the event. */
    assignable: Assignable
    /** Identifies the user or mannequin that was assigned. */
    assignee: (Assignee|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /**
     * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
     * Identifies the user who was assigned.
     */
    user: (User|null)
    __typename: 'AssignedEvent'
}


/** Types that can be assigned to issues. */
export type Assignee=Bot|Mannequin|Organization|User


/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface Bot extends Actor,Node,UniformResourceLocatable{
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl: Scalars["URI"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The username of the actor. */
    login: Scalars["String"]
    /** The HTTP path for this bot */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this bot */
    url: Scalars["URI"]
    __typename: 'Bot'
}


/** A placeholder user for attribution of imported data on GitHub. */
export interface Mannequin extends Actor,Node,UniformResourceLocatable{
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl: Scalars["URI"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The mannequin's email on the source instance. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The username of the actor. */
    login: Scalars["String"]
    /** The HTML path to this resource. */
    resourcePath: Scalars["URI"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The URL to this resource. */
    url: Scalars["URI"]
    __typename: 'Mannequin'
}


/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Object that was closed. */
    closable: Closable
    /** Object which triggered the creation of this event. */
    closer: (Closer|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** The HTTP path for this closed event. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this closed event. */
    url: Scalars["URI"]
    __typename: 'ClosedEvent'
}


/** The object which triggered a `ClosedEvent`. */
export type Closer=Commit|PullRequest


/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Reference originated in a different repository. */
    isCrossRepository: Scalars["Boolean"]
    /** Identifies when the reference was made. */
    referencedAt: Scalars["DateTime"]
    /** The HTTP path for this pull request. */
    resourcePath: Scalars["URI"]
    /** Issue or pull request that made the reference. */
    source: ReferencedSubject
    /** Issue or pull request to which the reference was made. */
    target: ReferencedSubject
    /** The HTTP URL for this pull request. */
    url: Scalars["URI"]
    /** Checks if the target will be closed when the source is merged. */
    willCloseTarget: Scalars["Boolean"]
    __typename: 'CrossReferencedEvent'
}


/** Any referencable object */
export type ReferencedSubject=Issue|PullRequest


/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the milestone title associated with the 'demilestoned' event. */
    milestoneTitle: Scalars["String"]
    /** Object referenced by event. */
    subject: MilestoneItem
    __typename: 'DemilestonedEvent'
}


/** Types that can be inside a Milestone. */
export type MilestoneItem=Issue|PullRequest


/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the label associated with the 'labeled' event. */
    label: Label
    /** Identifies the `Labelable` associated with the event. */
    labelable: Labelable
    __typename: 'LabeledEvent'
}


/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Reason that the conversation was locked (optional). */
    lockReason: (LockReason|null)
    /** Object that was locked. */
    lockable: Lockable
    __typename: 'LockedEvent'
}


/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the milestone title associated with the 'milestoned' event. */
    milestoneTitle: Scalars["String"]
    /** Object referenced by event. */
    subject: MilestoneItem
    __typename: 'MilestonedEvent'
}


/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the commit associated with the 'referenced' event. */
    commit: (Commit|null)
    /** Identifies the repository associated with the 'referenced' event. */
    commitRepository: Repository
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Reference originated in a different repository. */
    isCrossRepository: Scalars["Boolean"]
    /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
    isDirectReference: Scalars["Boolean"]
    /** Object referenced by event. */
    subject: ReferencedSubject
    __typename: 'ReferencedEvent'
}


/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the current title of the issue or pull request. */
    currentTitle: Scalars["String"]
    id: Scalars["ID"]
    /** Identifies the previous title of the issue or pull request. */
    previousTitle: Scalars["String"]
    /** Subject that was renamed. */
    subject: RenamedTitleSubject
    __typename: 'RenamedTitleEvent'
}


/** An object which has a renamable title */
export type RenamedTitleSubject=Issue|PullRequest


/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Object that was reopened. */
    closable: Closable
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    __typename: 'ReopenedEvent'
}


/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Object referenced by event. */
    subscribable: Subscribable
    __typename: 'SubscribedEvent'
}


/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The repository this came from */
    fromRepository: (Repository|null)
    id: Scalars["ID"]
    /** Identifies the issue associated with the event. */
    issue: Issue
    __typename: 'TransferredEvent'
}


/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the assignable associated with the event. */
    assignable: Assignable
    /** Identifies the user or mannequin that was unassigned. */
    assignee: (Assignee|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /**
     * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
     * Identifies the subject (user) who was unassigned.
     */
    user: (User|null)
    __typename: 'UnassignedEvent'
}


/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the label associated with the 'unlabeled' event. */
    label: Label
    /** Identifies the `Labelable` associated with the event. */
    labelable: Labelable
    __typename: 'UnlabeledEvent'
}


/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Object that was unlocked. */
    lockable: Lockable
    __typename: 'UnlockedEvent'
}


/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Object referenced by event. */
    subscribable: Subscribable
    __typename: 'UnsubscribedEvent'
}


/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Number of days that the user was blocked for. */
    blockDuration: UserBlockDuration
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** The user who was blocked. */
    subject: (User|null)
    __typename: 'UserBlockedEvent'
}


/** The possible durations that a user can be blocked for. */
export type UserBlockDuration = 'ONE_DAY' | 'ONE_MONTH' | 'ONE_WEEK' | 'PERMANENT' | 'THREE_DAYS'


/** The possible item types found in a timeline. */
export type IssueTimelineItemsItemType = 'ADDED_TO_PROJECT_EVENT' | 'ASSIGNED_EVENT' | 'CLOSED_EVENT' | 'COMMENT_DELETED_EVENT' | 'CONNECTED_EVENT' | 'CONVERTED_NOTE_TO_ISSUE_EVENT' | 'CROSS_REFERENCED_EVENT' | 'DEMILESTONED_EVENT' | 'DISCONNECTED_EVENT' | 'ISSUE_COMMENT' | 'LABELED_EVENT' | 'LOCKED_EVENT' | 'MARKED_AS_DUPLICATE_EVENT' | 'MENTIONED_EVENT' | 'MILESTONED_EVENT' | 'MOVED_COLUMNS_IN_PROJECT_EVENT' | 'PINNED_EVENT' | 'REFERENCED_EVENT' | 'REMOVED_FROM_PROJECT_EVENT' | 'RENAMED_TITLE_EVENT' | 'REOPENED_EVENT' | 'SUBSCRIBED_EVENT' | 'TRANSFERRED_EVENT' | 'UNASSIGNED_EVENT' | 'UNLABELED_EVENT' | 'UNLOCKED_EVENT' | 'UNMARKED_AS_DUPLICATE_EVENT' | 'UNPINNED_EVENT' | 'UNSUBSCRIBED_EVENT' | 'USER_BLOCKED_EVENT'


/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnection{
    /** A list of edges. */
    edges: ((IssueTimelineItemsEdge|null)[]|null)
    /** Identifies the count of items after applying `before` and `after` filters. */
    filteredCount: Scalars["Int"]
    /** A list of nodes. */
    nodes: ((IssueTimelineItems|null)[]|null)
    /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
    pageCount: Scalars["Int"]
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** Identifies the date and time when the timeline was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'IssueTimelineItemsConnection'
}


/** An edge in a connection. */
export interface IssueTimelineItemsEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (IssueTimelineItems|null)
    __typename: 'IssueTimelineItemsEdge'
}


/** An item in an issue timeline */
export type IssueTimelineItems=AddedToProjectEvent|AssignedEvent|ClosedEvent|CommentDeletedEvent|ConnectedEvent|ConvertedNoteToIssueEvent|CrossReferencedEvent|DemilestonedEvent|DisconnectedEvent|IssueComment|LabeledEvent|LockedEvent|MarkedAsDuplicateEvent|MentionedEvent|MilestonedEvent|MovedColumnsInProjectEvent|PinnedEvent|ReferencedEvent|RemovedFromProjectEvent|RenamedTitleEvent|ReopenedEvent|SubscribedEvent|TransferredEvent|UnassignedEvent|UnlabeledEvent|UnlockedEvent|UnmarkedAsDuplicateEvent|UnpinnedEvent|UnsubscribedEvent|UserBlockedEvent


/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Project referenced by event. */
    project: (Project|null)
    /** Project card referenced by this project event. */
    projectCard: (ProjectCard|null)
    /** Column name referenced by this project event. */
    projectColumnName: Scalars["String"]
    __typename: 'AddedToProjectEvent'
}


/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    __typename: 'CommentDeletedEvent'
}


/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Reference originated in a different repository. */
    isCrossRepository: Scalars["Boolean"]
    /** Issue or pull request that made the reference. */
    source: ReferencedSubject
    /** Issue or pull request which was connected. */
    subject: ReferencedSubject
    __typename: 'ConnectedEvent'
}


/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Project referenced by event. */
    project: (Project|null)
    /** Project card referenced by this project event. */
    projectCard: (ProjectCard|null)
    /** Column name referenced by this project event. */
    projectColumnName: Scalars["String"]
    __typename: 'ConvertedNoteToIssueEvent'
}


/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Reference originated in a different repository. */
    isCrossRepository: Scalars["Boolean"]
    /** Issue or pull request from which the issue was disconnected. */
    source: ReferencedSubject
    /** Issue or pull request which was disconnected. */
    subject: ReferencedSubject
    __typename: 'DisconnectedEvent'
}


/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    __typename: 'MarkedAsDuplicateEvent'
}


/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    __typename: 'MentionedEvent'
}


/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Column name the issue or pull request was moved from. */
    previousProjectColumnName: Scalars["String"]
    /** Project referenced by event. */
    project: (Project|null)
    /** Project card referenced by this project event. */
    projectCard: (ProjectCard|null)
    /** Column name the issue or pull request was moved to. */
    projectColumnName: Scalars["String"]
    __typename: 'MovedColumnsInProjectEvent'
}


/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the issue associated with the event. */
    issue: Issue
    __typename: 'PinnedEvent'
}


/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Project referenced by event. */
    project: (Project|null)
    /** Column name referenced by this project event. */
    projectColumnName: Scalars["String"]
    __typename: 'RemovedFromProjectEvent'
}


/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    __typename: 'UnmarkedAsDuplicateEvent'
}


/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the issue associated with the event. */
    issue: Issue
    __typename: 'UnpinnedEvent'
}


/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnection{
    /** A list of edges. */
    edges: ((PullRequestCommitEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestCommit|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestCommitConnection'
}


/** An edge in a connection. */
export interface PullRequestCommitEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestCommit|null)
    __typename: 'PullRequestCommitEdge'
}


/** Represents a Git commit part of a pull request. */
export interface PullRequestCommit extends Node,UniformResourceLocatable{
    /** The Git commit object */
    commit: Commit
    id: Scalars["ID"]
    /** The pull request this commit belongs to */
    pullRequest: PullRequest
    /** The HTTP path for this pull request commit */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this pull request commit */
    url: Scalars["URI"]
    __typename: 'PullRequestCommit'
}


/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnection{
    /** A list of edges. */
    edges: ((PullRequestChangedFileEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestChangedFile|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestChangedFileConnection'
}


/** An edge in a connection. */
export interface PullRequestChangedFileEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestChangedFile|null)
    __typename: 'PullRequestChangedFileEdge'
}


/** A file changed in a pull request. */
export interface PullRequestChangedFile{
    /** The number of additions to the file. */
    additions: Scalars["Int"]
    /** The number of deletions to the file. */
    deletions: Scalars["Int"]
    /** The path of the file. */
    path: Scalars["String"]
    __typename: 'PullRequestChangedFile'
}


/** Detailed status information about a pull request merge. */
export type MergeStateStatus = 'BEHIND' | 'BLOCKED' | 'CLEAN' | 'DIRTY' | 'DRAFT' | 'HAS_HOOKS' | 'UNKNOWN' | 'UNSTABLE'


/** Whether or not a PullRequest can be merged. */
export type MergeableState = 'CONFLICTING' | 'MERGEABLE' | 'UNKNOWN'


/** The review status of a pull request. */
export type PullRequestReviewDecision = 'APPROVED' | 'CHANGES_REQUESTED' | 'REVIEW_REQUIRED'


/** The connection type for ReviewRequest. */
export interface ReviewRequestConnection{
    /** A list of edges. */
    edges: ((ReviewRequestEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ReviewRequest|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ReviewRequestConnection'
}


/** An edge in a connection. */
export interface ReviewRequestEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ReviewRequest|null)
    __typename: 'ReviewRequestEdge'
}


/** A request for a user to review a pull request. */
export interface ReviewRequest extends Node{
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** Identifies the pull request associated with this review request. */
    pullRequest: PullRequest
    /** The reviewer that is requested. */
    requestedReviewer: (RequestedReviewer|null)
    __typename: 'ReviewRequest'
}


/** Types that can be requested reviewers. */
export type RequestedReviewer=Mannequin|Team|User


/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnection{
    /** A list of edges. */
    edges: ((PullRequestReviewThreadEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestReviewThread|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestReviewThreadConnection'
}


/** An edge in a connection. */
export interface PullRequestReviewThreadEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestReviewThread|null)
    __typename: 'PullRequestReviewThreadEdge'
}


/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThread extends Node{
    /** A list of pull request comments associated with the thread. */
    comments: PullRequestReviewCommentConnection
    /** The side of the diff on which this thread was placed. */
    diffSide: DiffSide
    id: Scalars["ID"]
    /** Whether this thread has been resolved */
    isResolved: Scalars["Boolean"]
    /** The line in the file to which this thread refers */
    line: (Scalars["Int"]|null)
    /** The original line in the file to which this thread refers. */
    originalLine: (Scalars["Int"]|null)
    /** The original start line in the file to which this thread refers (multi-line only). */
    originalStartLine: (Scalars["Int"]|null)
    /** Identifies the pull request associated with this thread. */
    pullRequest: PullRequest
    /** Identifies the repository associated with this thread. */
    repository: Repository
    /** The user who resolved this thread */
    resolvedBy: (User|null)
    /** The side of the diff that the first line of the thread starts on (multi-line only) */
    startDiffSide: (DiffSide|null)
    /** The start line in the file to which this thread refers (multi-line only) */
    startLine: (Scalars["Int"]|null)
    /** Whether or not the viewer can resolve this thread */
    viewerCanResolve: Scalars["Boolean"]
    /** Whether or not the viewer can unresolve this thread */
    viewerCanUnresolve: Scalars["Boolean"]
    __typename: 'PullRequestReviewThread'
}


/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnection{
    /** A list of edges. */
    edges: ((PullRequestReviewCommentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestReviewComment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestReviewCommentConnection'
}


/** An edge in a connection. */
export interface PullRequestReviewCommentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestReviewComment|null)
    __typename: 'PullRequestReviewCommentEdge'
}


/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewComment extends Comment,Deletable,Minimizable,Node,Reactable,RepositoryNode,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** The comment body of this review comment. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The comment body of this review comment rendered as plain text. */
    bodyText: Scalars["String"]
    /** Identifies the commit associated with the comment. */
    commit: (Commit|null)
    /** Identifies when the comment was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The diff hunk to which the comment applies. */
    diffHunk: Scalars["String"]
    /** Identifies when the comment was created in a draft state. */
    draftedAt: Scalars["DateTime"]
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Returns why the comment was minimized. */
    minimizedReason: (Scalars["String"]|null)
    /** Identifies the original commit associated with the comment. */
    originalCommit: (Commit|null)
    /** The original line index in the diff to which the comment applies. */
    originalPosition: Scalars["Int"]
    /** Identifies when the comment body is outdated */
    outdated: Scalars["Boolean"]
    /** The path to which the comment applies. */
    path: Scalars["String"]
    /** The line index in the diff to which the comment applies. */
    position: (Scalars["Int"]|null)
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** The pull request associated with this review comment. */
    pullRequest: PullRequest
    /** The pull request review associated with this review comment. */
    pullRequestReview: (PullRequestReview|null)
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The comment this is a reply to. */
    replyTo: (PullRequestReviewComment|null)
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path permalink for this review comment. */
    resourcePath: Scalars["URI"]
    /** Identifies the state of the comment. */
    state: PullRequestReviewCommentState
    /** Identifies when the comment was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL permalink for this review comment. */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'PullRequestReviewComment'
}


/** A review object for a given pull request. */
export interface PullRequestReview extends Comment,Deletable,Node,Reactable,RepositoryNode,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the subject of the comment. */
    authorAssociation: CommentAuthorAssociation
    /** Identifies the pull request review body. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body of this review rendered as plain text. */
    bodyText: Scalars["String"]
    /** A list of review comments for the current pull request review. */
    comments: PullRequestReviewCommentConnection
    /** Identifies the commit associated with this pull request review. */
    commit: (Commit|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** A list of teams that this review was made on behalf of. */
    onBehalfOf: TeamConnection
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** Identifies the pull request associated with this pull request review. */
    pullRequest: PullRequest
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups: (ReactionGroup[]|null)
    /** A list of Reactions left on the Issue. */
    reactions: ReactionConnection
    /** The repository associated with this node. */
    repository: Repository
    /** The HTTP path permalink for this PullRequestReview. */
    resourcePath: Scalars["URI"]
    /** Identifies the current state of the pull request review. */
    state: PullRequestReviewState
    /** Identifies when the Pull Request Review was submitted */
    submittedAt: (Scalars["DateTime"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL permalink for this PullRequestReview. */
    url: Scalars["URI"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Can user react to this subject */
    viewerCanReact: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'PullRequestReview'
}


/** The possible states of a pull request review. */
export type PullRequestReviewState = 'APPROVED' | 'CHANGES_REQUESTED' | 'COMMENTED' | 'DISMISSED' | 'PENDING'


/** The possible states of a pull request review comment. */
export type PullRequestReviewCommentState = 'PENDING' | 'SUBMITTED'


/** The possible sides of a diff. */
export type DiffSide = 'LEFT' | 'RIGHT'


/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnection{
    /** A list of edges. */
    edges: ((PullRequestReviewEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestReview|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestReviewConnection'
}


/** An edge in a connection. */
export interface PullRequestReviewEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestReview|null)
    __typename: 'PullRequestReviewEdge'
}


/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewer{
    /** Is this suggestion based on past commits? */
    isAuthor: Scalars["Boolean"]
    /** Is this suggestion based on past review comments? */
    isCommenter: Scalars["Boolean"]
    /** Identifies the user suggested to review the pull request. */
    reviewer: User
    __typename: 'SuggestedReviewer'
}


/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnection{
    /** A list of edges. */
    edges: ((PullRequestTimelineItemEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PullRequestTimelineItem|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PullRequestTimelineConnection'
}


/** An edge in a connection. */
export interface PullRequestTimelineItemEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestTimelineItem|null)
    __typename: 'PullRequestTimelineItemEdge'
}


/** An item in an pull request timeline */
export type PullRequestTimelineItem=AssignedEvent|BaseRefForcePushedEvent|ClosedEvent|Commit|CommitCommentThread|CrossReferencedEvent|DemilestonedEvent|DeployedEvent|DeploymentEnvironmentChangedEvent|HeadRefDeletedEvent|HeadRefForcePushedEvent|HeadRefRestoredEvent|IssueComment|LabeledEvent|LockedEvent|MergedEvent|MilestonedEvent|PullRequestReview|PullRequestReviewComment|PullRequestReviewThread|ReferencedEvent|RenamedTitleEvent|ReopenedEvent|ReviewDismissedEvent|ReviewRequestRemovedEvent|ReviewRequestedEvent|SubscribedEvent|UnassignedEvent|UnlabeledEvent|UnlockedEvent|UnsubscribedEvent|UserBlockedEvent


/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
    afterCommit: (Commit|null)
    /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
    beforeCommit: (Commit|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
    ref: (Ref|null)
    __typename: 'BaseRefForcePushedEvent'
}


/** A thread of comments on a commit. */
export interface CommitCommentThread extends Node,RepositoryNode{
    /** The comments that exist in this thread. */
    comments: CommitCommentConnection
    /** The commit the comments were made on. */
    commit: (Commit|null)
    id: Scalars["ID"]
    /** The file the comments were made on. */
    path: (Scalars["String"]|null)
    /** The position in the diff for the commit that the comment was made on. */
    position: (Scalars["Int"]|null)
    /** The repository associated with this node. */
    repository: Repository
    __typename: 'CommitCommentThread'
}


/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The deployment associated with the 'deployed' event. */
    deployment: Deployment
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** The ref associated with the 'deployed' event. */
    ref: (Ref|null)
    __typename: 'DeployedEvent'
}


/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The deployment status that updated the deployment environment. */
    deploymentStatus: DeploymentStatus
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    __typename: 'DeploymentEnvironmentChangedEvent'
}


/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the Ref associated with the `head_ref_deleted` event. */
    headRef: (Ref|null)
    /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
    headRefName: Scalars["String"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    __typename: 'HeadRefDeletedEvent'
}


/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
    afterCommit: (Commit|null)
    /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
    beforeCommit: (Commit|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
    ref: (Ref|null)
    __typename: 'HeadRefForcePushedEvent'
}


/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    __typename: 'HeadRefRestoredEvent'
}


/** Represents a 'merged' event on a given pull request. */
export interface MergedEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the commit associated with the `merge` event. */
    commit: (Commit|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Identifies the Ref associated with the `merge` event. */
    mergeRef: (Ref|null)
    /** Identifies the name of the Ref associated with the `merge` event. */
    mergeRefName: Scalars["String"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** The HTTP path for this merged event. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this merged event. */
    url: Scalars["URI"]
    __typename: 'MergedEvent'
}


/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** Identifies the optional message associated with the 'review_dismissed' event. */
    dismissalMessage: (Scalars["String"]|null)
    /** Identifies the optional message associated with the event, rendered to HTML. */
    dismissalMessageHTML: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** Identifies the previous state of the review with the 'review_dismissed' event. */
    previousReviewState: PullRequestReviewState
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** Identifies the commit which caused the review to become stale. */
    pullRequestCommit: (PullRequestCommit|null)
    /** The HTTP path for this review dismissed event. */
    resourcePath: Scalars["URI"]
    /** Identifies the review associated with the 'review_dismissed' event. */
    review: (PullRequestReview|null)
    /** The HTTP URL for this review dismissed event. */
    url: Scalars["URI"]
    __typename: 'ReviewDismissedEvent'
}


/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** Identifies the reviewer whose review request was removed. */
    requestedReviewer: (RequestedReviewer|null)
    __typename: 'ReviewRequestRemovedEvent'
}


/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** Identifies the reviewer whose review was requested. */
    requestedReviewer: (RequestedReviewer|null)
    __typename: 'ReviewRequestedEvent'
}


/** The possible item types found in a timeline. */
export type PullRequestTimelineItemsItemType = 'ADDED_TO_PROJECT_EVENT' | 'ASSIGNED_EVENT' | 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT' | 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT' | 'BASE_REF_CHANGED_EVENT' | 'BASE_REF_FORCE_PUSHED_EVENT' | 'CLOSED_EVENT' | 'COMMENT_DELETED_EVENT' | 'CONNECTED_EVENT' | 'CONVERTED_NOTE_TO_ISSUE_EVENT' | 'CONVERT_TO_DRAFT_EVENT' | 'CROSS_REFERENCED_EVENT' | 'DEMILESTONED_EVENT' | 'DEPLOYED_EVENT' | 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT' | 'DISCONNECTED_EVENT' | 'HEAD_REF_DELETED_EVENT' | 'HEAD_REF_FORCE_PUSHED_EVENT' | 'HEAD_REF_RESTORED_EVENT' | 'ISSUE_COMMENT' | 'LABELED_EVENT' | 'LOCKED_EVENT' | 'MARKED_AS_DUPLICATE_EVENT' | 'MENTIONED_EVENT' | 'MERGED_EVENT' | 'MILESTONED_EVENT' | 'MOVED_COLUMNS_IN_PROJECT_EVENT' | 'PINNED_EVENT' | 'PULL_REQUEST_COMMIT' | 'PULL_REQUEST_COMMIT_COMMENT_THREAD' | 'PULL_REQUEST_REVIEW' | 'PULL_REQUEST_REVIEW_THREAD' | 'PULL_REQUEST_REVISION_MARKER' | 'READY_FOR_REVIEW_EVENT' | 'REFERENCED_EVENT' | 'REMOVED_FROM_PROJECT_EVENT' | 'RENAMED_TITLE_EVENT' | 'REOPENED_EVENT' | 'REVIEW_DISMISSED_EVENT' | 'REVIEW_REQUESTED_EVENT' | 'REVIEW_REQUEST_REMOVED_EVENT' | 'SUBSCRIBED_EVENT' | 'TRANSFERRED_EVENT' | 'UNASSIGNED_EVENT' | 'UNLABELED_EVENT' | 'UNLOCKED_EVENT' | 'UNMARKED_AS_DUPLICATE_EVENT' | 'UNPINNED_EVENT' | 'UNSUBSCRIBED_EVENT' | 'USER_BLOCKED_EVENT'


/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnection{
    /** A list of edges. */
    edges: ((PullRequestTimelineItemsEdge|null)[]|null)
    /** Identifies the count of items after applying `before` and `after` filters. */
    filteredCount: Scalars["Int"]
    /** A list of nodes. */
    nodes: ((PullRequestTimelineItems|null)[]|null)
    /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
    pageCount: Scalars["Int"]
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** Identifies the date and time when the timeline was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'PullRequestTimelineItemsConnection'
}


/** An edge in a connection. */
export interface PullRequestTimelineItemsEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PullRequestTimelineItems|null)
    __typename: 'PullRequestTimelineItemsEdge'
}


/** An item in a pull request timeline */
export type PullRequestTimelineItems=AddedToProjectEvent|AssignedEvent|AutomaticBaseChangeFailedEvent|AutomaticBaseChangeSucceededEvent|BaseRefChangedEvent|BaseRefForcePushedEvent|ClosedEvent|CommentDeletedEvent|ConnectedEvent|ConvertToDraftEvent|ConvertedNoteToIssueEvent|CrossReferencedEvent|DemilestonedEvent|DeployedEvent|DeploymentEnvironmentChangedEvent|DisconnectedEvent|HeadRefDeletedEvent|HeadRefForcePushedEvent|HeadRefRestoredEvent|IssueComment|LabeledEvent|LockedEvent|MarkedAsDuplicateEvent|MentionedEvent|MergedEvent|MilestonedEvent|MovedColumnsInProjectEvent|PinnedEvent|PullRequestCommit|PullRequestCommitCommentThread|PullRequestReview|PullRequestReviewThread|PullRequestRevisionMarker|ReadyForReviewEvent|ReferencedEvent|RemovedFromProjectEvent|RenamedTitleEvent|ReopenedEvent|ReviewDismissedEvent|ReviewRequestRemovedEvent|ReviewRequestedEvent|SubscribedEvent|TransferredEvent|UnassignedEvent|UnlabeledEvent|UnlockedEvent|UnmarkedAsDuplicateEvent|UnpinnedEvent|UnsubscribedEvent|UserBlockedEvent


/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** The new base for this PR */
    newBase: Scalars["String"]
    /** The old base for this PR */
    oldBase: Scalars["String"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    __typename: 'AutomaticBaseChangeFailedEvent'
}


/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** The new base for this PR */
    newBase: Scalars["String"]
    /** The old base for this PR */
    oldBase: Scalars["String"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    __typename: 'AutomaticBaseChangeSucceededEvent'
}


/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEvent extends Node{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    __typename: 'BaseRefChangedEvent'
}


/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** The HTTP path for this convert to draft event. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this convert to draft event. */
    url: Scalars["URI"]
    __typename: 'ConvertToDraftEvent'
}


/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThread extends Node,RepositoryNode{
    /** The comments that exist in this thread. */
    comments: CommitCommentConnection
    /** The commit the comments were made on. */
    commit: Commit
    id: Scalars["ID"]
    /** The file the comments were made on. */
    path: (Scalars["String"]|null)
    /** The position in the diff for the commit that the comment was made on. */
    position: (Scalars["Int"]|null)
    /** The pull request this commit comment thread belongs to */
    pullRequest: PullRequest
    /** The repository associated with this node. */
    repository: Repository
    __typename: 'PullRequestCommitCommentThread'
}


/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarker{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The last commit the viewer has seen. */
    lastSeenCommit: Commit
    /** The pull request to which the marker belongs. */
    pullRequest: PullRequest
    __typename: 'PullRequestRevisionMarker'
}


/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEvent extends Node,UniformResourceLocatable{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** PullRequest referenced by event. */
    pullRequest: PullRequest
    /** The HTTP path for this ready for review event. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this ready for review event. */
    url: Scalars["URI"]
    __typename: 'ReadyForReviewEvent'
}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatistics{
    /** Number of times the package was downloaded since it was created. */
    downloadsTotalCount: Scalars["Int"]
    __typename: 'PackageVersionStatistics'
}


/** The possible types of a package. */
export type PackageType = 'DEBIAN' | 'DOCKER' | 'MAVEN' | 'NPM' | 'NUGET' | 'PYPI' | 'RUBYGEMS'


/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatistics{
    /** Number of times the package was downloaded since it was created. */
    downloadsTotalCount: Scalars["Int"]
    __typename: 'PackageStatistics'
}


/** Properties by which package version connections can be ordered. */
export type PackageVersionOrderField = 'CREATED_AT'


/** The connection type for PackageVersion. */
export interface PackageVersionConnection{
    /** A list of edges. */
    edges: ((PackageVersionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PackageVersion|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PackageVersionConnection'
}


/** An edge in a connection. */
export interface PackageVersionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PackageVersion|null)
    __typename: 'PackageVersionEdge'
}


/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwner{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems: Scalars["Boolean"]
    /** The public profile email. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase: ProfileItemShowcase
    /** The public profile location. */
    location: (Scalars["String"]|null)
    /** The username used to login. */
    login: Scalars["String"]
    /** The public profile name. */
    name: (Scalars["String"]|null)
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems: PinnableItemConnection
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems: PinnableItemConnection
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining: Scalars["Int"]
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems: Scalars["Boolean"]
    /** The public profile website URL. */
    websiteUrl: (Scalars["URI"]|null)
    __typename: 'Organization'|'User'
}


/** Represents items that can be pinned to a profile page or dashboard. */
export type PinnableItemType = 'GIST' | 'ISSUE' | 'ORGANIZATION' | 'PROJECT' | 'PULL_REQUEST' | 'REPOSITORY' | 'TEAM' | 'USER'


/**
 * A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own.
 */
export interface ProfileItemShowcase{
    /** Whether or not the owner has pinned any repositories or gists. */
    hasPinnedItems: Scalars["Boolean"]
    /**
     * The repositories and gists in the showcase. If the profile owner has any
     * pinned items, those will be returned. Otherwise, the profile owner's popular
     * repositories will be returned.
     */
    items: PinnableItemConnection
    __typename: 'ProfileItemShowcase'
}


/** The connection type for PinnableItem. */
export interface PinnableItemConnection{
    /** A list of edges. */
    edges: ((PinnableItemEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PinnableItem|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PinnableItemConnection'
}


/** An edge in a connection. */
export interface PinnableItemEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PinnableItem|null)
    __typename: 'PinnableItemEdge'
}


/** Types that can be pinned to a profile page. */
export type PinnableItem=Gist|Repository


/** A Gist. */
export interface Gist extends Node,Starrable,UniformResourceLocatable{
    /** A list of comments associated with the gist */
    comments: GistCommentConnection
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The gist description. */
    description: (Scalars["String"]|null)
    /** The files in this gist. */
    files: ((GistFile|null)[]|null)
    /** A list of forks associated with the gist */
    forks: GistConnection
    id: Scalars["ID"]
    /** Identifies if the gist is a fork. */
    isFork: Scalars["Boolean"]
    /** Whether the gist is public or not. */
    isPublic: Scalars["Boolean"]
    /** The gist name. */
    name: Scalars["String"]
    /** The gist owner. */
    owner: (RepositoryOwner|null)
    /** Identifies when the gist was last pushed to. */
    pushedAt: (Scalars["DateTime"]|null)
    /** The HTML path to this resource. */
    resourcePath: Scalars["URI"]
    /** A list of users who have starred this starrable. */
    stargazers: StargazerConnection
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The HTTP URL for this Gist. */
    url: Scalars["URI"]
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred: Scalars["Boolean"]
    __typename: 'Gist'
}


/** The connection type for GistComment. */
export interface GistCommentConnection{
    /** A list of edges. */
    edges: ((GistCommentEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((GistComment|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'GistCommentConnection'
}


/** An edge in a connection. */
export interface GistCommentEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (GistComment|null)
    __typename: 'GistCommentEdge'
}


/** Represents a comment on an Gist. */
export interface GistComment extends Comment,Deletable,Minimizable,Node,Updatable,UpdatableComment{
    /** The actor who authored the comment. */
    author: (Actor|null)
    /** Author's association with the gist. */
    authorAssociation: CommentAuthorAssociation
    /** Identifies the comment body. */
    body: Scalars["String"]
    /** The body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** The body rendered to text. */
    bodyText: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** Check if this comment was created via an email reply. */
    createdViaEmail: Scalars["Boolean"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    /** The actor who edited the comment. */
    editor: (Actor|null)
    /** The associated gist. */
    gist: Gist
    id: Scalars["ID"]
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit: Scalars["Boolean"]
    /** Returns whether or not a comment has been minimized. */
    isMinimized: Scalars["Boolean"]
    /** The moment the editor made the last edit */
    lastEditedAt: (Scalars["DateTime"]|null)
    /** Returns why the comment was minimized. */
    minimizedReason: (Scalars["String"]|null)
    /** Identifies when the comment was published at. */
    publishedAt: (Scalars["DateTime"]|null)
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** A list of edits to this content. */
    userContentEdits: (UserContentEditConnection|null)
    /** Check if the current viewer can delete this object. */
    viewerCanDelete: Scalars["Boolean"]
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize: Scalars["Boolean"]
    /** Check if the current viewer can update this object. */
    viewerCanUpdate: Scalars["Boolean"]
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons: CommentCannotUpdateReason[]
    /** Did the viewer author this comment. */
    viewerDidAuthor: Scalars["Boolean"]
    __typename: 'GistComment'
}


/** A file in a gist. */
export interface GistFile{
    /** The file name encoded to remove characters that are invalid in URL paths. */
    encodedName: (Scalars["String"]|null)
    /** The gist file encoding. */
    encoding: (Scalars["String"]|null)
    /** The file extension from the file name. */
    extension: (Scalars["String"]|null)
    /** Indicates if this file is an image. */
    isImage: Scalars["Boolean"]
    /** Whether the file's contents were truncated. */
    isTruncated: Scalars["Boolean"]
    /** The programming language this file is written in. */
    language: (Language|null)
    /** The gist file name. */
    name: (Scalars["String"]|null)
    /** The gist file size in bytes. */
    size: (Scalars["Int"]|null)
    /** UTF8 text data or null if the file is binary */
    text: (Scalars["String"]|null)
    __typename: 'GistFile'
}


/** Properties by which gist connections can be ordered. */
export type GistOrderField = 'CREATED_AT' | 'PUSHED_AT' | 'UPDATED_AT'


/** The connection type for Gist. */
export interface GistConnection{
    /** A list of edges. */
    edges: ((GistEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Gist|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'GistConnection'
}


/** An edge in a connection. */
export interface GistEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Gist|null)
    __typename: 'GistEdge'
}


/** Entities that can be sponsored through GitHub Sponsors */
export interface Sponsorable{
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing: (SponsorsListing|null)
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer: SponsorshipConnection
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor: SponsorshipConnection
    __typename: 'Organization'|'User'
}


/** A GitHub Sponsors listing. */
export interface SponsorsListing extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The full description of the listing. */
    fullDescription: Scalars["String"]
    /** The full description of the listing rendered to HTML. */
    fullDescriptionHTML: Scalars["HTML"]
    id: Scalars["ID"]
    /** The listing's full name. */
    name: Scalars["String"]
    /** The short description of the listing. */
    shortDescription: Scalars["String"]
    /** The short name of the listing. */
    slug: Scalars["String"]
    /** The published tiers for this GitHub Sponsors listing. */
    tiers: (SponsorsTierConnection|null)
    __typename: 'SponsorsListing'
}


/** Properties by which Sponsors tiers connections can be ordered. */
export type SponsorsTierOrderField = 'CREATED_AT' | 'MONTHLY_PRICE_IN_CENTS'


/** The connection type for SponsorsTier. */
export interface SponsorsTierConnection{
    /** A list of edges. */
    edges: ((SponsorsTierEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((SponsorsTier|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SponsorsTierConnection'
}


/** An edge in a connection. */
export interface SponsorsTierEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (SponsorsTier|null)
    __typename: 'SponsorsTierEdge'
}


/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTier extends Node{
    /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
    adminInfo: (SponsorsTierAdminInfo|null)
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The description of the tier. */
    description: Scalars["String"]
    /** The tier description rendered to HTML */
    descriptionHTML: Scalars["HTML"]
    id: Scalars["ID"]
    /** How much this tier costs per month in cents. */
    monthlyPriceInCents: Scalars["Int"]
    /** How much this tier costs per month in dollars. */
    monthlyPriceInDollars: Scalars["Int"]
    /** The name of the tier. */
    name: Scalars["String"]
    /** The sponsors listing that this tier belongs to. */
    sponsorsListing: SponsorsListing
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'SponsorsTier'
}


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfo{
    /** The sponsorships associated with this tier. */
    sponsorships: SponsorshipConnection
    __typename: 'SponsorsTierAdminInfo'
}


/** Properties by which sponsorship connections can be ordered. */
export type SponsorshipOrderField = 'CREATED_AT'


/** The connection type for Sponsorship. */
export interface SponsorshipConnection{
    /** A list of edges. */
    edges: ((SponsorshipEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Sponsorship|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SponsorshipConnection'
}


/** An edge in a connection. */
export interface SponsorshipEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Sponsorship|null)
    __typename: 'SponsorshipEdge'
}


/** A sponsorship relationship between a sponsor and a maintainer */
export interface Sponsorship extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /**
     * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
     * The entity that is being sponsored
     */
    maintainer: User
    /** The privacy level for this sponsorship. */
    privacyLevel: SponsorshipPrivacy
    /**
     * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
     * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
     */
    sponsor: (User|null)
    /** The user or organization that is sponsoring. Returns null if the sponsorship is private. */
    sponsorEntity: (Sponsor|null)
    /** The entity that is being sponsored */
    sponsorable: Sponsorable
    /** The associated sponsorship tier */
    tier: (SponsorsTier|null)
    __typename: 'Sponsorship'
}


/** The privacy of a sponsorship */
export type SponsorshipPrivacy = 'PRIVATE' | 'PUBLIC'


/** Entites that can sponsor others via GitHub Sponsors */
export type Sponsor=Organization|User


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollection{
    /** Commit contributions made by the user, grouped by repository. */
    commitContributionsByRepository: CommitContributionsByRepository[]
    /** A calendar of this user's contributions on GitHub. */
    contributionCalendar: ContributionCalendar
    /** The years the user has been making contributions with the most recent year first. */
    contributionYears: Scalars["Int"][]
    /** Determine if this collection's time span ends in the current month. */
    doesEndInCurrentMonth: Scalars["Boolean"]
    /**
     * The date of the first restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    earliestRestrictedContributionDate: (Scalars["Date"]|null)
    /** The ending date and time of this collection. */
    endedAt: Scalars["DateTime"]
    /**
     * The first issue the user opened on GitHub. This will be null if that issue was
     * opened outside the collection's time range and ignoreTimeRange is false. If
     * the issue is not visible but the user has opted to show private contributions,
     * a RestrictedContribution will be returned.
     */
    firstIssueContribution: (CreatedIssueOrRestrictedContribution|null)
    /**
     * The first pull request the user opened on GitHub. This will be null if that
     * pull request was opened outside the collection's time range and
     * ignoreTimeRange is not true. If the pull request is not visible but the user
     * has opted to show private contributions, a RestrictedContribution will be returned.
     */
    firstPullRequestContribution: (CreatedPullRequestOrRestrictedContribution|null)
    /**
     * The first repository the user created on GitHub. This will be null if that
     * first repository was created outside the collection's time range and
     * ignoreTimeRange is false. If the repository is not visible, then a
     * RestrictedContribution is returned.
     */
    firstRepositoryContribution: (CreatedRepositoryOrRestrictedContribution|null)
    /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
    hasActivityInThePast: Scalars["Boolean"]
    /** Determine if there are any contributions in this collection. */
    hasAnyContributions: Scalars["Boolean"]
    /**
     * Determine if the user made any contributions in this time frame whose details
     * are not visible because they were made in a private repository. Can only be
     * true if the user enabled private contribution counts.
     */
    hasAnyRestrictedContributions: Scalars["Boolean"]
    /** Whether or not the collector's time span is all within the same day. */
    isSingleDay: Scalars["Boolean"]
    /** A list of issues the user opened. */
    issueContributions: CreatedIssueContributionConnection
    /** Issue contributions made by the user, grouped by repository. */
    issueContributionsByRepository: IssueContributionsByRepository[]
    /**
     * When the user signed up for GitHub. This will be null if that sign up date
     * falls outside the collection's time range and ignoreTimeRange is false.
     */
    joinedGitHubContribution: (JoinedGitHubContribution|null)
    /**
     * The date of the most recent restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    latestRestrictedContributionDate: (Scalars["Date"]|null)
    /**
     * When this collection's time range does not include any activity from the user, use this
     * to get a different collection from an earlier time range that does have activity.
     */
    mostRecentCollectionWithActivity: (ContributionsCollection|null)
    /**
     * Returns a different contributions collection from an earlier time range than this one
     * that does not have any contributions.
     */
    mostRecentCollectionWithoutActivity: (ContributionsCollection|null)
    /**
     * The issue the user opened on GitHub that received the most comments in the specified
     * time frame.
     */
    popularIssueContribution: (CreatedIssueContribution|null)
    /**
     * The pull request the user opened on GitHub that received the most comments in the
     * specified time frame.
     */
    popularPullRequestContribution: (CreatedPullRequestContribution|null)
    /** Pull request contributions made by the user. */
    pullRequestContributions: CreatedPullRequestContributionConnection
    /** Pull request contributions made by the user, grouped by repository. */
    pullRequestContributionsByRepository: PullRequestContributionsByRepository[]
    /** Pull request review contributions made by the user. */
    pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection
    /** Pull request review contributions made by the user, grouped by repository. */
    pullRequestReviewContributionsByRepository: PullRequestReviewContributionsByRepository[]
    /** A list of repositories owned by the user that the user created in this time range. */
    repositoryContributions: CreatedRepositoryContributionConnection
    /**
     * A count of contributions made by the user that the viewer cannot access. Only
     * non-zero when the user has chosen to share their private contribution counts.
     */
    restrictedContributionsCount: Scalars["Int"]
    /** The beginning date and time of this collection. */
    startedAt: Scalars["DateTime"]
    /** How many commits were made by the user in this time span. */
    totalCommitContributions: Scalars["Int"]
    /** How many issues the user opened. */
    totalIssueContributions: Scalars["Int"]
    /** How many pull requests the user opened. */
    totalPullRequestContributions: Scalars["Int"]
    /** How many pull request reviews the user left. */
    totalPullRequestReviewContributions: Scalars["Int"]
    /** How many different repositories the user committed to. */
    totalRepositoriesWithContributedCommits: Scalars["Int"]
    /** How many different repositories the user opened issues in. */
    totalRepositoriesWithContributedIssues: Scalars["Int"]
    /** How many different repositories the user left pull request reviews in. */
    totalRepositoriesWithContributedPullRequestReviews: Scalars["Int"]
    /** How many different repositories the user opened pull requests in. */
    totalRepositoriesWithContributedPullRequests: Scalars["Int"]
    /** How many repositories the user created. */
    totalRepositoryContributions: Scalars["Int"]
    /** The user who made the contributions in this collection. */
    user: User
    __typename: 'ContributionsCollection'
}


/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepository{
    /** The commit contributions, each representing a day. */
    contributions: CreatedCommitContributionConnection
    /** The repository in which the commits were made. */
    repository: Repository
    /** The HTTP path for the user's commits to the repository in this time range. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for the user's commits to the repository in this time range. */
    url: Scalars["URI"]
    __typename: 'CommitContributionsByRepository'
}


/** Properties by which commit contribution connections can be ordered. */
export type CommitContributionOrderField = 'COMMIT_COUNT' | 'OCCURRED_AT'


/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnection{
    /** A list of edges. */
    edges: ((CreatedCommitContributionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CreatedCommitContribution|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of commits across days and repositories in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CreatedCommitContributionConnection'
}


/** An edge in a connection. */
export interface CreatedCommitContributionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CreatedCommitContribution|null)
    __typename: 'CreatedCommitContributionEdge'
}


/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContribution extends Contribution{
    /** How many commits were made on this day to this repository by the user. */
    commitCount: Scalars["Int"]
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The repository the user made a commit in. */
    repository: Repository
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedCommitContribution'
}


/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedCommitContribution'|'CreatedIssueContribution'|'RestrictedContribution'|'CreatedPullRequestContribution'|'CreatedRepositoryContribution'|'JoinedGitHubContribution'|'CreatedPullRequestReviewContribution'
}


/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendar{
    /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
    colors: Scalars["String"][]
    /** Determine if the color set was chosen because it's currently Halloween. */
    isHalloween: Scalars["Boolean"]
    /** A list of the months of contributions in this calendar. */
    months: ContributionCalendarMonth[]
    /** The count of total contributions in the calendar. */
    totalContributions: Scalars["Int"]
    /** A list of the weeks of contributions in this calendar. */
    weeks: ContributionCalendarWeek[]
    __typename: 'ContributionCalendar'
}


/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonth{
    /** The date of the first day of this month. */
    firstDay: Scalars["Date"]
    /** The name of the month. */
    name: Scalars["String"]
    /** How many weeks started in this month. */
    totalWeeks: Scalars["Int"]
    /** The year the month occurred in. */
    year: Scalars["Int"]
    __typename: 'ContributionCalendarMonth'
}


/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeek{
    /** The days of contributions in this week. */
    contributionDays: ContributionCalendarDay[]
    /** The date of the earliest square in this week. */
    firstDay: Scalars["Date"]
    __typename: 'ContributionCalendarWeek'
}


/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDay{
    /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
    color: Scalars["String"]
    /** How many contributions were made by the user on this day. */
    contributionCount: Scalars["Int"]
    /** The day this square represents. */
    date: Scalars["Date"]
    /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
    weekday: Scalars["Int"]
    __typename: 'ContributionCalendarDay'
}


/** Represents either a issue the viewer can access or a restricted contribution. */
export type CreatedIssueOrRestrictedContribution=CreatedIssueContribution|RestrictedContribution


/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** The issue that was opened. */
    issue: Issue
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedIssueContribution'
}


/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'RestrictedContribution'
}


/** Represents either a pull request the viewer can access or a restricted contribution. */
export type CreatedPullRequestOrRestrictedContribution=CreatedPullRequestContribution|RestrictedContribution


/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The pull request that was opened. */
    pullRequest: PullRequest
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedPullRequestContribution'
}


/** Represents either a repository the viewer can access or a restricted contribution. */
export type CreatedRepositoryOrRestrictedContribution=CreatedRepositoryContribution|RestrictedContribution


/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The repository that was created. */
    repository: Repository
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedRepositoryContribution'
}


/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnection{
    /** A list of edges. */
    edges: ((CreatedIssueContributionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CreatedIssueContribution|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CreatedIssueContributionConnection'
}


/** An edge in a connection. */
export interface CreatedIssueContributionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CreatedIssueContribution|null)
    __typename: 'CreatedIssueContributionEdge'
}


/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepository{
    /** The issue contributions. */
    contributions: CreatedIssueContributionConnection
    /** The repository in which the issues were opened. */
    repository: Repository
    __typename: 'IssueContributionsByRepository'
}


/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'JoinedGitHubContribution'
}


/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnection{
    /** A list of edges. */
    edges: ((CreatedPullRequestContributionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CreatedPullRequestContribution|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CreatedPullRequestContributionConnection'
}


/** An edge in a connection. */
export interface CreatedPullRequestContributionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CreatedPullRequestContribution|null)
    __typename: 'CreatedPullRequestContributionEdge'
}


/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepository{
    /** The pull request contributions. */
    contributions: CreatedPullRequestContributionConnection
    /** The repository in which the pull requests were opened. */
    repository: Repository
    __typename: 'PullRequestContributionsByRepository'
}


/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnection{
    /** A list of edges. */
    edges: ((CreatedPullRequestReviewContributionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CreatedPullRequestReviewContribution|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CreatedPullRequestReviewContributionConnection'
}


/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CreatedPullRequestReviewContribution|null)
    __typename: 'CreatedPullRequestReviewContributionEdge'
}


/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContribution extends Contribution{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted: Scalars["Boolean"]
    /** When this contribution was made. */
    occurredAt: Scalars["DateTime"]
    /** The pull request the user reviewed. */
    pullRequest: PullRequest
    /** The review the user left on the pull request. */
    pullRequestReview: PullRequestReview
    /** The repository containing the pull request that the user reviewed. */
    repository: Repository
    /** The HTTP path for this contribution. */
    resourcePath: Scalars["URI"]
    /** The HTTP URL for this contribution. */
    url: Scalars["URI"]
    /** The user who made this contribution. */
    user: User
    __typename: 'CreatedPullRequestReviewContribution'
}


/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepository{
    /** The pull request review contributions. */
    contributions: CreatedPullRequestReviewContributionConnection
    /** The repository in which the pull request reviews were made. */
    repository: Repository
    __typename: 'PullRequestReviewContributionsByRepository'
}


/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnection{
    /** A list of edges. */
    edges: ((CreatedRepositoryContributionEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((CreatedRepositoryContribution|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'CreatedRepositoryContributionConnection'
}


/** An edge in a connection. */
export interface CreatedRepositoryContributionEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (CreatedRepositoryContribution|null)
    __typename: 'CreatedRepositoryContributionEdge'
}


/** The connection type for User. */
export interface FollowerConnection{
    /** A list of edges. */
    edges: ((UserEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'FollowerConnection'
}


/** The connection type for User. */
export interface FollowingConnection{
    /** A list of edges. */
    edges: ((UserEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'FollowingConnection'
}


/** The privacy of a Gist */
export type GistPrivacy = 'ALL' | 'PUBLIC' | 'SECRET'


/** The connection type for Organization. */
export interface OrganizationConnection{
    /** A list of edges. */
    edges: ((OrganizationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((Organization|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'OrganizationConnection'
}


/** An edge in a connection. */
export interface OrganizationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (Organization|null)
    __typename: 'OrganizationEdge'
}


/** The connection type for PublicKey. */
export interface PublicKeyConnection{
    /** A list of edges. */
    edges: ((PublicKeyEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((PublicKey|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'PublicKeyConnection'
}


/** An edge in a connection. */
export interface PublicKeyEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (PublicKey|null)
    __typename: 'PublicKeyEdge'
}


/** A user's public key. */
export interface PublicKey extends Node{
    /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
    accessedAt: (Scalars["DateTime"]|null)
    /**
     * Identifies the date and time when the key was created. Keys created before
     * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
     */
    createdAt: (Scalars["DateTime"]|null)
    /** The fingerprint for this PublicKey. */
    fingerprint: Scalars["String"]
    id: Scalars["ID"]
    /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
    isReadOnly: (Scalars["Boolean"]|null)
    /** The public key string. */
    key: Scalars["String"]
    /**
     * Identifies the date and time when the key was updated. Keys created before
     * March 5th, 2014 may have inaccurate values. Values will be null for keys not
     * owned by the user.
     */
    updatedAt: (Scalars["DateTime"]|null)
    __typename: 'PublicKey'
}


/** The reason a repository is listed as 'contributed'. */
export type RepositoryContributionType = 'COMMIT' | 'ISSUE' | 'PULL_REQUEST' | 'PULL_REQUEST_REVIEW' | 'REPOSITORY'


/** Properties by which saved reply connections can be ordered. */
export type SavedReplyOrderField = 'UPDATED_AT'


/** The connection type for SavedReply. */
export interface SavedReplyConnection{
    /** A list of edges. */
    edges: ((SavedReplyEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((SavedReply|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SavedReplyConnection'
}


/** An edge in a connection. */
export interface SavedReplyEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (SavedReply|null)
    __typename: 'SavedReplyEdge'
}


/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReply extends Node{
    /** The body of the saved reply. */
    body: Scalars["String"]
    /** The saved reply body rendered to HTML. */
    bodyHTML: Scalars["HTML"]
    /** Identifies the primary key from the database. */
    databaseId: (Scalars["Int"]|null)
    id: Scalars["ID"]
    /** The title of the saved reply. */
    title: Scalars["String"]
    /** The user that saved this reply. */
    user: (Actor|null)
    __typename: 'SavedReply'
}


/** The connection type for Repository. */
export interface StarredRepositoryConnection{
    /** A list of edges. */
    edges: ((StarredRepositoryEdge|null)[]|null)
    /** Is the list of stars for this user truncated? This is true for users that have many stars. */
    isOverLimit: Scalars["Boolean"]
    /** A list of nodes. */
    nodes: ((Repository|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'StarredRepositoryConnection'
}


/** Represents a starred repository. */
export interface StarredRepositoryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    node: Repository
    /** Identifies when the item was starred. */
    starredAt: Scalars["DateTime"]
    __typename: 'StarredRepositoryEdge'
}


/** Properties by which Audit Log connections can be ordered. */
export type AuditLogOrderField = 'CREATED_AT'


/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnection{
    /** A list of edges. */
    edges: ((OrganizationAuditEntryEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((OrganizationAuditEntry|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'OrganizationAuditEntryConnection'
}


/** An edge in a connection. */
export interface OrganizationAuditEntryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (OrganizationAuditEntry|null)
    __typename: 'OrganizationAuditEntryEdge'
}


/** An audit entry in an organization audit log. */
export type OrganizationAuditEntry=MembersCanDeleteReposClearAuditEntry|MembersCanDeleteReposDisableAuditEntry|MembersCanDeleteReposEnableAuditEntry|OauthApplicationCreateAuditEntry|OrgAddBillingManagerAuditEntry|OrgAddMemberAuditEntry|OrgBlockUserAuditEntry|OrgConfigDisableCollaboratorsOnlyAuditEntry|OrgConfigEnableCollaboratorsOnlyAuditEntry|OrgCreateAuditEntry|OrgDisableOauthAppRestrictionsAuditEntry|OrgDisableSamlAuditEntry|OrgDisableTwoFactorRequirementAuditEntry|OrgEnableOauthAppRestrictionsAuditEntry|OrgEnableSamlAuditEntry|OrgEnableTwoFactorRequirementAuditEntry|OrgInviteMemberAuditEntry|OrgInviteToBusinessAuditEntry|OrgOauthAppAccessApprovedAuditEntry|OrgOauthAppAccessDeniedAuditEntry|OrgOauthAppAccessRequestedAuditEntry|OrgRemoveBillingManagerAuditEntry|OrgRemoveMemberAuditEntry|OrgRemoveOutsideCollaboratorAuditEntry|OrgRestoreMemberAuditEntry|OrgUnblockUserAuditEntry|OrgUpdateDefaultRepositoryPermissionAuditEntry|OrgUpdateMemberAuditEntry|OrgUpdateMemberRepositoryCreationPermissionAuditEntry|OrgUpdateMemberRepositoryInvitationPermissionAuditEntry|PrivateRepositoryForkingDisableAuditEntry|PrivateRepositoryForkingEnableAuditEntry|RepoAccessAuditEntry|RepoAddMemberAuditEntry|RepoAddTopicAuditEntry|RepoArchivedAuditEntry|RepoChangeMergeSettingAuditEntry|RepoConfigDisableAnonymousGitAccessAuditEntry|RepoConfigDisableCollaboratorsOnlyAuditEntry|RepoConfigDisableContributorsOnlyAuditEntry|RepoConfigDisableSockpuppetDisallowedAuditEntry|RepoConfigEnableAnonymousGitAccessAuditEntry|RepoConfigEnableCollaboratorsOnlyAuditEntry|RepoConfigEnableContributorsOnlyAuditEntry|RepoConfigEnableSockpuppetDisallowedAuditEntry|RepoConfigLockAnonymousGitAccessAuditEntry|RepoConfigUnlockAnonymousGitAccessAuditEntry|RepoCreateAuditEntry|RepoDestroyAuditEntry|RepoRemoveMemberAuditEntry|RepoRemoveTopicAuditEntry|RepositoryVisibilityChangeDisableAuditEntry|RepositoryVisibilityChangeEnableAuditEntry|TeamAddMemberAuditEntry|TeamAddRepositoryAuditEntry|TeamChangeParentTeamAuditEntry|TeamRemoveMemberAuditEntry|TeamRemoveRepositoryAuditEntry


/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposClearAuditEntry'
}


/** An entry in the audit log. */
export interface AuditEntry{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposClearAuditEntry'|'MembersCanDeleteReposDisableAuditEntry'|'MembersCanDeleteReposEnableAuditEntry'|'OauthApplicationCreateAuditEntry'|'OrgAddBillingManagerAuditEntry'|'OrgAddMemberAuditEntry'|'OrgBlockUserAuditEntry'|'OrgConfigDisableCollaboratorsOnlyAuditEntry'|'OrgConfigEnableCollaboratorsOnlyAuditEntry'|'OrgCreateAuditEntry'|'OrgDisableOauthAppRestrictionsAuditEntry'|'OrgDisableSamlAuditEntry'|'OrgDisableTwoFactorRequirementAuditEntry'|'OrgEnableOauthAppRestrictionsAuditEntry'|'OrgEnableSamlAuditEntry'|'OrgEnableTwoFactorRequirementAuditEntry'|'OrgInviteMemberAuditEntry'|'OrgInviteToBusinessAuditEntry'|'OrgOauthAppAccessApprovedAuditEntry'|'OrgOauthAppAccessDeniedAuditEntry'|'OrgOauthAppAccessRequestedAuditEntry'|'OrgRemoveBillingManagerAuditEntry'|'OrgRemoveMemberAuditEntry'|'OrgRemoveOutsideCollaboratorAuditEntry'|'OrgRestoreMemberAuditEntry'|'OrgUnblockUserAuditEntry'|'OrgUpdateDefaultRepositoryPermissionAuditEntry'|'OrgUpdateMemberAuditEntry'|'OrgUpdateMemberRepositoryCreationPermissionAuditEntry'|'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry'|'PrivateRepositoryForkingDisableAuditEntry'|'PrivateRepositoryForkingEnableAuditEntry'|'RepoAccessAuditEntry'|'RepoAddMemberAuditEntry'|'RepoAddTopicAuditEntry'|'RepoArchivedAuditEntry'|'RepoChangeMergeSettingAuditEntry'|'RepoConfigDisableAnonymousGitAccessAuditEntry'|'RepoConfigDisableCollaboratorsOnlyAuditEntry'|'RepoConfigDisableContributorsOnlyAuditEntry'|'RepoConfigDisableSockpuppetDisallowedAuditEntry'|'RepoConfigEnableAnonymousGitAccessAuditEntry'|'RepoConfigEnableCollaboratorsOnlyAuditEntry'|'RepoConfigEnableContributorsOnlyAuditEntry'|'RepoConfigEnableSockpuppetDisallowedAuditEntry'|'RepoConfigLockAnonymousGitAccessAuditEntry'|'RepoConfigUnlockAnonymousGitAccessAuditEntry'|'RepoCreateAuditEntry'|'RepoDestroyAuditEntry'|'RepoRemoveMemberAuditEntry'|'RepoRemoveTopicAuditEntry'|'RepositoryVisibilityChangeDisableAuditEntry'|'RepositoryVisibilityChangeEnableAuditEntry'|'TeamAddMemberAuditEntry'|'TeamAddRepositoryAuditEntry'|'TeamChangeParentTeamAuditEntry'|'TeamRemoveMemberAuditEntry'|'TeamRemoveRepositoryAuditEntry'
}


/** Types that can initiate an audit log event. */
export type AuditEntryActor=Bot|Organization|User


/** Location information for an actor */
export interface ActorLocation{
    /** City */
    city: (Scalars["String"]|null)
    /** Country name */
    country: (Scalars["String"]|null)
    /** Country code */
    countryCode: (Scalars["String"]|null)
    /** Region name */
    region: (Scalars["String"]|null)
    /** Region or state code */
    regionCode: (Scalars["String"]|null)
    __typename: 'ActorLocation'
}


/** The corresponding operation type for the action */
export type OperationType = 'ACCESS' | 'AUTHENTICATION' | 'CREATE' | 'MODIFY' | 'REMOVE' | 'RESTORE' | 'TRANSFER'


/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryData{
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposClearAuditEntry'|'MembersCanDeleteReposDisableAuditEntry'|'MembersCanDeleteReposEnableAuditEntry'|'OrgInviteToBusinessAuditEntry'|'PrivateRepositoryForkingDisableAuditEntry'|'PrivateRepositoryForkingEnableAuditEntry'|'RepositoryVisibilityChangeDisableAuditEntry'|'RepositoryVisibilityChangeEnableAuditEntry'
}


/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryData{
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposClearAuditEntry'|'MembersCanDeleteReposDisableAuditEntry'|'MembersCanDeleteReposEnableAuditEntry'|'OauthApplicationCreateAuditEntry'|'OrgAddBillingManagerAuditEntry'|'OrgAddMemberAuditEntry'|'OrgBlockUserAuditEntry'|'OrgConfigDisableCollaboratorsOnlyAuditEntry'|'OrgConfigEnableCollaboratorsOnlyAuditEntry'|'OrgCreateAuditEntry'|'OrgDisableOauthAppRestrictionsAuditEntry'|'OrgDisableSamlAuditEntry'|'OrgDisableTwoFactorRequirementAuditEntry'|'OrgEnableOauthAppRestrictionsAuditEntry'|'OrgEnableSamlAuditEntry'|'OrgEnableTwoFactorRequirementAuditEntry'|'OrgInviteMemberAuditEntry'|'OrgInviteToBusinessAuditEntry'|'OrgOauthAppAccessApprovedAuditEntry'|'OrgOauthAppAccessDeniedAuditEntry'|'OrgOauthAppAccessRequestedAuditEntry'|'OrgRemoveBillingManagerAuditEntry'|'OrgRemoveMemberAuditEntry'|'OrgRemoveOutsideCollaboratorAuditEntry'|'OrgRestoreMemberAuditEntry'|'OrgRestoreMemberMembershipOrganizationAuditEntryData'|'OrgUnblockUserAuditEntry'|'OrgUpdateDefaultRepositoryPermissionAuditEntry'|'OrgUpdateMemberAuditEntry'|'OrgUpdateMemberRepositoryCreationPermissionAuditEntry'|'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry'|'PrivateRepositoryForkingDisableAuditEntry'|'PrivateRepositoryForkingEnableAuditEntry'|'RepoAccessAuditEntry'|'RepoAddMemberAuditEntry'|'RepoAddTopicAuditEntry'|'RepoArchivedAuditEntry'|'RepoChangeMergeSettingAuditEntry'|'RepoConfigDisableAnonymousGitAccessAuditEntry'|'RepoConfigDisableCollaboratorsOnlyAuditEntry'|'RepoConfigDisableContributorsOnlyAuditEntry'|'RepoConfigDisableSockpuppetDisallowedAuditEntry'|'RepoConfigEnableAnonymousGitAccessAuditEntry'|'RepoConfigEnableCollaboratorsOnlyAuditEntry'|'RepoConfigEnableContributorsOnlyAuditEntry'|'RepoConfigEnableSockpuppetDisallowedAuditEntry'|'RepoConfigLockAnonymousGitAccessAuditEntry'|'RepoConfigUnlockAnonymousGitAccessAuditEntry'|'RepoCreateAuditEntry'|'RepoDestroyAuditEntry'|'RepoRemoveMemberAuditEntry'|'RepoRemoveTopicAuditEntry'|'RepositoryVisibilityChangeDisableAuditEntry'|'RepositoryVisibilityChangeEnableAuditEntry'|'TeamAddMemberAuditEntry'|'TeamAddRepositoryAuditEntry'|'TeamChangeParentTeamAuditEntry'|'TeamRemoveMemberAuditEntry'|'TeamRemoveRepositoryAuditEntry'
}


/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposDisableAuditEntry'
}


/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'MembersCanDeleteReposEnableAuditEntry'
}


/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntry extends AuditEntry,Node,OauthApplicationAuditEntryData,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The application URL of the OAuth Application. */
    applicationUrl: (Scalars["URI"]|null)
    /** The callback URL of the OAuth Application. */
    callbackUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The name of the OAuth Application. */
    oauthApplicationName: (Scalars["String"]|null)
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The rate limit of the OAuth Application. */
    rateLimit: (Scalars["Int"]|null)
    /** The state of the OAuth Application. */
    state: (OauthApplicationCreateAuditEntryState|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OauthApplicationCreateAuditEntry'
}


/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryData{
    /** The name of the OAuth Application. */
    oauthApplicationName: (Scalars["String"]|null)
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl: (Scalars["URI"]|null)
    __typename: 'OauthApplicationCreateAuditEntry'|'OrgOauthAppAccessApprovedAuditEntry'|'OrgOauthAppAccessDeniedAuditEntry'|'OrgOauthAppAccessRequestedAuditEntry'
}


/** The state of an OAuth Application when it was created. */
export type OauthApplicationCreateAuditEntryState = 'ACTIVE' | 'PENDING_DELETION' | 'SUSPENDED'


/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The email address used to invite a billing manager for the organization. */
    invitationEmail: (Scalars["String"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgAddBillingManagerAuditEntry'
}


/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The permission level of the member added to the organization. */
    permission: (OrgAddMemberAuditEntryPermission|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgAddMemberAuditEntry'
}


/** The permissions available to members on an Organization. */
export type OrgAddMemberAuditEntryPermission = 'ADMIN' | 'READ'


/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The blocked user. */
    blockedUser: (User|null)
    /** The username of the blocked user. */
    blockedUserName: (Scalars["String"]|null)
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the blocked user. */
    blockedUserUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgBlockUserAuditEntry'
}


/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgConfigDisableCollaboratorsOnlyAuditEntry'
}


/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgConfigEnableCollaboratorsOnlyAuditEntry'
}


/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The billing plan for the Organization. */
    billingPlan: (OrgCreateAuditEntryBillingPlan|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgCreateAuditEntry'
}


/** The billing plans available for organizations. */
export type OrgCreateAuditEntryBillingPlan = 'BUSINESS' | 'BUSINESS_PLUS' | 'FREE' | 'TIERED_PER_SEAT' | 'UNLIMITED'


/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgDisableOauthAppRestrictionsAuditEntry'
}


/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The SAML provider's issuer URL. */
    issuerUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl: (Scalars["URI"]|null)
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgDisableSamlAuditEntry'
}


/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgDisableTwoFactorRequirementAuditEntry'
}


/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgEnableOauthAppRestrictionsAuditEntry'
}


/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The SAML provider's issuer URL. */
    issuerUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl: (Scalars["URI"]|null)
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgEnableSamlAuditEntry'
}


/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgEnableTwoFactorRequirementAuditEntry'
}


/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The email address of the organization invitation. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The organization invitation. */
    organizationInvitation: (OrganizationInvitation|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgInviteMemberAuditEntry'
}


/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgInviteToBusinessAuditEntry'
}


/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntry extends AuditEntry,Node,OauthApplicationAuditEntryData,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The name of the OAuth Application. */
    oauthApplicationName: (Scalars["String"]|null)
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgOauthAppAccessApprovedAuditEntry'
}


/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntry extends AuditEntry,Node,OauthApplicationAuditEntryData,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The name of the OAuth Application. */
    oauthApplicationName: (Scalars["String"]|null)
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgOauthAppAccessDeniedAuditEntry'
}


/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntry extends AuditEntry,Node,OauthApplicationAuditEntryData,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The name of the OAuth Application. */
    oauthApplicationName: (Scalars["String"]|null)
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl: (Scalars["URI"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgOauthAppAccessRequestedAuditEntry'
}


/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The reason for the billing manager being removed. */
    reason: (OrgRemoveBillingManagerAuditEntryReason|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgRemoveBillingManagerAuditEntry'
}


/** The reason a billing manager was removed from an Organization. */
export type OrgRemoveBillingManagerAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'


/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The types of membership the member has with the organization. */
    membershipTypes: (OrgRemoveMemberAuditEntryMembershipType[]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The reason for the member being removed. */
    reason: (OrgRemoveMemberAuditEntryReason|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgRemoveMemberAuditEntry'
}


/** The type of membership a user has with an Organization. */
export type OrgRemoveMemberAuditEntryMembershipType = 'ADMIN' | 'BILLING_MANAGER' | 'DIRECT_MEMBER' | 'OUTSIDE_COLLABORATOR' | 'UNAFFILIATED'


/** The reason a member was removed from an Organization. */
export type OrgRemoveMemberAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY' | 'TWO_FACTOR_ACCOUNT_RECOVERY' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE' | 'USER_ACCOUNT_DELETED'


/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The types of membership the outside collaborator has with the organization. */
    membershipTypes: (OrgRemoveOutsideCollaboratorAuditEntryMembershipType[]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The reason for the outside collaborator being removed from the Organization. */
    reason: (OrgRemoveOutsideCollaboratorAuditEntryReason|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgRemoveOutsideCollaboratorAuditEntry'
}


/** The type of membership a user has with an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryMembershipType = 'BILLING_MANAGER' | 'OUTSIDE_COLLABORATOR' | 'UNAFFILIATED'


/** The reason an outside collaborator was removed from an Organization. */
export type OrgRemoveOutsideCollaboratorAuditEntryReason = 'SAML_EXTERNAL_IDENTITY_MISSING' | 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'


/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The number of custom email routings for the restored member. */
    restoredCustomEmailRoutingsCount: (Scalars["Int"]|null)
    /** The number of issue assignemnts for the restored member. */
    restoredIssueAssignmentsCount: (Scalars["Int"]|null)
    /** Restored organization membership objects. */
    restoredMemberships: (OrgRestoreMemberAuditEntryMembership[]|null)
    /** The number of restored memberships. */
    restoredMembershipsCount: (Scalars["Int"]|null)
    /** The number of repositories of the restored member. */
    restoredRepositoriesCount: (Scalars["Int"]|null)
    /** The number of starred repositories for the restored member. */
    restoredRepositoryStarsCount: (Scalars["Int"]|null)
    /** The number of watched repositories for the restored member. */
    restoredRepositoryWatchesCount: (Scalars["Int"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberAuditEntry'
}


/** Types of memberships that can be restored for an Organization member. */
export type OrgRestoreMemberAuditEntryMembership=OrgRestoreMemberMembershipOrganizationAuditEntryData|OrgRestoreMemberMembershipRepositoryAuditEntryData|OrgRestoreMemberMembershipTeamAuditEntryData


/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryData extends OrganizationAuditEntryData{
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberMembershipOrganizationAuditEntryData'
}


/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryData extends RepositoryAuditEntryData{
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberMembershipRepositoryAuditEntryData'
}


/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryData{
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberMembershipRepositoryAuditEntryData'|'PrivateRepositoryForkingDisableAuditEntry'|'PrivateRepositoryForkingEnableAuditEntry'|'RepoAccessAuditEntry'|'RepoAddMemberAuditEntry'|'RepoAddTopicAuditEntry'|'RepoArchivedAuditEntry'|'RepoChangeMergeSettingAuditEntry'|'RepoConfigDisableAnonymousGitAccessAuditEntry'|'RepoConfigDisableCollaboratorsOnlyAuditEntry'|'RepoConfigDisableContributorsOnlyAuditEntry'|'RepoConfigDisableSockpuppetDisallowedAuditEntry'|'RepoConfigEnableAnonymousGitAccessAuditEntry'|'RepoConfigEnableCollaboratorsOnlyAuditEntry'|'RepoConfigEnableContributorsOnlyAuditEntry'|'RepoConfigEnableSockpuppetDisallowedAuditEntry'|'RepoConfigLockAnonymousGitAccessAuditEntry'|'RepoConfigUnlockAnonymousGitAccessAuditEntry'|'RepoCreateAuditEntry'|'RepoDestroyAuditEntry'|'RepoRemoveMemberAuditEntry'|'RepoRemoveTopicAuditEntry'|'TeamAddRepositoryAuditEntry'|'TeamRemoveRepositoryAuditEntry'
}


/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryData extends TeamAuditEntryData{
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberMembershipTeamAuditEntryData'
}


/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryData{
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    __typename: 'OrgRestoreMemberMembershipTeamAuditEntryData'|'TeamAddMemberAuditEntry'|'TeamAddRepositoryAuditEntry'|'TeamChangeParentTeamAuditEntry'|'TeamRemoveMemberAuditEntry'|'TeamRemoveRepositoryAuditEntry'
}


/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The user being unblocked by the organization. */
    blockedUser: (User|null)
    /** The username of the blocked user. */
    blockedUserName: (Scalars["String"]|null)
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the blocked user. */
    blockedUserUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgUnblockUserAuditEntry'
}


/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The new default repository permission level for the organization. */
    permission: (OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)
    /** The former default repository permission level for the organization. */
    permissionWas: (OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgUpdateDefaultRepositoryPermissionAuditEntry'
}


/** The default permission a repository can have in an Organization. */
export type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = 'ADMIN' | 'NONE' | 'READ' | 'WRITE'


/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The new member permission level for the organization. */
    permission: (OrgUpdateMemberAuditEntryPermission|null)
    /** The former member permission level for the organization. */
    permissionWas: (OrgUpdateMemberAuditEntryPermission|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgUpdateMemberAuditEntry'
}


/** The permissions available to members on an Organization. */
export type OrgUpdateMemberAuditEntryPermission = 'ADMIN' | 'READ'


/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** Can members create repositories in the organization. */
    canCreateRepositories: (Scalars["Boolean"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The permission for visibility level of repositories for this organization. */
    visibility: (OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility|null)
    __typename: 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry'
}


/** The permissions available for repository creation on an Organization. */
export type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = 'ALL' | 'PUBLIC'


/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** Can outside collaborators be invited to repositories in the organization. */
    canInviteOutsideCollaboratorsToRepositories: (Scalars["Boolean"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry'
}


/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'PrivateRepositoryForkingDisableAuditEntry'
}


/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'PrivateRepositoryForkingEnableAuditEntry'
}


/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoAccessAuditEntryVisibility|null)
    __typename: 'RepoAccessAuditEntry'
}


/** The privacy of a repository */
export type RepoAccessAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoAddMemberAuditEntryVisibility|null)
    __typename: 'RepoAddMemberAuditEntry'
}


/** The privacy of a repository */
export type RepoAddMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData,TopicAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The name of the topic added to the repository */
    topic: (Topic|null)
    /** The name of the topic added to the repository */
    topicName: (Scalars["String"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoAddTopicAuditEntry'
}


/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryData{
    /** The name of the topic added to the repository */
    topic: (Topic|null)
    /** The name of the topic added to the repository */
    topicName: (Scalars["String"]|null)
    __typename: 'RepoAddTopicAuditEntry'|'RepoRemoveTopicAuditEntry'
}


/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoArchivedAuditEntryVisibility|null)
    __typename: 'RepoArchivedAuditEntry'
}


/** The privacy of a repository */
export type RepoArchivedAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the change was to enable (true) or disable (false) the merge type */
    isEnabled: (Scalars["Boolean"]|null)
    /** The merge method affected by the change */
    mergeType: (RepoChangeMergeSettingAuditEntryMergeType|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoChangeMergeSettingAuditEntry'
}


/** The merge options available for pull requests to this repository. */
export type RepoChangeMergeSettingAuditEntryMergeType = 'MERGE' | 'REBASE' | 'SQUASH'


/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigDisableAnonymousGitAccessAuditEntry'
}


/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigDisableCollaboratorsOnlyAuditEntry'
}


/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigDisableContributorsOnlyAuditEntry'
}


/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigDisableSockpuppetDisallowedAuditEntry'
}


/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigEnableAnonymousGitAccessAuditEntry'
}


/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigEnableCollaboratorsOnlyAuditEntry'
}


/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigEnableContributorsOnlyAuditEntry'
}


/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigEnableSockpuppetDisallowedAuditEntry'
}


/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigLockAnonymousGitAccessAuditEntry'
}


/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoConfigUnlockAnonymousGitAccessAuditEntry'
}


/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The name of the parent repository for this forked repository. */
    forkParentName: (Scalars["String"]|null)
    /** The name of the root repository for this netork. */
    forkSourceName: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoCreateAuditEntryVisibility|null)
    __typename: 'RepoCreateAuditEntry'
}


/** The privacy of a repository */
export type RepoCreateAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoDestroyAuditEntryVisibility|null)
    __typename: 'RepoDestroyAuditEntry'
}


/** The privacy of a repository */
export type RepoDestroyAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    /** The visibility of the repository */
    visibility: (RepoRemoveMemberAuditEntryVisibility|null)
    __typename: 'RepoRemoveMemberAuditEntry'
}


/** The privacy of a repository */
export type RepoRemoveMemberAuditEntryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData,TopicAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The name of the topic added to the repository */
    topic: (Topic|null)
    /** The name of the topic added to the repository */
    topicName: (Scalars["String"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepoRemoveTopicAuditEntry'
}


/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepositoryVisibilityChangeDisableAuditEntry'
}


/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntry extends AuditEntry,EnterpriseAuditEntryData,Node,OrganizationAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath: (Scalars["URI"]|null)
    /** The slug of the enterprise. */
    enterpriseSlug: (Scalars["String"]|null)
    /** The HTTP URL for this enterprise. */
    enterpriseUrl: (Scalars["URI"]|null)
    id: Scalars["ID"]
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'RepositoryVisibilityChangeEnableAuditEntry'
}


/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,TeamAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped: (Scalars["Boolean"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'TeamAddMemberAuditEntry'
}


/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData,TeamAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped: (Scalars["Boolean"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'TeamAddRepositoryAuditEntry'
}


/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,TeamAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped: (Scalars["Boolean"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The new parent team. */
    parentTeam: (Team|null)
    /** The name of the new parent team */
    parentTeamName: (Scalars["String"]|null)
    /** The name of the former parent team */
    parentTeamNameWas: (Scalars["String"]|null)
    /** The HTTP path for the parent team */
    parentTeamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the parent team */
    parentTeamUrl: (Scalars["URI"]|null)
    /** The former parent team. */
    parentTeamWas: (Team|null)
    /** The HTTP path for the previous parent team */
    parentTeamWasResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the previous parent team */
    parentTeamWasUrl: (Scalars["URI"]|null)
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'TeamChangeParentTeamAuditEntry'
}


/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,TeamAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped: (Scalars["Boolean"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'TeamRemoveMemberAuditEntry'
}


/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntry extends AuditEntry,Node,OrganizationAuditEntryData,RepositoryAuditEntryData,TeamAuditEntryData{
    /** The action name */
    action: Scalars["String"]
    /** The user who initiated the action */
    actor: (AuditEntryActor|null)
    /** The IP address of the actor */
    actorIp: (Scalars["String"]|null)
    /** A readable representation of the actor's location */
    actorLocation: (ActorLocation|null)
    /** The username of the user who initiated the action */
    actorLogin: (Scalars["String"]|null)
    /** The HTTP path for the actor. */
    actorResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the actor. */
    actorUrl: (Scalars["URI"]|null)
    /** The time the action was initiated */
    createdAt: Scalars["PreciseDateTime"]
    id: Scalars["ID"]
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped: (Scalars["Boolean"]|null)
    /** The corresponding operation type for the action */
    operationType: (OperationType|null)
    /** The Organization associated with the Audit Entry. */
    organization: (Organization|null)
    /** The name of the Organization. */
    organizationName: (Scalars["String"]|null)
    /** The HTTP path for the organization */
    organizationResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the organization */
    organizationUrl: (Scalars["URI"]|null)
    /** The repository associated with the action */
    repository: (Repository|null)
    /** The name of the repository */
    repositoryName: (Scalars["String"]|null)
    /** The HTTP path for the repository */
    repositoryResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the repository */
    repositoryUrl: (Scalars["URI"]|null)
    /** The team associated with the action */
    team: (Team|null)
    /** The name of the team */
    teamName: (Scalars["String"]|null)
    /** The HTTP path for this team */
    teamResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for this team */
    teamUrl: (Scalars["URI"]|null)
    /** The user affected by the action */
    user: (User|null)
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin: (Scalars["String"]|null)
    /** The HTTP path for the user. */
    userResourcePath: (Scalars["URI"]|null)
    /** The HTTP URL for the user. */
    userUrl: (Scalars["URI"]|null)
    __typename: 'TeamRemoveRepositoryAuditEntry'
}


/** The possible values for the IP allow list enabled setting. */
export type IpAllowListEnabledSettingValue = 'DISABLED' | 'ENABLED'


/** Properties by which IP allow list entry connections can be ordered. */
export type IpAllowListEntryOrderField = 'ALLOW_LIST_VALUE' | 'CREATED_AT'


/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnection{
    /** A list of edges. */
    edges: ((IpAllowListEntryEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((IpAllowListEntry|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'IpAllowListEntryConnection'
}


/** An edge in a connection. */
export interface IpAllowListEntryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (IpAllowListEntry|null)
    __typename: 'IpAllowListEntryEdge'
}


/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntry extends Node{
    /** A single IP address or range of IP addresses in CIDR notation. */
    allowListValue: Scalars["String"]
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    id: Scalars["ID"]
    /** Whether the entry is currently active. */
    isActive: Scalars["Boolean"]
    /** The name of the IP allow list entry. */
    name: (Scalars["String"]|null)
    /** The owner of the IP allow list entry. */
    owner: IpAllowListOwner
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'IpAllowListEntry'
}


/** Types that can own an IP allow list. */
export type IpAllowListOwner=Enterprise|Organization


/** The connection type for User. */
export interface OrganizationMemberConnection{
    /** A list of edges. */
    edges: ((OrganizationMemberEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'OrganizationMemberConnection'
}


/** Represents a user within an organization. */
export interface OrganizationMemberEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
    hasTwoFactorEnabled: (Scalars["Boolean"]|null)
    /** The item at the end of the edge. */
    node: (User|null)
    /** The role this user has in the organization. */
    role: (OrganizationMemberRole|null)
    __typename: 'OrganizationMemberEdge'
}


/** The possible roles within an organization for its members. */
export type OrganizationMemberRole = 'ADMIN' | 'MEMBER'


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export interface OrganizationIdentityProvider extends Node{
    /** The digest algorithm used to sign SAML requests for the Identity Provider. */
    digestMethod: (Scalars["URI"]|null)
    /** External Identities provisioned by this Identity Provider */
    externalIdentities: ExternalIdentityConnection
    id: Scalars["ID"]
    /** The x509 certificate used by the Identity Provder to sign assertions and responses. */
    idpCertificate: (Scalars["X509Certificate"]|null)
    /** The Issuer Entity ID for the SAML Identity Provider */
    issuer: (Scalars["String"]|null)
    /** Organization this Identity Provider belongs to */
    organization: (Organization|null)
    /** The signature algorithm used to sign SAML requests for the Identity Provider. */
    signatureMethod: (Scalars["URI"]|null)
    /** The URL endpoint for the Identity Provider's SAML SSO. */
    ssoUrl: (Scalars["URI"]|null)
    __typename: 'OrganizationIdentityProvider'
}


/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnection{
    /** A list of edges. */
    edges: ((ExternalIdentityEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((ExternalIdentity|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'ExternalIdentityConnection'
}


/** An edge in a connection. */
export interface ExternalIdentityEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (ExternalIdentity|null)
    __typename: 'ExternalIdentityEdge'
}


/** An external identity provisioned by SAML SSO or SCIM. */
export interface ExternalIdentity extends Node{
    /** The GUID for this identity */
    guid: Scalars["String"]
    id: Scalars["ID"]
    /** Organization invitation for this SCIM-provisioned external identity */
    organizationInvitation: (OrganizationInvitation|null)
    /** SAML Identity attributes */
    samlIdentity: (ExternalIdentitySamlAttributes|null)
    /** SCIM Identity attributes */
    scimIdentity: (ExternalIdentityScimAttributes|null)
    /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
    user: (User|null)
    __typename: 'ExternalIdentity'
}


/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributes{
    /** The NameID of the SAML identity */
    nameId: (Scalars["String"]|null)
    __typename: 'ExternalIdentitySamlAttributes'
}


/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributes{
    /** The userName of the SCIM identity */
    username: (Scalars["String"]|null)
    __typename: 'ExternalIdentityScimAttributes'
}


/** The role of a user on a team. */
export type TeamRole = 'ADMIN' | 'MEMBER'


/** Enterprise information only visible to enterprise owners. */
export interface EnterpriseOwnerInfo{
    /** A list of enterprise organizations configured with the provided action execution capabilities setting value. */
    actionExecutionCapabilitySettingOrganizations: OrganizationConnection
    /** A list of all of the administrators for this enterprise. */
    admins: EnterpriseAdministratorConnection
    /** A list of users in the enterprise who currently have two-factor authentication disabled. */
    affiliatedUsersWithTwoFactorDisabled: UserConnection
    /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
    affiliatedUsersWithTwoFactorDisabledExist: Scalars["Boolean"]
    /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
    allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided private repository forking setting value. */
    allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection
    /** The setting value for base repository permissions for organizations in this enterprise. */
    defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue
    /** A list of enterprise organizations configured with the provided default repository permission. */
    defaultRepositoryPermissionSettingOrganizations: OrganizationConnection
    /** Enterprise Server installations owned by the enterprise. */
    enterpriseServerInstallations: EnterpriseServerInstallationConnection
    /** The setting value for whether the enterprise has an IP allow list enabled. */
    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue
    /** The IP addresses that are allowed to access resources owned by the enterprise. */
    ipAllowListEntries: IpAllowListEntryConnection
    /** Whether or not the default repository permission is currently being updated. */
    isUpdatingDefaultRepositoryPermission: Scalars["Boolean"]
    /** Whether the two-factor authentication requirement is currently being enforced. */
    isUpdatingTwoFactorRequirement: Scalars["Boolean"]
    /**
     * The setting value for whether organization members with admin permissions on a
     * repository can change repository visibility.
     */
    membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
    membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection
    /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
    membersCanCreateInternalRepositoriesSetting: (Scalars["Boolean"]|null)
    /** The setting value for whether members of organizations in the enterprise can create private repositories. */
    membersCanCreatePrivateRepositoriesSetting: (Scalars["Boolean"]|null)
    /** The setting value for whether members of organizations in the enterprise can create public repositories. */
    membersCanCreatePublicRepositoriesSetting: (Scalars["Boolean"]|null)
    /** The setting value for whether members of organizations in the enterprise can create repositories. */
    membersCanCreateRepositoriesSetting: (EnterpriseMembersCanCreateRepositoriesSettingValue|null)
    /** A list of enterprise organizations configured with the provided repository creation setting value. */
    membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection
    /** The setting value for whether members with admin permissions for repositories can delete issues. */
    membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
    membersCanDeleteIssuesSettingOrganizations: OrganizationConnection
    /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
    membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
    membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection
    /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
    membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
    membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection
    /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
    membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue
    /** The setting value for whether members with admin permissions for repositories can update protected branches. */
    membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
    membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection
    /** The setting value for whether members can view dependency insights. */
    membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
    membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection
    /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
    organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided organization projects setting value. */
    organizationProjectsSettingOrganizations: OrganizationConnection
    /** A list of outside collaborators across the repositories in the enterprise. */
    outsideCollaborators: EnterpriseOutsideCollaboratorConnection
    /** A list of pending administrator invitations for the enterprise. */
    pendingAdminInvitations: EnterpriseAdministratorInvitationConnection
    /** A list of pending collaborator invitations across the repositories in the enterprise. */
    pendingCollaboratorInvitations: RepositoryInvitationConnection
    /**
     * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
     * A list of pending collaborators across the repositories in the enterprise.
     */
    pendingCollaborators: EnterprisePendingCollaboratorConnection
    /** A list of pending member invitations for organizations in the enterprise. */
    pendingMemberInvitations: EnterprisePendingMemberInvitationConnection
    /** The setting value for whether repository projects are enabled in this enterprise. */
    repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided repository projects setting value. */
    repositoryProjectsSettingOrganizations: OrganizationConnection
    /** The SAML Identity Provider for the enterprise. */
    samlIdentityProvider: (EnterpriseIdentityProvider|null)
    /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
    samlIdentityProviderSettingOrganizations: OrganizationConnection
    /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
    teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue
    /** A list of enterprise organizations configured with the provided team discussions setting value. */
    teamDiscussionsSettingOrganizations: OrganizationConnection
    /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
    twoFactorRequiredSetting: EnterpriseEnabledSettingValue
    /** A list of enterprise organizations configured with the two-factor authentication setting value. */
    twoFactorRequiredSettingOrganizations: OrganizationConnection
    __typename: 'EnterpriseOwnerInfo'
}


/** The possible administrator roles in an enterprise account. */
export type EnterpriseAdministratorRole = 'BILLING_MANAGER' | 'OWNER'


/** The connection type for User. */
export interface EnterpriseAdministratorConnection{
    /** A list of edges. */
    edges: ((EnterpriseAdministratorEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseAdministratorConnection'
}


/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (User|null)
    /** The role of the administrator. */
    role: EnterpriseAdministratorRole
    __typename: 'EnterpriseAdministratorEdge'
}


/** The possible values for an enabled/disabled enterprise setting. */
export type EnterpriseEnabledDisabledSettingValue = 'DISABLED' | 'ENABLED' | 'NO_POLICY'


/** The possible values for the enterprise default repository permission setting. */
export type EnterpriseDefaultRepositoryPermissionSettingValue = 'ADMIN' | 'NONE' | 'NO_POLICY' | 'READ' | 'WRITE'


/** Properties by which Enterprise Server installation connections can be ordered. */
export type EnterpriseServerInstallationOrderField = 'CREATED_AT' | 'CUSTOMER_NAME' | 'HOST_NAME'


/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnection{
    /** A list of edges. */
    edges: ((EnterpriseServerInstallationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseServerInstallation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseServerInstallationConnection'
}


/** An edge in a connection. */
export interface EnterpriseServerInstallationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseServerInstallation|null)
    __typename: 'EnterpriseServerInstallationEdge'
}


/** An Enterprise Server installation. */
export interface EnterpriseServerInstallation extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The customer name to which the Enterprise Server installation belongs. */
    customerName: Scalars["String"]
    /** The host name of the Enterprise Server installation. */
    hostName: Scalars["String"]
    id: Scalars["ID"]
    /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
    isConnected: Scalars["Boolean"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** User accounts on this Enterprise Server installation. */
    userAccounts: EnterpriseServerUserAccountConnection
    /** User accounts uploads for the Enterprise Server installation. */
    userAccountsUploads: EnterpriseServerUserAccountsUploadConnection
    __typename: 'EnterpriseServerInstallation'
}


/** Properties by which Enterprise Server user account connections can be ordered. */
export type EnterpriseServerUserAccountOrderField = 'LOGIN' | 'REMOTE_CREATED_AT'


/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnection{
    /** A list of edges. */
    edges: ((EnterpriseServerUserAccountEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseServerUserAccount|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseServerUserAccountConnection'
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseServerUserAccount|null)
    __typename: 'EnterpriseServerUserAccountEdge'
}


/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccount extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** User emails belonging to this user account. */
    emails: EnterpriseServerUserAccountEmailConnection
    /** The Enterprise Server installation on which this user account exists. */
    enterpriseServerInstallation: EnterpriseServerInstallation
    id: Scalars["ID"]
    /** Whether the user account is a site administrator on the Enterprise Server installation. */
    isSiteAdmin: Scalars["Boolean"]
    /** The login of the user account on the Enterprise Server installation. */
    login: Scalars["String"]
    /** The profile name of the user account on the Enterprise Server installation. */
    profileName: (Scalars["String"]|null)
    /** The date and time when the user account was created on the Enterprise Server installation. */
    remoteCreatedAt: Scalars["DateTime"]
    /** The ID of the user account on the Enterprise Server installation. */
    remoteUserId: Scalars["Int"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'EnterpriseServerUserAccount'
}


/** Properties by which Enterprise Server user account email connections can be ordered. */
export type EnterpriseServerUserAccountEmailOrderField = 'EMAIL'


/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnection{
    /** A list of edges. */
    edges: ((EnterpriseServerUserAccountEmailEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseServerUserAccountEmail|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseServerUserAccountEmailConnection'
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseServerUserAccountEmail|null)
    __typename: 'EnterpriseServerUserAccountEmailEdge'
}


/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmail extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The email address. */
    email: Scalars["String"]
    id: Scalars["ID"]
    /** Indicates whether this is the primary email of the associated user account. */
    isPrimary: Scalars["Boolean"]
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    /** The user account to which the email belongs. */
    userAccount: EnterpriseServerUserAccount
    __typename: 'EnterpriseServerUserAccountEmail'
}


/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export type EnterpriseServerUserAccountsUploadOrderField = 'CREATED_AT'


/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnection{
    /** A list of edges. */
    edges: ((EnterpriseServerUserAccountsUploadEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseServerUserAccountsUpload|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseServerUserAccountsUploadConnection'
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseServerUserAccountsUpload|null)
    __typename: 'EnterpriseServerUserAccountsUploadEdge'
}


/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUpload extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The enterprise to which this upload belongs. */
    enterprise: Enterprise
    /** The Enterprise Server installation for which this upload was generated. */
    enterpriseServerInstallation: EnterpriseServerInstallation
    id: Scalars["ID"]
    /** The name of the file uploaded. */
    name: Scalars["String"]
    /** The synchronization state of the upload */
    syncState: EnterpriseServerUserAccountsUploadSyncState
    /** Identifies the date and time when the object was last updated. */
    updatedAt: Scalars["DateTime"]
    __typename: 'EnterpriseServerUserAccountsUpload'
}


/** Synchronization state of the Enterprise Server user accounts upload */
export type EnterpriseServerUserAccountsUploadSyncState = 'FAILURE' | 'PENDING' | 'SUCCESS'


/** The possible values for the enterprise members can create repositories setting. */
export type EnterpriseMembersCanCreateRepositoriesSettingValue = 'ALL' | 'DISABLED' | 'NO_POLICY' | 'PRIVATE' | 'PUBLIC'


/** The possible values for the members can create repositories setting on an organization. */
export type OrganizationMembersCanCreateRepositoriesSettingValue = 'ALL' | 'DISABLED' | 'PRIVATE'


/** The possible values for the members can make purchases setting. */
export type EnterpriseMembersCanMakePurchasesSettingValue = 'DISABLED' | 'ENABLED'


/** The repository's visibility level. */
export type RepositoryVisibility = 'INTERNAL' | 'PRIVATE' | 'PUBLIC'


/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnection{
    /** A list of edges. */
    edges: ((EnterpriseOutsideCollaboratorEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseOutsideCollaboratorConnection'
}


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** Whether the outside collaborator does not have a license for the enterprise. */
    isUnlicensed: Scalars["Boolean"]
    /** The item at the end of the edge. */
    node: (User|null)
    /** The enterprise organization repositories this user is a member of. */
    repositories: EnterpriseRepositoryInfoConnection
    __typename: 'EnterpriseOutsideCollaboratorEdge'
}


/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnection{
    /** A list of edges. */
    edges: ((EnterpriseRepositoryInfoEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseRepositoryInfo|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseRepositoryInfoConnection'
}


/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseRepositoryInfo|null)
    __typename: 'EnterpriseRepositoryInfoEdge'
}


/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfo extends Node{
    id: Scalars["ID"]
    /** Identifies if the repository is private. */
    isPrivate: Scalars["Boolean"]
    /** The repository's name. */
    name: Scalars["String"]
    /** The repository's name with owner. */
    nameWithOwner: Scalars["String"]
    __typename: 'EnterpriseRepositoryInfo'
}


/** Properties by which enterprise administrator invitation connections can be ordered. */
export type EnterpriseAdministratorInvitationOrderField = 'CREATED_AT'


/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnection{
    /** A list of edges. */
    edges: ((EnterpriseAdministratorInvitationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseAdministratorInvitation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseAdministratorInvitationConnection'
}


/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseAdministratorInvitation|null)
    __typename: 'EnterpriseAdministratorInvitationEdge'
}


/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitation extends Node{
    /** Identifies the date and time when the object was created. */
    createdAt: Scalars["DateTime"]
    /** The email of the person who was invited to the enterprise. */
    email: (Scalars["String"]|null)
    /** The enterprise the invitation is for. */
    enterprise: Enterprise
    id: Scalars["ID"]
    /** The user who was invited to the enterprise. */
    invitee: (User|null)
    /** The user who created the invitation. */
    inviter: (User|null)
    /** The invitee's pending role in the enterprise (owner or billing_manager). */
    role: EnterpriseAdministratorRole
    __typename: 'EnterpriseAdministratorInvitation'
}


/** Properties by which repository invitation connections can be ordered. */
export type RepositoryInvitationOrderField = 'CREATED_AT' | 'INVITEE_LOGIN'


/** The connection type for RepositoryInvitation. */
export interface RepositoryInvitationConnection{
    /** A list of edges. */
    edges: ((RepositoryInvitationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((RepositoryInvitation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'RepositoryInvitationConnection'
}


/** An edge in a connection. */
export interface RepositoryInvitationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (RepositoryInvitation|null)
    __typename: 'RepositoryInvitationEdge'
}


/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitation extends Node{
    /** The email address that received the invitation. */
    email: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The user who received the invitation. */
    invitee: (User|null)
    /** The user who created the invitation. */
    inviter: User
    /**
     * The permission granted on this repository by this invitation.
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission: RepositoryPermission
    /** The Repository the user is invited to. */
    repository: (RepositoryInfo|null)
    __typename: 'RepositoryInvitation'
}


/** The connection type for User. */
export interface EnterprisePendingCollaboratorConnection{
    /** A list of edges. */
    edges: ((EnterprisePendingCollaboratorEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((User|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterprisePendingCollaboratorConnection'
}


/** A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise. */
export interface EnterprisePendingCollaboratorEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** Whether the invited collaborator does not have a license for the enterprise. */
    isUnlicensed: Scalars["Boolean"]
    /** The item at the end of the edge. */
    node: (User|null)
    /** The enterprise organization repositories this user is a member of. */
    repositories: EnterpriseRepositoryInfoConnection
    __typename: 'EnterprisePendingCollaboratorEdge'
}


/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnection{
    /** A list of edges. */
    edges: ((EnterprisePendingMemberInvitationEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((OrganizationInvitation|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    /** Identifies the total count of unique users in the connection. */
    totalUniqueUserCount: Scalars["Int"]
    __typename: 'EnterprisePendingMemberInvitationConnection'
}


/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** Whether the invitation has a license for the enterprise. */
    isUnlicensed: Scalars["Boolean"]
    /** The item at the end of the edge. */
    node: (OrganizationInvitation|null)
    __typename: 'EnterprisePendingMemberInvitationEdge'
}


/** An identity provider configured to provision identities for an enterprise. */
export interface EnterpriseIdentityProvider extends Node{
    /** The digest algorithm used to sign SAML requests for the identity provider. */
    digestMethod: (SamlDigestAlgorithm|null)
    /** The enterprise this identity provider belongs to. */
    enterprise: (Enterprise|null)
    /** ExternalIdentities provisioned by this identity provider. */
    externalIdentities: ExternalIdentityConnection
    id: Scalars["ID"]
    /** The x509 certificate used by the identity provider to sign assertions and responses. */
    idpCertificate: (Scalars["X509Certificate"]|null)
    /** The Issuer Entity ID for the SAML identity provider. */
    issuer: (Scalars["String"]|null)
    /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
    recoveryCodes: (Scalars["String"][]|null)
    /** The signature algorithm used to sign SAML requests for the identity provider. */
    signatureMethod: (SamlSignatureAlgorithm|null)
    /** The URL endpoint for the identity provider's SAML SSO. */
    ssoUrl: (Scalars["URI"]|null)
    __typename: 'EnterpriseIdentityProvider'
}


/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export type SamlDigestAlgorithm = 'SHA1' | 'SHA256' | 'SHA384' | 'SHA512'


/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export type SamlSignatureAlgorithm = 'RSA_SHA1' | 'RSA_SHA256' | 'RSA_SHA384' | 'RSA_SHA512'


/** The possible states in which authentication can be configured with an identity provider. */
export type IdentityProviderConfigurationState = 'CONFIGURED' | 'ENFORCED' | 'UNCONFIGURED'


/** The possible values for an enabled/no policy enterprise setting. */
export type EnterpriseEnabledSettingValue = 'ENABLED' | 'NO_POLICY'


/** The connection type for EnterpriseUserAccount. */
export interface EnterpriseUserAccountConnection{
    /** A list of edges. */
    edges: ((EnterpriseUserAccountEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((EnterpriseUserAccount|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'EnterpriseUserAccountConnection'
}


/** An edge in a connection. */
export interface EnterpriseUserAccountEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (EnterpriseUserAccount|null)
    __typename: 'EnterpriseUserAccountEdge'
}


/** A public description of a Marketplace category. */
export interface MarketplaceCategory extends Node{
    /** The category's description. */
    description: (Scalars["String"]|null)
    /** The technical description of how apps listed in this category work with GitHub. */
    howItWorks: (Scalars["String"]|null)
    id: Scalars["ID"]
    /** The category's name. */
    name: Scalars["String"]
    /** How many Marketplace listings have this as their primary category. */
    primaryListingCount: Scalars["Int"]
    /** The HTTP path for this Marketplace category. */
    resourcePath: Scalars["URI"]
    /** How many Marketplace listings have this as their secondary category. */
    secondaryListingCount: Scalars["Int"]
    /** The short name of the category used in its URL. */
    slug: Scalars["String"]
    /** The HTTP URL for this Marketplace category. */
    url: Scalars["URI"]
    __typename: 'MarketplaceCategory'
}


/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListing extends Node{
    /** The GitHub App this listing represents. */
    app: (App|null)
    /** URL to the listing owner's company site. */
    companyUrl: (Scalars["URI"]|null)
    /** The HTTP path for configuring access to the listing's integration or OAuth app */
    configurationResourcePath: Scalars["URI"]
    /** The HTTP URL for configuring access to the listing's integration or OAuth app */
    configurationUrl: Scalars["URI"]
    /** URL to the listing's documentation. */
    documentationUrl: (Scalars["URI"]|null)
    /** The listing's detailed description. */
    extendedDescription: (Scalars["String"]|null)
    /** The listing's detailed description rendered to HTML. */
    extendedDescriptionHTML: Scalars["HTML"]
    /** The listing's introductory description. */
    fullDescription: Scalars["String"]
    /** The listing's introductory description rendered to HTML. */
    fullDescriptionHTML: Scalars["HTML"]
    /** Does this listing have any plans with a free trial? */
    hasPublishedFreeTrialPlans: Scalars["Boolean"]
    /** Does this listing have a terms of service link? */
    hasTermsOfService: Scalars["Boolean"]
    /** A technical description of how this app works with GitHub. */
    howItWorks: (Scalars["String"]|null)
    /** The listing's technical description rendered to HTML. */
    howItWorksHTML: Scalars["HTML"]
    id: Scalars["ID"]
    /** URL to install the product to the viewer's account or organization. */
    installationUrl: (Scalars["URI"]|null)
    /** Whether this listing's app has been installed for the current viewer */
    installedForViewer: Scalars["Boolean"]
    /** Whether this listing has been removed from the Marketplace. */
    isArchived: Scalars["Boolean"]
    /**
     * Whether this listing is still an editable draft that has not been submitted
     * for review and is not publicly visible in the Marketplace.
     */
    isDraft: Scalars["Boolean"]
    /** Whether the product this listing represents is available as part of a paid plan. */
    isPaid: Scalars["Boolean"]
    /** Whether this listing has been approved for display in the Marketplace. */
    isPublic: Scalars["Boolean"]
    /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
    isRejected: Scalars["Boolean"]
    /** Whether this listing has been approved for unverified display in the Marketplace. */
    isUnverified: Scalars["Boolean"]
    /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
    isUnverifiedPending: Scalars["Boolean"]
    /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
    isVerificationPendingFromDraft: Scalars["Boolean"]
    /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
    isVerificationPendingFromUnverified: Scalars["Boolean"]
    /** Whether this listing has been approved for verified display in the Marketplace. */
    isVerified: Scalars["Boolean"]
    /** The hex color code, without the leading '#', for the logo background. */
    logoBackgroundColor: Scalars["String"]
    /** URL for the listing's logo image. */
    logoUrl: (Scalars["URI"]|null)
    /** The listing's full name. */
    name: Scalars["String"]
    /** The listing's very short description without a trailing period or ampersands. */
    normalizedShortDescription: Scalars["String"]
    /** URL to the listing's detailed pricing. */
    pricingUrl: (Scalars["URI"]|null)
    /** The category that best describes the listing. */
    primaryCategory: MarketplaceCategory
    /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
    privacyPolicyUrl: Scalars["URI"]
    /** The HTTP path for the Marketplace listing. */
    resourcePath: Scalars["URI"]
    /** The URLs for the listing's screenshots. */
    screenshotUrls: (Scalars["String"]|null)[]
    /** An alternate category that describes the listing. */
    secondaryCategory: (MarketplaceCategory|null)
    /** The listing's very short description. */
    shortDescription: Scalars["String"]
    /** The short name of the listing used in its URL. */
    slug: Scalars["String"]
    /** URL to the listing's status page. */
    statusUrl: (Scalars["URI"]|null)
    /** An email address for support for this listing's app. */
    supportEmail: (Scalars["String"]|null)
    /**
     * Either a URL or an email address for support for this listing's app, may
     * return an empty string for listings that do not require a support URL.
     */
    supportUrl: Scalars["URI"]
    /** URL to the listing's terms of service. */
    termsOfServiceUrl: (Scalars["URI"]|null)
    /** The HTTP URL for the Marketplace listing. */
    url: Scalars["URI"]
    /** Can the current viewer add plans for this Marketplace listing. */
    viewerCanAddPlans: Scalars["Boolean"]
    /** Can the current viewer approve this Marketplace listing. */
    viewerCanApprove: Scalars["Boolean"]
    /** Can the current viewer delist this Marketplace listing. */
    viewerCanDelist: Scalars["Boolean"]
    /** Can the current viewer edit this Marketplace listing. */
    viewerCanEdit: Scalars["Boolean"]
    /**
     * Can the current viewer edit the primary and secondary category of this
     * Marketplace listing.
     */
    viewerCanEditCategories: Scalars["Boolean"]
    /** Can the current viewer edit the plans for this Marketplace listing. */
    viewerCanEditPlans: Scalars["Boolean"]
    /**
     * Can the current viewer return this Marketplace listing to draft state
     * so it becomes editable again.
     */
    viewerCanRedraft: Scalars["Boolean"]
    /**
     * Can the current viewer reject this Marketplace listing by returning it to
     * an editable draft state or rejecting it entirely.
     */
    viewerCanReject: Scalars["Boolean"]
    /**
     * Can the current viewer request this listing be reviewed for display in
     * the Marketplace as verified.
     */
    viewerCanRequestApproval: Scalars["Boolean"]
    /** Indicates whether the current user has an active subscription to this Marketplace listing. */
    viewerHasPurchased: Scalars["Boolean"]
    /**
     * Indicates if the current user has purchased a subscription to this Marketplace listing
     * for all of the organizations the user owns.
     */
    viewerHasPurchasedForAllOrganizations: Scalars["Boolean"]
    /** Does the current viewer role allow them to administer this Marketplace listing. */
    viewerIsListingAdmin: Scalars["Boolean"]
    __typename: 'MarketplaceListing'
}


/** Look up Marketplace Listings */
export interface MarketplaceListingConnection{
    /** A list of edges. */
    edges: ((MarketplaceListingEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((MarketplaceListing|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'MarketplaceListingConnection'
}


/** An edge in a connection. */
export interface MarketplaceListingEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (MarketplaceListing|null)
    __typename: 'MarketplaceListingEdge'
}


/** Represents information about the GitHub instance. */
export interface GitHubMetadata{
    /** Returns a String that's a SHA of `github-services` */
    gitHubServicesSha: Scalars["GitObjectID"]
    /** IP addresses that users connect to for git operations */
    gitIpAddresses: (Scalars["String"][]|null)
    /** IP addresses that service hooks are sent from */
    hookIpAddresses: (Scalars["String"][]|null)
    /** IP addresses that the importer connects from */
    importerIpAddresses: (Scalars["String"][]|null)
    /** Whether or not users are verified */
    isPasswordAuthenticationVerifiable: Scalars["Boolean"]
    /** IP addresses for GitHub Pages' A records */
    pagesIpAddresses: (Scalars["String"][]|null)
    __typename: 'GitHubMetadata'
}


/** Represents the client's rate limit. */
export interface RateLimit{
    /** The point cost for the current query counting against the rate limit. */
    cost: Scalars["Int"]
    /** The maximum number of points the client is permitted to consume in a 60 minute window. */
    limit: Scalars["Int"]
    /** The maximum number of nodes this query may return */
    nodeCount: Scalars["Int"]
    /** The number of points remaining in the current rate limit window. */
    remaining: Scalars["Int"]
    /** The time at which the current rate limit window resets in UTC epoch seconds. */
    resetAt: Scalars["DateTime"]
    __typename: 'RateLimit'
}


/** Represents the individual results of a search. */
export type SearchType = 'ISSUE' | 'REPOSITORY' | 'USER'


/** A list of results that matched against a search query. */
export interface SearchResultItemConnection{
    /** The number of pieces of code that matched the search query. */
    codeCount: Scalars["Int"]
    /** A list of edges. */
    edges: ((SearchResultItemEdge|null)[]|null)
    /** The number of issues that matched the search query. */
    issueCount: Scalars["Int"]
    /** A list of nodes. */
    nodes: ((SearchResultItem|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** The number of repositories that matched the search query. */
    repositoryCount: Scalars["Int"]
    /** The number of users that matched the search query. */
    userCount: Scalars["Int"]
    /** The number of wiki pages that matched the search query. */
    wikiCount: Scalars["Int"]
    __typename: 'SearchResultItemConnection'
}


/** An edge in a connection. */
export interface SearchResultItemEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (SearchResultItem|null)
    /** Text matches on the result found. */
    textMatches: ((TextMatch|null)[]|null)
    __typename: 'SearchResultItemEdge'
}


/** The results of a search. */
export type SearchResultItem=App|Issue|MarketplaceListing|Organization|PullRequest|Repository|User


/** A text match within a search result. */
export interface TextMatch{
    /** The specific text fragment within the property matched on. */
    fragment: Scalars["String"]
    /** Highlights within the matched fragment. */
    highlights: TextMatchHighlight[]
    /** The property matched on. */
    property: Scalars["String"]
    __typename: 'TextMatch'
}


/** Represents a single highlight in a search result match. */
export interface TextMatchHighlight{
    /** The indice in the fragment where the matched text begins. */
    beginIndice: Scalars["Int"]
    /** The indice in the fragment where the matched text ends. */
    endIndice: Scalars["Int"]
    /** The text matched. */
    text: Scalars["String"]
    __typename: 'TextMatchHighlight'
}


/** Identifier formats available for advisories. */
export type SecurityAdvisoryIdentifierType = 'CVE' | 'GHSA'


/** Properties by which security advisory connections can be ordered. */
export type SecurityAdvisoryOrderField = 'PUBLISHED_AT' | 'UPDATED_AT'


/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnection{
    /** A list of edges. */
    edges: ((SecurityAdvisoryEdge|null)[]|null)
    /** A list of nodes. */
    nodes: ((SecurityAdvisory|null)[]|null)
    /** Information to aid in pagination. */
    pageInfo: PageInfo
    /** Identifies the total count of items in the connection. */
    totalCount: Scalars["Int"]
    __typename: 'SecurityAdvisoryConnection'
}


/** An edge in a connection. */
export interface SecurityAdvisoryEdge{
    /** A cursor for use in pagination. */
    cursor: Scalars["String"]
    /** The item at the end of the edge. */
    node: (SecurityAdvisory|null)
    __typename: 'SecurityAdvisoryEdge'
}


/** The root query for implementing GraphQL mutations. */
export interface Mutation{
    /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
    acceptEnterpriseAdministratorInvitation: (AcceptEnterpriseAdministratorInvitationPayload|null)
    /** Applies a suggested topic to the repository. */
    acceptTopicSuggestion: (AcceptTopicSuggestionPayload|null)
    /** Adds assignees to an assignable object. */
    addAssigneesToAssignable: (AddAssigneesToAssignablePayload|null)
    /** Adds a comment to an Issue or Pull Request. */
    addComment: (AddCommentPayload|null)
    /** Adds labels to a labelable object. */
    addLabelsToLabelable: (AddLabelsToLabelablePayload|null)
    /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
    addProjectCard: (AddProjectCardPayload|null)
    /** Adds a column to a Project. */
    addProjectColumn: (AddProjectColumnPayload|null)
    /** Adds a review to a Pull Request. */
    addPullRequestReview: (AddPullRequestReviewPayload|null)
    /** Adds a comment to a review. */
    addPullRequestReviewComment: (AddPullRequestReviewCommentPayload|null)
    /** Adds a new thread to a pending Pull Request Review. */
    addPullRequestReviewThread: (AddPullRequestReviewThreadPayload|null)
    /** Adds a reaction to a subject. */
    addReaction: (AddReactionPayload|null)
    /** Adds a star to a Starrable. */
    addStar: (AddStarPayload|null)
    /** Marks a repository as archived. */
    archiveRepository: (ArchiveRepositoryPayload|null)
    /** Cancels a pending invitation for an administrator to join an enterprise. */
    cancelEnterpriseAdminInvitation: (CancelEnterpriseAdminInvitationPayload|null)
    /** Update your status on GitHub. */
    changeUserStatus: (ChangeUserStatusPayload|null)
    /** Clears all labels from a labelable object. */
    clearLabelsFromLabelable: (ClearLabelsFromLabelablePayload|null)
    /** Creates a new project by cloning configuration from an existing project. */
    cloneProject: (CloneProjectPayload|null)
    /** Create a new repository with the same files and directory structure as a template repository. */
    cloneTemplateRepository: (CloneTemplateRepositoryPayload|null)
    /** Close an issue. */
    closeIssue: (CloseIssuePayload|null)
    /** Close a pull request. */
    closePullRequest: (ClosePullRequestPayload|null)
    /** Convert a project note card to one associated with a newly created issue. */
    convertProjectCardNoteToIssue: (ConvertProjectCardNoteToIssuePayload|null)
    /** Create a new branch protection rule */
    createBranchProtectionRule: (CreateBranchProtectionRulePayload|null)
    /** Create a check run. */
    createCheckRun: (CreateCheckRunPayload|null)
    /** Create a check suite */
    createCheckSuite: (CreateCheckSuitePayload|null)
    /** Create a content attachment. */
    createContentAttachment: (CreateContentAttachmentPayload|null)
    /** Creates a new deployment event. */
    createDeployment: (CreateDeploymentPayload|null)
    /** Create a deployment status. */
    createDeploymentStatus: (CreateDeploymentStatusPayload|null)
    /** Creates an organization as part of an enterprise account. */
    createEnterpriseOrganization: (CreateEnterpriseOrganizationPayload|null)
    /** Creates a new IP allow list entry. */
    createIpAllowListEntry: (CreateIpAllowListEntryPayload|null)
    /** Creates a new issue. */
    createIssue: (CreateIssuePayload|null)
    /** Creates a new label. */
    createLabel: (CreateLabelPayload|null)
    /** Creates a new project. */
    createProject: (CreateProjectPayload|null)
    /** Create a new pull request */
    createPullRequest: (CreatePullRequestPayload|null)
    /** Create a new Git Ref. */
    createRef: (CreateRefPayload|null)
    /** Create a new repository. */
    createRepository: (CreateRepositoryPayload|null)
    /** Creates a new team discussion. */
    createTeamDiscussion: (CreateTeamDiscussionPayload|null)
    /** Creates a new team discussion comment. */
    createTeamDiscussionComment: (CreateTeamDiscussionCommentPayload|null)
    /** Rejects a suggested topic for the repository. */
    declineTopicSuggestion: (DeclineTopicSuggestionPayload|null)
    /** Delete a branch protection rule */
    deleteBranchProtectionRule: (DeleteBranchProtectionRulePayload|null)
    /** Deletes a deployment. */
    deleteDeployment: (DeleteDeploymentPayload|null)
    /** Deletes an IP allow list entry. */
    deleteIpAllowListEntry: (DeleteIpAllowListEntryPayload|null)
    /** Deletes an Issue object. */
    deleteIssue: (DeleteIssuePayload|null)
    /** Deletes an IssueComment object. */
    deleteIssueComment: (DeleteIssueCommentPayload|null)
    /** Deletes a label. */
    deleteLabel: (DeleteLabelPayload|null)
    /** Delete a package version. */
    deletePackageVersion: (DeletePackageVersionPayload|null)
    /** Deletes a project. */
    deleteProject: (DeleteProjectPayload|null)
    /** Deletes a project card. */
    deleteProjectCard: (DeleteProjectCardPayload|null)
    /** Deletes a project column. */
    deleteProjectColumn: (DeleteProjectColumnPayload|null)
    /** Deletes a pull request review. */
    deletePullRequestReview: (DeletePullRequestReviewPayload|null)
    /** Deletes a pull request review comment. */
    deletePullRequestReviewComment: (DeletePullRequestReviewCommentPayload|null)
    /** Delete a Git Ref. */
    deleteRef: (DeleteRefPayload|null)
    /** Deletes a team discussion. */
    deleteTeamDiscussion: (DeleteTeamDiscussionPayload|null)
    /** Deletes a team discussion comment. */
    deleteTeamDiscussionComment: (DeleteTeamDiscussionCommentPayload|null)
    /** Dismisses an approved or rejected pull request review. */
    dismissPullRequestReview: (DismissPullRequestReviewPayload|null)
    /** Follow a user. */
    followUser: (FollowUserPayload|null)
    /** Creates a new project by importing columns and a list of issues/PRs. */
    importProject: (ImportProjectPayload|null)
    /** Invite someone to become an administrator of the enterprise. */
    inviteEnterpriseAdmin: (InviteEnterpriseAdminPayload|null)
    /** Creates a repository link for a project. */
    linkRepositoryToProject: (LinkRepositoryToProjectPayload|null)
    /** Lock a lockable object */
    lockLockable: (LockLockablePayload|null)
    /** Marks a pull request ready for review. */
    markPullRequestReadyForReview: (MarkPullRequestReadyForReviewPayload|null)
    /** Merge a head into a branch. */
    mergeBranch: (MergeBranchPayload|null)
    /** Merge a pull request. */
    mergePullRequest: (MergePullRequestPayload|null)
    /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
    minimizeComment: (MinimizeCommentPayload|null)
    /** Moves a project card to another place. */
    moveProjectCard: (MoveProjectCardPayload|null)
    /** Moves a project column to another place. */
    moveProjectColumn: (MoveProjectColumnPayload|null)
    /** Pin an issue to a repository */
    pinIssue: (PinIssuePayload|null)
    /** Regenerates the identity provider recovery codes for an enterprise */
    regenerateEnterpriseIdentityProviderRecoveryCodes: (RegenerateEnterpriseIdentityProviderRecoveryCodesPayload|null)
    /** Removes assignees from an assignable object. */
    removeAssigneesFromAssignable: (RemoveAssigneesFromAssignablePayload|null)
    /** Removes an administrator from the enterprise. */
    removeEnterpriseAdmin: (RemoveEnterpriseAdminPayload|null)
    /** Removes the identity provider from an enterprise */
    removeEnterpriseIdentityProvider: (RemoveEnterpriseIdentityProviderPayload|null)
    /** Removes an organization from the enterprise */
    removeEnterpriseOrganization: (RemoveEnterpriseOrganizationPayload|null)
    /** Removes labels from a Labelable object. */
    removeLabelsFromLabelable: (RemoveLabelsFromLabelablePayload|null)
    /** Removes outside collaborator from all repositories in an organization. */
    removeOutsideCollaborator: (RemoveOutsideCollaboratorPayload|null)
    /** Removes a reaction from a subject. */
    removeReaction: (RemoveReactionPayload|null)
    /** Removes a star from a Starrable. */
    removeStar: (RemoveStarPayload|null)
    /** Reopen a issue. */
    reopenIssue: (ReopenIssuePayload|null)
    /** Reopen a pull request. */
    reopenPullRequest: (ReopenPullRequestPayload|null)
    /** Set review requests on a pull request. */
    requestReviews: (RequestReviewsPayload|null)
    /** Rerequests an existing check suite. */
    rerequestCheckSuite: (RerequestCheckSuitePayload|null)
    /** Marks a review thread as resolved. */
    resolveReviewThread: (ResolveReviewThreadPayload|null)
    /** Creates or updates the identity provider for an enterprise. */
    setEnterpriseIdentityProvider: (SetEnterpriseIdentityProviderPayload|null)
    /** Submits a pending pull request review. */
    submitPullRequestReview: (SubmitPullRequestReviewPayload|null)
    /** Transfer an issue to a different repository */
    transferIssue: (TransferIssuePayload|null)
    /** Unarchives a repository. */
    unarchiveRepository: (UnarchiveRepositoryPayload|null)
    /** Unfollow a user. */
    unfollowUser: (UnfollowUserPayload|null)
    /** Deletes a repository link from a project. */
    unlinkRepositoryFromProject: (UnlinkRepositoryFromProjectPayload|null)
    /** Unlock a lockable object */
    unlockLockable: (UnlockLockablePayload|null)
    /** Unmark an issue as a duplicate of another issue. */
    unmarkIssueAsDuplicate: (UnmarkIssueAsDuplicatePayload|null)
    /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
    unminimizeComment: (UnminimizeCommentPayload|null)
    /** Unpin a pinned issue from a repository */
    unpinIssue: (UnpinIssuePayload|null)
    /** Marks a review thread as unresolved. */
    unresolveReviewThread: (UnresolveReviewThreadPayload|null)
    /** Create a new branch protection rule */
    updateBranchProtectionRule: (UpdateBranchProtectionRulePayload|null)
    /** Update a check run */
    updateCheckRun: (UpdateCheckRunPayload|null)
    /** Modifies the settings of an existing check suite */
    updateCheckSuitePreferences: (UpdateCheckSuitePreferencesPayload|null)
    /** Sets the action execution capability setting for an enterprise. */
    updateEnterpriseActionExecutionCapabilitySetting: (UpdateEnterpriseActionExecutionCapabilitySettingPayload|null)
    /** Updates the role of an enterprise administrator. */
    updateEnterpriseAdministratorRole: (UpdateEnterpriseAdministratorRolePayload|null)
    /** Sets whether private repository forks are enabled for an enterprise. */
    updateEnterpriseAllowPrivateRepositoryForkingSetting: (UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload|null)
    /** Sets the default repository permission for organizations in an enterprise. */
    updateEnterpriseDefaultRepositoryPermissionSetting: (UpdateEnterpriseDefaultRepositoryPermissionSettingPayload|null)
    /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
    updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: (UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload|null)
    /** Sets the members can create repositories setting for an enterprise. */
    updateEnterpriseMembersCanCreateRepositoriesSetting: (UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload|null)
    /** Sets the members can delete issues setting for an enterprise. */
    updateEnterpriseMembersCanDeleteIssuesSetting: (UpdateEnterpriseMembersCanDeleteIssuesSettingPayload|null)
    /** Sets the members can delete repositories setting for an enterprise. */
    updateEnterpriseMembersCanDeleteRepositoriesSetting: (UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload|null)
    /** Sets whether members can invite collaborators are enabled for an enterprise. */
    updateEnterpriseMembersCanInviteCollaboratorsSetting: (UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload|null)
    /** Sets whether or not an organization admin can make purchases. */
    updateEnterpriseMembersCanMakePurchasesSetting: (UpdateEnterpriseMembersCanMakePurchasesSettingPayload|null)
    /** Sets the members can update protected branches setting for an enterprise. */
    updateEnterpriseMembersCanUpdateProtectedBranchesSetting: (UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload|null)
    /** Sets the members can view dependency insights for an enterprise. */
    updateEnterpriseMembersCanViewDependencyInsightsSetting: (UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload|null)
    /** Sets whether organization projects are enabled for an enterprise. */
    updateEnterpriseOrganizationProjectsSetting: (UpdateEnterpriseOrganizationProjectsSettingPayload|null)
    /** Updates an enterprise's profile. */
    updateEnterpriseProfile: (UpdateEnterpriseProfilePayload|null)
    /** Sets whether repository projects are enabled for a enterprise. */
    updateEnterpriseRepositoryProjectsSetting: (UpdateEnterpriseRepositoryProjectsSettingPayload|null)
    /** Sets whether team discussions are enabled for an enterprise. */
    updateEnterpriseTeamDiscussionsSetting: (UpdateEnterpriseTeamDiscussionsSettingPayload|null)
    /** Sets whether two factor authentication is required for all users in an enterprise. */
    updateEnterpriseTwoFactorAuthenticationRequiredSetting: (UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload|null)
    /** Sets whether an IP allow list is enabled on an owner. */
    updateIpAllowListEnabledSetting: (UpdateIpAllowListEnabledSettingPayload|null)
    /** Updates an IP allow list entry. */
    updateIpAllowListEntry: (UpdateIpAllowListEntryPayload|null)
    /** Updates an Issue. */
    updateIssue: (UpdateIssuePayload|null)
    /** Updates an IssueComment object. */
    updateIssueComment: (UpdateIssueCommentPayload|null)
    /** Updates an existing label. */
    updateLabel: (UpdateLabelPayload|null)
    /** Updates an existing project. */
    updateProject: (UpdateProjectPayload|null)
    /** Updates an existing project card. */
    updateProjectCard: (UpdateProjectCardPayload|null)
    /** Updates an existing project column. */
    updateProjectColumn: (UpdateProjectColumnPayload|null)
    /** Update a pull request */
    updatePullRequest: (UpdatePullRequestPayload|null)
    /** Updates the body of a pull request review. */
    updatePullRequestReview: (UpdatePullRequestReviewPayload|null)
    /** Updates a pull request review comment. */
    updatePullRequestReviewComment: (UpdatePullRequestReviewCommentPayload|null)
    /** Update a Git Ref. */
    updateRef: (UpdateRefPayload|null)
    /**
     * Creates, updates and/or deletes multiple refs in a repository.
     * 
     * This mutation takes a list of `RefUpdate`s and performs these updates
     * on the repository. All updates are performed atomically, meaning that
     * if one of them is rejected, no other ref will be modified.
     * 
     * `RefUpdate.beforeOid` specifies that the given reference needs to point
     * to the given value before performing any updates. A value of
     * `0000000000000000000000000000000000000000` can be used to verify that
     * the references should not exist.
     * 
     * `RefUpdate.afterOid` specifies the value that the given reference
     * will point to after performing all updates. A value of
     * `0000000000000000000000000000000000000000` can be used to delete a
     * reference.
     * 
     * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
     * for the given reference will be allowed.
     */
    updateRefs: (UpdateRefsPayload|null)
    /** Update information about a repository. */
    updateRepository: (UpdateRepositoryPayload|null)
    /** Updates the state for subscribable subjects. */
    updateSubscription: (UpdateSubscriptionPayload|null)
    /** Updates a team discussion. */
    updateTeamDiscussion: (UpdateTeamDiscussionPayload|null)
    /** Updates a discussion comment. */
    updateTeamDiscussionComment: (UpdateTeamDiscussionCommentPayload|null)
    /** Updates team review assignment. */
    updateTeamReviewAssignment: (UpdateTeamReviewAssignmentPayload|null)
    /** Replaces the repository's topics with the given topics. */
    updateTopics: (UpdateTopicsPayload|null)
    __typename: 'Mutation'
}


/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The invitation that was accepted. */
    invitation: (EnterpriseAdministratorInvitation|null)
    /** A message confirming the result of accepting an administrator invitation. */
    message: (Scalars["String"]|null)
    __typename: 'AcceptEnterpriseAdministratorInvitationPayload'
}


/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The accepted topic. */
    topic: (Topic|null)
    __typename: 'AcceptTopicSuggestionPayload'
}


/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayload{
    /** The item that was assigned. */
    assignable: (Assignable|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'AddAssigneesToAssignablePayload'
}


/** Autogenerated return type of AddComment */
export interface AddCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The edge from the subject's comment connection. */
    commentEdge: (IssueCommentEdge|null)
    /** The subject */
    subject: (Node|null)
    /** The edge from the subject's timeline connection. */
    timelineEdge: (IssueTimelineItemEdge|null)
    __typename: 'AddCommentPayload'
}


/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The item that was labeled. */
    labelable: (Labelable|null)
    __typename: 'AddLabelsToLabelablePayload'
}


/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayload{
    /** The edge from the ProjectColumn's card connection. */
    cardEdge: (ProjectCardEdge|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The ProjectColumn */
    projectColumn: (ProjectColumn|null)
    __typename: 'AddProjectCardPayload'
}


/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The edge from the project's column connection. */
    columnEdge: (ProjectColumnEdge|null)
    /** The project */
    project: (Project|null)
    __typename: 'AddProjectColumnPayload'
}


/** The possible events to perform on a pull request review. */
export type PullRequestReviewEvent = 'APPROVE' | 'COMMENT' | 'DISMISS' | 'REQUEST_CHANGES'


/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The newly created pull request review. */
    pullRequestReview: (PullRequestReview|null)
    /** The edge from the pull request's review connection. */
    reviewEdge: (PullRequestReviewEdge|null)
    __typename: 'AddPullRequestReviewPayload'
}


/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The newly created comment. */
    comment: (PullRequestReviewComment|null)
    /** The edge from the review's comment connection. */
    commentEdge: (PullRequestReviewCommentEdge|null)
    __typename: 'AddPullRequestReviewCommentPayload'
}


/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The newly created thread. */
    thread: (PullRequestReviewThread|null)
    __typename: 'AddPullRequestReviewThreadPayload'
}


/** Autogenerated return type of AddReaction */
export interface AddReactionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The reaction object. */
    reaction: (Reaction|null)
    /** The reactable subject. */
    subject: (Reactable|null)
    __typename: 'AddReactionPayload'
}


/** Autogenerated return type of AddStar */
export interface AddStarPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The starrable. */
    starrable: (Starrable|null)
    __typename: 'AddStarPayload'
}


/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The repository that was marked as archived. */
    repository: (Repository|null)
    __typename: 'ArchiveRepositoryPayload'
}


/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The invitation that was canceled. */
    invitation: (EnterpriseAdministratorInvitation|null)
    /** A message confirming the result of canceling an administrator invitation. */
    message: (Scalars["String"]|null)
    __typename: 'CancelEnterpriseAdminInvitationPayload'
}


/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** Your updated status. */
    status: (UserStatus|null)
    __typename: 'ChangeUserStatusPayload'
}


/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The item that was unlabeled. */
    labelable: (Labelable|null)
    __typename: 'ClearLabelsFromLabelablePayload'
}


/** Autogenerated return type of CloneProject */
export interface CloneProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The id of the JobStatus for populating cloned fields. */
    jobStatusId: (Scalars["String"]|null)
    /** The new cloned project. */
    project: (Project|null)
    __typename: 'CloneProjectPayload'
}


/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new repository. */
    repository: (Repository|null)
    __typename: 'CloneTemplateRepositoryPayload'
}


/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue that was closed. */
    issue: (Issue|null)
    __typename: 'CloseIssuePayload'
}


/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request that was closed. */
    pullRequest: (PullRequest|null)
    __typename: 'ClosePullRequestPayload'
}


/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated ProjectCard. */
    projectCard: (ProjectCard|null)
    __typename: 'ConvertProjectCardNoteToIssuePayload'
}


/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayload{
    /** The newly created BranchProtectionRule. */
    branchProtectionRule: (BranchProtectionRule|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'CreateBranchProtectionRulePayload'
}


/** The possible states that can be requested when creating a check run. */
export type RequestableCheckStatusState = 'COMPLETED' | 'IN_PROGRESS' | 'QUEUED'


/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayload{
    /** The newly created check run. */
    checkRun: (CheckRun|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'CreateCheckRunPayload'
}


/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayload{
    /** The newly created check suite. */
    checkSuite: (CheckSuite|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'CreateCheckSuitePayload'
}


/** Autogenerated return type of CreateContentAttachment */
export interface CreateContentAttachmentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The newly created content attachment. */
    contentAttachment: (ContentAttachment|null)
    __typename: 'CreateContentAttachmentPayload'
}


/** A content attachment */
export interface ContentAttachment{
    /** The body text of the content attachment. This parameter supports markdown. */
    body: Scalars["String"]
    /** The content reference that the content attachment is attached to. */
    contentReference: ContentReference
    /** Identifies the primary key from the database. */
    databaseId: Scalars["Int"]
    id: Scalars["ID"]
    /** The title of the content attachment. */
    title: Scalars["String"]
    __typename: 'ContentAttachment'
}


/** A content reference */
export interface ContentReference{
    /** Identifies the primary key from the database. */
    databaseId: Scalars["Int"]
    id: Scalars["ID"]
    /** The reference of the content reference. */
    reference: Scalars["String"]
    __typename: 'ContentReference'
}


/** Autogenerated return type of CreateDeployment */
export interface CreateDeploymentPayload{
    /** True if the default branch has been auto-merged into the deployment ref. */
    autoMerged: (Scalars["Boolean"]|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new deployment. */
    deployment: (Deployment|null)
    __typename: 'CreateDeploymentPayload'
}


/** Autogenerated return type of CreateDeploymentStatus */
export interface CreateDeploymentStatusPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new deployment status. */
    deploymentStatus: (DeploymentStatus|null)
    __typename: 'CreateDeploymentStatusPayload'
}


/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise that owns the created organization. */
    enterprise: (Enterprise|null)
    /** The organization that was created. */
    organization: (Organization|null)
    __typename: 'CreateEnterpriseOrganizationPayload'
}


/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The IP allow list entry that was created. */
    ipAllowListEntry: (IpAllowListEntry|null)
    __typename: 'CreateIpAllowListEntryPayload'
}


/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new issue. */
    issue: (Issue|null)
    __typename: 'CreateIssuePayload'
}


/** Autogenerated return type of CreateLabel */
export interface CreateLabelPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new label. */
    label: (Label|null)
    __typename: 'CreateLabelPayload'
}


/** GitHub-provided templates for Projects */
export type ProjectTemplate = 'AUTOMATED_KANBAN_V2' | 'AUTOMATED_REVIEWS_KANBAN' | 'BASIC_KANBAN' | 'BUG_TRIAGE'


/** Autogenerated return type of CreateProject */
export interface CreateProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new project. */
    project: (Project|null)
    __typename: 'CreateProjectPayload'
}


/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new pull request. */
    pullRequest: (PullRequest|null)
    __typename: 'CreatePullRequestPayload'
}


/** Autogenerated return type of CreateRef */
export interface CreateRefPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The newly created ref. */
    ref: (Ref|null)
    __typename: 'CreateRefPayload'
}


/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new repository. */
    repository: (Repository|null)
    __typename: 'CreateRepositoryPayload'
}


/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new discussion. */
    teamDiscussion: (TeamDiscussion|null)
    __typename: 'CreateTeamDiscussionPayload'
}


/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new comment. */
    teamDiscussionComment: (TeamDiscussionComment|null)
    __typename: 'CreateTeamDiscussionCommentPayload'
}


/** Reason that the suggested topic is declined. */
export type TopicSuggestionDeclineReason = 'NOT_RELEVANT' | 'PERSONAL_PREFERENCE' | 'TOO_GENERAL' | 'TOO_SPECIFIC'


/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The declined topic. */
    topic: (Topic|null)
    __typename: 'DeclineTopicSuggestionPayload'
}


/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteBranchProtectionRulePayload'
}


/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteDeploymentPayload'
}


/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The IP allow list entry that was deleted. */
    ipAllowListEntry: (IpAllowListEntry|null)
    __typename: 'DeleteIpAllowListEntryPayload'
}


/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The repository the issue belonged to */
    repository: (Repository|null)
    __typename: 'DeleteIssuePayload'
}


/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteIssueCommentPayload'
}


/** Autogenerated return type of DeleteLabel */
export interface DeleteLabelPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteLabelPayload'
}


/** Autogenerated return type of DeletePackageVersion */
export interface DeletePackageVersionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** Whether or not the operation succeeded. */
    success: (Scalars["Boolean"]|null)
    __typename: 'DeletePackageVersionPayload'
}


/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The repository or organization the project was removed from. */
    owner: (ProjectOwner|null)
    __typename: 'DeleteProjectPayload'
}


/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The column the deleted card was in. */
    column: (ProjectColumn|null)
    /** The deleted card ID. */
    deletedCardId: (Scalars["ID"]|null)
    __typename: 'DeleteProjectCardPayload'
}


/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The deleted column ID. */
    deletedColumnId: (Scalars["ID"]|null)
    /** The project the deleted column was in. */
    project: (Project|null)
    __typename: 'DeleteProjectColumnPayload'
}


/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The deleted pull request review. */
    pullRequestReview: (PullRequestReview|null)
    __typename: 'DeletePullRequestReviewPayload'
}


/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request review the deleted comment belonged to. */
    pullRequestReview: (PullRequestReview|null)
    __typename: 'DeletePullRequestReviewCommentPayload'
}


/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteRefPayload'
}


/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteTeamDiscussionPayload'
}


/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'DeleteTeamDiscussionCommentPayload'
}


/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The dismissed pull request review. */
    pullRequestReview: (PullRequestReview|null)
    __typename: 'DismissPullRequestReviewPayload'
}


/** Autogenerated return type of FollowUser */
export interface FollowUserPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The user that was followed. */
    user: (User|null)
    __typename: 'FollowUserPayload'
}


/** Autogenerated return type of ImportProject */
export interface ImportProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new Project! */
    project: (Project|null)
    __typename: 'ImportProjectPayload'
}


/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The created enterprise administrator invitation. */
    invitation: (EnterpriseAdministratorInvitation|null)
    __typename: 'InviteEnterpriseAdminPayload'
}


/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The linked Project. */
    project: (Project|null)
    /** The linked Repository. */
    repository: (Repository|null)
    __typename: 'LinkRepositoryToProjectPayload'
}


/** Autogenerated return type of LockLockable */
export interface LockLockablePayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The item that was locked. */
    lockedRecord: (Lockable|null)
    __typename: 'LockLockablePayload'
}


/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request that is ready for review. */
    pullRequest: (PullRequest|null)
    __typename: 'MarkPullRequestReadyForReviewPayload'
}


/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The resulting merge Commit. */
    mergeCommit: (Commit|null)
    __typename: 'MergeBranchPayload'
}


/** Represents available types of methods to use when merging a pull request. */
export type PullRequestMergeMethod = 'MERGE' | 'REBASE' | 'SQUASH'


/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request that was merged. */
    pullRequest: (PullRequest|null)
    __typename: 'MergePullRequestPayload'
}


/** The reasons a piece of content can be reported or minimized. */
export type ReportedContentClassifiers = 'ABUSE' | 'DUPLICATE' | 'OFF_TOPIC' | 'OUTDATED' | 'RESOLVED' | 'SPAM'


/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The comment that was minimized. */
    minimizedComment: (Minimizable|null)
    __typename: 'MinimizeCommentPayload'
}


/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayload{
    /** The new edge of the moved card. */
    cardEdge: (ProjectCardEdge|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'MoveProjectCardPayload'
}


/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The new edge of the moved column. */
    columnEdge: (ProjectColumnEdge|null)
    __typename: 'MoveProjectColumnPayload'
}


/** Autogenerated return type of PinIssue */
export interface PinIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue that was pinned */
    issue: (Issue|null)
    __typename: 'PinIssuePayload'
}


/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The identity provider for the enterprise. */
    identityProvider: (EnterpriseIdentityProvider|null)
    __typename: 'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload'
}


/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayload{
    /** The item that was unassigned. */
    assignable: (Assignable|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'RemoveAssigneesFromAssignablePayload'
}


/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayload{
    /** The user who was removed as an administrator. */
    admin: (User|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated enterprise. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of removing an administrator. */
    message: (Scalars["String"]|null)
    /** The viewer performing the mutation. */
    viewer: (User|null)
    __typename: 'RemoveEnterpriseAdminPayload'
}


/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The identity provider that was removed from the enterprise. */
    identityProvider: (EnterpriseIdentityProvider|null)
    __typename: 'RemoveEnterpriseIdentityProviderPayload'
}


/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated enterprise. */
    enterprise: (Enterprise|null)
    /** The organization that was removed from the enterprise. */
    organization: (Organization|null)
    /** The viewer performing the mutation. */
    viewer: (User|null)
    __typename: 'RemoveEnterpriseOrganizationPayload'
}


/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The Labelable the labels were removed from. */
    labelable: (Labelable|null)
    __typename: 'RemoveLabelsFromLabelablePayload'
}


/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The user that was removed as an outside collaborator. */
    removedUser: (User|null)
    __typename: 'RemoveOutsideCollaboratorPayload'
}


/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The reaction object. */
    reaction: (Reaction|null)
    /** The reactable subject. */
    subject: (Reactable|null)
    __typename: 'RemoveReactionPayload'
}


/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The starrable. */
    starrable: (Starrable|null)
    __typename: 'RemoveStarPayload'
}


/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue that was opened. */
    issue: (Issue|null)
    __typename: 'ReopenIssuePayload'
}


/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request that was reopened. */
    pullRequest: (PullRequest|null)
    __typename: 'ReopenPullRequestPayload'
}


/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The pull request that is getting requests. */
    pullRequest: (PullRequest|null)
    /** The edge from the pull request to the requested reviewers. */
    requestedReviewersEdge: (UserEdge|null)
    __typename: 'RequestReviewsPayload'
}


/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayload{
    /** The requested check suite. */
    checkSuite: (CheckSuite|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'RerequestCheckSuitePayload'
}


/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The thread to resolve. */
    thread: (PullRequestReviewThread|null)
    __typename: 'ResolveReviewThreadPayload'
}


/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The identity provider for the enterprise. */
    identityProvider: (EnterpriseIdentityProvider|null)
    __typename: 'SetEnterpriseIdentityProviderPayload'
}


/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The submitted pull request review. */
    pullRequestReview: (PullRequestReview|null)
    __typename: 'SubmitPullRequestReviewPayload'
}


/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue that was transferred */
    issue: (Issue|null)
    __typename: 'TransferIssuePayload'
}


/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The repository that was unarchived. */
    repository: (Repository|null)
    __typename: 'UnarchiveRepositoryPayload'
}


/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The user that was unfollowed. */
    user: (User|null)
    __typename: 'UnfollowUserPayload'
}


/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The linked Project. */
    project: (Project|null)
    /** The linked Repository. */
    repository: (Repository|null)
    __typename: 'UnlinkRepositoryFromProjectPayload'
}


/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The item that was unlocked. */
    unlockedRecord: (Lockable|null)
    __typename: 'UnlockLockablePayload'
}


/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue or pull request that was marked as a duplicate. */
    duplicate: (IssueOrPullRequest|null)
    __typename: 'UnmarkIssueAsDuplicatePayload'
}


/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The comment that was unminimized. */
    unminimizedComment: (Minimizable|null)
    __typename: 'UnminimizeCommentPayload'
}


/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue that was unpinned */
    issue: (Issue|null)
    __typename: 'UnpinIssuePayload'
}


/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The thread to resolve. */
    thread: (PullRequestReviewThread|null)
    __typename: 'UnresolveReviewThreadPayload'
}


/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayload{
    /** The newly created BranchProtectionRule. */
    branchProtectionRule: (BranchProtectionRule|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'UpdateBranchProtectionRulePayload'
}


/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayload{
    /** The updated check run. */
    checkRun: (CheckRun|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'UpdateCheckRunPayload'
}


/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated repository. */
    repository: (Repository|null)
    __typename: 'UpdateCheckSuitePreferencesPayload'
}


/** The possible capabilities for action executions setting. */
export type ActionExecutionCapabilitySetting = 'ALL_ACTIONS' | 'DISABLED' | 'LOCAL_ACTIONS_ONLY' | 'NO_POLICY'


/** Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting */
export interface UpdateEnterpriseActionExecutionCapabilitySettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated action execution capability setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the action execution capability setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseActionExecutionCapabilitySettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** A message confirming the result of changing the administrator's role. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseAdministratorRolePayload'
}


/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated allow private repository forking setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the allow private repository forking setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated default repository permission setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the default repository permission setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can change repository visibility setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can change repository visibility setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can create repositories setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can create repositories setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can delete issues setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can delete issues setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can delete repositories setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can delete repositories setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can invite collaborators setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can invite collaborators setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can make purchases setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can make purchases setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanMakePurchasesSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can update protected branches setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can update protected branches setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated members can view dependency insights setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the members can view dependency insights setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated organization projects setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the organization projects setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseOrganizationProjectsSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated enterprise. */
    enterprise: (Enterprise|null)
    __typename: 'UpdateEnterpriseProfilePayload'
}


/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated repository projects setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the repository projects setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseRepositoryProjectsSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated team discussions setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the team discussions setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseTeamDiscussionsSettingPayload'
}


/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The enterprise with the updated two factor authentication required setting. */
    enterprise: (Enterprise|null)
    /** A message confirming the result of updating the two factor authentication required setting. */
    message: (Scalars["String"]|null)
    __typename: 'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload'
}


/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The IP allow list owner on which the setting was updated. */
    owner: (IpAllowListOwner|null)
    __typename: 'UpdateIpAllowListEnabledSettingPayload'
}


/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The IP allow list entry that was updated. */
    ipAllowListEntry: (IpAllowListEntry|null)
    __typename: 'UpdateIpAllowListEntryPayload'
}


/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The issue. */
    issue: (Issue|null)
    __typename: 'UpdateIssuePayload'
}


/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated comment. */
    issueComment: (IssueComment|null)
    __typename: 'UpdateIssueCommentPayload'
}


/** Autogenerated return type of UpdateLabel */
export interface UpdateLabelPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated label. */
    label: (Label|null)
    __typename: 'UpdateLabelPayload'
}


/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated project. */
    project: (Project|null)
    __typename: 'UpdateProjectPayload'
}


/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated ProjectCard. */
    projectCard: (ProjectCard|null)
    __typename: 'UpdateProjectCardPayload'
}


/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated project column. */
    projectColumn: (ProjectColumn|null)
    __typename: 'UpdateProjectColumnPayload'
}


/** The possible target states when updating a pull request. */
export type PullRequestUpdateState = 'CLOSED' | 'OPEN'


/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayload{
    /** Identifies the actor who performed the event. */
    actor: (Actor|null)
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated pull request. */
    pullRequest: (PullRequest|null)
    __typename: 'UpdatePullRequestPayload'
}


/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated pull request review. */
    pullRequestReview: (PullRequestReview|null)
    __typename: 'UpdatePullRequestReviewPayload'
}


/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated comment. */
    pullRequestReviewComment: (PullRequestReviewComment|null)
    __typename: 'UpdatePullRequestReviewCommentPayload'
}


/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated Ref. */
    ref: (Ref|null)
    __typename: 'UpdateRefPayload'
}


/** Autogenerated return type of UpdateRefs */
export interface UpdateRefsPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    __typename: 'UpdateRefsPayload'
}


/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated repository. */
    repository: (Repository|null)
    __typename: 'UpdateRepositoryPayload'
}


/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The input subscribable entity. */
    subscribable: (Subscribable|null)
    __typename: 'UpdateSubscriptionPayload'
}


/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated discussion. */
    teamDiscussion: (TeamDiscussion|null)
    __typename: 'UpdateTeamDiscussionPayload'
}


/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The updated comment. */
    teamDiscussionComment: (TeamDiscussionComment|null)
    __typename: 'UpdateTeamDiscussionCommentPayload'
}


/** Autogenerated return type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** The team that was modified */
    team: (Team|null)
    __typename: 'UpdateTeamReviewAssignmentPayload'
}


/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayload{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId: (Scalars["String"]|null)
    /** Names of the provided topics that are not valid. */
    invalidTopicNames: (Scalars["String"][]|null)
    /** The updated repository. */
    repository: (Repository|null)
    __typename: 'UpdateTopicsPayload'
}


/** Represents a Git blob. */
export interface Blob extends GitObject,Node{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"]
    /** Byte size of Blob object */
    byteSize: Scalars["Int"]
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"]
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"]
    id: Scalars["ID"]
    /**
     * Indicates whether the Blob is binary or text
     * 
     * **Upcoming Change on 2019-07-01 UTC**
     * **Description:** Type for `isBinary` will change from `Boolean!` to `Boolean`.
     * **Reason:** The `isBinary` field may return `null` when it cannot determine if a Blob is binary.
     */
    isBinary: Scalars["Boolean"]
    /** Indicates whether the contents is truncated */
    isTruncated: Scalars["Boolean"]
    /** The Git object ID */
    oid: Scalars["GitObjectID"]
    /** The Repository the Git object belongs to */
    repository: Repository
    /** UTF8 text data or null if the Blob is binary */
    text: (Scalars["String"]|null)
    __typename: 'Blob'
}


/** A generic hovercard context with a message and icon */
export interface GenericHovercardContext extends HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    __typename: 'GenericHovercardContext'
}


/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignature extends GitSignature{
    /** Email used to sign this object. */
    email: Scalars["String"]
    /** True if the signature is valid and verified by GitHub. */
    isValid: Scalars["Boolean"]
    /** Hex-encoded ID of the key that signed this object. */
    keyId: (Scalars["String"]|null)
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload: Scalars["String"]
    /** ASCII-armored signature header from object. */
    signature: Scalars["String"]
    /** GitHub user corresponding to the email signing this commit. */
    signer: (User|null)
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state: GitSignatureState
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub: Scalars["Boolean"]
    __typename: 'GpgSignature'
}


/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContext extends HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    /** Teams in this organization the user is a member of that are relevant */
    relevantTeams: TeamConnection
    /** The path for the full team list for this user */
    teamsResourcePath: Scalars["URI"]
    /** The URL for the full team list for this user */
    teamsUrl: Scalars["URI"]
    /** The total number of teams the user is on in the organization */
    totalTeamCount: Scalars["Int"]
    __typename: 'OrganizationTeamsHovercardContext'
}


/** An organization list hovercard context */
export interface OrganizationsHovercardContext extends HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    /** Organizations this user is a member of that are relevant */
    relevantOrganizations: OrganizationConnection
    /** The total number of organizations this user is in */
    totalOrganizationCount: Scalars["Int"]
    __typename: 'OrganizationsHovercardContext'
}


/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTag extends Node{
    id: Scalars["ID"]
    /** Identifies the tag name of the version. */
    name: Scalars["String"]
    /** Version that the tag is associated with. */
    version: (PackageVersion|null)
    __typename: 'PackageTag'
}


/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface ReviewStatusHovercardContext extends HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    /** The current status of the pull request with respect to code review. */
    reviewDecision: (PullRequestReviewDecision|null)
    __typename: 'ReviewStatusHovercardContext'
}


/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignature extends GitSignature{
    /** Email used to sign this object. */
    email: Scalars["String"]
    /** True if the signature is valid and verified by GitHub. */
    isValid: Scalars["Boolean"]
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload: Scalars["String"]
    /** ASCII-armored signature header from object. */
    signature: Scalars["String"]
    /** GitHub user corresponding to the email signing this commit. */
    signer: (User|null)
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state: GitSignatureState
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub: Scalars["Boolean"]
    __typename: 'SmimeSignature'
}


/** Represents a Git tag. */
export interface Tag extends GitObject,Node{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid: Scalars["String"]
    /** The HTTP path for this Git object */
    commitResourcePath: Scalars["URI"]
    /** The HTTP URL for this Git object */
    commitUrl: Scalars["URI"]
    id: Scalars["ID"]
    /** The Git tag message. */
    message: (Scalars["String"]|null)
    /** The Git tag name. */
    name: Scalars["String"]
    /** The Git object ID */
    oid: Scalars["GitObjectID"]
    /** The Repository the Git object belongs to */
    repository: Repository
    /** Details about the tag author. */
    tagger: (GitActor|null)
    /** The Git object the tag points to. */
    target: GitObject
    __typename: 'Tag'
}


/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignature extends GitSignature{
    /** Email used to sign this object. */
    email: Scalars["String"]
    /** True if the signature is valid and verified by GitHub. */
    isValid: Scalars["Boolean"]
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload: Scalars["String"]
    /** ASCII-armored signature header from object. */
    signature: Scalars["String"]
    /** GitHub user corresponding to the email signing this commit. */
    signer: (User|null)
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state: GitSignatureState
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub: Scalars["Boolean"]
    __typename: 'UnknownSignature'
}


/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContext extends HovercardContext{
    /** A string describing this context */
    message: Scalars["String"]
    /** An octicon to accompany this context */
    octicon: Scalars["String"]
    /** Identifies the user who is related to this context. */
    viewer: User
    __typename: 'ViewerHovercardContext'
}


/** The query root of GitHub's GraphQL interface. */
export interface QueryRequest{
    /** Look up a code of conduct by its key */
    codeOfConduct?: [{
    /** The code of conduct's key */
    key: Scalars["String"]},CodeOfConductRequest]
    /** Look up a code of conduct by its key */
    codesOfConduct?: CodeOfConductRequest
    /** Look up an enterprise by URL slug. */
    enterprise?: [{
    /** The enterprise invitation token. */
    invitationToken?: (Scalars["String"]|null),
    /** The enterprise URL slug. */
    slug: Scalars["String"]},EnterpriseRequest]
    /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
    enterpriseAdministratorInvitation?: [{
    /** The slug of the enterprise the user was invited to join. */
    enterpriseSlug: Scalars["String"],
    /** The role for the business member invitation. */
    role: EnterpriseAdministratorRole,
    /** The login of the user invited to join the business. */
    userLogin: Scalars["String"]},EnterpriseAdministratorInvitationRequest]
    /** Look up a pending enterprise administrator invitation by invitation token. */
    enterpriseAdministratorInvitationByToken?: [{
    /** The invitation token sent with the invitation email. */
    invitationToken: Scalars["String"]},EnterpriseAdministratorInvitationRequest]
    /** Look up an open source license by its key */
    license?: [{
    /** The license's downcased SPDX ID */
    key: Scalars["String"]},LicenseRequest]
    /** Return a list of known open source licenses */
    licenses?: LicenseRequest
    /** Get alphabetically sorted list of Marketplace categories */
    marketplaceCategories?: [{
    /** Exclude categories with no listings. */
    excludeEmpty?: (Scalars["Boolean"]|null),
    /** Returns top level categories only, excluding any subcategories. */
    excludeSubcategories?: (Scalars["Boolean"]|null),
    /** Return only the specified categories. */
    includeCategories?: (Scalars["String"][]|null)},MarketplaceCategoryRequest]|MarketplaceCategoryRequest
    /** Look up a Marketplace category by its slug. */
    marketplaceCategory?: [{
    /** The URL slug of the category. */
    slug: Scalars["String"],
    /** Also check topic aliases for the category slug */
    useTopicAliases?: (Scalars["Boolean"]|null)},MarketplaceCategoryRequest]
    /** Look up a single Marketplace listing */
    marketplaceListing?: [{
    /** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
    slug: Scalars["String"]},MarketplaceListingRequest]
    /** Look up Marketplace listings */
    marketplaceListings?: [{
    /** Select listings that can be administered by the specified user. */
    adminId?: (Scalars["ID"]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /**
     * Select listings visible to the viewer even if they are not approved. If omitted or
     * false, only approved listings will be returned.
     */
    allStates?: (Scalars["Boolean"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Select only listings with the given category. */
    categorySlug?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Select listings for products owned by the specified organization. */
    organizationId?: (Scalars["ID"]|null),
    /** Select only listings where the primary category matches the given category slug. */
    primaryCategoryOnly?: (Scalars["Boolean"]|null),
    /** Select the listings with these slugs, if they are visible to the viewer. */
    slugs?: ((Scalars["String"]|null)[]|null),
    /** Also check topic aliases for the category slug */
    useTopicAliases?: (Scalars["Boolean"]|null),
    /**
     * Select listings to which user has admin access. If omitted, listings visible to the
     * viewer are returned.
     */
    viewerCanAdmin?: (Scalars["Boolean"]|null),
    /** Select only listings that offer a free trial. */
    withFreeTrialsOnly?: (Scalars["Boolean"]|null)},MarketplaceListingConnectionRequest]|MarketplaceListingConnectionRequest
    /** Return information about the GitHub instance */
    meta?: GitHubMetadataRequest
    /** Fetches an object given its ID. */
    node?: [{
    /** ID of the object. */
    id: Scalars["ID"]},NodeRequest]
    /** Lookup nodes by a list of IDs. */
    nodes?: [{
    /** The list of node IDs. */
    ids: Scalars["ID"][]},NodeRequest]
    /** Lookup a organization by login. */
    organization?: [{
    /** The organization's login. */
    login: Scalars["String"]},OrganizationRequest]
    /** The client's rate limit information. */
    rateLimit?: [{
    /** If true, calculate the cost for the query without evaluating it */
    dryRun?: (Scalars["Boolean"]|null)},RateLimitRequest]|RateLimitRequest
    /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
    relay?: QueryRequest
    /** Lookup a given repository by the owner and repository name. */
    repository?: [{
    /** The name of the repository */
    name: Scalars["String"],
    /** The login field of a user or organization */
    owner: Scalars["String"]},RepositoryRequest]
    /** Lookup a repository owner (ie. either a User or an Organization) by login. */
    repositoryOwner?: [{
    /** The username to lookup the owner by. */
    login: Scalars["String"]},RepositoryOwnerRequest]
    /** Lookup resource by a URL. */
    resource?: [{
    /** The URL. */
    url: Scalars["URI"]},UniformResourceLocatableRequest]
    /** Perform a search across resources. */
    search?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** The search string to look for. */
    query: Scalars["String"],
    /** The types of search items to search within. */
    type: SearchType},SearchResultItemConnectionRequest]
    /** GitHub Security Advisories */
    securityAdvisories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Filter advisories by identifier, e.g. GHSA or CVE. */
    identifier?: (SecurityAdvisoryIdentifierFilter|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for the returned topics. */
    orderBy?: (SecurityAdvisoryOrder|null),
    /** Filter advisories to those published since a time in the past. */
    publishedSince?: (Scalars["DateTime"]|null),
    /** Filter advisories to those updated since a time in the past. */
    updatedSince?: (Scalars["DateTime"]|null)},SecurityAdvisoryConnectionRequest]|SecurityAdvisoryConnectionRequest
    /** Fetch a Security Advisory by its GHSA ID */
    securityAdvisory?: [{
    /** GitHub Security Advisory ID. */
    ghsaId: Scalars["String"]},SecurityAdvisoryRequest]
    /** Software Vulnerabilities documented by GitHub Security Advisories */
    securityVulnerabilities?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** An ecosystem to filter vulnerabilities by. */
    ecosystem?: (SecurityAdvisoryEcosystem|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for the returned topics. */
    orderBy?: (SecurityVulnerabilityOrder|null),
    /** A package name to filter vulnerabilities by. */
    package?: (Scalars["String"]|null),
    /** A list of severities to filter vulnerabilities by. */
    severities?: (SecurityAdvisorySeverity[]|null)},SecurityVulnerabilityConnectionRequest]|SecurityVulnerabilityConnectionRequest
    /**
     * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
     * Look up a single Sponsors Listing
     */
    sponsorsListing?: [{
    /** Select the Sponsors listing which matches this slug */
    slug: Scalars["String"]},SponsorsListingRequest]
    /** Look up a topic by name. */
    topic?: [{
    /** The topic's name. */
    name: Scalars["String"]},TopicRequest]
    /** Lookup a user by login. */
    user?: [{
    /** The user's login. */
    login: Scalars["String"]},UserRequest]
    /** The currently authenticated user. */
    viewer?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The Code of Conduct for a repository */
export interface CodeOfConductRequest{
    /** The body of the Code of Conduct */
    body?: boolean|number
    id?: boolean|number
    /** The key for the Code of Conduct */
    key?: boolean|number
    /** The formal name of the Code of Conduct */
    name?: boolean|number
    /** The HTTP path for this Code of Conduct */
    resourcePath?: boolean|number
    /** The HTTP URL for this Code of Conduct */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object with an ID. */
export interface NodeRequest{
    /** ID of the object. */
    id?: boolean|number
    on_CodeOfConduct?: CodeOfConductRequest
    on_Enterprise?: EnterpriseRequest
    on_EnterpriseUserAccount?: EnterpriseUserAccountRequest
    on_Organization?: OrganizationRequest
    on_UserStatus?: UserStatusRequest
    on_User?: UserRequest
    on_Package?: PackageRequest
    on_PackageVersion?: PackageVersionRequest
    on_PackageFile?: PackageFileRequest
    on_Release?: ReleaseRequest
    on_ReleaseAsset?: ReleaseAssetRequest
    on_Ref?: RefRequest
    on_PullRequest?: PullRequestRequest
    on_UserContentEdit?: UserContentEditRequest
    on_Label?: LabelRequest
    on_Issue?: IssueRequest
    on_Reaction?: ReactionRequest
    on_Repository?: RepositoryRequest
    on_Project?: ProjectRequest
    on_ProjectColumn?: ProjectColumnRequest
    on_ProjectCard?: ProjectCardRequest
    on_RegistryPackage?: RegistryPackageRequest
    on_RegistryPackageVersion?: RegistryPackageVersionRequest
    on_RegistryPackageDependency?: RegistryPackageDependencyRequest
    on_RegistryPackageFile?: RegistryPackageFileRequest
    on_RegistryPackageTag?: RegistryPackageTagRequest
    on_Topic?: TopicRequest
    on_License?: LicenseRequest
    on_BranchProtectionRule?: BranchProtectionRuleRequest
    on_PushAllowance?: PushAllowanceRequest
    on_App?: AppRequest
    on_Team?: TeamRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_OrganizationInvitation?: OrganizationInvitationRequest
    on_ReviewDismissalAllowance?: ReviewDismissalAllowanceRequest
    on_CommitComment?: CommitCommentRequest
    on_Commit?: CommitRequest
    on_CheckSuite?: CheckSuiteRequest
    on_CheckRun?: CheckRunRequest
    on_Push?: PushRequest
    on_Deployment?: DeploymentRequest
    on_DeploymentStatus?: DeploymentStatusRequest
    on_Status?: StatusRequest
    on_StatusContext?: StatusContextRequest
    on_StatusCheckRollup?: StatusCheckRollupRequest
    on_Tree?: TreeRequest
    on_DependencyGraphManifest?: DependencyGraphManifestRequest
    on_DeployKey?: DeployKeyRequest
    on_Language?: LanguageRequest
    on_Milestone?: MilestoneRequest
    on_PinnedIssue?: PinnedIssueRequest
    on_RepositoryTopic?: RepositoryTopicRequest
    on_RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlertRequest
    on_SecurityAdvisory?: SecurityAdvisoryRequest
    on_IssueComment?: IssueCommentRequest
    on_AssignedEvent?: AssignedEventRequest
    on_Bot?: BotRequest
    on_Mannequin?: MannequinRequest
    on_ClosedEvent?: ClosedEventRequest
    on_CrossReferencedEvent?: CrossReferencedEventRequest
    on_DemilestonedEvent?: DemilestonedEventRequest
    on_LabeledEvent?: LabeledEventRequest
    on_LockedEvent?: LockedEventRequest
    on_MilestonedEvent?: MilestonedEventRequest
    on_ReferencedEvent?: ReferencedEventRequest
    on_RenamedTitleEvent?: RenamedTitleEventRequest
    on_ReopenedEvent?: ReopenedEventRequest
    on_SubscribedEvent?: SubscribedEventRequest
    on_TransferredEvent?: TransferredEventRequest
    on_UnassignedEvent?: UnassignedEventRequest
    on_UnlabeledEvent?: UnlabeledEventRequest
    on_UnlockedEvent?: UnlockedEventRequest
    on_UnsubscribedEvent?: UnsubscribedEventRequest
    on_UserBlockedEvent?: UserBlockedEventRequest
    on_AddedToProjectEvent?: AddedToProjectEventRequest
    on_CommentDeletedEvent?: CommentDeletedEventRequest
    on_ConnectedEvent?: ConnectedEventRequest
    on_ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEventRequest
    on_DisconnectedEvent?: DisconnectedEventRequest
    on_MarkedAsDuplicateEvent?: MarkedAsDuplicateEventRequest
    on_MentionedEvent?: MentionedEventRequest
    on_MovedColumnsInProjectEvent?: MovedColumnsInProjectEventRequest
    on_PinnedEvent?: PinnedEventRequest
    on_RemovedFromProjectEvent?: RemovedFromProjectEventRequest
    on_UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEventRequest
    on_UnpinnedEvent?: UnpinnedEventRequest
    on_PullRequestCommit?: PullRequestCommitRequest
    on_ReviewRequest?: ReviewRequestRequest
    on_PullRequestReviewThread?: PullRequestReviewThreadRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_BaseRefForcePushedEvent?: BaseRefForcePushedEventRequest
    on_CommitCommentThread?: CommitCommentThreadRequest
    on_DeployedEvent?: DeployedEventRequest
    on_DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEventRequest
    on_HeadRefDeletedEvent?: HeadRefDeletedEventRequest
    on_HeadRefForcePushedEvent?: HeadRefForcePushedEventRequest
    on_HeadRefRestoredEvent?: HeadRefRestoredEventRequest
    on_MergedEvent?: MergedEventRequest
    on_ReviewDismissedEvent?: ReviewDismissedEventRequest
    on_ReviewRequestRemovedEvent?: ReviewRequestRemovedEventRequest
    on_ReviewRequestedEvent?: ReviewRequestedEventRequest
    on_AutomaticBaseChangeFailedEvent?: AutomaticBaseChangeFailedEventRequest
    on_AutomaticBaseChangeSucceededEvent?: AutomaticBaseChangeSucceededEventRequest
    on_BaseRefChangedEvent?: BaseRefChangedEventRequest
    on_ConvertToDraftEvent?: ConvertToDraftEventRequest
    on_PullRequestCommitCommentThread?: PullRequestCommitCommentThreadRequest
    on_ReadyForReviewEvent?: ReadyForReviewEventRequest
    on_Gist?: GistRequest
    on_GistComment?: GistCommentRequest
    on_SponsorsListing?: SponsorsListingRequest
    on_SponsorsTier?: SponsorsTierRequest
    on_Sponsorship?: SponsorshipRequest
    on_PublicKey?: PublicKeyRequest
    on_SavedReply?: SavedReplyRequest
    on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryRequest
    on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryRequest
    on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryRequest
    on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryRequest
    on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryRequest
    on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryRequest
    on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryRequest
    on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_OrgCreateAuditEntry?: OrgCreateAuditEntryRequest
    on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryRequest
    on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryRequest
    on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryRequest
    on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryRequest
    on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryRequest
    on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryRequest
    on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryRequest
    on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryRequest
    on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryRequest
    on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryRequest
    on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryRequest
    on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryRequest
    on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryRequest
    on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryRequest
    on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryRequest
    on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryRequest
    on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryRequest
    on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryRequest
    on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryRequest
    on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryRequest
    on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryRequest
    on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryRequest
    on_RepoAccessAuditEntry?: RepoAccessAuditEntryRequest
    on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryRequest
    on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryRequest
    on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryRequest
    on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryRequest
    on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryRequest
    on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryRequest
    on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryRequest
    on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryRequest
    on_RepoCreateAuditEntry?: RepoCreateAuditEntryRequest
    on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryRequest
    on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryRequest
    on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryRequest
    on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryRequest
    on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryRequest
    on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryRequest
    on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryRequest
    on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryRequest
    on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryRequest
    on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryRequest
    on_IpAllowListEntry?: IpAllowListEntryRequest
    on_OrganizationIdentityProvider?: OrganizationIdentityProviderRequest
    on_ExternalIdentity?: ExternalIdentityRequest
    on_EnterpriseServerInstallation?: EnterpriseServerInstallationRequest
    on_EnterpriseServerUserAccount?: EnterpriseServerUserAccountRequest
    on_EnterpriseServerUserAccountEmail?: EnterpriseServerUserAccountEmailRequest
    on_EnterpriseServerUserAccountsUpload?: EnterpriseServerUserAccountsUploadRequest
    on_EnterpriseRepositoryInfo?: EnterpriseRepositoryInfoRequest
    on_EnterpriseAdministratorInvitation?: EnterpriseAdministratorInvitationRequest
    on_RepositoryInvitation?: RepositoryInvitationRequest
    on_EnterpriseIdentityProvider?: EnterpriseIdentityProviderRequest
    on_MarketplaceCategory?: MarketplaceCategoryRequest
    on_MarketplaceListing?: MarketplaceListingRequest
    on_Blob?: BlobRequest
    on_PackageTag?: PackageTagRequest
    on_Tag?: TagRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An account to manage multiple organizations with consolidated policy and billing. */
export interface EnterpriseRequest{
    /** A URL pointing to the enterprise's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** Enterprise billing informationÂ visible to enterprise billing managers. */
    billingInfo?: EnterpriseBillingInfoRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The description of the enterprise. */
    description?: boolean|number
    /** The description of the enterprise as HTML. */
    descriptionHTML?: boolean|number
    id?: boolean|number
    /** The location of the enterprise. */
    location?: boolean|number
    /** A list of users who are members of this enterprise. */
    members?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Only return members within the selected GitHub Enterprise deployment */
    deployment?: (EnterpriseUserDeployment|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for members returned from the connection. */
    orderBy?: (EnterpriseMemberOrder|null),
    /** Only return members within the organizations with these logins */
    organizationLogins?: (Scalars["String"][]|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** The role of the user in the enterprise organization or server. */
    role?: (EnterpriseUserAccountMembershipRole|null)},EnterpriseMemberConnectionRequest]|EnterpriseMemberConnectionRequest
    /** The name of the enterprise. */
    name?: boolean|number
    /** A list of organizations that belong to this enterprise. */
    organizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations returned from the connection. */
    orderBy?: (OrganizationOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null)},OrganizationConnectionRequest]|OrganizationConnectionRequest
    /** Enterprise information only visible to enterprise owners. */
    ownerInfo?: EnterpriseOwnerInfoRequest
    /** The HTTP path for this enterprise. */
    resourcePath?: boolean|number
    /** The URL-friendly identifier for the enterprise. */
    slug?: boolean|number
    /** The HTTP URL for this enterprise. */
    url?: boolean|number
    /** A list of user accounts on this enterprise. */
    userAccounts?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},EnterpriseUserAccountConnectionRequest]|EnterpriseUserAccountConnectionRequest
    /** Is the current viewer an admin of this enterprise? */
    viewerIsAdmin?: boolean|number
    /** The URL of the enterprise website. */
    websiteUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfoRequest{
    /** The number of licenseable users/emails across the enterprise. */
    allLicensableUsersCount?: boolean|number
    /** The number of data packs used by all organizations owned by the enterprise. */
    assetPacks?: boolean|number
    /**
     * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
     * The number of available seats across all owned organizations based on the unique number of billable users.
     */
    availableSeats?: boolean|number
    /** The bandwidth quota in GB for all organizations owned by the enterprise. */
    bandwidthQuota?: boolean|number
    /** The bandwidth usage in GB for all organizations owned by the enterprise. */
    bandwidthUsage?: boolean|number
    /** The bandwidth usage as a percentage of the bandwidth quota. */
    bandwidthUsagePercentage?: boolean|number
    /**
     * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
     * The total seats across all organizations owned by the enterprise.
     */
    seats?: boolean|number
    /** The storage quota in GB for all organizations owned by the enterprise. */
    storageQuota?: boolean|number
    /** The storage usage in GB for all organizations owned by the enterprise. */
    storageUsage?: boolean|number
    /** The storage usage as a percentage of the storage quota. */
    storageUsagePercentage?: boolean|number
    /** The number of available licenses across all owned organizations based on the unique number of billable users. */
    totalAvailableLicenses?: boolean|number
    /** The total number of licenses allocated. */
    totalLicenses?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for enterprise member connections. */
export interface EnterpriseMemberOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order enterprise members by. */
field: EnterpriseMemberOrderField}


/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseMemberEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseMemberRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** Whether the user does not have a license for the enterprise. */
    isUnlicensed?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseMemberRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object that is a member of an enterprise. */
export interface EnterpriseMemberRequest{on_EnterpriseUserAccount?:EnterpriseUserAccountRequest,on_User?:UserRequest,__typename?:boolean|number}


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccountRequest{
    /** A URL pointing to the enterprise user account's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The enterprise in which this user account exists. */
    enterprise?: EnterpriseRequest
    id?: boolean|number
    /** An identifier for the enterprise user account, a login or email address */
    login?: boolean|number
    /** The name of the enterprise user account */
    name?: boolean|number
    /** A list of enterprise organizations this user is a member of. */
    organizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations returned from the connection. */
    orderBy?: (OrganizationOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** The role of the user in the enterprise organization. */
    role?: (EnterpriseUserAccountMembershipRole|null)},EnterpriseOrganizationMembershipConnectionRequest]|EnterpriseOrganizationMembershipConnectionRequest
    /** The HTTP path for this user. */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this user. */
    url?: boolean|number
    /** The user within the enterprise. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface ActorRequest{
    /** A URL pointing to the actor's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** The username of the actor. */
    login?: boolean|number
    /** The HTTP path for this actor. */
    resourcePath?: boolean|number
    /** The HTTP URL for this actor. */
    url?: boolean|number
    on_EnterpriseUserAccount?: EnterpriseUserAccountRequest
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Bot?: BotRequest
    on_Mannequin?: MannequinRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for organization connections. */
export interface OrganizationOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order organizations by. */
field: OrganizationOrderField}


/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseOrganizationMembershipEdgeRequest
    /** A list of nodes. */
    nodes?: OrganizationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: OrganizationRequest
    /** The role of the user in the enterprise membership. */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface OrganizationRequest{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems?: [{
    /** Filter to only a particular kind of pinnable item. */
    type?: (PinnableItemType|null)}]|boolean|number
    /** Audit log entries of the organization */
    auditLog?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for the returned audit log entries. */
    orderBy?: (AuditLogOrder|null),
    /** The query string to filter audit entries */
    query?: (Scalars["String"]|null)},OrganizationAuditEntryConnectionRequest]|OrganizationAuditEntryConnectionRequest
    /** A URL pointing to the organization's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The organization's public profile description. */
    description?: boolean|number
    /** The organization's public profile description rendered to HTML. */
    descriptionHTML?: boolean|number
    /** The organization's public email. */
    email?: boolean|number
    id?: boolean|number
    /** The setting value for whether the organization has an IP allow list enabled. */
    ipAllowListEnabledSetting?: boolean|number
    /** The IP addresses that are allowed to access resources owned by the organization. */
    ipAllowListEntries?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for IP allow list entries returned. */
    orderBy?: (IpAllowListEntryOrder|null)},IpAllowListEntryConnectionRequest]|IpAllowListEntryConnectionRequest
    /** Whether the organization has verified its profile email and website. */
    isVerified?: boolean|number
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase?: ProfileItemShowcaseRequest
    /** The organization's public profile location. */
    location?: boolean|number
    /** The organization's login name. */
    login?: boolean|number
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for user statuses returned from the connection. */
    orderBy?: (UserStatusOrder|null)},UserStatusConnectionRequest]|UserStatusConnectionRequest
    /** A list of users who are members of this organization. */
    membersWithRole?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},OrganizationMemberConnectionRequest]|OrganizationMemberConnectionRequest
    /** The organization's public profile name. */
    name?: boolean|number
    /** The HTTP path creating a new team */
    newTeamResourcePath?: boolean|number
    /** The HTTP URL creating a new team */
    newTeamUrl?: boolean|number
    /** The billing email for the organization. */
    organizationBillingEmail?: boolean|number
    /** A list of packages under the owner. */
    packages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Ordering of the returned packages. */
    orderBy?: (PackageOrder|null),
    /** Find packages in a repository by ID. */
    repositoryId?: (Scalars["ID"]|null)},PackageConnectionRequest]|PackageConnectionRequest
    /** A list of users who have been invited to join this organization. */
    pendingMembers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinnable items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinned items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining?: boolean|number
    /** Find project by number. */
    project?: [{
    /** The project number to find. */
    number: Scalars["Int"]},ProjectRequest]
    /** A list of projects under the owner. */
    projects?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for projects returned from the connection */
    orderBy?: (ProjectOrder|null),
    /** Query to search projects by, currently only searching by name. */
    search?: (Scalars["String"]|null),
    /** A list of states to filter the projects by. */
    states?: (ProjectState[]|null)},ProjectConnectionRequest]|ProjectConnectionRequest
    /** The HTTP path listing organization's projects */
    projectsResourcePath?: boolean|number
    /** The HTTP URL listing organization's projects */
    projectsUrl?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find registry package by name. */
    name?: (Scalars["String"]|null),
    /** Find registry packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Filter registry package by whether it is publicly visible */
    publicOnly?: (Scalars["Boolean"]|null),
    /** Filter registry package by type (string). */
    registryPackageType?: (Scalars["String"]|null),
    /** Find registry packages in a repository. */
    repositoryId?: (Scalars["ID"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Find registry package by search query. */
    query?: (Scalars["String"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /** A list of repositories that the user owns. */
    repositories?: [{
    /**
     * Array of viewer's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * current viewer owns.
     */
    affiliations?: ((RepositoryAffiliation|null)[]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If non-null, filters repositories according to whether they are forks of another repository */
    isFork?: (Scalars["Boolean"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /**
     * Array of owner's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * organization or user being viewed owns.
     */
    ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** Find Repository. */
    repository?: [{
    /** Name of Repository to find. */
    name: Scalars["String"]},RepositoryRequest]
    /**
     * When true the organization requires all members, billing managers, and outside
     * collaborators to enable two-factor authentication.
     */
    requiresTwoFactorAuthentication?: boolean|number
    /** The HTTP path for this organization. */
    resourcePath?: boolean|number
    /** The Organization's SAML identity providers */
    samlIdentityProvider?: OrganizationIdentityProviderRequest
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing?: SponsorsListingRequest
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Whether or not to include private sponsorships in the result set */
    includePrivate?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    /** Find an organization's team by its slug. */
    team?: [{
    /** The name or slug of the team to find. */
    slug: Scalars["String"]},TeamRequest]
    /** A list of teams in this organization. */
    teams?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
    ldapMapped?: (Scalars["Boolean"]|null),
    /** Ordering options for teams returned from the connection */
    orderBy?: (TeamOrder|null),
    /** If non-null, filters teams according to privacy */
    privacy?: (TeamPrivacy|null),
    /** If non-null, filters teams with query on team name and team slug */
    query?: (Scalars["String"]|null),
    /** If non-null, filters teams according to whether the viewer is an admin or member on team */
    role?: (TeamRole|null),
    /** If true, restrict to only root teams */
    rootTeamsOnly?: (Scalars["Boolean"]|null),
    /** User logins to filter by */
    userLogins?: (Scalars["String"][]|null)},TeamConnectionRequest]|TeamConnectionRequest
    /** The HTTP path listing organization's teams */
    teamsResourcePath?: boolean|number
    /** The HTTP URL listing organization's teams */
    teamsUrl?: boolean|number
    /** The organization's Twitter username. */
    twitterUsername?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this organization. */
    url?: boolean|number
    /** Organization is adminable by the viewer. */
    viewerCanAdminister?: boolean|number
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems?: boolean|number
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects?: boolean|number
    /** Viewer can create repositories on this organization */
    viewerCanCreateRepositories?: boolean|number
    /** Viewer can create teams on this organization. */
    viewerCanCreateTeams?: boolean|number
    /** Viewer is an active member of this organization. */
    viewerIsAMember?: boolean|number
    /** The organization's public profile URL. */
    websiteUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that have members who can set status messages. */
export interface MemberStatusableRequest{
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for user statuses returned from the connection. */
    orderBy?: (UserStatusOrder|null)},UserStatusConnectionRequest]|UserStatusConnectionRequest
    on_Organization?: OrganizationRequest
    on_Team?: TeamRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for user status connections. */
export interface UserStatusOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order user statuses by. */
field: UserStatusOrderField}


/** The connection type for UserStatus. */
export interface UserStatusConnectionRequest{
    /** A list of edges. */
    edges?: UserStatusEdgeRequest
    /** A list of nodes. */
    nodes?: UserStatusRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface UserStatusEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: UserStatusRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The user's description of what they're currently doing. */
export interface UserStatusRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** An emoji summarizing the user's status. */
    emoji?: boolean|number
    /** The status emoji as HTML. */
    emojiHTML?: boolean|number
    /** If set, the status will not be shown after this date. */
    expiresAt?: boolean|number
    /** ID of the object. */
    id?: boolean|number
    /** Whether this status indicates the user is not fully available on GitHub. */
    indicatesLimitedAvailability?: boolean|number
    /** A brief message describing what the user is doing. */
    message?: boolean|number
    /** The organization whose members can see this status. If null, this status is publicly visible. */
    organization?: OrganizationRequest
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The user who has this status. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface UserRequest{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems?: [{
    /** Filter to only a particular kind of pinnable item. */
    type?: (PinnableItemType|null)}]|boolean|number
    /** A URL pointing to the user's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** The user's public profile bio. */
    bio?: boolean|number
    /** The user's public profile bio as HTML. */
    bioHTML?: boolean|number
    /** A list of commit comments made by this user. */
    commitComments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitCommentConnectionRequest]|CommitCommentConnectionRequest
    /** The user's public profile company. */
    company?: boolean|number
    /** The user's public profile company as HTML. */
    companyHTML?: boolean|number
    /** The collection of contributions this user has made to different repositories. */
    contributionsCollection?: [{
    /** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
    from?: (Scalars["DateTime"]|null),
    /** The ID of the organization used to filter contributions. */
    organizationID?: (Scalars["ID"]|null),
    /**
     * Only contributions made before and up to and including this time will be
     * counted. If omitted, defaults to the current time.
     */
    to?: (Scalars["DateTime"]|null)},ContributionsCollectionRequest]|ContributionsCollectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The user's publicly visible profile email. */
    email?: boolean|number
    /** A list of users the given user is followed by. */
    followers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},FollowerConnectionRequest]|FollowerConnectionRequest
    /** A list of users the given user is following. */
    following?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},FollowingConnectionRequest]|FollowingConnectionRequest
    /** Find gist by repo name. */
    gist?: [{
    /** The gist name to find. */
    name: Scalars["String"]},GistRequest]
    /** A list of gist comments made by this user. */
    gistComments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},GistCommentConnectionRequest]|GistCommentConnectionRequest
    /** A list of the Gists the user has created. */
    gists?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for gists returned from the connection */
    orderBy?: (GistOrder|null),
    /** Filters Gists according to privacy. */
    privacy?: (GistPrivacy|null)},GistConnectionRequest]|GistConnectionRequest
    /** The hovercard information for this user in a given context */
    hovercard?: [{
    /** The ID of the subject to get the hovercard in the context of */
    primarySubjectId?: (Scalars["ID"]|null)},HovercardRequest]|HovercardRequest
    id?: boolean|number
    /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
    isBountyHunter?: boolean|number
    /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
    isCampusExpert?: boolean|number
    /** Whether or not this user is a GitHub Developer Program member. */
    isDeveloperProgramMember?: boolean|number
    /** Whether or not this user is a GitHub employee. */
    isEmployee?: boolean|number
    /** Whether or not the user has marked themselves as for hire. */
    isHireable?: boolean|number
    /** Whether or not this user is a site administrator. */
    isSiteAdmin?: boolean|number
    /** Whether or not this user is the viewing user. */
    isViewer?: boolean|number
    /** A list of issue comments made by this user. */
    issueComments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},IssueCommentConnectionRequest]|IssueCommentConnectionRequest
    /** A list of issues associated with this user. */
    issues?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filtering options for issues returned from the connection. */
    filterBy?: (IssueFilters|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for issues returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the issues by. */
    states?: (IssueState[]|null)},IssueConnectionRequest]|IssueConnectionRequest
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase?: ProfileItemShowcaseRequest
    /** The user's public profile location. */
    location?: boolean|number
    /** The username used to login. */
    login?: boolean|number
    /** The user's public profile name. */
    name?: boolean|number
    /** Find an organization by its login that the user belongs to. */
    organization?: [{
    /** The login of the organization to find. */
    login: Scalars["String"]},OrganizationRequest]
    /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
    organizationVerifiedDomainEmails?: [{
    /** The login of the organization to match verified domains from. */
    login: Scalars["String"]}]
    /** A list of organizations the user belongs to. */
    organizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},OrganizationConnectionRequest]|OrganizationConnectionRequest
    /** A list of packages under the owner. */
    packages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Ordering of the returned packages. */
    orderBy?: (PackageOrder|null),
    /** Find packages in a repository by ID. */
    repositoryId?: (Scalars["ID"]|null)},PackageConnectionRequest]|PackageConnectionRequest
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinnable items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinned items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining?: boolean|number
    /** Find project by number. */
    project?: [{
    /** The project number to find. */
    number: Scalars["Int"]},ProjectRequest]
    /** A list of projects under the owner. */
    projects?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for projects returned from the connection */
    orderBy?: (ProjectOrder|null),
    /** Query to search projects by, currently only searching by name. */
    search?: (Scalars["String"]|null),
    /** A list of states to filter the projects by. */
    states?: (ProjectState[]|null)},ProjectConnectionRequest]|ProjectConnectionRequest
    /** The HTTP path listing user's projects */
    projectsResourcePath?: boolean|number
    /** The HTTP URL listing user's projects */
    projectsUrl?: boolean|number
    /** A list of public keys associated with this user. */
    publicKeys?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PublicKeyConnectionRequest]|PublicKeyConnectionRequest
    /** A list of pull requests associated with this user. */
    pullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find registry package by name. */
    name?: (Scalars["String"]|null),
    /** Find registry packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Filter registry package by whether it is publicly visible */
    publicOnly?: (Scalars["Boolean"]|null),
    /** Filter registry package by type (string). */
    registryPackageType?: (Scalars["String"]|null),
    /** Find registry packages in a repository. */
    repositoryId?: (Scalars["ID"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Find registry package by search query. */
    query?: (Scalars["String"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /** A list of repositories that the user owns. */
    repositories?: [{
    /**
     * Array of viewer's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * current viewer owns.
     */
    affiliations?: ((RepositoryAffiliation|null)[]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If non-null, filters repositories according to whether they are forks of another repository */
    isFork?: (Scalars["Boolean"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /**
     * Array of owner's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * organization or user being viewed owns.
     */
    ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** A list of repositories that the user recently contributed to. */
    repositoriesContributedTo?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /**
     * If non-null, include only the specified types of contributions. The
     * GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
     */
    contributionTypes?: ((RepositoryContributionType|null)[]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If true, include user repositories */
    includeUserRepositories?: (Scalars["Boolean"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** Find Repository. */
    repository?: [{
    /** Name of Repository to find. */
    name: Scalars["String"]},RepositoryRequest]
    /** The HTTP path for this user */
    resourcePath?: boolean|number
    /** Replies this user has saved */
    savedReplies?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** The field to order saved replies by. */
    orderBy?: (SavedReplyOrder|null)},SavedReplyConnectionRequest]|SavedReplyConnectionRequest
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing?: SponsorsListingRequest
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Whether or not to include private sponsorships in the result set */
    includePrivate?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    /** Repositories the user has starred. */
    starredRepositories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (StarOrder|null),
    /** Filters starred repositories to only return repositories owned by the viewer. */
    ownedByViewer?: (Scalars["Boolean"]|null)},StarredRepositoryConnectionRequest]|StarredRepositoryConnectionRequest
    /** The user's description of what they're currently doing. */
    status?: UserStatusRequest
    /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
    topRepositories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy: RepositoryOrder,
    /** How far back in time to fetch contributed repositories */
    since?: (Scalars["DateTime"]|null)},RepositoryConnectionRequest]
    /** The user's Twitter username. */
    twitterUsername?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this user */
    url?: boolean|number
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems?: boolean|number
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects?: boolean|number
    /** Whether or not the viewer is able to follow the user. */
    viewerCanFollow?: boolean|number
    /** Whether or not this user is followed by the viewer. */
    viewerIsFollowing?: boolean|number
    /** A list of repositories the given user is watching. */
    watching?: [{
    /**
     * Affiliation options for repositories returned from the connection. If none
     * specified, the results will include repositories for which the current
     * viewer is an owner or collaborator, or member.
     */
    affiliations?: ((RepositoryAffiliation|null)[]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /**
     * Array of owner's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * organization or user being viewed owns.
     */
    ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** A URL pointing to the user's public website/blog. */
    websiteUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an owner of a package. */
export interface PackageOwnerRequest{
    id?: boolean|number
    /** A list of packages under the owner. */
    packages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Ordering of the returned packages. */
    orderBy?: (PackageOrder|null),
    /** Find packages in a repository by ID. */
    repositoryId?: (Scalars["ID"]|null)},PackageConnectionRequest]|PackageConnectionRequest
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of packages can be ordered upon return. */
export interface PackageOrder{
/** The direction in which to order packages by the specified field. */
direction?: (OrderDirection|null),
/** The field in which to order packages by. */
field?: (PackageOrderField|null)}


/** The connection type for Package. */
export interface PackageConnectionRequest{
    /** A list of edges. */
    edges?: PackageEdgeRequest
    /** A list of nodes. */
    nodes?: PackageRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PackageEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PackageRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Information for an uploaded package. */
export interface PackageRequest{
    id?: boolean|number
    /** Find the latest version for the package. */
    latestVersion?: PackageVersionRequest
    /** Identifies the name of the package. */
    name?: boolean|number
    /** Identifies the type of the package. */
    packageType?: boolean|number
    /** The repository this package belongs to. */
    repository?: RepositoryRequest
    /** Statistics about package activity. */
    statistics?: PackageStatisticsRequest
    /** Find package version by version string. */
    version?: [{
    /** The package version. */
    version: Scalars["String"]},PackageVersionRequest]
    /** list of versions for this package */
    versions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering of the returned packages. */
    orderBy?: (PackageVersionOrder|null)},PackageVersionConnectionRequest]|PackageVersionConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Information about a specific package version. */
export interface PackageVersionRequest{
    /** List of files associated with this package version */
    files?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering of the returned package files. */
    orderBy?: (PackageFileOrder|null)},PackageFileConnectionRequest]|PackageFileConnectionRequest
    id?: boolean|number
    /** The package associated with this version. */
    package?: PackageRequest
    /** The platform this version was built for. */
    platform?: boolean|number
    /** Whether or not this version is a pre-release. */
    preRelease?: boolean|number
    /** The README of this package version. */
    readme?: boolean|number
    /** The release associated with this package version. */
    release?: ReleaseRequest
    /** Statistics about package activity. */
    statistics?: PackageVersionStatisticsRequest
    /** The package version summary. */
    summary?: boolean|number
    /** The version string. */
    version?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of package files can be ordered upon return. */
export interface PackageFileOrder{
/** The direction in which to order package files by the specified field. */
direction?: (OrderDirection|null),
/** The field in which to order package files by. */
field?: (PackageFileOrderField|null)}


/** The connection type for PackageFile. */
export interface PackageFileConnectionRequest{
    /** A list of edges. */
    edges?: PackageFileEdgeRequest
    /** A list of nodes. */
    nodes?: PackageFileRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PackageFileEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PackageFileRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A file in a package version. */
export interface PackageFileRequest{
    id?: boolean|number
    /** MD5 hash of the file. */
    md5?: boolean|number
    /** Name of the file. */
    name?: boolean|number
    /** The package version this file belongs to. */
    packageVersion?: PackageVersionRequest
    /** SHA1 hash of the file. */
    sha1?: boolean|number
    /** SHA256 hash of the file. */
    sha256?: boolean|number
    /** Size of the file in bytes. */
    size?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** URL to download the asset. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Information about pagination in a connection. */
export interface PageInfoRequest{
    /** When paginating forwards, the cursor to continue. */
    endCursor?: boolean|number
    /** When paginating forwards, are there more items? */
    hasNextPage?: boolean|number
    /** When paginating backwards, are there more items? */
    hasPreviousPage?: boolean|number
    /** When paginating backwards, the cursor to continue. */
    startCursor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A release contains the content for a release. */
export interface ReleaseRequest{
    /** The author of the release */
    author?: UserRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The description of the release. */
    description?: boolean|number
    /** The description of this release rendered to HTML. */
    descriptionHTML?: boolean|number
    id?: boolean|number
    /** Whether or not the release is a draft */
    isDraft?: boolean|number
    /** Whether or not the release is a prerelease */
    isPrerelease?: boolean|number
    /** The title of the release. */
    name?: boolean|number
    /** Identifies the date and time when the release was created. */
    publishedAt?: boolean|number
    /** List of releases assets which are dependent on this release. */
    releaseAssets?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** A list of names to filter the assets by. */
    name?: (Scalars["String"]|null)},ReleaseAssetConnectionRequest]|ReleaseAssetConnectionRequest
    /** The HTTP path for this issue */
    resourcePath?: boolean|number
    /** A description of the release, rendered to HTML without any links in it. */
    shortDescriptionHTML?: [{
    /** How many characters to return. */
    limit?: (Scalars["Int"]|null)}]|boolean|number
    /** The Git tag the release points to */
    tag?: RefRequest
    /** The name of the release's Git tag */
    tagName?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this issue */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatableRequest{
    /** The HTML path to this resource. */
    resourcePath?: boolean|number
    /** The URL to this resource. */
    url?: boolean|number
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Release?: ReleaseRequest
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_Repository?: RepositoryRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_Commit?: CommitRequest
    on_CheckRun?: CheckRunRequest
    on_Milestone?: MilestoneRequest
    on_RepositoryTopic?: RepositoryTopicRequest
    on_Bot?: BotRequest
    on_Mannequin?: MannequinRequest
    on_ClosedEvent?: ClosedEventRequest
    on_CrossReferencedEvent?: CrossReferencedEventRequest
    on_PullRequestCommit?: PullRequestCommitRequest
    on_MergedEvent?: MergedEventRequest
    on_ReviewDismissedEvent?: ReviewDismissedEventRequest
    on_ConvertToDraftEvent?: ConvertToDraftEventRequest
    on_ReadyForReviewEvent?: ReadyForReviewEventRequest
    on_Gist?: GistRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnectionRequest{
    /** A list of edges. */
    edges?: ReleaseAssetEdgeRequest
    /** A list of nodes. */
    nodes?: ReleaseAssetRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ReleaseAssetEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ReleaseAssetRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A release asset contains the content for a release asset. */
export interface ReleaseAssetRequest{
    /** The asset's content-type */
    contentType?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The number of times this asset was downloaded */
    downloadCount?: boolean|number
    /** Identifies the URL where you can download the release asset via the browser. */
    downloadUrl?: boolean|number
    id?: boolean|number
    /** Identifies the title of the release asset. */
    name?: boolean|number
    /** Release that the asset is associated with */
    release?: ReleaseRequest
    /** The size (in bytes) of the asset */
    size?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The user that performed the upload */
    uploadedBy?: UserRequest
    /** Identifies the URL of the release asset. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git reference. */
export interface RefRequest{
    /** A list of pull requests with this ref as the head ref. */
    associatedPullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    id?: boolean|number
    /** The ref name. */
    name?: boolean|number
    /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
    prefix?: boolean|number
    /** The repository the ref belongs to. */
    repository?: RepositoryRequest
    /**
     * The object the ref points to.
     * 
     * **Upcoming Change on 2019-07-01 UTC**
     * **Description:** Type for `target` will change from `GitObject!` to `GitObject`.
     * **Reason:** The `target` field may return `null` values and is changing to nullable
     */
    target?: GitObjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of issues can be ordered upon return. */
export interface IssueOrder{
/** The direction in which to order issues by the specified field. */
direction: OrderDirection,
/** The field in which to order issues by. */
field: IssueOrderField}


/** The connection type for PullRequest. */
export interface PullRequestConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A repository pull request. */
export interface PullRequestRequest{
    /** Reason that the conversation was locked. */
    activeLockReason?: boolean|number
    /** The number of additions in this pull request. */
    additions?: boolean|number
    /** A list of Users assigned to this object. */
    assignees?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** Identifies the base Ref associated with the pull request. */
    baseRef?: RefRequest
    /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
    baseRefName?: boolean|number
    /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
    baseRefOid?: boolean|number
    /** The repository associated with this pull request's base Ref. */
    baseRepository?: RepositoryRequest
    /** The body as Markdown. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Whether or not the pull request is rebaseable. */
    canBeRebased?: boolean|number
    /** The number of changed files in this pull request. */
    changedFiles?: boolean|number
    /** The HTTP path for the checks of this pull request. */
    checksResourcePath?: boolean|number
    /** The HTTP URL for the checks of this pull request. */
    checksUrl?: boolean|number
    /** `true` if the pull request is closed */
    closed?: boolean|number
    /** Identifies the date and time when the object was closed. */
    closedAt?: boolean|number
    /** A list of comments associated with the pull request. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},IssueCommentConnectionRequest]|IssueCommentConnectionRequest
    /** A list of commits present in this pull request's head branch not present in the base branch. */
    commits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PullRequestCommitConnectionRequest]|PullRequestCommitConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The number of deletions in this pull request. */
    deletions?: boolean|number
    /** The actor who edited this pull request's body. */
    editor?: ActorRequest
    /** Lists the files changed within this pull request. */
    files?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PullRequestChangedFileConnectionRequest]|PullRequestChangedFileConnectionRequest
    /** Identifies the head Ref associated with the pull request. */
    headRef?: RefRequest
    /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
    headRefName?: boolean|number
    /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
    headRefOid?: boolean|number
    /** The repository associated with this pull request's head Ref. */
    headRepository?: RepositoryRequest
    /** The owner of the repository associated with this pull request's head Ref. */
    headRepositoryOwner?: RepositoryOwnerRequest
    /** The hovercard information for this issue */
    hovercard?: [{
    /** Whether or not to include notification contexts */
    includeNotificationContexts?: (Scalars["Boolean"]|null)},HovercardRequest]|HovercardRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** The head and base repositories are different. */
    isCrossRepository?: boolean|number
    /** Identifies if the pull request is a draft. */
    isDraft?: boolean|number
    /** A list of labels associated with the object. */
    labels?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for labels returned from the connection. */
    orderBy?: (LabelOrder|null)},LabelConnectionRequest]|LabelConnectionRequest
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** `true` if the pull request is locked */
    locked?: boolean|number
    /** Indicates whether maintainers can modify the pull request. */
    maintainerCanModify?: boolean|number
    /** The commit that was created when this pull request was merged. */
    mergeCommit?: CommitRequest
    /** Detailed information about the current pull request merge state status. */
    mergeStateStatus?: boolean|number
    /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
    mergeable?: boolean|number
    /** Whether or not the pull request was merged. */
    merged?: boolean|number
    /** The date and time that the pull request was merged. */
    mergedAt?: boolean|number
    /** The actor who merged the pull request. */
    mergedBy?: ActorRequest
    /** Identifies the milestone associated with the pull request. */
    milestone?: MilestoneRequest
    /** Identifies the pull request number. */
    number?: boolean|number
    /** A list of Users that are participating in the Pull Request conversation. */
    participants?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** The permalink to the pull request. */
    permalink?: boolean|number
    /**
     * The commit that GitHub automatically generated to test if this pull request
     * could be merged. This field will not return a value if the pull request is
     * merged, or if the test merge commit is still being generated. See the
     * `mergeable` field for more details on the mergeability of the pull request.
     */
    potentialMergeCommit?: CommitRequest
    /** List of project cards associated with this pull request. */
    projectCards?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** A list of archived states to filter the cards by */
    archivedStates?: ((ProjectCardArchivedState|null)[]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ProjectCardConnectionRequest]|ProjectCardConnectionRequest
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path for this pull request. */
    resourcePath?: boolean|number
    /** The HTTP path for reverting this pull request. */
    revertResourcePath?: boolean|number
    /** The HTTP URL for reverting this pull request. */
    revertUrl?: boolean|number
    /** The current status of this pull request with respect to code review. */
    reviewDecision?: boolean|number
    /** A list of review requests associated with the pull request. */
    reviewRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ReviewRequestConnectionRequest]|ReviewRequestConnectionRequest
    /** The list of all review threads for this pull request. */
    reviewThreads?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PullRequestReviewThreadConnectionRequest]|PullRequestReviewThreadConnectionRequest
    /** A list of reviews associated with the pull request. */
    reviews?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Filter by author of the review. */
    author?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** A list of states to filter the reviews. */
    states?: (PullRequestReviewState[]|null)},PullRequestReviewConnectionRequest]|PullRequestReviewConnectionRequest
    /** Identifies the state of the pull request. */
    state?: boolean|number
    /** A list of reviewer suggestions based on commit history and past review comments. */
    suggestedReviewers?: SuggestedReviewerRequest
    /**
     * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
     * A list of events, comments, commits, etc. associated with the pull request.
     */
    timeline?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows filtering timeline events by a `since` timestamp. */
    since?: (Scalars["DateTime"]|null)},PullRequestTimelineConnectionRequest]|PullRequestTimelineConnectionRequest
    /** A list of events, comments, commits, etc. associated with the pull request. */
    timelineItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Filter timeline items by type. */
    itemTypes?: (PullRequestTimelineItemsItemType[]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter timeline items by a `since` timestamp. */
    since?: (Scalars["DateTime"]|null),
    /** Skips the first _n_ elements in the list. */
    skip?: (Scalars["Int"]|null)},PullRequestTimelineItemsConnectionRequest]|PullRequestTimelineItemsConnectionRequest
    /** Identifies the pull request title. */
    title?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this pull request. */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Whether or not the viewer can apply suggestion. */
    viewerCanApplySuggestion?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object that can have users assigned to it. */
export interface AssignableRequest{
    /** A list of Users assigned to this object. */
    assignees?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface UserConnectionRequest{
    /** A list of edges. */
    edges?: UserEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user. */
export interface UserEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object that can be closed */
export interface ClosableRequest{
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed?: boolean|number
    /** Identifies the date and time when the object was closed. */
    closedAt?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_Project?: ProjectRequest
    on_Milestone?: MilestoneRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a comment. */
export interface CommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** The body as Markdown. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_GistComment?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A list of edits to content. */
export interface UserContentEditConnectionRequest{
    /** A list of edges. */
    edges?: UserContentEditEdgeRequest
    /** A list of nodes. */
    nodes?: UserContentEditRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface UserContentEditEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: UserContentEditRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edit on user content */
export interface UserContentEditRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the date and time when the object was deleted. */
    deletedAt?: boolean|number
    /** The actor who deleted this content */
    deletedBy?: ActorRequest
    /** A summary of the changes for this edit */
    diff?: boolean|number
    /** When this content was edited */
    editedAt?: boolean|number
    /** The actor who edited this content */
    editor?: ActorRequest
    id?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object that can have labels assigned to it. */
export interface LabelableRequest{
    /** A list of labels associated with the object. */
    labels?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for labels returned from the connection. */
    orderBy?: (LabelOrder|null)},LabelConnectionRequest]|LabelConnectionRequest
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of labels can be ordered upon return. */
export interface LabelOrder{
/** The direction in which to order labels by the specified field. */
direction: OrderDirection,
/** The field in which to order labels by. */
field: LabelOrderField}


/** The connection type for Label. */
export interface LabelConnectionRequest{
    /** A list of edges. */
    edges?: LabelEdgeRequest
    /** A list of nodes. */
    nodes?: LabelRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface LabelEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: LabelRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A label for categorizing Issues or Milestones with a given Repository. */
export interface LabelRequest{
    /** Identifies the label color. */
    color?: boolean|number
    /** Identifies the date and time when the label was created. */
    createdAt?: boolean|number
    /** A brief description of this label. */
    description?: boolean|number
    id?: boolean|number
    /** Indicates whether or not this is a default label. */
    isDefault?: boolean|number
    /** A list of issues associated with this label. */
    issues?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filtering options for issues returned from the connection. */
    filterBy?: (IssueFilters|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for issues returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the issues by. */
    states?: (IssueState[]|null)},IssueConnectionRequest]|IssueConnectionRequest
    /** Identifies the label name. */
    name?: boolean|number
    /** A list of pull requests associated with this label. */
    pullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /** The repository associated with this label. */
    repository?: RepositoryRequest
    /** The HTTP path for this label. */
    resourcePath?: boolean|number
    /** Identifies the date and time when the label was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this label. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which to filter lists of issues. */
export interface IssueFilters{
/**
 * List issues assigned to given name. Pass in `null` for issues with no assigned
 * user, and `*` for issues assigned to any user.
 */
assignee?: (Scalars["String"]|null),
/** List issues created by given name. */
createdBy?: (Scalars["String"]|null),
/** List issues where the list of label names exist on the issue. */
labels?: (Scalars["String"][]|null),
/** List issues where the given name is mentioned in the issue. */
mentioned?: (Scalars["String"]|null),
/**
 * List issues by given milestone argument. If an string representation of an
 * integer is passed, it should refer to a milestone by its number field. Pass in
 * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
 */
milestone?: (Scalars["String"]|null),
/** List issues that have been updated at or after the given date. */
since?: (Scalars["DateTime"]|null),
/** List issues filtered by the list of states given. */
states?: (IssueState[]|null),
/** List issues subscribed to by viewer. */
viewerSubscribed?: (Scalars["Boolean"]|null)}


/** The connection type for Issue. */
export interface IssueConnectionRequest{
    /** A list of edges. */
    edges?: IssueEdgeRequest
    /** A list of nodes. */
    nodes?: IssueRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface IssueEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface IssueRequest{
    /** Reason that the conversation was locked. */
    activeLockReason?: boolean|number
    /** A list of Users assigned to this object. */
    assignees?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** Identifies the body of the issue. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** Identifies the body of the issue rendered to text. */
    bodyText?: boolean|number
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed?: boolean|number
    /** Identifies the date and time when the object was closed. */
    closedAt?: boolean|number
    /** A list of comments associated with the Issue. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},IssueCommentConnectionRequest]|IssueCommentConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    /** The hovercard information for this issue */
    hovercard?: [{
    /** Whether or not to include notification contexts */
    includeNotificationContexts?: (Scalars["Boolean"]|null)},HovercardRequest]|HovercardRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** A list of labels associated with the object. */
    labels?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for labels returned from the connection. */
    orderBy?: (LabelOrder|null)},LabelConnectionRequest]|LabelConnectionRequest
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** `true` if the object is locked */
    locked?: boolean|number
    /** Identifies the milestone associated with the issue. */
    milestone?: MilestoneRequest
    /** Identifies the issue number. */
    number?: boolean|number
    /** A list of Users that are participating in the Issue conversation. */
    participants?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** List of project cards associated with this issue. */
    projectCards?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** A list of archived states to filter the cards by */
    archivedStates?: ((ProjectCardArchivedState|null)[]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ProjectCardConnectionRequest]|ProjectCardConnectionRequest
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path for this issue */
    resourcePath?: boolean|number
    /** Identifies the state of the issue. */
    state?: boolean|number
    /**
     * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
     * A list of events, comments, commits, etc. associated with the issue.
     */
    timeline?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows filtering timeline events by a `since` timestamp. */
    since?: (Scalars["DateTime"]|null)},IssueTimelineConnectionRequest]|IssueTimelineConnectionRequest
    /** A list of events, comments, commits, etc. associated with the issue. */
    timelineItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Filter timeline items by type. */
    itemTypes?: (IssueTimelineItemsItemType[]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter timeline items by a `since` timestamp. */
    since?: (Scalars["DateTime"]|null),
    /** Skips the first _n_ elements in the list. */
    skip?: (Scalars["Int"]|null)},IssueTimelineItemsConnectionRequest]|IssueTimelineItemsConnectionRequest
    /** Identifies the issue title. */
    title?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this issue */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object that can be locked. */
export interface LockableRequest{
    /** Reason that the conversation was locked. */
    activeLockReason?: boolean|number
    /** `true` if the object is locked */
    locked?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a subject that can be reacted on. */
export interface ReactableRequest{
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroupRequest{
    /** Identifies the emoji reaction. */
    content?: boolean|number
    /** Identifies when the reaction was created. */
    createdAt?: boolean|number
    /** The subject that was reacted to. */
    subject?: ReactableRequest
    /** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
    users?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ReactingUserConnectionRequest]|ReactingUserConnectionRequest
    /** Whether or not the authenticated user has left a reaction on the subject. */
    viewerHasReacted?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface ReactingUserConnectionRequest{
    /** A list of edges. */
    edges?: ReactingUserEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user that's made a reaction. */
export interface ReactingUserEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    node?: UserRequest
    /** The moment when the user made the reaction. */
    reactedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of reactions can be ordered upon return. */
export interface ReactionOrder{
/** The direction in which to order reactions by the specified field. */
direction: OrderDirection,
/** The field in which to order reactions by. */
field: ReactionOrderField}


/** A list of reactions that have been left on the subject. */
export interface ReactionConnectionRequest{
    /** A list of edges. */
    edges?: ReactionEdgeRequest
    /** A list of nodes. */
    nodes?: ReactionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** Whether or not the authenticated user has left a reaction on the subject. */
    viewerHasReacted?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ReactionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ReactionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An emoji reaction to a particular piece of content. */
export interface ReactionRequest{
    /** Identifies the emoji reaction. */
    content?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The reactable piece of content */
    reactable?: ReactableRequest
    /** Identifies the user who created this reaction. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a object that belongs to a repository. */
export interface RepositoryNodeRequest{
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_CommitComment?: CommitCommentRequest
    on_RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlertRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_CommitCommentThread?: CommitCommentThreadRequest
    on_PullRequestCommitCommentThread?: PullRequestCommitCommentThreadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A repository contains the content for a project. */
export interface RepositoryRequest{
    /** A list of users that can be assigned to issues in this repository. */
    assignableUsers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filters users with query on user name and login */
    query?: (Scalars["String"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** A list of branch protection rules for this repository. */
    branchProtectionRules?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},BranchProtectionRuleConnectionRequest]|BranchProtectionRuleConnectionRequest
    /** Returns the code of conduct for this repository */
    codeOfConduct?: CodeOfConductRequest
    /** A list of collaborators associated with the repository. */
    collaborators?: [{
    /** Collaborators affiliation level with a repository. */
    affiliation?: (CollaboratorAffiliation|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filters users with query on user name and login */
    query?: (Scalars["String"]|null)},RepositoryCollaboratorConnectionRequest]|RepositoryCollaboratorConnectionRequest
    /** A list of commit comments associated with the repository. */
    commitComments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitCommentConnectionRequest]|CommitCommentConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The Ref associated with the repository's default branch. */
    defaultBranchRef?: RefRequest
    /** Whether or not branches are automatically deleted when merged in this repository. */
    deleteBranchOnMerge?: boolean|number
    /** A list of dependency manifests contained in the repository */
    dependencyGraphManifests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Cursor to paginate dependencies */
    dependenciesAfter?: (Scalars["String"]|null),
    /** Number of dependencies to fetch */
    dependenciesFirst?: (Scalars["Int"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Flag to scope to only manifests with dependencies */
    withDependencies?: (Scalars["Boolean"]|null)},DependencyGraphManifestConnectionRequest]|DependencyGraphManifestConnectionRequest
    /** A list of deploy keys that are on this repository. */
    deployKeys?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},DeployKeyConnectionRequest]|DeployKeyConnectionRequest
    /** Deployments associated with the repository */
    deployments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Environments to list deployments for */
    environments?: (Scalars["String"][]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for deployments returned from the connection. */
    orderBy?: (DeploymentOrder|null)},DeploymentConnectionRequest]|DeploymentConnectionRequest
    /** The description of the repository. */
    description?: boolean|number
    /** The description of the repository rendered to HTML. */
    descriptionHTML?: boolean|number
    /** The number of kilobytes this repository occupies on disk. */
    diskUsage?: boolean|number
    /** Returns how many forks there are of this repository in the whole network. */
    forkCount?: boolean|number
    /** A list of direct forked repositories. */
    forks?: [{
    /**
     * Array of viewer's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * current viewer owns.
     */
    affiliations?: ((RepositoryAffiliation|null)[]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /**
     * Array of owner's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * organization or user being viewed owns.
     */
    ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** The funding links for this repository */
    fundingLinks?: FundingLinkRequest
    /** Indicates if the repository has issues feature enabled. */
    hasIssuesEnabled?: boolean|number
    /** Indicates if the repository has the Projects feature enabled. */
    hasProjectsEnabled?: boolean|number
    /** Indicates if the repository has wiki feature enabled. */
    hasWikiEnabled?: boolean|number
    /** The repository's URL. */
    homepageUrl?: boolean|number
    id?: boolean|number
    /** Indicates if the repository is unmaintained. */
    isArchived?: boolean|number
    /** Returns whether or not this repository disabled. */
    isDisabled?: boolean|number
    /** Identifies if the repository is a fork. */
    isFork?: boolean|number
    /** Indicates if the repository has been locked or not. */
    isLocked?: boolean|number
    /** Identifies if the repository is a mirror. */
    isMirror?: boolean|number
    /** Identifies if the repository is private. */
    isPrivate?: boolean|number
    /** Identifies if the repository is a template that can be used to generate new repositories. */
    isTemplate?: boolean|number
    /** Returns a single issue from the current repository by number. */
    issue?: [{
    /** The number for the issue to be returned. */
    number: Scalars["Int"]},IssueRequest]
    /** Returns a single issue-like object from the current repository by number. */
    issueOrPullRequest?: [{
    /** The number for the issue to be returned. */
    number: Scalars["Int"]},IssueOrPullRequestRequest]
    /** A list of issues that have been opened in the repository. */
    issues?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filtering options for issues returned from the connection. */
    filterBy?: (IssueFilters|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for issues returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the issues by. */
    states?: (IssueState[]|null)},IssueConnectionRequest]|IssueConnectionRequest
    /** Returns a single label by name */
    label?: [{
    /** Label name */
    name: Scalars["String"]},LabelRequest]
    /** A list of labels associated with the repository. */
    labels?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for labels returned from the connection. */
    orderBy?: (LabelOrder|null),
    /** If provided, searches labels by name and description. */
    query?: (Scalars["String"]|null)},LabelConnectionRequest]|LabelConnectionRequest
    /** A list containing a breakdown of the language composition of the repository. */
    languages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (LanguageOrder|null)},LanguageConnectionRequest]|LanguageConnectionRequest
    /** The license associated with the repository */
    licenseInfo?: LicenseRequest
    /** The reason the repository has been locked. */
    lockReason?: boolean|number
    /** A list of Users that can be mentioned in the context of the repository. */
    mentionableUsers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filters users with query on user name and login */
    query?: (Scalars["String"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** Whether or not PRs are merged with a merge commit on this repository. */
    mergeCommitAllowed?: boolean|number
    /** Returns a single milestone from the current repository by number. */
    milestone?: [{
    /** The number for the milestone to be returned. */
    number: Scalars["Int"]},MilestoneRequest]
    /** A list of milestones associated with the repository. */
    milestones?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for milestones. */
    orderBy?: (MilestoneOrder|null),
    /** Filter by the state of the milestones. */
    states?: (MilestoneState[]|null)},MilestoneConnectionRequest]|MilestoneConnectionRequest
    /** The repository's original mirror URL. */
    mirrorUrl?: boolean|number
    /** The name of the repository. */
    name?: boolean|number
    /** The repository's name with owner. */
    nameWithOwner?: boolean|number
    /** A Git object in the repository */
    object?: [{
    /** A Git revision expression suitable for rev-parse */
    expression?: (Scalars["String"]|null),
    /** The Git object ID */
    oid?: (Scalars["GitObjectID"]|null)},GitObjectRequest]|GitObjectRequest
    /** The image used to represent this repository in Open Graph data. */
    openGraphImageUrl?: boolean|number
    /** The User owner of the repository. */
    owner?: RepositoryOwnerRequest
    /** A list of packages under the owner. */
    packages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Ordering of the returned packages. */
    orderBy?: (PackageOrder|null),
    /** Find packages in a repository by ID. */
    repositoryId?: (Scalars["ID"]|null)},PackageConnectionRequest]|PackageConnectionRequest
    /** The repository parent, if this is a fork. */
    parent?: RepositoryRequest
    /** A list of pinned issues for this repository. */
    pinnedIssues?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PinnedIssueConnectionRequest]|PinnedIssueConnectionRequest
    /** The primary language of the repository's code. */
    primaryLanguage?: LanguageRequest
    /** Find project by number. */
    project?: [{
    /** The project number to find. */
    number: Scalars["Int"]},ProjectRequest]
    /** A list of projects under the owner. */
    projects?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for projects returned from the connection */
    orderBy?: (ProjectOrder|null),
    /** Query to search projects by, currently only searching by name. */
    search?: (Scalars["String"]|null),
    /** A list of states to filter the projects by. */
    states?: (ProjectState[]|null)},ProjectConnectionRequest]|ProjectConnectionRequest
    /** The HTTP path listing the repository's projects */
    projectsResourcePath?: boolean|number
    /** The HTTP URL listing the repository's projects */
    projectsUrl?: boolean|number
    /** Returns a single pull request from the current repository by number. */
    pullRequest?: [{
    /** The number for the pull request to be returned. */
    number: Scalars["Int"]},PullRequestRequest]
    /** A list of pull requests that have been opened in the repository. */
    pullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /** Identifies when the repository was last pushed to. */
    pushedAt?: boolean|number
    /** Whether or not rebase-merging is enabled on this repository. */
    rebaseMergeAllowed?: boolean|number
    /** Fetch a given ref from the repository */
    ref?: [{
    /**
     * The ref to retrieve. Fully qualified matches are checked in order
     * (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
     */
    qualifiedName: Scalars["String"]},RefRequest]
    /** Fetch a list of refs from the repository */
    refs?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** DEPRECATED: use orderBy. The ordering direction. */
    direction?: (OrderDirection|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for refs returned from the connection. */
    orderBy?: (RefOrder|null),
    /** Filters refs with query on name */
    query?: (Scalars["String"]|null),
    /** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
    refPrefix: Scalars["String"]},RefConnectionRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find registry package by name. */
    name?: (Scalars["String"]|null),
    /** Find registry packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Filter registry package by whether it is publicly visible */
    publicOnly?: (Scalars["Boolean"]|null),
    /** Filter registry package by type (string). */
    registryPackageType?: (Scalars["String"]|null),
    /** Find registry packages in a repository. */
    repositoryId?: (Scalars["ID"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Find registry package by search query. */
    query?: (Scalars["String"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    /** Lookup a single release given various criteria. */
    release?: [{
    /** The name of the Tag the Release was created from */
    tagName: Scalars["String"]},ReleaseRequest]
    /** List of releases which are dependent on this repository. */
    releases?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (ReleaseOrder|null)},ReleaseConnectionRequest]|ReleaseConnectionRequest
    /** A list of applied repository-topic associations for this repository. */
    repositoryTopics?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RepositoryTopicConnectionRequest]|RepositoryTopicConnectionRequest
    /** The HTTP path for this repository */
    resourcePath?: boolean|number
    /** A description of the repository, rendered to HTML without any links in it. */
    shortDescriptionHTML?: [{
    /** How many characters to return. */
    limit?: (Scalars["Int"]|null)}]|boolean|number
    /** Whether or not squash-merging is enabled on this repository. */
    squashMergeAllowed?: boolean|number
    /** The SSH URL to clone this repository */
    sshUrl?: boolean|number
    /** A list of users who have starred this starrable. */
    stargazers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (StarOrder|null)},StargazerConnectionRequest]|StargazerConnectionRequest
    /**
     * Returns a list of all submodules in this repository parsed from the
     * .gitmodules file as of the default branch's HEAD commit.
     */
    submodules?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},SubmoduleConnectionRequest]|SubmoduleConnectionRequest
    /** Temporary authentication token for cloning this repository. */
    tempCloneToken?: boolean|number
    /** The repository from which this repository was generated, if any. */
    templateRepository?: RepositoryRequest
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this repository */
    url?: boolean|number
    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
    usesCustomOpenGraphImage?: boolean|number
    /** Indicates whether the viewer has admin permissions on this repository. */
    viewerCanAdminister?: boolean|number
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Indicates whether the viewer can update the topics of this repository. */
    viewerCanUpdateTopics?: boolean|number
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred?: boolean|number
    /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
    viewerPermission?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    /** A list of vulnerability alerts that are on this repository. */
    vulnerabilityAlerts?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RepositoryVulnerabilityAlertConnectionRequest]|RepositoryVulnerabilityAlertConnectionRequest
    /** A list of users watching the repository. */
    watchers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an owner of a Project. */
export interface ProjectOwnerRequest{
    id?: boolean|number
    /** Find project by number. */
    project?: [{
    /** The project number to find. */
    number: Scalars["Int"]},ProjectRequest]
    /** A list of projects under the owner. */
    projects?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for projects returned from the connection */
    orderBy?: (ProjectOrder|null),
    /** Query to search projects by, currently only searching by name. */
    search?: (Scalars["String"]|null),
    /** A list of states to filter the projects by. */
    states?: (ProjectState[]|null)},ProjectConnectionRequest]|ProjectConnectionRequest
    /** The HTTP path listing owners projects */
    projectsResourcePath?: boolean|number
    /** The HTTP URL listing owners projects */
    projectsUrl?: boolean|number
    /** Can the current viewer create new projects on this owner. */
    viewerCanCreateProjects?: boolean|number
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Projects manage issues, pull requests and notes within a project owner. */
export interface ProjectRequest{
    /** The project's description body. */
    body?: boolean|number
    /** The projects description body rendered to HTML. */
    bodyHTML?: boolean|number
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed?: boolean|number
    /** Identifies the date and time when the object was closed. */
    closedAt?: boolean|number
    /** List of columns in the project */
    columns?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ProjectColumnConnectionRequest]|ProjectColumnConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The actor who originally created the project. */
    creator?: ActorRequest
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The project's name. */
    name?: boolean|number
    /** The project's number. */
    number?: boolean|number
    /** The project's owner. Currently limited to repositories, organizations, and users. */
    owner?: ProjectOwnerRequest
    /** List of pending cards in this project */
    pendingCards?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** A list of archived states to filter the cards by */
    archivedStates?: ((ProjectCardArchivedState|null)[]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ProjectCardConnectionRequest]|ProjectCardConnectionRequest
    /** The HTTP path for this project */
    resourcePath?: boolean|number
    /** Whether the project is open or closed. */
    state?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this project */
    url?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that can be updated. */
export interface UpdatableRequest{
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_Project?: ProjectRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_GistComment?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ProjectColumn. */
export interface ProjectColumnConnectionRequest{
    /** A list of edges. */
    edges?: ProjectColumnEdgeRequest
    /** A list of nodes. */
    nodes?: ProjectColumnRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ProjectColumnEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ProjectColumnRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A column inside a project. */
export interface ProjectColumnRequest{
    /** List of cards in the column */
    cards?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** A list of archived states to filter the cards by */
    archivedStates?: ((ProjectCardArchivedState|null)[]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ProjectCardConnectionRequest]|ProjectCardConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The project column's name. */
    name?: boolean|number
    /** The project that contains this column. */
    project?: ProjectRequest
    /** The semantic purpose of the column */
    purpose?: boolean|number
    /** The HTTP path for this project column */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this project column */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ProjectCard. */
export interface ProjectCardConnectionRequest{
    /** A list of edges. */
    edges?: ProjectCardEdgeRequest
    /** A list of nodes. */
    nodes?: ProjectCardRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ProjectCardEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ProjectCardRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A card in a project. */
export interface ProjectCardRequest{
    /**
     * The project column this card is associated under. A card may only belong to one
     * project column at a time. The column field will be null if the card is created
     * in a pending state and has yet to be associated with a column. Once cards are
     * associated with a column, they will not become pending in the future.
     */
    column?: ProjectColumnRequest
    /** The card content item */
    content?: ProjectCardItemRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The actor who created this card */
    creator?: ActorRequest
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Whether the card is archived */
    isArchived?: boolean|number
    /** The card note */
    note?: boolean|number
    /** The project that contains this card. */
    project?: ProjectRequest
    /** The HTTP path for this card */
    resourcePath?: boolean|number
    /** The state of ProjectCard */
    state?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this card */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be inside Project Cards. */
export interface ProjectCardItemRequest{on_Issue?:IssueRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectOrder{
/** The direction in which to order projects by the specified field. */
direction: OrderDirection,
/** The field in which to order projects by. */
field: ProjectOrderField}


/** A list of projects associated with the owner. */
export interface ProjectConnectionRequest{
    /** A list of edges. */
    edges?: ProjectEdgeRequest
    /** A list of nodes. */
    nodes?: ProjectRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ProjectEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an owner of a registry package. */
export interface RegistryPackageOwnerRequest{
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages under the owner.
     */
    registryPackages?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find registry package by name. */
    name?: (Scalars["String"]|null),
    /** Find registry packages by their names. */
    names?: ((Scalars["String"]|null)[]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Filter registry package by whether it is publicly visible */
    publicOnly?: (Scalars["Boolean"]|null),
    /** Filter registry package by type (string). */
    registryPackageType?: (Scalars["String"]|null),
    /** Find registry packages in a repository. */
    repositoryId?: (Scalars["ID"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RegistryPackage. */
export interface RegistryPackageConnectionRequest{
    /** A list of edges. */
    edges?: RegistryPackageEdgeRequest
    /** A list of nodes. */
    nodes?: RegistryPackageRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RegistryPackageEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RegistryPackageRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A registry package contains the content for an uploaded package. */
export interface RegistryPackageRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * The package type color
     */
    color?: boolean|number
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find the latest version for the package.
     */
    latestVersion?: RegistryPackageVersionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the title of the package.
     */
    name?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the title of the package, with the owner prefixed.
     */
    nameWithOwner?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * Find the package file identified by the guid.
     */
    packageFileByGuid?: [{
    /** The unique identifier of the package_file */
    guid: Scalars["String"]},RegistryPackageFileRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * Find the package file identified by the sha256.
     */
    packageFileBySha256?: [{
    /** The SHA256 of the package_file */
    sha256: Scalars["String"]},RegistryPackageFileRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Identifies the type of the package.
     */
    packageType?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * List the prerelease versions for this package.
     */
    preReleaseVersions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RegistryPackageVersionConnectionRequest]|RegistryPackageVersionConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * The type of the package.
     */
    registryPackageType?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * repository that the release is associated with
     */
    repository?: RepositoryRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Statistics about package activity.
     */
    statistics?: RegistryPackageStatisticsRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * list of tags for this package
     */
    tags?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RegistryPackageTagConnectionRequest]|RegistryPackageTagConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
     * List the topics for this package.
     */
    topics?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},TopicConnectionRequest]|TopicConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by version string.
     */
    version?: [{
    /** The package version. */
    version: Scalars["String"]},RegistryPackageVersionRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by version string.
     */
    versionByPlatform?: [{
    /** Find a registry package for a specific platform. */
    platform: Scalars["String"],
    /** The package version. */
    version: Scalars["String"]},RegistryPackageVersionRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * Find package version by manifest SHA256.
     */
    versionBySha256?: [{
    /** The package SHA256 digest. */
    sha256: Scalars["String"]},RegistryPackageVersionRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * list of versions for this package
     */
    versions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RegistryPackageVersionConnectionRequest]|RegistryPackageVersionConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
     * List package versions with a specific metadatum.
     */
    versionsByMetadatum?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter on a specific metadatum. */
    metadatum: RegistryPackageMetadatum},RegistryPackageVersionConnectionRequest]
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A package version contains the information about a specific package version. */
export interface RegistryPackageVersionRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Whether or not this version has been deleted.
     */
    deleted?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * list of dependencies for this package
     */
    dependencies?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Find dependencies by type. */
    type?: (RegistryPackageDependencyType|null)},RegistryPackageDependencyConnectionRequest]|RegistryPackageDependencyConnectionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * A file associated with this registry package version
     */
    fileByName?: [{
    /** A specific file to find. */
    filename: Scalars["String"]},RegistryPackageFileRequest]
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * List of files associated with this registry package version
     */
    files?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},RegistryPackageFileConnectionRequest]|RegistryPackageFileConnectionRequest
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * A single line of text to install this package version.
     */
    installationCommand?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the package manifest for this package version.
     */
    manifest?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the platform this version was built for.
     */
    platform?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Indicates whether this version is a pre-release.
     */
    preRelease?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * The README of this package version
     */
    readme?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * The HTML README of this package version
     */
    readmeHtml?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Registry package associated with this version.
     */
    registryPackage?: RegistryPackageRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Release associated with this package.
     */
    release?: ReleaseRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha256.
     */
    sha256?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the size.
     */
    size?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Statistics about package activity.
     */
    statistics?: RegistryPackageVersionStatisticsRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the package version summary.
     */
    summary?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Time at which the most recent file upload for this package version finished
     */
    updatedAt?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Identifies the version number.
     */
    version?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
     * Can the current viewer edit this Package version.
     */
    viewerCanEdit?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RegistryPackageDependency. */
export interface RegistryPackageDependencyConnectionRequest{
    /** A list of edges. */
    edges?: RegistryPackageDependencyEdgeRequest
    /** A list of nodes. */
    nodes?: RegistryPackageDependencyRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RegistryPackageDependencyEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RegistryPackageDependencyRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A package dependency contains the information needed to satisfy a dependency. */
export interface RegistryPackageDependencyRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the type of dependency.
     */
    dependencyType?: boolean|number
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the name of the dependency.
     */
    name?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
     * Identifies the version of the dependency.
     */
    version?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A file in a specific registry package version. */
export interface RegistryPackageFileRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * A unique identifier for this file.
     */
    guid?: boolean|number
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the md5.
     */
    md5?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * URL to download the asset metadata.
     */
    metadataUrl?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Name of the file
     */
    name?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * The package version this file belongs to.
     */
    packageVersion?: RegistryPackageVersionRequest
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha1.
     */
    sha1?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the sha256.
     */
    sha256?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * Identifies the size.
     */
    size?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
     * URL to download the asset.
     */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RegistryPackageFile. */
export interface RegistryPackageFileConnectionRequest{
    /** A list of edges. */
    edges?: RegistryPackageFileEdgeRequest
    /** A list of nodes. */
    nodes?: RegistryPackageFileRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RegistryPackageFileEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RegistryPackageFileRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface RegistryPackageVersionStatisticsRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this month.
     */
    downloadsThisMonth?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this week.
     */
    downloadsThisWeek?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this year.
     */
    downloadsThisYear?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded today.
     */
    downloadsToday?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded since it was created.
     */
    downloadsTotalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RegistryPackageVersion. */
export interface RegistryPackageVersionConnectionRequest{
    /** A list of edges. */
    edges?: RegistryPackageVersionEdgeRequest
    /** A list of nodes. */
    nodes?: RegistryPackageVersionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RegistryPackageVersionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RegistryPackageVersionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a object that contains package activity statistics such as downloads. */
export interface RegistryPackageStatisticsRequest{
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this month.
     */
    downloadsThisMonth?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this week.
     */
    downloadsThisWeek?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded this year.
     */
    downloadsThisYear?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded today.
     */
    downloadsToday?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
     * Number of times the package was downloaded since it was created.
     */
    downloadsTotalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RegistryPackageTag. */
export interface RegistryPackageTagConnectionRequest{
    /** A list of edges. */
    edges?: RegistryPackageTagEdgeRequest
    /** A list of nodes. */
    nodes?: RegistryPackageTagRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RegistryPackageTagEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RegistryPackageTagRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A version tag contains the mapping between a tag name and a version. */
export interface RegistryPackageTagRequest{
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
     * Identifies the tag name of the version.
     */
    name?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
     * version that the tag is associated with
     */
    version?: RegistryPackageVersionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Topic. */
export interface TopicConnectionRequest{
    /** A list of edges. */
    edges?: TopicEdgeRequest
    /** A list of nodes. */
    nodes?: TopicRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface TopicEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: TopicRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A topic aggregates entities that are related to a subject. */
export interface TopicRequest{
    id?: boolean|number
    /** The topic's name. */
    name?: boolean|number
    /**
     * A list of related topics, including aliases of this topic, sorted with the most relevant
     * first. Returns up to 10 Topics.
     */
    relatedTopics?: [{
    /** How many topics to return. */
    first?: (Scalars["Int"]|null)},TopicRequest]|TopicRequest
    /** A list of users who have starred this starrable. */
    stargazers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (StarOrder|null)},StargazerConnectionRequest]|StargazerConnectionRequest
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Things that can be starred. */
export interface StarrableRequest{
    id?: boolean|number
    /** A list of users who have starred this starrable. */
    stargazers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (StarOrder|null)},StargazerConnectionRequest]|StargazerConnectionRequest
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred?: boolean|number
    on_Repository?: RepositoryRequest
    on_Topic?: TopicRequest
    on_Gist?: GistRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which star connections can be ordered. */
export interface StarOrder{
/** The direction in which to order nodes. */
direction: OrderDirection,
/** The field in which to order nodes by. */
field: StarOrderField}


/** The connection type for User. */
export interface StargazerConnectionRequest{
    /** A list of edges. */
    edges?: StargazerEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user that's starred a repository. */
export interface StargazerEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    node?: UserRequest
    /** Identifies when the item was starred. */
    starredAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a single registry metadatum */
export interface RegistryPackageMetadatum{
/** Name of the metadatum. */
name: Scalars["String"],
/** True, if the metadatum can be updated if it already exists */
update?: (Scalars["Boolean"]|null),
/** Value of the metadatum. */
value: Scalars["String"]}


/** Represents an interface to search packages on an object. */
export interface RegistryPackageSearchRequest{
    id?: boolean|number
    /**
     * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
     * A list of registry packages for a particular search query.
     */
    registryPackagesForQuery?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter registry package by type. */
    packageType?: (RegistryPackageType|null),
    /** Find registry package by search query. */
    query?: (Scalars["String"]|null)},RegistryPackageConnectionRequest]|RegistryPackageConnectionRequest
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    on_Repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A subset of repository info. */
export interface RepositoryInfoRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The description of the repository. */
    description?: boolean|number
    /** The description of the repository rendered to HTML. */
    descriptionHTML?: boolean|number
    /** Returns how many forks there are of this repository in the whole network. */
    forkCount?: boolean|number
    /** Indicates if the repository has issues feature enabled. */
    hasIssuesEnabled?: boolean|number
    /** Indicates if the repository has the Projects feature enabled. */
    hasProjectsEnabled?: boolean|number
    /** Indicates if the repository has wiki feature enabled. */
    hasWikiEnabled?: boolean|number
    /** The repository's URL. */
    homepageUrl?: boolean|number
    /** Indicates if the repository is unmaintained. */
    isArchived?: boolean|number
    /** Identifies if the repository is a fork. */
    isFork?: boolean|number
    /** Indicates if the repository has been locked or not. */
    isLocked?: boolean|number
    /** Identifies if the repository is a mirror. */
    isMirror?: boolean|number
    /** Identifies if the repository is private. */
    isPrivate?: boolean|number
    /** Identifies if the repository is a template that can be used to generate new repositories. */
    isTemplate?: boolean|number
    /** The license associated with the repository */
    licenseInfo?: LicenseRequest
    /** The reason the repository has been locked. */
    lockReason?: boolean|number
    /** The repository's original mirror URL. */
    mirrorUrl?: boolean|number
    /** The name of the repository. */
    name?: boolean|number
    /** The repository's name with owner. */
    nameWithOwner?: boolean|number
    /** The image used to represent this repository in Open Graph data. */
    openGraphImageUrl?: boolean|number
    /** The User owner of the repository. */
    owner?: RepositoryOwnerRequest
    /** Identifies when the repository was last pushed to. */
    pushedAt?: boolean|number
    /** The HTTP path for this repository */
    resourcePath?: boolean|number
    /** A description of the repository, rendered to HTML without any links in it. */
    shortDescriptionHTML?: [{
    /** How many characters to return. */
    limit?: (Scalars["Int"]|null)}]|boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this repository */
    url?: boolean|number
    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
    usesCustomOpenGraphImage?: boolean|number
    on_Repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A repository's open source license */
export interface LicenseRequest{
    /** The full text of the license */
    body?: boolean|number
    /** The conditions set by the license */
    conditions?: LicenseRuleRequest
    /** A human-readable description of the license */
    description?: boolean|number
    /** Whether the license should be featured */
    featured?: boolean|number
    /** Whether the license should be displayed in license pickers */
    hidden?: boolean|number
    id?: boolean|number
    /** Instructions on how to implement the license */
    implementation?: boolean|number
    /** The lowercased SPDX ID of the license */
    key?: boolean|number
    /** The limitations set by the license */
    limitations?: LicenseRuleRequest
    /** The license full name specified by <https://spdx.org/licenses> */
    name?: boolean|number
    /** Customary short name if applicable (e.g, GPLv3) */
    nickname?: boolean|number
    /** The permissions set by the license */
    permissions?: LicenseRuleRequest
    /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
    pseudoLicense?: boolean|number
    /** Short identifier specified by <https://spdx.org/licenses> */
    spdxId?: boolean|number
    /** URL to the license on <https://choosealicense.com> */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRuleRequest{
    /** A description of the rule */
    description?: boolean|number
    /** The machine-readable rule key */
    key?: boolean|number
    /** The human-readable rule label */
    label?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an owner of a Repository. */
export interface RepositoryOwnerRequest{
    /** A URL pointing to the owner's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    id?: boolean|number
    /** The username used to login. */
    login?: boolean|number
    /** A list of repositories that the user owns. */
    repositories?: [{
    /**
     * Array of viewer's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * current viewer owns.
     */
    affiliations?: ((RepositoryAffiliation|null)[]|null),
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If non-null, filters repositories according to whether they are forks of another repository */
    isFork?: (Scalars["Boolean"]|null),
    /** If non-null, filters repositories according to whether they have been locked */
    isLocked?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories returned from the connection */
    orderBy?: (RepositoryOrder|null),
    /**
     * Array of owner's affiliation options for repositories returned from the
     * connection. For example, OWNER will include only repositories that the
     * organization or user being viewed owns.
     */
    ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
    /** If non-null, filters repositories according to privacy */
    privacy?: (RepositoryPrivacy|null)},RepositoryConnectionRequest]|RepositoryConnectionRequest
    /** Find Repository. */
    repository?: [{
    /** Name of Repository to find. */
    name: Scalars["String"]},RepositoryRequest]
    /** The HTTP URL for the owner. */
    resourcePath?: boolean|number
    /** The HTTP URL for the owner. */
    url?: boolean|number
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for repository connections */
export interface RepositoryOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order repositories by. */
field: RepositoryOrderField}


/** A list of repositories owned by the subject. */
export interface RepositoryConnectionRequest{
    /** A list of edges. */
    edges?: RepositoryEdgeRequest
    /** A list of nodes. */
    nodes?: RepositoryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** The total size in kilobytes of all repositories in the connection. */
    totalDiskUsage?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RepositoryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribableRequest{
    id?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_Repository?: RepositoryRequest
    on_Team?: TeamRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_Commit?: CommitRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnectionRequest{
    /** A list of edges. */
    edges?: BranchProtectionRuleEdgeRequest
    /** A list of nodes. */
    nodes?: BranchProtectionRuleRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface BranchProtectionRuleEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: BranchProtectionRuleRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A branch protection rule. */
export interface BranchProtectionRuleRequest{
    /** A list of conflicts matching branches protection rule and other branch protection rules */
    branchProtectionRuleConflicts?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},BranchProtectionRuleConflictConnectionRequest]|BranchProtectionRuleConflictConnectionRequest
    /** The actor who created this branch protection rule. */
    creator?: ActorRequest
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** Will new commits pushed to matching branches dismiss pull request review approvals. */
    dismissesStaleReviews?: boolean|number
    id?: boolean|number
    /** Can admins overwrite branch protection. */
    isAdminEnforced?: boolean|number
    /** Repository refs that are protected by this rule */
    matchingRefs?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filters refs with query on name */
    query?: (Scalars["String"]|null)},RefConnectionRequest]|RefConnectionRequest
    /** Identifies the protection rule pattern. */
    pattern?: boolean|number
    /** A list push allowances for this branch protection rule. */
    pushAllowances?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PushAllowanceConnectionRequest]|PushAllowanceConnectionRequest
    /** The repository associated with this branch protection rule. */
    repository?: RepositoryRequest
    /** Number of approving reviews required to update matching branches. */
    requiredApprovingReviewCount?: boolean|number
    /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
    requiredStatusCheckContexts?: boolean|number
    /** Are approving reviews required to update matching branches. */
    requiresApprovingReviews?: boolean|number
    /** Are reviews from code owners required to update matching branches. */
    requiresCodeOwnerReviews?: boolean|number
    /** Are commits required to be signed. */
    requiresCommitSignatures?: boolean|number
    /** Are status checks required to update matching branches. */
    requiresStatusChecks?: boolean|number
    /** Are branches required to be up to date before merging. */
    requiresStrictStatusChecks?: boolean|number
    /** Is pushing to matching branches restricted. */
    restrictsPushes?: boolean|number
    /** Is dismissal of pull request reviews restricted. */
    restrictsReviewDismissals?: boolean|number
    /** A list review dismissal allowances for this branch protection rule. */
    reviewDismissalAllowances?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ReviewDismissalAllowanceConnectionRequest]|ReviewDismissalAllowanceConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnectionRequest{
    /** A list of edges. */
    edges?: BranchProtectionRuleConflictEdgeRequest
    /** A list of nodes. */
    nodes?: BranchProtectionRuleConflictRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: BranchProtectionRuleConflictRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflictRequest{
    /** Identifies the branch protection rule. */
    branchProtectionRule?: BranchProtectionRuleRequest
    /** Identifies the conflicting branch protection rule. */
    conflictingBranchProtectionRule?: BranchProtectionRuleRequest
    /** Identifies the branch ref that has conflicting rules */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Ref. */
export interface RefConnectionRequest{
    /** A list of edges. */
    edges?: RefEdgeRequest
    /** A list of nodes. */
    nodes?: RefRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RefEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PushAllowance. */
export interface PushAllowanceConnectionRequest{
    /** A list of edges. */
    edges?: PushAllowanceEdgeRequest
    /** A list of nodes. */
    nodes?: PushAllowanceRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PushAllowanceEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PushAllowanceRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A team, user or app who has the ability to push to a protected branch. */
export interface PushAllowanceRequest{
    /** The actor that can push. */
    actor?: PushAllowanceActorRequest
    /** Identifies the branch protection rule associated with the allowed user or team. */
    branchProtectionRule?: BranchProtectionRuleRequest
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be an actor. */
export interface PushAllowanceActorRequest{on_App?:AppRequest,on_Team?:TeamRequest,on_User?:UserRequest,__typename?:boolean|number}


/** A GitHub App. */
export interface AppRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The description of the app. */
    description?: boolean|number
    id?: boolean|number
    /** The hex color code, without the leading '#', for the logo background. */
    logoBackgroundColor?: boolean|number
    /** A URL pointing to the app's logo. */
    logoUrl?: [{
    /** The size of the resulting image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** The name of the app. */
    name?: boolean|number
    /** A slug based on the name of the app for use in URLs. */
    slug?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The URL to the app's homepage. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A team of users in an organization. */
export interface TeamRequest{
    /** A list of teams that are ancestors of this team. */
    ancestors?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},TeamConnectionRequest]|TeamConnectionRequest
    /** A URL pointing to the team's avatar. */
    avatarUrl?: [{
    /** The size in pixels of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** List of child teams belonging to this team */
    childTeams?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Whether to list immediate child teams or all descendant child teams. */
    immediateOnly?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (TeamOrder|null),
    /** User logins to filter by */
    userLogins?: (Scalars["String"][]|null)},TeamConnectionRequest]|TeamConnectionRequest
    /** The slug corresponding to the organization and team. */
    combinedSlug?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The description of the team. */
    description?: boolean|number
    /** Find a team discussion by its number. */
    discussion?: [{
    /** The sequence number of the discussion to find. */
    number: Scalars["Int"]},TeamDiscussionRequest]
    /** A list of team discussions. */
    discussions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** If provided, filters discussions according to whether or not they are pinned. */
    isPinned?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (TeamDiscussionOrder|null)},TeamDiscussionConnectionRequest]|TeamDiscussionConnectionRequest
    /** The HTTP path for team discussions */
    discussionsResourcePath?: boolean|number
    /** The HTTP URL for team discussions */
    discussionsUrl?: boolean|number
    /** The HTTP path for editing this team */
    editTeamResourcePath?: boolean|number
    /** The HTTP URL for editing this team */
    editTeamUrl?: boolean|number
    id?: boolean|number
    /** A list of pending invitations for users to this team */
    invitations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},OrganizationInvitationConnectionRequest]|OrganizationInvitationConnectionRequest
    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
    memberStatuses?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for user statuses returned from the connection. */
    orderBy?: (UserStatusOrder|null)},UserStatusConnectionRequest]|UserStatusConnectionRequest
    /** A list of users who are members of this team. */
    members?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter by membership type */
    membership?: (TeamMembershipType|null),
    /** Order for the connection. */
    orderBy?: (TeamMemberOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** Filter by team member role */
    role?: (TeamMemberRole|null)},TeamMemberConnectionRequest]|TeamMemberConnectionRequest
    /** The HTTP path for the team' members */
    membersResourcePath?: boolean|number
    /** The HTTP URL for the team' members */
    membersUrl?: boolean|number
    /** The name of the team. */
    name?: boolean|number
    /** The HTTP path creating a new team */
    newTeamResourcePath?: boolean|number
    /** The HTTP URL creating a new team */
    newTeamUrl?: boolean|number
    /** The organization that owns this team. */
    organization?: OrganizationRequest
    /** The parent team of the team. */
    parentTeam?: TeamRequest
    /** The level of privacy the team has. */
    privacy?: boolean|number
    /** A list of repositories this team has access to. */
    repositories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for the connection. */
    orderBy?: (TeamRepositoryOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null)},TeamRepositoryConnectionRequest]|TeamRepositoryConnectionRequest
    /** The HTTP path for this team's repositories */
    repositoriesResourcePath?: boolean|number
    /** The HTTP URL for this team's repositories */
    repositoriesUrl?: boolean|number
    /** The HTTP path for this team */
    resourcePath?: boolean|number
    /** What algorithm is used for review assignment for this team */
    reviewRequestDelegationAlgorithm?: boolean|number
    /** True if review assignment is enabled for this team */
    reviewRequestDelegationEnabled?: boolean|number
    /** How many team members are required for review assignment for this team */
    reviewRequestDelegationMemberCount?: boolean|number
    /** When assigning team members via delegation, whether the entire team should be notified as well. */
    reviewRequestDelegationNotifyTeam?: boolean|number
    /** The slug corresponding to the team. */
    slug?: boolean|number
    /** The HTTP path for this team's teams */
    teamsResourcePath?: boolean|number
    /** The HTTP URL for this team's teams */
    teamsUrl?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this team */
    url?: boolean|number
    /** Team is adminable by the viewer. */
    viewerCanAdminister?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Team. */
export interface TeamConnectionRequest{
    /** A list of edges. */
    edges?: TeamEdgeRequest
    /** A list of nodes. */
    nodes?: TeamRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface TeamEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: TeamRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which team connections can be ordered. */
export interface TeamOrder{
/** The direction in which to order nodes. */
direction: OrderDirection,
/** The field in which to order nodes by. */
field: TeamOrderField}


/** A team discussion. */
export interface TeamDiscussionRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the discussion's team. */
    authorAssociation?: boolean|number
    /** The body as Markdown. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Identifies the discussion body hash. */
    bodyVersion?: boolean|number
    /** A list of comments on this discussion. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** When provided, filters the connection such that results begin with the comment with this number. */
    fromComment?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (TeamDiscussionCommentOrder|null)},TeamDiscussionCommentConnectionRequest]|TeamDiscussionCommentConnectionRequest
    /** The HTTP path for discussion comments */
    commentsResourcePath?: boolean|number
    /** The HTTP URL for discussion comments */
    commentsUrl?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** Whether or not the discussion is pinned. */
    isPinned?: boolean|number
    /** Whether or not the discussion is only visible to team members and org admins. */
    isPrivate?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Identifies the discussion within its team. */
    number?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The HTTP path for this discussion */
    resourcePath?: boolean|number
    /** The team that defines the context of this discussion. */
    team?: TeamRequest
    /** The title of the discussion */
    title?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this discussion */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Whether or not the current viewer can pin this discussion. */
    viewerCanPin?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that can be deleted. */
export interface DeletableRequest{
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_GistComment?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Comments that can be updated. */
export interface UpdatableCommentRequest{
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    on_PullRequest?: PullRequestRequest
    on_Issue?: IssueRequest
    on_TeamDiscussion?: TeamDiscussionRequest
    on_TeamDiscussionComment?: TeamDiscussionCommentRequest
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_PullRequestReview?: PullRequestReviewRequest
    on_GistComment?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which team discussion comment connections can be ordered. */
export interface TeamDiscussionCommentOrder{
/** The direction in which to order nodes. */
direction: OrderDirection,
/** The field by which to order nodes. */
field: TeamDiscussionCommentOrderField}


/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnectionRequest{
    /** A list of edges. */
    edges?: TeamDiscussionCommentEdgeRequest
    /** A list of nodes. */
    nodes?: TeamDiscussionCommentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface TeamDiscussionCommentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: TeamDiscussionCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A comment on a team discussion. */
export interface TeamDiscussionCommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the comment's team. */
    authorAssociation?: boolean|number
    /** The body as Markdown. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** The current version of the body content. */
    bodyVersion?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The discussion this comment is about. */
    discussion?: TeamDiscussionRequest
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Identifies the comment number. */
    number?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The HTTP path for this comment */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this comment */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which team discussion connections can be ordered. */
export interface TeamDiscussionOrder{
/** The direction in which to order nodes. */
direction: OrderDirection,
/** The field by which to order nodes. */
field: TeamDiscussionOrderField}


/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnectionRequest{
    /** A list of edges. */
    edges?: TeamDiscussionEdgeRequest
    /** A list of nodes. */
    nodes?: TeamDiscussionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface TeamDiscussionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: TeamDiscussionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnectionRequest{
    /** A list of edges. */
    edges?: OrganizationInvitationEdgeRequest
    /** A list of nodes. */
    nodes?: OrganizationInvitationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface OrganizationInvitationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: OrganizationInvitationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An Invitation for a user to an organization. */
export interface OrganizationInvitationRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The email address of the user invited to the organization. */
    email?: boolean|number
    id?: boolean|number
    /** The type of invitation that was sent (e.g. email, user). */
    invitationType?: boolean|number
    /** The user who was invited to the organization. */
    invitee?: UserRequest
    /** The user who created the invitation. */
    inviter?: UserRequest
    /** The organization the invite is for */
    organization?: OrganizationRequest
    /** The user's pending role in the organization (e.g. member, owner). */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for team member connections */
export interface TeamMemberOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order team members by. */
field: TeamMemberOrderField}


/** The connection type for User. */
export interface TeamMemberConnectionRequest{
    /** A list of edges. */
    edges?: TeamMemberEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user who is a member of a team. */
export interface TeamMemberEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The HTTP path to the organization's member access page. */
    memberAccessResourcePath?: boolean|number
    /** The HTTP URL to the organization's member access page. */
    memberAccessUrl?: boolean|number
    node?: UserRequest
    /** The role the member has on the team. */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for team repository connections */
export interface TeamRepositoryOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order repositories by. */
field: TeamRepositoryOrderField}


/** The connection type for Repository. */
export interface TeamRepositoryConnectionRequest{
    /** A list of edges. */
    edges?: TeamRepositoryEdgeRequest
    /** A list of nodes. */
    nodes?: RepositoryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a team repository. */
export interface TeamRepositoryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    node?: RepositoryRequest
    /**
     * The permission level the team has on the repository
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnectionRequest{
    /** A list of edges. */
    edges?: ReviewDismissalAllowanceEdgeRequest
    /** A list of nodes. */
    nodes?: ReviewDismissalAllowanceRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ReviewDismissalAllowanceRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A team or user who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowanceRequest{
    /** The actor that can dismiss. */
    actor?: ReviewDismissalAllowanceActorRequest
    /** Identifies the branch protection rule associated with the allowed user or team. */
    branchProtectionRule?: BranchProtectionRuleRequest
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be an actor. */
export interface ReviewDismissalAllowanceActorRequest{on_Team?:TeamRequest,on_User?:UserRequest,__typename?:boolean|number}


/** The connection type for User. */
export interface RepositoryCollaboratorConnectionRequest{
    /** A list of edges. */
    edges?: RepositoryCollaboratorEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    node?: UserRequest
    /**
     * The permission the user has on the repository.
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission?: boolean|number
    /** A list of sources for the user's access to the repository. */
    permissionSources?: PermissionSourceRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A level of permission and source for a user's access to a repository. */
export interface PermissionSourceRequest{
    /** The organization the repository belongs to. */
    organization?: OrganizationRequest
    /** The level of access this source has granted to the user. */
    permission?: boolean|number
    /** The source of this permission. */
    source?: PermissionGranterRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can grant permissions on a repository to a user */
export interface PermissionGranterRequest{on_Organization?:OrganizationRequest,on_Repository?:RepositoryRequest,on_Team?:TeamRequest,__typename?:boolean|number}


/** The connection type for CommitComment. */
export interface CommitCommentConnectionRequest{
    /** A list of edges. */
    edges?: CommitCommentEdgeRequest
    /** A list of nodes. */
    nodes?: CommitCommentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CommitCommentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CommitCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a comment on a given Commit. */
export interface CommitCommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** Identifies the comment body. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Identifies the commit associated with the comment, if the commit exists. */
    commit?: CommitRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** Returns whether or not a comment has been minimized. */
    isMinimized?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Returns why the comment was minimized. */
    minimizedReason?: boolean|number
    /** Identifies the file path associated with the comment. */
    path?: boolean|number
    /** Identifies the line position associated with the comment. */
    position?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path permalink for this commit comment. */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL permalink for this commit comment. */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that can be minimized. */
export interface MinimizableRequest{
    /** Returns whether or not a comment has been minimized. */
    isMinimized?: boolean|number
    /** Returns why the comment was minimized. */
    minimizedReason?: boolean|number
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize?: boolean|number
    on_CommitComment?: CommitCommentRequest
    on_IssueComment?: IssueCommentRequest
    on_PullRequestReviewComment?: PullRequestReviewCommentRequest
    on_GistComment?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git commit. */
export interface CommitRequest{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid?: boolean|number
    /** The number of additions in this commit. */
    additions?: boolean|number
    /** The pull requests associated with a commit */
    associatedPullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests. */
    orderBy?: (PullRequestOrder|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /** Authorship details of the commit. */
    author?: GitActorRequest
    /** Check if the committer and the author match. */
    authoredByCommitter?: boolean|number
    /** The datetime when this commit was authored. */
    authoredDate?: boolean|number
    /** Fetches `git blame` information. */
    blame?: [{
    /** The file whose Git blame information you want. */
    path: Scalars["String"]},BlameRequest]
    /** The number of changed files in this commit. */
    changedFiles?: boolean|number
    /** The check suites associated with a commit. */
    checkSuites?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filters the check suites by this type. */
    filterBy?: (CheckSuiteFilter|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CheckSuiteConnectionRequest]|CheckSuiteConnectionRequest
    /** Comments made on the commit. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitCommentConnectionRequest]|CommitCommentConnectionRequest
    /** The HTTP path for this Git object */
    commitResourcePath?: boolean|number
    /** The HTTP URL for this Git object */
    commitUrl?: boolean|number
    /** The datetime when this commit was committed. */
    committedDate?: boolean|number
    /** Check if commited via GitHub web UI. */
    committedViaWeb?: boolean|number
    /** Committership details of the commit. */
    committer?: GitActorRequest
    /** The number of deletions in this commit. */
    deletions?: boolean|number
    /** The deployments associated with a commit. */
    deployments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Environments to list deployments for */
    environments?: (Scalars["String"][]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for deployments returned from the connection. */
    orderBy?: (DeploymentOrder|null)},DeploymentConnectionRequest]|DeploymentConnectionRequest
    /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
    history?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** If non-null, filters history to only show commits with matching authorship. */
    author?: (CommitAuthor|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** If non-null, filters history to only show commits touching files under this path. */
    path?: (Scalars["String"]|null),
    /** Allows specifying a beginning time or date for fetching commits. */
    since?: (Scalars["GitTimestamp"]|null),
    /** Allows specifying an ending time or date for fetching commits. */
    until?: (Scalars["GitTimestamp"]|null)},CommitHistoryConnectionRequest]|CommitHistoryConnectionRequest
    id?: boolean|number
    /** The Git commit message */
    message?: boolean|number
    /** The Git commit message body */
    messageBody?: boolean|number
    /** The commit message body rendered to HTML. */
    messageBodyHTML?: boolean|number
    /** The Git commit message headline */
    messageHeadline?: boolean|number
    /** The commit message headline rendered to HTML. */
    messageHeadlineHTML?: boolean|number
    /** The Git object ID */
    oid?: boolean|number
    /** The organization this commit was made on behalf of. */
    onBehalfOf?: OrganizationRequest
    /** The parents of a commit. */
    parents?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitConnectionRequest]|CommitConnectionRequest
    /** The datetime when this commit was pushed. */
    pushedDate?: boolean|number
    /** The Repository this commit belongs to */
    repository?: RepositoryRequest
    /** The HTTP path for this commit */
    resourcePath?: boolean|number
    /** Commit signing information, if present. */
    signature?: GitSignatureRequest
    /** Status information for this commit */
    status?: StatusRequest
    /** Check and Status rollup information for this commit. */
    statusCheckRollup?: StatusCheckRollupRequest
    /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
    submodules?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},SubmoduleConnectionRequest]|SubmoduleConnectionRequest
    /**
     * Returns a URL to download a tarball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    tarballUrl?: boolean|number
    /** Commit's root Tree */
    tree?: TreeRequest
    /** The HTTP path for the tree of this commit */
    treeResourcePath?: boolean|number
    /** The HTTP URL for the tree of this commit */
    treeUrl?: boolean|number
    /** The HTTP URL for this commit */
    url?: boolean|number
    /** Check if the viewer is able to change their subscription status for the repository. */
    viewerCanSubscribe?: boolean|number
    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
    viewerSubscription?: boolean|number
    /**
     * Returns a URL to download a zipball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    zipballUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git object. */
export interface GitObjectRequest{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid?: boolean|number
    /** The HTTP path for this Git object */
    commitResourcePath?: boolean|number
    /** The HTTP URL for this Git object */
    commitUrl?: boolean|number
    id?: boolean|number
    /** The Git object ID */
    oid?: boolean|number
    /** The Repository the Git object belongs to */
    repository?: RepositoryRequest
    on_Commit?: CommitRequest
    on_Tree?: TreeRequest
    on_Blob?: BlobRequest
    on_Tag?: TagRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of issues can be ordered upon return. */
export interface PullRequestOrder{
/** The direction in which to order pull requests by the specified field. */
direction: OrderDirection,
/** The field in which to order pull requests by. */
field: PullRequestOrderField}


/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActorRequest{
    /** A URL pointing to the author's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** The timestamp of the Git action (authoring or committing). */
    date?: boolean|number
    /** The email in the Git commit. */
    email?: boolean|number
    /** The name in the Git commit. */
    name?: boolean|number
    /** The GitHub user corresponding to the email field. Null if no such user exists. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git blame. */
export interface BlameRequest{
    /** The list of ranges from a Git blame. */
    ranges?: BlameRangeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a range of information from a Git blame. */
export interface BlameRangeRequest{
    /**
     * Identifies the recency of the change, from 1 (new) to 10 (old). This is
     * calculated as a 2-quantile and determines the length of distance between the
     * median age of all the changes in the file and the recency of the current
     * range's change.
     */
    age?: boolean|number
    /** Identifies the line author */
    commit?: CommitRequest
    /** The ending line for the range */
    endingLine?: boolean|number
    /** The starting line for the range */
    startingLine?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The filters that are available when fetching check suites. */
export interface CheckSuiteFilter{
/** Filters the check suites created by this application ID. */
appId?: (Scalars["Int"]|null),
/** Filters the check suites by this name. */
checkName?: (Scalars["String"]|null)}


/** The connection type for CheckSuite. */
export interface CheckSuiteConnectionRequest{
    /** A list of edges. */
    edges?: CheckSuiteEdgeRequest
    /** A list of nodes. */
    nodes?: CheckSuiteRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CheckSuiteEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CheckSuiteRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A check suite. */
export interface CheckSuiteRequest{
    /** The GitHub App which created this check suite. */
    app?: AppRequest
    /** The name of the branch for this check suite. */
    branch?: RefRequest
    /** The check runs associated with a check suite. */
    checkRuns?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filters the check runs by this type. */
    filterBy?: (CheckRunFilter|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CheckRunConnectionRequest]|CheckRunConnectionRequest
    /** The commit for this check suite */
    commit?: CommitRequest
    /** The conclusion of this check suite. */
    conclusion?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** A list of open pull requests matching the check suite. */
    matchingPullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /** The push that triggered this check suite. */
    push?: PushRequest
    /** The repository associated with this check suite. */
    repository?: RepositoryRequest
    /** The HTTP path for this check suite */
    resourcePath?: boolean|number
    /** The status of this check suite. */
    status?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this check suite */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The filters that are available when fetching check runs. */
export interface CheckRunFilter{
/** Filters the check runs created by this application ID. */
appId?: (Scalars["Int"]|null),
/** Filters the check runs by this name. */
checkName?: (Scalars["String"]|null),
/** Filters the check runs by this type. */
checkType?: (CheckRunType|null),
/** Filters the check runs by this status. */
status?: (CheckStatusState|null)}


/** The connection type for CheckRun. */
export interface CheckRunConnectionRequest{
    /** A list of edges. */
    edges?: CheckRunEdgeRequest
    /** A list of nodes. */
    nodes?: CheckRunRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CheckRunEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CheckRunRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A check run. */
export interface CheckRunRequest{
    /** The check run's annotations */
    annotations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CheckAnnotationConnectionRequest]|CheckAnnotationConnectionRequest
    /** The check suite that this run is a part of. */
    checkSuite?: CheckSuiteRequest
    /** Identifies the date and time when the check run was completed. */
    completedAt?: boolean|number
    /** The conclusion of the check run. */
    conclusion?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The URL from which to find full details of the check run on the integrator's site. */
    detailsUrl?: boolean|number
    /** A reference for the check run on the integrator's system. */
    externalId?: boolean|number
    id?: boolean|number
    /** The name of the check for this check run. */
    name?: boolean|number
    /** The permalink to the check run summary. */
    permalink?: boolean|number
    /** The repository associated with this check run. */
    repository?: RepositoryRequest
    /** The HTTP path for this check run. */
    resourcePath?: boolean|number
    /** Identifies the date and time when the check run was started. */
    startedAt?: boolean|number
    /** The current status of the check run. */
    status?: boolean|number
    /** A string representing the check run's summary */
    summary?: boolean|number
    /** A string representing the check run's text */
    text?: boolean|number
    /** A string representing the check run */
    title?: boolean|number
    /** The HTTP URL for this check run. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnectionRequest{
    /** A list of edges. */
    edges?: CheckAnnotationEdgeRequest
    /** A list of nodes. */
    nodes?: CheckAnnotationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CheckAnnotationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CheckAnnotationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A single check annotation. */
export interface CheckAnnotationRequest{
    /** The annotation's severity level. */
    annotationLevel?: boolean|number
    /** The path to the file that this annotation was made on. */
    blobUrl?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The position of this annotation. */
    location?: CheckAnnotationSpanRequest
    /** The annotation's message. */
    message?: boolean|number
    /** The path that this annotation was made on. */
    path?: boolean|number
    /** Additional information about the annotation. */
    rawDetails?: boolean|number
    /** The annotation's title */
    title?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpanRequest{
    /** End position (inclusive). */
    end?: CheckAnnotationPositionRequest
    /** Start position (inclusive). */
    start?: CheckAnnotationPositionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A character position in a check annotation. */
export interface CheckAnnotationPositionRequest{
    /** Column number (1 indexed). */
    column?: boolean|number
    /** Line number (1 indexed). */
    line?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A Git push. */
export interface PushRequest{
    id?: boolean|number
    /** The SHA after the push */
    nextSha?: boolean|number
    /** The permalink for this push. */
    permalink?: boolean|number
    /** The SHA before the push */
    previousSha?: boolean|number
    /** The user who pushed */
    pusher?: UserRequest
    /** The repository that was pushed to */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for deployment connections */
export interface DeploymentOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order deployments by. */
field: DeploymentOrderField}


/** The connection type for Deployment. */
export interface DeploymentConnectionRequest{
    /** A list of edges. */
    edges?: DeploymentEdgeRequest
    /** A list of nodes. */
    nodes?: DeploymentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface DeploymentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: DeploymentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents triggered deployment instance. */
export interface DeploymentRequest{
    /** Identifies the commit sha of the deployment. */
    commit?: CommitRequest
    /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
    commitOid?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the actor who triggered the deployment. */
    creator?: ActorRequest
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The deployment description. */
    description?: boolean|number
    /** The latest environment to which this deployment was made. */
    environment?: boolean|number
    id?: boolean|number
    /** The latest environment to which this deployment was made. */
    latestEnvironment?: boolean|number
    /** The latest status of this deployment. */
    latestStatus?: DeploymentStatusRequest
    /** The original environment to which this deployment was made. */
    originalEnvironment?: boolean|number
    /** Extra information that a deployment system might need. */
    payload?: boolean|number
    /** Identifies the Ref of the deployment, if the deployment was created by ref. */
    ref?: RefRequest
    /** Identifies the repository associated with the deployment. */
    repository?: RepositoryRequest
    /** The current state of the deployment. */
    state?: boolean|number
    /** A list of statuses associated with the deployment. */
    statuses?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},DeploymentStatusConnectionRequest]|DeploymentStatusConnectionRequest
    /** The deployment task. */
    task?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Describes the status of a given deployment attempt. */
export interface DeploymentStatusRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the actor who triggered the deployment. */
    creator?: ActorRequest
    /** Identifies the deployment associated with status. */
    deployment?: DeploymentRequest
    /** Identifies the description of the deployment. */
    description?: boolean|number
    /** Identifies the environment of the deployment at the time of this deployment status */
    environment?: boolean|number
    /** Identifies the environment URL of the deployment. */
    environmentUrl?: boolean|number
    id?: boolean|number
    /** Identifies the log URL of the deployment. */
    logUrl?: boolean|number
    /** Identifies the current state of the deployment. */
    state?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnectionRequest{
    /** A list of edges. */
    edges?: DeploymentStatusEdgeRequest
    /** A list of nodes. */
    nodes?: DeploymentStatusRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface DeploymentStatusEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: DeploymentStatusRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Specifies an author for filtering Git commits. */
export interface CommitAuthor{
/** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
emails?: (Scalars["String"][]|null),
/**
 * ID of a User to filter by. If non-null, only commits authored by this user
 * will be returned. This field takes precedence over emails.
 */
id?: (Scalars["ID"]|null)}


/** The connection type for Commit. */
export interface CommitHistoryConnectionRequest{
    /** A list of edges. */
    edges?: CommitEdgeRequest
    /** A list of nodes. */
    nodes?: CommitRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CommitEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CommitRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Commit. */
export interface CommitConnectionRequest{
    /** A list of edges. */
    edges?: CommitEdgeRequest
    /** A list of nodes. */
    nodes?: CommitRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignatureRequest{
    /** Email used to sign this object. */
    email?: boolean|number
    /** True if the signature is valid and verified by GitHub. */
    isValid?: boolean|number
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload?: boolean|number
    /** ASCII-armored signature header from object. */
    signature?: boolean|number
    /** GitHub user corresponding to the email signing this commit. */
    signer?: UserRequest
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state?: boolean|number
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub?: boolean|number
    on_GpgSignature?: GpgSignatureRequest
    on_SmimeSignature?: SmimeSignatureRequest
    on_UnknownSignature?: UnknownSignatureRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a commit status. */
export interface StatusRequest{
    /** The commit this status is attached to. */
    commit?: CommitRequest
    /** Looks up an individual status context by context name. */
    context?: [{
    /** The context name. */
    name: Scalars["String"]},StatusContextRequest]
    /** The individual status contexts for this commit. */
    contexts?: StatusContextRequest
    id?: boolean|number
    /** The combined commit status. */
    state?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an individual commit status context */
export interface StatusContextRequest{
    /** The avatar of the OAuth application or the user that created the status */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** This commit this status context is attached to. */
    commit?: CommitRequest
    /** The name of this status context. */
    context?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The actor who created this status context. */
    creator?: ActorRequest
    /** The description for this status context. */
    description?: boolean|number
    id?: boolean|number
    /** The state of this status context. */
    state?: boolean|number
    /** The URL for this status context. */
    targetUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollupRequest{
    /** The commit the status and check runs are attached to. */
    commit?: CommitRequest
    /** A list of status contexts and check runs for this commit. */
    contexts?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},StatusCheckRollupContextConnectionRequest]|StatusCheckRollupContextConnectionRequest
    id?: boolean|number
    /** The combined status for the commit. */
    state?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnectionRequest{
    /** A list of edges. */
    edges?: StatusCheckRollupContextEdgeRequest
    /** A list of nodes. */
    nodes?: StatusCheckRollupContextRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface StatusCheckRollupContextEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: StatusCheckRollupContextRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be inside a StatusCheckRollup context. */
export interface StatusCheckRollupContextRequest{on_CheckRun?:CheckRunRequest,on_StatusContext?:StatusContextRequest,__typename?:boolean|number}


/** The connection type for Submodule. */
export interface SubmoduleConnectionRequest{
    /** A list of edges. */
    edges?: SubmoduleEdgeRequest
    /** A list of nodes. */
    nodes?: SubmoduleRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SubmoduleEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SubmoduleRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface SubmoduleRequest{
    /** The branch of the upstream submodule for tracking updates */
    branch?: boolean|number
    /** The git URL of the submodule repository */
    gitUrl?: boolean|number
    /** The name of the submodule in .gitmodules */
    name?: boolean|number
    /** The path in the superproject that this submodule is located in */
    path?: boolean|number
    /** The commit revision of the subproject repository being tracked by the submodule */
    subprojectCommitOid?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git tree. */
export interface TreeRequest{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid?: boolean|number
    /** The HTTP path for this Git object */
    commitResourcePath?: boolean|number
    /** The HTTP URL for this Git object */
    commitUrl?: boolean|number
    /** A list of tree entries. */
    entries?: TreeEntryRequest
    id?: boolean|number
    /** The Git object ID */
    oid?: boolean|number
    /** The Repository the Git object belongs to */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git tree entry. */
export interface TreeEntryRequest{
    /** Entry file mode. */
    mode?: boolean|number
    /** Entry file name. */
    name?: boolean|number
    /** Entry file object. */
    object?: GitObjectRequest
    /** Entry file Git object ID. */
    oid?: boolean|number
    /** The Repository the tree entry belongs to */
    repository?: RepositoryRequest
    /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
    submodule?: SubmoduleRequest
    /** Entry file type. */
    type?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for DependencyGraphManifest. */
export interface DependencyGraphManifestConnectionRequest{
    /** A list of edges. */
    edges?: DependencyGraphManifestEdgeRequest
    /** A list of nodes. */
    nodes?: DependencyGraphManifestRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface DependencyGraphManifestEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: DependencyGraphManifestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Dependency manifest for a repository */
export interface DependencyGraphManifestRequest{
    /** Path to view the manifest file blob */
    blobPath?: boolean|number
    /** A list of manifest dependencies */
    dependencies?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},DependencyGraphDependencyConnectionRequest]|DependencyGraphDependencyConnectionRequest
    /** The number of dependencies listed in the manifest */
    dependenciesCount?: boolean|number
    /** Is the manifest too big to parse? */
    exceedsMaxSize?: boolean|number
    /** Fully qualified manifest filename */
    filename?: boolean|number
    id?: boolean|number
    /** Were we able to parse the manifest? */
    parseable?: boolean|number
    /** The repository containing the manifest */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for DependencyGraphDependency. */
export interface DependencyGraphDependencyConnectionRequest{
    /** A list of edges. */
    edges?: DependencyGraphDependencyEdgeRequest
    /** A list of nodes. */
    nodes?: DependencyGraphDependencyRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface DependencyGraphDependencyEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: DependencyGraphDependencyRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A dependency manifest entry */
export interface DependencyGraphDependencyRequest{
    /** Does the dependency itself have dependencies? */
    hasDependencies?: boolean|number
    /** The dependency package manager */
    packageManager?: boolean|number
    /** The required package name */
    packageName?: boolean|number
    /** The repository containing the package */
    repository?: RepositoryRequest
    /** The dependency version requirements */
    requirements?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for DeployKey. */
export interface DeployKeyConnectionRequest{
    /** A list of edges. */
    edges?: DeployKeyEdgeRequest
    /** A list of nodes. */
    nodes?: DeployKeyRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface DeployKeyEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: DeployKeyRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A repository deploy key. */
export interface DeployKeyRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** The deploy key. */
    key?: boolean|number
    /** Whether or not the deploy key is read only. */
    readOnly?: boolean|number
    /** The deploy key title. */
    title?: boolean|number
    /** Whether or not the deploy key has been verified. */
    verified?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A funding platform link for a repository. */
export interface FundingLinkRequest{
    /** The funding platform this link is for. */
    platform?: boolean|number
    /** The configured URL for this funding link. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Used for return value of Repository.issueOrPullRequest. */
export interface IssueOrPullRequestRequest{on_Issue?:IssueRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Ordering options for language connections. */
export interface LanguageOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order languages by. */
field: LanguageOrderField}


/** A list of languages associated with the parent. */
export interface LanguageConnectionRequest{
    /** A list of edges. */
    edges?: LanguageEdgeRequest
    /** A list of nodes. */
    nodes?: LanguageRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** The total size in bytes of files written in that language. */
    totalSize?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the language of a repository. */
export interface LanguageEdgeRequest{
    cursor?: boolean|number
    node?: LanguageRequest
    /** The number of bytes of code written in the language. */
    size?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a given language found in repositories. */
export interface LanguageRequest{
    /** The color defined for the current language. */
    color?: boolean|number
    id?: boolean|number
    /** The name of the current language. */
    name?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Milestone object on a given repository. */
export interface MilestoneRequest{
    /** `true` if the object is closed (definition of closed may depend on type) */
    closed?: boolean|number
    /** Identifies the date and time when the object was closed. */
    closedAt?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the actor who created the milestone. */
    creator?: ActorRequest
    /** Identifies the description of the milestone. */
    description?: boolean|number
    /** Identifies the due date of the milestone. */
    dueOn?: boolean|number
    id?: boolean|number
    /** Just for debugging on review-lab */
    issuePrioritiesDebug?: boolean|number
    /** A list of issues associated with the milestone. */
    issues?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Filtering options for issues returned from the connection. */
    filterBy?: (IssueFilters|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for issues returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the issues by. */
    states?: (IssueState[]|null)},IssueConnectionRequest]|IssueConnectionRequest
    /** Identifies the number of the milestone. */
    number?: boolean|number
    /** A list of pull requests associated with the milestone. */
    pullRequests?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** The base ref name to filter the pull requests by. */
    baseRefName?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** The head ref name to filter the pull requests by. */
    headRefName?: (Scalars["String"]|null),
    /** A list of label names to filter the pull requests by. */
    labels?: (Scalars["String"][]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pull requests returned from the connection. */
    orderBy?: (IssueOrder|null),
    /** A list of states to filter the pull requests by. */
    states?: (PullRequestState[]|null)},PullRequestConnectionRequest]|PullRequestConnectionRequest
    /** The repository associated with this milestone. */
    repository?: RepositoryRequest
    /** The HTTP path for this milestone */
    resourcePath?: boolean|number
    /** Identifies the state of the milestone. */
    state?: boolean|number
    /** Identifies the title of the milestone. */
    title?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this milestone */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for milestone connections. */
export interface MilestoneOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order milestones by. */
field: MilestoneOrderField}


/** The connection type for Milestone. */
export interface MilestoneConnectionRequest{
    /** A list of edges. */
    edges?: MilestoneEdgeRequest
    /** A list of nodes. */
    nodes?: MilestoneRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface MilestoneEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: MilestoneRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PinnedIssue. */
export interface PinnedIssueConnectionRequest{
    /** A list of edges. */
    edges?: PinnedIssueEdgeRequest
    /** A list of nodes. */
    nodes?: PinnedIssueRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PinnedIssueEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PinnedIssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssueRequest{
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The issue that was pinned. */
    issue?: IssueRequest
    /** The actor that pinned this issue. */
    pinnedBy?: ActorRequest
    /** The repository that this issue was pinned to. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of git refs can be ordered upon return. */
export interface RefOrder{
/** The direction in which to order refs by the specified field. */
direction: OrderDirection,
/** The field in which to order refs by. */
field: RefOrderField}


/** Ways in which lists of releases can be ordered upon return. */
export interface ReleaseOrder{
/** The direction in which to order releases by the specified field. */
direction: OrderDirection,
/** The field in which to order releases by. */
field: ReleaseOrderField}


/** The connection type for Release. */
export interface ReleaseConnectionRequest{
    /** A list of edges. */
    edges?: ReleaseEdgeRequest
    /** A list of nodes. */
    nodes?: ReleaseRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ReleaseEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ReleaseRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnectionRequest{
    /** A list of edges. */
    edges?: RepositoryTopicEdgeRequest
    /** A list of nodes. */
    nodes?: RepositoryTopicRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RepositoryTopicEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RepositoryTopicRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopicRequest{
    id?: boolean|number
    /** The HTTP path for this repository-topic. */
    resourcePath?: boolean|number
    /** The topic. */
    topic?: TopicRequest
    /** The HTTP URL for this repository-topic. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnectionRequest{
    /** A list of edges. */
    edges?: RepositoryVulnerabilityAlertEdgeRequest
    /** A list of nodes. */
    nodes?: RepositoryVulnerabilityAlertRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RepositoryVulnerabilityAlertRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A alert for a repository with an affected vulnerability. */
export interface RepositoryVulnerabilityAlertRequest{
    /** When was the alert created? */
    createdAt?: boolean|number
    /** The reason the alert was dismissed */
    dismissReason?: boolean|number
    /** When was the alert dimissed? */
    dismissedAt?: boolean|number
    /** The user who dismissed the alert */
    dismisser?: UserRequest
    id?: boolean|number
    /** The associated repository */
    repository?: RepositoryRequest
    /** The associated security advisory */
    securityAdvisory?: SecurityAdvisoryRequest
    /** The associated security vulnerablity */
    securityVulnerability?: SecurityVulnerabilityRequest
    /** The vulnerable manifest filename */
    vulnerableManifestFilename?: boolean|number
    /** The vulnerable manifest path */
    vulnerableManifestPath?: boolean|number
    /** The vulnerable requirements */
    vulnerableRequirements?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A GitHub Security Advisory */
export interface SecurityAdvisoryRequest{
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** This is a long plaintext description of the advisory */
    description?: boolean|number
    /** The GitHub Security Advisory ID */
    ghsaId?: boolean|number
    id?: boolean|number
    /** A list of identifiers for this advisory */
    identifiers?: SecurityAdvisoryIdentifierRequest
    /** The organization that originated the advisory */
    origin?: boolean|number
    /** The permalink for the advisory */
    permalink?: boolean|number
    /** When the advisory was published */
    publishedAt?: boolean|number
    /** A list of references for this advisory */
    references?: SecurityAdvisoryReferenceRequest
    /** The severity of the advisory */
    severity?: boolean|number
    /** A short plaintext summary of the advisory */
    summary?: boolean|number
    /** When the advisory was last updated */
    updatedAt?: boolean|number
    /** Vulnerabilities associated with this Advisory */
    vulnerabilities?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** An ecosystem to filter vulnerabilities by. */
    ecosystem?: (SecurityAdvisoryEcosystem|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for the returned topics. */
    orderBy?: (SecurityVulnerabilityOrder|null),
    /** A package name to filter vulnerabilities by. */
    package?: (Scalars["String"]|null),
    /** A list of severities to filter vulnerabilities by. */
    severities?: (SecurityAdvisorySeverity[]|null)},SecurityVulnerabilityConnectionRequest]|SecurityVulnerabilityConnectionRequest
    /** When the advisory was withdrawn, if it has been withdrawn */
    withdrawnAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifierRequest{
    /** The identifier type, e.g. GHSA, CVE */
    type?: boolean|number
    /** The identifier */
    value?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReferenceRequest{
    /** A publicly accessible reference */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for security vulnerability connections */
export interface SecurityVulnerabilityOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order security vulnerabilities by. */
field: SecurityVulnerabilityOrderField}


/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnectionRequest{
    /** A list of edges. */
    edges?: SecurityVulnerabilityEdgeRequest
    /** A list of nodes. */
    nodes?: SecurityVulnerabilityRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SecurityVulnerabilityEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SecurityVulnerabilityRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An individual vulnerability within an Advisory */
export interface SecurityVulnerabilityRequest{
    /** The Advisory associated with this Vulnerability */
    advisory?: SecurityAdvisoryRequest
    /** The first version containing a fix for the vulnerability */
    firstPatchedVersion?: SecurityAdvisoryPackageVersionRequest
    /** A description of the vulnerable package */
    package?: SecurityAdvisoryPackageRequest
    /** The severity of the vulnerability within this package */
    severity?: boolean|number
    /** When the vulnerability was last updated */
    updatedAt?: boolean|number
    /**
     * A string that describes the vulnerable package versions.
     * This string follows a basic syntax with a few forms.
     * + `= 0.2.0` denotes a single vulnerable version.
     * + `<= 1.0.8` denotes a version range up to and including the specified version
     * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
     * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
     * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
     */
    vulnerableVersionRange?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An individual package version */
export interface SecurityAdvisoryPackageVersionRequest{
    /** The package name or version */
    identifier?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An individual package */
export interface SecurityAdvisoryPackageRequest{
    /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
    ecosystem?: boolean|number
    /** The package name */
    name?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for IssueComment. */
export interface IssueCommentConnectionRequest{
    /** A list of edges. */
    edges?: IssueCommentEdgeRequest
    /** A list of nodes. */
    nodes?: IssueCommentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface IssueCommentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: IssueCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a comment on an Issue. */
export interface IssueCommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** The body as Markdown. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** Returns whether or not a comment has been minimized. */
    isMinimized?: boolean|number
    /** Identifies the issue associated with the comment. */
    issue?: IssueRequest
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Returns why the comment was minimized. */
    minimizedReason?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /**
     * Returns the pull request associated with the comment, if this comment was made on a
     * pull request.
     */
    pullRequest?: PullRequestRequest
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path for this issue comment */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this issue comment */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Detail needed to display a hovercard for a user */
export interface HovercardRequest{
    /** Each of the contexts for this hovercard */
    contexts?: HovercardContextRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An individual line of a hovercard */
export interface HovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    on_GenericHovercardContext?: GenericHovercardContextRequest
    on_OrganizationTeamsHovercardContext?: OrganizationTeamsHovercardContextRequest
    on_OrganizationsHovercardContext?: OrganizationsHovercardContextRequest
    on_ReviewStatusHovercardContext?: ReviewStatusHovercardContextRequest
    on_ViewerHovercardContext?: ViewerHovercardContextRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnectionRequest{
    /** A list of edges. */
    edges?: IssueTimelineItemEdgeRequest
    /** A list of nodes. */
    nodes?: IssueTimelineItemRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface IssueTimelineItemEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: IssueTimelineItemRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An item in an issue timeline */
export interface IssueTimelineItemRequest{on_AssignedEvent?:AssignedEventRequest,on_ClosedEvent?:ClosedEventRequest,on_Commit?:CommitRequest,on_CrossReferencedEvent?:CrossReferencedEventRequest,on_DemilestonedEvent?:DemilestonedEventRequest,on_IssueComment?:IssueCommentRequest,on_LabeledEvent?:LabeledEventRequest,on_LockedEvent?:LockedEventRequest,on_MilestonedEvent?:MilestonedEventRequest,on_ReferencedEvent?:ReferencedEventRequest,on_RenamedTitleEvent?:RenamedTitleEventRequest,on_ReopenedEvent?:ReopenedEventRequest,on_SubscribedEvent?:SubscribedEventRequest,on_TransferredEvent?:TransferredEventRequest,on_UnassignedEvent?:UnassignedEventRequest,on_UnlabeledEvent?:UnlabeledEventRequest,on_UnlockedEvent?:UnlockedEventRequest,on_UnsubscribedEvent?:UnsubscribedEventRequest,on_UserBlockedEvent?:UserBlockedEventRequest,__typename?:boolean|number}


/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the assignable associated with the event. */
    assignable?: AssignableRequest
    /** Identifies the user or mannequin that was assigned. */
    assignee?: AssigneeRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /**
     * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
     * Identifies the user who was assigned.
     */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be assigned to issues. */
export interface AssigneeRequest{on_Bot?:BotRequest,on_Mannequin?:MannequinRequest,on_Organization?:OrganizationRequest,on_User?:UserRequest,__typename?:boolean|number}


/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface BotRequest{
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The username of the actor. */
    login?: boolean|number
    /** The HTTP path for this bot */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this bot */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A placeholder user for attribution of imported data on GitHub. */
export interface MannequinRequest{
    /** A URL pointing to the GitHub App's public avatar. */
    avatarUrl?: [{
    /** The size of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The mannequin's email on the source instance. */
    email?: boolean|number
    id?: boolean|number
    /** The username of the actor. */
    login?: boolean|number
    /** The HTML path to this resource. */
    resourcePath?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The URL to this resource. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Object that was closed. */
    closable?: ClosableRequest
    /** Object which triggered the creation of this event. */
    closer?: CloserRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** The HTTP path for this closed event. */
    resourcePath?: boolean|number
    /** The HTTP URL for this closed event. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The object which triggered a `ClosedEvent`. */
export interface CloserRequest{on_Commit?:CommitRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Reference originated in a different repository. */
    isCrossRepository?: boolean|number
    /** Identifies when the reference was made. */
    referencedAt?: boolean|number
    /** The HTTP path for this pull request. */
    resourcePath?: boolean|number
    /** Issue or pull request that made the reference. */
    source?: ReferencedSubjectRequest
    /** Issue or pull request to which the reference was made. */
    target?: ReferencedSubjectRequest
    /** The HTTP URL for this pull request. */
    url?: boolean|number
    /** Checks if the target will be closed when the source is merged. */
    willCloseTarget?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Any referencable object */
export interface ReferencedSubjectRequest{on_Issue?:IssueRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the milestone title associated with the 'demilestoned' event. */
    milestoneTitle?: boolean|number
    /** Object referenced by event. */
    subject?: MilestoneItemRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be inside a Milestone. */
export interface MilestoneItemRequest{on_Issue?:IssueRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the label associated with the 'labeled' event. */
    label?: LabelRequest
    /** Identifies the `Labelable` associated with the event. */
    labelable?: LabelableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Reason that the conversation was locked (optional). */
    lockReason?: boolean|number
    /** Object that was locked. */
    lockable?: LockableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the milestone title associated with the 'milestoned' event. */
    milestoneTitle?: boolean|number
    /** Object referenced by event. */
    subject?: MilestoneItemRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the commit associated with the 'referenced' event. */
    commit?: CommitRequest
    /** Identifies the repository associated with the 'referenced' event. */
    commitRepository?: RepositoryRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Reference originated in a different repository. */
    isCrossRepository?: boolean|number
    /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
    isDirectReference?: boolean|number
    /** Object referenced by event. */
    subject?: ReferencedSubjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the current title of the issue or pull request. */
    currentTitle?: boolean|number
    id?: boolean|number
    /** Identifies the previous title of the issue or pull request. */
    previousTitle?: boolean|number
    /** Subject that was renamed. */
    subject?: RenamedTitleSubjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An object which has a renamable title */
export interface RenamedTitleSubjectRequest{on_Issue?:IssueRequest,on_PullRequest?:PullRequestRequest,__typename?:boolean|number}


/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Object that was reopened. */
    closable?: ClosableRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Object referenced by event. */
    subscribable?: SubscribableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The repository this came from */
    fromRepository?: RepositoryRequest
    id?: boolean|number
    /** Identifies the issue associated with the event. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the assignable associated with the event. */
    assignable?: AssignableRequest
    /** Identifies the user or mannequin that was unassigned. */
    assignee?: AssigneeRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /**
     * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
     * Identifies the subject (user) who was unassigned.
     */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the label associated with the 'unlabeled' event. */
    label?: LabelRequest
    /** Identifies the `Labelable` associated with the event. */
    labelable?: LabelableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Object that was unlocked. */
    lockable?: LockableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Object referenced by event. */
    subscribable?: SubscribableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Number of days that the user was blocked for. */
    blockDuration?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** The user who was blocked. */
    subject?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnectionRequest{
    /** A list of edges. */
    edges?: IssueTimelineItemsEdgeRequest
    /** Identifies the count of items after applying `before` and `after` filters. */
    filteredCount?: boolean|number
    /** A list of nodes. */
    nodes?: IssueTimelineItemsRequest
    /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
    pageCount?: boolean|number
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** Identifies the date and time when the timeline was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface IssueTimelineItemsEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: IssueTimelineItemsRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An item in an issue timeline */
export interface IssueTimelineItemsRequest{on_AddedToProjectEvent?:AddedToProjectEventRequest,on_AssignedEvent?:AssignedEventRequest,on_ClosedEvent?:ClosedEventRequest,on_CommentDeletedEvent?:CommentDeletedEventRequest,on_ConnectedEvent?:ConnectedEventRequest,on_ConvertedNoteToIssueEvent?:ConvertedNoteToIssueEventRequest,on_CrossReferencedEvent?:CrossReferencedEventRequest,on_DemilestonedEvent?:DemilestonedEventRequest,on_DisconnectedEvent?:DisconnectedEventRequest,on_IssueComment?:IssueCommentRequest,on_LabeledEvent?:LabeledEventRequest,on_LockedEvent?:LockedEventRequest,on_MarkedAsDuplicateEvent?:MarkedAsDuplicateEventRequest,on_MentionedEvent?:MentionedEventRequest,on_MilestonedEvent?:MilestonedEventRequest,on_MovedColumnsInProjectEvent?:MovedColumnsInProjectEventRequest,on_PinnedEvent?:PinnedEventRequest,on_ReferencedEvent?:ReferencedEventRequest,on_RemovedFromProjectEvent?:RemovedFromProjectEventRequest,on_RenamedTitleEvent?:RenamedTitleEventRequest,on_ReopenedEvent?:ReopenedEventRequest,on_SubscribedEvent?:SubscribedEventRequest,on_TransferredEvent?:TransferredEventRequest,on_UnassignedEvent?:UnassignedEventRequest,on_UnlabeledEvent?:UnlabeledEventRequest,on_UnlockedEvent?:UnlockedEventRequest,on_UnmarkedAsDuplicateEvent?:UnmarkedAsDuplicateEventRequest,on_UnpinnedEvent?:UnpinnedEventRequest,on_UnsubscribedEvent?:UnsubscribedEventRequest,on_UserBlockedEvent?:UserBlockedEventRequest,__typename?:boolean|number}


/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Project referenced by event. */
    project?: ProjectRequest
    /** Project card referenced by this project event. */
    projectCard?: ProjectCardRequest
    /** Column name referenced by this project event. */
    projectColumnName?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Reference originated in a different repository. */
    isCrossRepository?: boolean|number
    /** Issue or pull request that made the reference. */
    source?: ReferencedSubjectRequest
    /** Issue or pull request which was connected. */
    subject?: ReferencedSubjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Project referenced by event. */
    project?: ProjectRequest
    /** Project card referenced by this project event. */
    projectCard?: ProjectCardRequest
    /** Column name referenced by this project event. */
    projectColumnName?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Reference originated in a different repository. */
    isCrossRepository?: boolean|number
    /** Issue or pull request from which the issue was disconnected. */
    source?: ReferencedSubjectRequest
    /** Issue or pull request which was disconnected. */
    subject?: ReferencedSubjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Column name the issue or pull request was moved from. */
    previousProjectColumnName?: boolean|number
    /** Project referenced by event. */
    project?: ProjectRequest
    /** Project card referenced by this project event. */
    projectCard?: ProjectCardRequest
    /** Column name the issue or pull request was moved to. */
    projectColumnName?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the issue associated with the event. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Project referenced by event. */
    project?: ProjectRequest
    /** Column name referenced by this project event. */
    projectColumnName?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the issue associated with the event. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestCommitEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestCommitRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestCommitEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestCommitRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git commit part of a pull request. */
export interface PullRequestCommitRequest{
    /** The Git commit object */
    commit?: CommitRequest
    id?: boolean|number
    /** The pull request this commit belongs to */
    pullRequest?: PullRequestRequest
    /** The HTTP path for this pull request commit */
    resourcePath?: boolean|number
    /** The HTTP URL for this pull request commit */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestChangedFileEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestChangedFileRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestChangedFileEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestChangedFileRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A file changed in a pull request. */
export interface PullRequestChangedFileRequest{
    /** The number of additions to the file. */
    additions?: boolean|number
    /** The number of deletions to the file. */
    deletions?: boolean|number
    /** The path of the file. */
    path?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ReviewRequest. */
export interface ReviewRequestConnectionRequest{
    /** A list of edges. */
    edges?: ReviewRequestEdgeRequest
    /** A list of nodes. */
    nodes?: ReviewRequestRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ReviewRequestEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ReviewRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A request for a user to review a pull request. */
export interface ReviewRequestRequest{
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** Identifies the pull request associated with this review request. */
    pullRequest?: PullRequestRequest
    /** The reviewer that is requested. */
    requestedReviewer?: RequestedReviewerRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be requested reviewers. */
export interface RequestedReviewerRequest{on_Mannequin?:MannequinRequest,on_Team?:TeamRequest,on_User?:UserRequest,__typename?:boolean|number}


/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestReviewThreadEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestReviewThreadRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestReviewThreadEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestReviewThreadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThreadRequest{
    /** A list of pull request comments associated with the thread. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Skips the first _n_ elements in the list. */
    skip?: (Scalars["Int"]|null)},PullRequestReviewCommentConnectionRequest]|PullRequestReviewCommentConnectionRequest
    /** The side of the diff on which this thread was placed. */
    diffSide?: boolean|number
    id?: boolean|number
    /** Whether this thread has been resolved */
    isResolved?: boolean|number
    /** The line in the file to which this thread refers */
    line?: boolean|number
    /** The original line in the file to which this thread refers. */
    originalLine?: boolean|number
    /** The original start line in the file to which this thread refers (multi-line only). */
    originalStartLine?: boolean|number
    /** Identifies the pull request associated with this thread. */
    pullRequest?: PullRequestRequest
    /** Identifies the repository associated with this thread. */
    repository?: RepositoryRequest
    /** The user who resolved this thread */
    resolvedBy?: UserRequest
    /** The side of the diff that the first line of the thread starts on (multi-line only) */
    startDiffSide?: boolean|number
    /** The start line in the file to which this thread refers (multi-line only) */
    startLine?: boolean|number
    /** Whether or not the viewer can resolve this thread */
    viewerCanResolve?: boolean|number
    /** Whether or not the viewer can unresolve this thread */
    viewerCanUnresolve?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestReviewCommentEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestReviewCommentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestReviewCommentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestReviewCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewCommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** The comment body of this review comment. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The comment body of this review comment rendered as plain text. */
    bodyText?: boolean|number
    /** Identifies the commit associated with the comment. */
    commit?: CommitRequest
    /** Identifies when the comment was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The diff hunk to which the comment applies. */
    diffHunk?: boolean|number
    /** Identifies when the comment was created in a draft state. */
    draftedAt?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** Returns whether or not a comment has been minimized. */
    isMinimized?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Returns why the comment was minimized. */
    minimizedReason?: boolean|number
    /** Identifies the original commit associated with the comment. */
    originalCommit?: CommitRequest
    /** The original line index in the diff to which the comment applies. */
    originalPosition?: boolean|number
    /** Identifies when the comment body is outdated */
    outdated?: boolean|number
    /** The path to which the comment applies. */
    path?: boolean|number
    /** The line index in the diff to which the comment applies. */
    position?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** The pull request associated with this review comment. */
    pullRequest?: PullRequestRequest
    /** The pull request review associated with this review comment. */
    pullRequestReview?: PullRequestReviewRequest
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The comment this is a reply to. */
    replyTo?: PullRequestReviewCommentRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path permalink for this review comment. */
    resourcePath?: boolean|number
    /** Identifies the state of the comment. */
    state?: boolean|number
    /** Identifies when the comment was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL permalink for this review comment. */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A review object for a given pull request. */
export interface PullRequestReviewRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the subject of the comment. */
    authorAssociation?: boolean|number
    /** Identifies the pull request review body. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body of this review rendered as plain text. */
    bodyText?: boolean|number
    /** A list of review comments for the current pull request review. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PullRequestReviewCommentConnectionRequest]|PullRequestReviewCommentConnectionRequest
    /** Identifies the commit associated with this pull request review. */
    commit?: CommitRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** A list of teams that this review was made on behalf of. */
    onBehalfOf?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},TeamConnectionRequest]|TeamConnectionRequest
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** Identifies the pull request associated with this pull request review. */
    pullRequest?: PullRequestRequest
    /** A list of reactions grouped by content left on the subject. */
    reactionGroups?: ReactionGroupRequest
    /** A list of Reactions left on the Issue. */
    reactions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Allows filtering Reactions by emoji. */
    content?: (ReactionContent|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Allows specifying the order in which reactions are returned. */
    orderBy?: (ReactionOrder|null)},ReactionConnectionRequest]|ReactionConnectionRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    /** The HTTP path permalink for this PullRequestReview. */
    resourcePath?: boolean|number
    /** Identifies the current state of the pull request review. */
    state?: boolean|number
    /** Identifies when the Pull Request Review was submitted */
    submittedAt?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL permalink for this PullRequestReview. */
    url?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Can user react to this subject */
    viewerCanReact?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestReviewEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestReviewRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestReviewEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewerRequest{
    /** Is this suggestion based on past commits? */
    isAuthor?: boolean|number
    /** Is this suggestion based on past review comments? */
    isCommenter?: boolean|number
    /** Identifies the user suggested to review the pull request. */
    reviewer?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestTimelineItemEdgeRequest
    /** A list of nodes. */
    nodes?: PullRequestTimelineItemRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestTimelineItemEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestTimelineItemRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An item in an pull request timeline */
export interface PullRequestTimelineItemRequest{on_AssignedEvent?:AssignedEventRequest,on_BaseRefForcePushedEvent?:BaseRefForcePushedEventRequest,on_ClosedEvent?:ClosedEventRequest,on_Commit?:CommitRequest,on_CommitCommentThread?:CommitCommentThreadRequest,on_CrossReferencedEvent?:CrossReferencedEventRequest,on_DemilestonedEvent?:DemilestonedEventRequest,on_DeployedEvent?:DeployedEventRequest,on_DeploymentEnvironmentChangedEvent?:DeploymentEnvironmentChangedEventRequest,on_HeadRefDeletedEvent?:HeadRefDeletedEventRequest,on_HeadRefForcePushedEvent?:HeadRefForcePushedEventRequest,on_HeadRefRestoredEvent?:HeadRefRestoredEventRequest,on_IssueComment?:IssueCommentRequest,on_LabeledEvent?:LabeledEventRequest,on_LockedEvent?:LockedEventRequest,on_MergedEvent?:MergedEventRequest,on_MilestonedEvent?:MilestonedEventRequest,on_PullRequestReview?:PullRequestReviewRequest,on_PullRequestReviewComment?:PullRequestReviewCommentRequest,on_PullRequestReviewThread?:PullRequestReviewThreadRequest,on_ReferencedEvent?:ReferencedEventRequest,on_RenamedTitleEvent?:RenamedTitleEventRequest,on_ReopenedEvent?:ReopenedEventRequest,on_ReviewDismissedEvent?:ReviewDismissedEventRequest,on_ReviewRequestRemovedEvent?:ReviewRequestRemovedEventRequest,on_ReviewRequestedEvent?:ReviewRequestedEventRequest,on_SubscribedEvent?:SubscribedEventRequest,on_UnassignedEvent?:UnassignedEventRequest,on_UnlabeledEvent?:UnlabeledEventRequest,on_UnlockedEvent?:UnlockedEventRequest,on_UnsubscribedEvent?:UnsubscribedEventRequest,on_UserBlockedEvent?:UserBlockedEventRequest,__typename?:boolean|number}


/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
    afterCommit?: CommitRequest
    /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
    beforeCommit?: CommitRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A thread of comments on a commit. */
export interface CommitCommentThreadRequest{
    /** The comments that exist in this thread. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitCommentConnectionRequest]|CommitCommentConnectionRequest
    /** The commit the comments were made on. */
    commit?: CommitRequest
    id?: boolean|number
    /** The file the comments were made on. */
    path?: boolean|number
    /** The position in the diff for the commit that the comment was made on. */
    position?: boolean|number
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The deployment associated with the 'deployed' event. */
    deployment?: DeploymentRequest
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** The ref associated with the 'deployed' event. */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The deployment status that updated the deployment environment. */
    deploymentStatus?: DeploymentStatusRequest
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the Ref associated with the `head_ref_deleted` event. */
    headRef?: RefRequest
    /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
    headRefName?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
    afterCommit?: CommitRequest
    /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
    beforeCommit?: CommitRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'merged' event on a given pull request. */
export interface MergedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the commit associated with the `merge` event. */
    commit?: CommitRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Identifies the Ref associated with the `merge` event. */
    mergeRef?: RefRequest
    /** Identifies the name of the Ref associated with the `merge` event. */
    mergeRefName?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** The HTTP path for this merged event. */
    resourcePath?: boolean|number
    /** The HTTP URL for this merged event. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** Identifies the optional message associated with the 'review_dismissed' event. */
    dismissalMessage?: boolean|number
    /** Identifies the optional message associated with the event, rendered to HTML. */
    dismissalMessageHTML?: boolean|number
    id?: boolean|number
    /** Identifies the previous state of the review with the 'review_dismissed' event. */
    previousReviewState?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** Identifies the commit which caused the review to become stale. */
    pullRequestCommit?: PullRequestCommitRequest
    /** The HTTP path for this review dismissed event. */
    resourcePath?: boolean|number
    /** Identifies the review associated with the 'review_dismissed' event. */
    review?: PullRequestReviewRequest
    /** The HTTP URL for this review dismissed event. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** Identifies the reviewer whose review request was removed. */
    requestedReviewer?: RequestedReviewerRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** Identifies the reviewer whose review was requested. */
    requestedReviewer?: RequestedReviewerRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnectionRequest{
    /** A list of edges. */
    edges?: PullRequestTimelineItemsEdgeRequest
    /** Identifies the count of items after applying `before` and `after` filters. */
    filteredCount?: boolean|number
    /** A list of nodes. */
    nodes?: PullRequestTimelineItemsRequest
    /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
    pageCount?: boolean|number
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** Identifies the date and time when the timeline was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PullRequestTimelineItemsEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PullRequestTimelineItemsRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An item in a pull request timeline */
export interface PullRequestTimelineItemsRequest{on_AddedToProjectEvent?:AddedToProjectEventRequest,on_AssignedEvent?:AssignedEventRequest,on_AutomaticBaseChangeFailedEvent?:AutomaticBaseChangeFailedEventRequest,on_AutomaticBaseChangeSucceededEvent?:AutomaticBaseChangeSucceededEventRequest,on_BaseRefChangedEvent?:BaseRefChangedEventRequest,on_BaseRefForcePushedEvent?:BaseRefForcePushedEventRequest,on_ClosedEvent?:ClosedEventRequest,on_CommentDeletedEvent?:CommentDeletedEventRequest,on_ConnectedEvent?:ConnectedEventRequest,on_ConvertToDraftEvent?:ConvertToDraftEventRequest,on_ConvertedNoteToIssueEvent?:ConvertedNoteToIssueEventRequest,on_CrossReferencedEvent?:CrossReferencedEventRequest,on_DemilestonedEvent?:DemilestonedEventRequest,on_DeployedEvent?:DeployedEventRequest,on_DeploymentEnvironmentChangedEvent?:DeploymentEnvironmentChangedEventRequest,on_DisconnectedEvent?:DisconnectedEventRequest,on_HeadRefDeletedEvent?:HeadRefDeletedEventRequest,on_HeadRefForcePushedEvent?:HeadRefForcePushedEventRequest,on_HeadRefRestoredEvent?:HeadRefRestoredEventRequest,on_IssueComment?:IssueCommentRequest,on_LabeledEvent?:LabeledEventRequest,on_LockedEvent?:LockedEventRequest,on_MarkedAsDuplicateEvent?:MarkedAsDuplicateEventRequest,on_MentionedEvent?:MentionedEventRequest,on_MergedEvent?:MergedEventRequest,on_MilestonedEvent?:MilestonedEventRequest,on_MovedColumnsInProjectEvent?:MovedColumnsInProjectEventRequest,on_PinnedEvent?:PinnedEventRequest,on_PullRequestCommit?:PullRequestCommitRequest,on_PullRequestCommitCommentThread?:PullRequestCommitCommentThreadRequest,on_PullRequestReview?:PullRequestReviewRequest,on_PullRequestReviewThread?:PullRequestReviewThreadRequest,on_PullRequestRevisionMarker?:PullRequestRevisionMarkerRequest,on_ReadyForReviewEvent?:ReadyForReviewEventRequest,on_ReferencedEvent?:ReferencedEventRequest,on_RemovedFromProjectEvent?:RemovedFromProjectEventRequest,on_RenamedTitleEvent?:RenamedTitleEventRequest,on_ReopenedEvent?:ReopenedEventRequest,on_ReviewDismissedEvent?:ReviewDismissedEventRequest,on_ReviewRequestRemovedEvent?:ReviewRequestRemovedEventRequest,on_ReviewRequestedEvent?:ReviewRequestedEventRequest,on_SubscribedEvent?:SubscribedEventRequest,on_TransferredEvent?:TransferredEventRequest,on_UnassignedEvent?:UnassignedEventRequest,on_UnlabeledEvent?:UnlabeledEventRequest,on_UnlockedEvent?:UnlockedEventRequest,on_UnmarkedAsDuplicateEvent?:UnmarkedAsDuplicateEventRequest,on_UnpinnedEvent?:UnpinnedEventRequest,on_UnsubscribedEvent?:UnsubscribedEventRequest,on_UserBlockedEvent?:UserBlockedEventRequest,__typename?:boolean|number}


/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** The new base for this PR */
    newBase?: boolean|number
    /** The old base for this PR */
    oldBase?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** The new base for this PR */
    newBase?: boolean|number
    /** The old base for this PR */
    oldBase?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** The HTTP path for this convert to draft event. */
    resourcePath?: boolean|number
    /** The HTTP URL for this convert to draft event. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThreadRequest{
    /** The comments that exist in this thread. */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},CommitCommentConnectionRequest]|CommitCommentConnectionRequest
    /** The commit the comments were made on. */
    commit?: CommitRequest
    id?: boolean|number
    /** The file the comments were made on. */
    path?: boolean|number
    /** The position in the diff for the commit that the comment was made on. */
    position?: boolean|number
    /** The pull request this commit comment thread belongs to */
    pullRequest?: PullRequestRequest
    /** The repository associated with this node. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarkerRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The last commit the viewer has seen. */
    lastSeenCommit?: CommitRequest
    /** The pull request to which the marker belongs. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEventRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** PullRequest referenced by event. */
    pullRequest?: PullRequestRequest
    /** The HTTP path for this ready for review event. */
    resourcePath?: boolean|number
    /** The HTTP URL for this ready for review event. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatisticsRequest{
    /** Number of times the package was downloaded since it was created. */
    downloadsTotalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatisticsRequest{
    /** Number of times the package was downloaded since it was created. */
    downloadsTotalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ways in which lists of package versions can be ordered upon return. */
export interface PackageVersionOrder{
/** The direction in which to order package versions by the specified field. */
direction?: (OrderDirection|null),
/** The field in which to order package versions by. */
field?: (PackageVersionOrderField|null)}


/** The connection type for PackageVersion. */
export interface PackageVersionConnectionRequest{
    /** A list of edges. */
    edges?: PackageVersionEdgeRequest
    /** A list of nodes. */
    nodes?: PackageVersionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PackageVersionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PackageVersionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwnerRequest{
    /** Determine if this repository owner has any items that can be pinned to their profile. */
    anyPinnableItems?: [{
    /** Filter to only a particular kind of pinnable item. */
    type?: (PinnableItemType|null)}]|boolean|number
    /** The public profile email. */
    email?: boolean|number
    id?: boolean|number
    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    itemShowcase?: ProfileItemShowcaseRequest
    /** The public profile location. */
    location?: boolean|number
    /** The username used to login. */
    login?: boolean|number
    /** The public profile name. */
    name?: boolean|number
    /** A list of repositories and gists this profile owner can pin to their profile. */
    pinnableItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinnable items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** A list of repositories and gists this profile owner has pinned to their profile */
    pinnedItems?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Filter the types of pinned items that are returned. */
    types?: (PinnableItemType[]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    /** Returns how many more items this profile owner can pin to their profile. */
    pinnedItemsRemaining?: boolean|number
    /** Can the viewer pin repositories and gists to the profile? */
    viewerCanChangePinnedItems?: boolean|number
    /** The public profile website URL. */
    websiteUrl?: boolean|number
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/**
 * A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own.
 */
export interface ProfileItemShowcaseRequest{
    /** Whether or not the owner has pinned any repositories or gists. */
    hasPinnedItems?: boolean|number
    /**
     * The repositories and gists in the showcase. If the profile owner has any
     * pinned items, those will be returned. Otherwise, the profile owner's popular
     * repositories will be returned.
     */
    items?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},PinnableItemConnectionRequest]|PinnableItemConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PinnableItem. */
export interface PinnableItemConnectionRequest{
    /** A list of edges. */
    edges?: PinnableItemEdgeRequest
    /** A list of nodes. */
    nodes?: PinnableItemRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PinnableItemEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PinnableItemRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can be pinned to a profile page. */
export interface PinnableItemRequest{on_Gist?:GistRequest,on_Repository?:RepositoryRequest,__typename?:boolean|number}


/** A Gist. */
export interface GistRequest{
    /** A list of comments associated with the gist */
    comments?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},GistCommentConnectionRequest]|GistCommentConnectionRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The gist description. */
    description?: boolean|number
    /** The files in this gist. */
    files?: [{
    /** The maximum number of files to return. */
    limit?: (Scalars["Int"]|null),
    /** The oid of the files to return */
    oid?: (Scalars["GitObjectID"]|null)},GistFileRequest]|GistFileRequest
    /** A list of forks associated with the gist */
    forks?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for gists returned from the connection */
    orderBy?: (GistOrder|null)},GistConnectionRequest]|GistConnectionRequest
    id?: boolean|number
    /** Identifies if the gist is a fork. */
    isFork?: boolean|number
    /** Whether the gist is public or not. */
    isPublic?: boolean|number
    /** The gist name. */
    name?: boolean|number
    /** The gist owner. */
    owner?: RepositoryOwnerRequest
    /** Identifies when the gist was last pushed to. */
    pushedAt?: boolean|number
    /** The HTML path to this resource. */
    resourcePath?: boolean|number
    /** A list of users who have starred this starrable. */
    stargazers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Order for connection */
    orderBy?: (StarOrder|null)},StargazerConnectionRequest]|StargazerConnectionRequest
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The HTTP URL for this Gist. */
    url?: boolean|number
    /** Returns a boolean indicating whether the viewing user has starred this starrable. */
    viewerHasStarred?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for GistComment. */
export interface GistCommentConnectionRequest{
    /** A list of edges. */
    edges?: GistCommentEdgeRequest
    /** A list of nodes. */
    nodes?: GistCommentRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface GistCommentEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: GistCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a comment on an Gist. */
export interface GistCommentRequest{
    /** The actor who authored the comment. */
    author?: ActorRequest
    /** Author's association with the gist. */
    authorAssociation?: boolean|number
    /** Identifies the comment body. */
    body?: boolean|number
    /** The body rendered to HTML. */
    bodyHTML?: boolean|number
    /** The body rendered to text. */
    bodyText?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** Check if this comment was created via an email reply. */
    createdViaEmail?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    /** The actor who edited the comment. */
    editor?: ActorRequest
    /** The associated gist. */
    gist?: GistRequest
    id?: boolean|number
    /** Check if this comment was edited and includes an edit with the creation data */
    includesCreatedEdit?: boolean|number
    /** Returns whether or not a comment has been minimized. */
    isMinimized?: boolean|number
    /** The moment the editor made the last edit */
    lastEditedAt?: boolean|number
    /** Returns why the comment was minimized. */
    minimizedReason?: boolean|number
    /** Identifies when the comment was published at. */
    publishedAt?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** A list of edits to this content. */
    userContentEdits?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserContentEditConnectionRequest]|UserContentEditConnectionRequest
    /** Check if the current viewer can delete this object. */
    viewerCanDelete?: boolean|number
    /** Check if the current viewer can minimize this object. */
    viewerCanMinimize?: boolean|number
    /** Check if the current viewer can update this object. */
    viewerCanUpdate?: boolean|number
    /** Reasons why the current viewer can not update this comment. */
    viewerCannotUpdateReasons?: boolean|number
    /** Did the viewer author this comment. */
    viewerDidAuthor?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A file in a gist. */
export interface GistFileRequest{
    /** The file name encoded to remove characters that are invalid in URL paths. */
    encodedName?: boolean|number
    /** The gist file encoding. */
    encoding?: boolean|number
    /** The file extension from the file name. */
    extension?: boolean|number
    /** Indicates if this file is an image. */
    isImage?: boolean|number
    /** Whether the file's contents were truncated. */
    isTruncated?: boolean|number
    /** The programming language this file is written in. */
    language?: LanguageRequest
    /** The gist file name. */
    name?: boolean|number
    /** The gist file size in bytes. */
    size?: boolean|number
    /** UTF8 text data or null if the file is binary */
    text?: [{
    /** Optionally truncate the returned file to this length. */
    truncate?: (Scalars["Int"]|null)}]|boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for gist connections */
export interface GistOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order repositories by. */
field: GistOrderField}


/** The connection type for Gist. */
export interface GistConnectionRequest{
    /** A list of edges. */
    edges?: GistEdgeRequest
    /** A list of nodes. */
    nodes?: GistRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface GistEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: GistRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entities that can be sponsored through GitHub Sponsors */
export interface SponsorableRequest{
    /** The GitHub Sponsors listing for this user. */
    sponsorsListing?: SponsorsListingRequest
    /** This object's sponsorships as the maintainer. */
    sponsorshipsAsMaintainer?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Whether or not to include private sponsorships in the result set */
    includePrivate?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    /** This object's sponsorships as the sponsor. */
    sponsorshipsAsSponsor?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    on_Organization?: OrganizationRequest
    on_User?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A GitHub Sponsors listing. */
export interface SponsorsListingRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The full description of the listing. */
    fullDescription?: boolean|number
    /** The full description of the listing rendered to HTML. */
    fullDescriptionHTML?: boolean|number
    id?: boolean|number
    /** The listing's full name. */
    name?: boolean|number
    /** The short description of the listing. */
    shortDescription?: boolean|number
    /** The short name of the listing. */
    slug?: boolean|number
    /** The published tiers for this GitHub Sponsors listing. */
    tiers?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for Sponsors tiers returned from the connection. */
    orderBy?: (SponsorsTierOrder|null)},SponsorsTierConnectionRequest]|SponsorsTierConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Sponsors tiers connections. */
export interface SponsorsTierOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order tiers by. */
field: SponsorsTierOrderField}


/** The connection type for SponsorsTier. */
export interface SponsorsTierConnectionRequest{
    /** A list of edges. */
    edges?: SponsorsTierEdgeRequest
    /** A list of nodes. */
    nodes?: SponsorsTierRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SponsorsTierEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SponsorsTierRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTierRequest{
    /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
    adminInfo?: SponsorsTierAdminInfoRequest
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The description of the tier. */
    description?: boolean|number
    /** The tier description rendered to HTML */
    descriptionHTML?: boolean|number
    id?: boolean|number
    /** How much this tier costs per month in cents. */
    monthlyPriceInCents?: boolean|number
    /** How much this tier costs per month in dollars. */
    monthlyPriceInDollars?: boolean|number
    /** The name of the tier. */
    name?: boolean|number
    /** The sponsors listing that this tier belongs to. */
    sponsorsListing?: SponsorsListingRequest
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfoRequest{
    /** The sponsorships associated with this tier. */
    sponsorships?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Whether or not to include private sponsorships in the result set */
    includePrivate?: (Scalars["Boolean"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /**
     * Ordering options for sponsorships returned from this connection. If left
     * blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: (SponsorshipOrder|null)},SponsorshipConnectionRequest]|SponsorshipConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for sponsorship connections. */
export interface SponsorshipOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order sponsorship by. */
field: SponsorshipOrderField}


/** The connection type for Sponsorship. */
export interface SponsorshipConnectionRequest{
    /** A list of edges. */
    edges?: SponsorshipEdgeRequest
    /** A list of nodes. */
    nodes?: SponsorshipRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SponsorshipEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SponsorshipRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A sponsorship relationship between a sponsor and a maintainer */
export interface SponsorshipRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /**
     * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
     * The entity that is being sponsored
     */
    maintainer?: UserRequest
    /** The privacy level for this sponsorship. */
    privacyLevel?: boolean|number
    /**
     * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
     * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
     */
    sponsor?: UserRequest
    /** The user or organization that is sponsoring. Returns null if the sponsorship is private. */
    sponsorEntity?: SponsorRequest
    /** The entity that is being sponsored */
    sponsorable?: SponsorableRequest
    /** The associated sponsorship tier */
    tier?: SponsorsTierRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Entites that can sponsor others via GitHub Sponsors */
export interface SponsorRequest{on_Organization?:OrganizationRequest,on_User?:UserRequest,__typename?:boolean|number}


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollectionRequest{
    /** Commit contributions made by the user, grouped by repository. */
    commitContributionsByRepository?: [{
    /** How many repositories should be included. */
    maxRepositories?: (Scalars["Int"]|null)},CommitContributionsByRepositoryRequest]|CommitContributionsByRepositoryRequest
    /** A calendar of this user's contributions on GitHub. */
    contributionCalendar?: ContributionCalendarRequest
    /** The years the user has been making contributions with the most recent year first. */
    contributionYears?: boolean|number
    /** Determine if this collection's time span ends in the current month. */
    doesEndInCurrentMonth?: boolean|number
    /**
     * The date of the first restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    earliestRestrictedContributionDate?: boolean|number
    /** The ending date and time of this collection. */
    endedAt?: boolean|number
    /**
     * The first issue the user opened on GitHub. This will be null if that issue was
     * opened outside the collection's time range and ignoreTimeRange is false. If
     * the issue is not visible but the user has opted to show private contributions,
     * a RestrictedContribution will be returned.
     */
    firstIssueContribution?: CreatedIssueOrRestrictedContributionRequest
    /**
     * The first pull request the user opened on GitHub. This will be null if that
     * pull request was opened outside the collection's time range and
     * ignoreTimeRange is not true. If the pull request is not visible but the user
     * has opted to show private contributions, a RestrictedContribution will be returned.
     */
    firstPullRequestContribution?: CreatedPullRequestOrRestrictedContributionRequest
    /**
     * The first repository the user created on GitHub. This will be null if that
     * first repository was created outside the collection's time range and
     * ignoreTimeRange is false. If the repository is not visible, then a
     * RestrictedContribution is returned.
     */
    firstRepositoryContribution?: CreatedRepositoryOrRestrictedContributionRequest
    /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
    hasActivityInThePast?: boolean|number
    /** Determine if there are any contributions in this collection. */
    hasAnyContributions?: boolean|number
    /**
     * Determine if the user made any contributions in this time frame whose details
     * are not visible because they were made in a private repository. Can only be
     * true if the user enabled private contribution counts.
     */
    hasAnyRestrictedContributions?: boolean|number
    /** Whether or not the collector's time span is all within the same day. */
    isSingleDay?: boolean|number
    /** A list of issues the user opened. */
    issueContributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Should the user's first issue ever be excluded from the result. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented issue be excluded from the result. */
    excludePopular?: (Scalars["Boolean"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedIssueContributionConnectionRequest]|CreatedIssueContributionConnectionRequest
    /** Issue contributions made by the user, grouped by repository. */
    issueContributionsByRepository?: [{
    /** Should the user's first issue ever be excluded from the result. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented issue be excluded from the result. */
    excludePopular?: (Scalars["Boolean"]|null),
    /** How many repositories should be included. */
    maxRepositories?: (Scalars["Int"]|null)},IssueContributionsByRepositoryRequest]|IssueContributionsByRepositoryRequest
    /**
     * When the user signed up for GitHub. This will be null if that sign up date
     * falls outside the collection's time range and ignoreTimeRange is false.
     */
    joinedGitHubContribution?: JoinedGitHubContributionRequest
    /**
     * The date of the most recent restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    latestRestrictedContributionDate?: boolean|number
    /**
     * When this collection's time range does not include any activity from the user, use this
     * to get a different collection from an earlier time range that does have activity.
     */
    mostRecentCollectionWithActivity?: ContributionsCollectionRequest
    /**
     * Returns a different contributions collection from an earlier time range than this one
     * that does not have any contributions.
     */
    mostRecentCollectionWithoutActivity?: ContributionsCollectionRequest
    /**
     * The issue the user opened on GitHub that received the most comments in the specified
     * time frame.
     */
    popularIssueContribution?: CreatedIssueContributionRequest
    /**
     * The pull request the user opened on GitHub that received the most comments in the
     * specified time frame.
     */
    popularPullRequestContribution?: CreatedPullRequestContributionRequest
    /** Pull request contributions made by the user. */
    pullRequestContributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Should the user's first pull request ever be excluded from the result. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented pull request be excluded from the result. */
    excludePopular?: (Scalars["Boolean"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedPullRequestContributionConnectionRequest]|CreatedPullRequestContributionConnectionRequest
    /** Pull request contributions made by the user, grouped by repository. */
    pullRequestContributionsByRepository?: [{
    /** Should the user's first pull request ever be excluded from the result. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented pull request be excluded from the result. */
    excludePopular?: (Scalars["Boolean"]|null),
    /** How many repositories should be included. */
    maxRepositories?: (Scalars["Int"]|null)},PullRequestContributionsByRepositoryRequest]|PullRequestContributionsByRepositoryRequest
    /** Pull request review contributions made by the user. */
    pullRequestReviewContributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedPullRequestReviewContributionConnectionRequest]|CreatedPullRequestReviewContributionConnectionRequest
    /** Pull request review contributions made by the user, grouped by repository. */
    pullRequestReviewContributionsByRepository?: [{
    /** How many repositories should be included. */
    maxRepositories?: (Scalars["Int"]|null)},PullRequestReviewContributionsByRepositoryRequest]|PullRequestReviewContributionsByRepositoryRequest
    /** A list of repositories owned by the user that the user created in this time range. */
    repositoryContributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Should the user's first repository ever be excluded from the result. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedRepositoryContributionConnectionRequest]|CreatedRepositoryContributionConnectionRequest
    /**
     * A count of contributions made by the user that the viewer cannot access. Only
     * non-zero when the user has chosen to share their private contribution counts.
     */
    restrictedContributionsCount?: boolean|number
    /** The beginning date and time of this collection. */
    startedAt?: boolean|number
    /** How many commits were made by the user in this time span. */
    totalCommitContributions?: boolean|number
    /** How many issues the user opened. */
    totalIssueContributions?: [{
    /** Should the user's first issue ever be excluded from this count. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented issue be excluded from this count. */
    excludePopular?: (Scalars["Boolean"]|null)}]|boolean|number
    /** How many pull requests the user opened. */
    totalPullRequestContributions?: [{
    /** Should the user's first pull request ever be excluded from this count. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented pull request be excluded from this count. */
    excludePopular?: (Scalars["Boolean"]|null)}]|boolean|number
    /** How many pull request reviews the user left. */
    totalPullRequestReviewContributions?: boolean|number
    /** How many different repositories the user committed to. */
    totalRepositoriesWithContributedCommits?: boolean|number
    /** How many different repositories the user opened issues in. */
    totalRepositoriesWithContributedIssues?: [{
    /** Should the user's first issue ever be excluded from this count. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented issue be excluded from this count. */
    excludePopular?: (Scalars["Boolean"]|null)}]|boolean|number
    /** How many different repositories the user left pull request reviews in. */
    totalRepositoriesWithContributedPullRequestReviews?: boolean|number
    /** How many different repositories the user opened pull requests in. */
    totalRepositoriesWithContributedPullRequests?: [{
    /** Should the user's first pull request ever be excluded from this count. */
    excludeFirst?: (Scalars["Boolean"]|null),
    /** Should the user's most commented pull request be excluded from this count. */
    excludePopular?: (Scalars["Boolean"]|null)}]|boolean|number
    /** How many repositories the user created. */
    totalRepositoryContributions?: [{
    /** Should the user's first repository ever be excluded from this count. */
    excludeFirst?: (Scalars["Boolean"]|null)}]|boolean|number
    /** The user who made the contributions in this collection. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepositoryRequest{
    /** The commit contributions, each representing a day. */
    contributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for commit contributions returned from the connection. */
    orderBy?: (CommitContributionOrder|null)},CreatedCommitContributionConnectionRequest]|CreatedCommitContributionConnectionRequest
    /** The repository in which the commits were made. */
    repository?: RepositoryRequest
    /** The HTTP path for the user's commits to the repository in this time range. */
    resourcePath?: boolean|number
    /** The HTTP URL for the user's commits to the repository in this time range. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for commit contribution connections. */
export interface CommitContributionOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field by which to order commit contributions. */
field: CommitContributionOrderField}


/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnectionRequest{
    /** A list of edges. */
    edges?: CreatedCommitContributionEdgeRequest
    /** A list of nodes. */
    nodes?: CreatedCommitContributionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of commits across days and repositories in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CreatedCommitContributionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CreatedCommitContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContributionRequest{
    /** How many commits were made on this day to this repository by the user. */
    commitCount?: boolean|number
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The repository the user made a commit in. */
    repository?: RepositoryRequest
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface ContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    on_CreatedCommitContribution?: CreatedCommitContributionRequest
    on_CreatedIssueContribution?: CreatedIssueContributionRequest
    on_RestrictedContribution?: RestrictedContributionRequest
    on_CreatedPullRequestContribution?: CreatedPullRequestContributionRequest
    on_CreatedRepositoryContribution?: CreatedRepositoryContributionRequest
    on_JoinedGitHubContribution?: JoinedGitHubContributionRequest
    on_CreatedPullRequestReviewContribution?: CreatedPullRequestReviewContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendarRequest{
    /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
    colors?: boolean|number
    /** Determine if the color set was chosen because it's currently Halloween. */
    isHalloween?: boolean|number
    /** A list of the months of contributions in this calendar. */
    months?: ContributionCalendarMonthRequest
    /** The count of total contributions in the calendar. */
    totalContributions?: boolean|number
    /** A list of the weeks of contributions in this calendar. */
    weeks?: ContributionCalendarWeekRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonthRequest{
    /** The date of the first day of this month. */
    firstDay?: boolean|number
    /** The name of the month. */
    name?: boolean|number
    /** How many weeks started in this month. */
    totalWeeks?: boolean|number
    /** The year the month occurred in. */
    year?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeekRequest{
    /** The days of contributions in this week. */
    contributionDays?: ContributionCalendarDayRequest
    /** The date of the earliest square in this week. */
    firstDay?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDayRequest{
    /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
    color?: boolean|number
    /** How many contributions were made by the user on this day. */
    contributionCount?: boolean|number
    /** The day this square represents. */
    date?: boolean|number
    /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
    weekday?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents either a issue the viewer can access or a restricted contribution. */
export interface CreatedIssueOrRestrictedContributionRequest{on_CreatedIssueContribution?:CreatedIssueContributionRequest,on_RestrictedContribution?:RestrictedContributionRequest,__typename?:boolean|number}


/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** The issue that was opened. */
    issue?: IssueRequest
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents either a pull request the viewer can access or a restricted contribution. */
export interface CreatedPullRequestOrRestrictedContributionRequest{on_CreatedPullRequestContribution?:CreatedPullRequestContributionRequest,on_RestrictedContribution?:RestrictedContributionRequest,__typename?:boolean|number}


/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The pull request that was opened. */
    pullRequest?: PullRequestRequest
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents either a repository the viewer can access or a restricted contribution. */
export interface CreatedRepositoryOrRestrictedContributionRequest{on_CreatedRepositoryContribution?:CreatedRepositoryContributionRequest,on_RestrictedContribution?:RestrictedContributionRequest,__typename?:boolean|number}


/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The repository that was created. */
    repository?: RepositoryRequest
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for contribution connections. */
export interface ContributionOrder{
/** The ordering direction. */
direction: OrderDirection}


/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnectionRequest{
    /** A list of edges. */
    edges?: CreatedIssueContributionEdgeRequest
    /** A list of nodes. */
    nodes?: CreatedIssueContributionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CreatedIssueContributionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CreatedIssueContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepositoryRequest{
    /** The issue contributions. */
    contributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedIssueContributionConnectionRequest]|CreatedIssueContributionConnectionRequest
    /** The repository in which the issues were opened. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnectionRequest{
    /** A list of edges. */
    edges?: CreatedPullRequestContributionEdgeRequest
    /** A list of nodes. */
    nodes?: CreatedPullRequestContributionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CreatedPullRequestContributionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CreatedPullRequestContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepositoryRequest{
    /** The pull request contributions. */
    contributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedPullRequestContributionConnectionRequest]|CreatedPullRequestContributionConnectionRequest
    /** The repository in which the pull requests were opened. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnectionRequest{
    /** A list of edges. */
    edges?: CreatedPullRequestReviewContributionEdgeRequest
    /** A list of nodes. */
    nodes?: CreatedPullRequestReviewContributionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CreatedPullRequestReviewContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContributionRequest{
    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    isRestricted?: boolean|number
    /** When this contribution was made. */
    occurredAt?: boolean|number
    /** The pull request the user reviewed. */
    pullRequest?: PullRequestRequest
    /** The review the user left on the pull request. */
    pullRequestReview?: PullRequestReviewRequest
    /** The repository containing the pull request that the user reviewed. */
    repository?: RepositoryRequest
    /** The HTTP path for this contribution. */
    resourcePath?: boolean|number
    /** The HTTP URL for this contribution. */
    url?: boolean|number
    /** The user who made this contribution. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepositoryRequest{
    /** The pull request review contributions. */
    contributions?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for contributions returned from the connection. */
    orderBy?: (ContributionOrder|null)},CreatedPullRequestReviewContributionConnectionRequest]|CreatedPullRequestReviewContributionConnectionRequest
    /** The repository in which the pull request reviews were made. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnectionRequest{
    /** A list of edges. */
    edges?: CreatedRepositoryContributionEdgeRequest
    /** A list of nodes. */
    nodes?: CreatedRepositoryContributionRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface CreatedRepositoryContributionEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: CreatedRepositoryContributionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface FollowerConnectionRequest{
    /** A list of edges. */
    edges?: UserEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface FollowingConnectionRequest{
    /** A list of edges. */
    edges?: UserEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Organization. */
export interface OrganizationConnectionRequest{
    /** A list of edges. */
    edges?: OrganizationEdgeRequest
    /** A list of nodes. */
    nodes?: OrganizationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface OrganizationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: OrganizationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for PublicKey. */
export interface PublicKeyConnectionRequest{
    /** A list of edges. */
    edges?: PublicKeyEdgeRequest
    /** A list of nodes. */
    nodes?: PublicKeyRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface PublicKeyEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: PublicKeyRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A user's public key. */
export interface PublicKeyRequest{
    /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
    accessedAt?: boolean|number
    /**
     * Identifies the date and time when the key was created. Keys created before
     * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
     */
    createdAt?: boolean|number
    /** The fingerprint for this PublicKey. */
    fingerprint?: boolean|number
    id?: boolean|number
    /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
    isReadOnly?: boolean|number
    /** The public key string. */
    key?: boolean|number
    /**
     * Identifies the date and time when the key was updated. Keys created before
     * March 5th, 2014 may have inaccurate values. Values will be null for keys not
     * owned by the user.
     */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for saved reply connections. */
export interface SavedReplyOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order saved replies by. */
field: SavedReplyOrderField}


/** The connection type for SavedReply. */
export interface SavedReplyConnectionRequest{
    /** A list of edges. */
    edges?: SavedReplyEdgeRequest
    /** A list of nodes. */
    nodes?: SavedReplyRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SavedReplyEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SavedReplyRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReplyRequest{
    /** The body of the saved reply. */
    body?: boolean|number
    /** The saved reply body rendered to HTML. */
    bodyHTML?: boolean|number
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The title of the saved reply. */
    title?: boolean|number
    /** The user that saved this reply. */
    user?: ActorRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for Repository. */
export interface StarredRepositoryConnectionRequest{
    /** A list of edges. */
    edges?: StarredRepositoryEdgeRequest
    /** Is the list of stars for this user truncated? This is true for users that have many stars. */
    isOverLimit?: boolean|number
    /** A list of nodes. */
    nodes?: RepositoryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a starred repository. */
export interface StarredRepositoryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    node?: RepositoryRequest
    /** Identifies when the item was starred. */
    starredAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Audit Log connections. */
export interface AuditLogOrder{
/** The ordering direction. */
direction?: (OrderDirection|null),
/** The field to order Audit Logs by. */
field?: (AuditLogOrderField|null)}


/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnectionRequest{
    /** A list of edges. */
    edges?: OrganizationAuditEntryEdgeRequest
    /** A list of nodes. */
    nodes?: OrganizationAuditEntryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface OrganizationAuditEntryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: OrganizationAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An audit entry in an organization audit log. */
export interface OrganizationAuditEntryRequest{on_MembersCanDeleteReposClearAuditEntry?:MembersCanDeleteReposClearAuditEntryRequest,on_MembersCanDeleteReposDisableAuditEntry?:MembersCanDeleteReposDisableAuditEntryRequest,on_MembersCanDeleteReposEnableAuditEntry?:MembersCanDeleteReposEnableAuditEntryRequest,on_OauthApplicationCreateAuditEntry?:OauthApplicationCreateAuditEntryRequest,on_OrgAddBillingManagerAuditEntry?:OrgAddBillingManagerAuditEntryRequest,on_OrgAddMemberAuditEntry?:OrgAddMemberAuditEntryRequest,on_OrgBlockUserAuditEntry?:OrgBlockUserAuditEntryRequest,on_OrgConfigDisableCollaboratorsOnlyAuditEntry?:OrgConfigDisableCollaboratorsOnlyAuditEntryRequest,on_OrgConfigEnableCollaboratorsOnlyAuditEntry?:OrgConfigEnableCollaboratorsOnlyAuditEntryRequest,on_OrgCreateAuditEntry?:OrgCreateAuditEntryRequest,on_OrgDisableOauthAppRestrictionsAuditEntry?:OrgDisableOauthAppRestrictionsAuditEntryRequest,on_OrgDisableSamlAuditEntry?:OrgDisableSamlAuditEntryRequest,on_OrgDisableTwoFactorRequirementAuditEntry?:OrgDisableTwoFactorRequirementAuditEntryRequest,on_OrgEnableOauthAppRestrictionsAuditEntry?:OrgEnableOauthAppRestrictionsAuditEntryRequest,on_OrgEnableSamlAuditEntry?:OrgEnableSamlAuditEntryRequest,on_OrgEnableTwoFactorRequirementAuditEntry?:OrgEnableTwoFactorRequirementAuditEntryRequest,on_OrgInviteMemberAuditEntry?:OrgInviteMemberAuditEntryRequest,on_OrgInviteToBusinessAuditEntry?:OrgInviteToBusinessAuditEntryRequest,on_OrgOauthAppAccessApprovedAuditEntry?:OrgOauthAppAccessApprovedAuditEntryRequest,on_OrgOauthAppAccessDeniedAuditEntry?:OrgOauthAppAccessDeniedAuditEntryRequest,on_OrgOauthAppAccessRequestedAuditEntry?:OrgOauthAppAccessRequestedAuditEntryRequest,on_OrgRemoveBillingManagerAuditEntry?:OrgRemoveBillingManagerAuditEntryRequest,on_OrgRemoveMemberAuditEntry?:OrgRemoveMemberAuditEntryRequest,on_OrgRemoveOutsideCollaboratorAuditEntry?:OrgRemoveOutsideCollaboratorAuditEntryRequest,on_OrgRestoreMemberAuditEntry?:OrgRestoreMemberAuditEntryRequest,on_OrgUnblockUserAuditEntry?:OrgUnblockUserAuditEntryRequest,on_OrgUpdateDefaultRepositoryPermissionAuditEntry?:OrgUpdateDefaultRepositoryPermissionAuditEntryRequest,on_OrgUpdateMemberAuditEntry?:OrgUpdateMemberAuditEntryRequest,on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?:OrgUpdateMemberRepositoryCreationPermissionAuditEntryRequest,on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?:OrgUpdateMemberRepositoryInvitationPermissionAuditEntryRequest,on_PrivateRepositoryForkingDisableAuditEntry?:PrivateRepositoryForkingDisableAuditEntryRequest,on_PrivateRepositoryForkingEnableAuditEntry?:PrivateRepositoryForkingEnableAuditEntryRequest,on_RepoAccessAuditEntry?:RepoAccessAuditEntryRequest,on_RepoAddMemberAuditEntry?:RepoAddMemberAuditEntryRequest,on_RepoAddTopicAuditEntry?:RepoAddTopicAuditEntryRequest,on_RepoArchivedAuditEntry?:RepoArchivedAuditEntryRequest,on_RepoChangeMergeSettingAuditEntry?:RepoChangeMergeSettingAuditEntryRequest,on_RepoConfigDisableAnonymousGitAccessAuditEntry?:RepoConfigDisableAnonymousGitAccessAuditEntryRequest,on_RepoConfigDisableCollaboratorsOnlyAuditEntry?:RepoConfigDisableCollaboratorsOnlyAuditEntryRequest,on_RepoConfigDisableContributorsOnlyAuditEntry?:RepoConfigDisableContributorsOnlyAuditEntryRequest,on_RepoConfigDisableSockpuppetDisallowedAuditEntry?:RepoConfigDisableSockpuppetDisallowedAuditEntryRequest,on_RepoConfigEnableAnonymousGitAccessAuditEntry?:RepoConfigEnableAnonymousGitAccessAuditEntryRequest,on_RepoConfigEnableCollaboratorsOnlyAuditEntry?:RepoConfigEnableCollaboratorsOnlyAuditEntryRequest,on_RepoConfigEnableContributorsOnlyAuditEntry?:RepoConfigEnableContributorsOnlyAuditEntryRequest,on_RepoConfigEnableSockpuppetDisallowedAuditEntry?:RepoConfigEnableSockpuppetDisallowedAuditEntryRequest,on_RepoConfigLockAnonymousGitAccessAuditEntry?:RepoConfigLockAnonymousGitAccessAuditEntryRequest,on_RepoConfigUnlockAnonymousGitAccessAuditEntry?:RepoConfigUnlockAnonymousGitAccessAuditEntryRequest,on_RepoCreateAuditEntry?:RepoCreateAuditEntryRequest,on_RepoDestroyAuditEntry?:RepoDestroyAuditEntryRequest,on_RepoRemoveMemberAuditEntry?:RepoRemoveMemberAuditEntryRequest,on_RepoRemoveTopicAuditEntry?:RepoRemoveTopicAuditEntryRequest,on_RepositoryVisibilityChangeDisableAuditEntry?:RepositoryVisibilityChangeDisableAuditEntryRequest,on_RepositoryVisibilityChangeEnableAuditEntry?:RepositoryVisibilityChangeEnableAuditEntryRequest,on_TeamAddMemberAuditEntry?:TeamAddMemberAuditEntryRequest,on_TeamAddRepositoryAuditEntry?:TeamAddRepositoryAuditEntryRequest,on_TeamChangeParentTeamAuditEntry?:TeamChangeParentTeamAuditEntryRequest,on_TeamRemoveMemberAuditEntry?:TeamRemoveMemberAuditEntryRequest,on_TeamRemoveRepositoryAuditEntry?:TeamRemoveRepositoryAuditEntryRequest,__typename?:boolean|number}


/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An entry in the audit log. */
export interface AuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryRequest
    on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryRequest
    on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryRequest
    on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryRequest
    on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryRequest
    on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryRequest
    on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryRequest
    on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_OrgCreateAuditEntry?: OrgCreateAuditEntryRequest
    on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryRequest
    on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryRequest
    on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryRequest
    on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryRequest
    on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryRequest
    on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryRequest
    on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryRequest
    on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryRequest
    on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryRequest
    on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryRequest
    on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryRequest
    on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryRequest
    on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryRequest
    on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryRequest
    on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryRequest
    on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryRequest
    on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryRequest
    on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryRequest
    on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryRequest
    on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryRequest
    on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryRequest
    on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryRequest
    on_RepoAccessAuditEntry?: RepoAccessAuditEntryRequest
    on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryRequest
    on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryRequest
    on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryRequest
    on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryRequest
    on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryRequest
    on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryRequest
    on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryRequest
    on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryRequest
    on_RepoCreateAuditEntry?: RepoCreateAuditEntryRequest
    on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryRequest
    on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryRequest
    on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryRequest
    on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryRequest
    on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryRequest
    on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryRequest
    on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryRequest
    on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryRequest
    on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryRequest
    on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can initiate an audit log event. */
export interface AuditEntryActorRequest{on_Bot?:BotRequest,on_Organization?:OrganizationRequest,on_User?:UserRequest,__typename?:boolean|number}


/** Location information for an actor */
export interface ActorLocationRequest{
    /** City */
    city?: boolean|number
    /** Country name */
    country?: boolean|number
    /** Country code */
    countryCode?: boolean|number
    /** Region name */
    region?: boolean|number
    /** Region or state code */
    regionCode?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryDataRequest{
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryRequest
    on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryRequest
    on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryRequest
    on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryRequest
    on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryRequest
    on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryRequest
    on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryRequest
    on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryDataRequest{
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    on_MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntryRequest
    on_MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntryRequest
    on_MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntryRequest
    on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryRequest
    on_OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntryRequest
    on_OrgAddMemberAuditEntry?: OrgAddMemberAuditEntryRequest
    on_OrgBlockUserAuditEntry?: OrgBlockUserAuditEntryRequest
    on_OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_OrgCreateAuditEntry?: OrgCreateAuditEntryRequest
    on_OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntryRequest
    on_OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntryRequest
    on_OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntryRequest
    on_OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntryRequest
    on_OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntryRequest
    on_OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntryRequest
    on_OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntryRequest
    on_OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntryRequest
    on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryRequest
    on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryRequest
    on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryRequest
    on_OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntryRequest
    on_OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntryRequest
    on_OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntryRequest
    on_OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntryRequest
    on_OrgRestoreMemberMembershipOrganizationAuditEntryData?: OrgRestoreMemberMembershipOrganizationAuditEntryDataRequest
    on_OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntryRequest
    on_OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntryRequest
    on_OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntryRequest
    on_OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntryRequest
    on_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntryRequest
    on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryRequest
    on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryRequest
    on_RepoAccessAuditEntry?: RepoAccessAuditEntryRequest
    on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryRequest
    on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryRequest
    on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryRequest
    on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryRequest
    on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryRequest
    on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryRequest
    on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryRequest
    on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryRequest
    on_RepoCreateAuditEntry?: RepoCreateAuditEntryRequest
    on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryRequest
    on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryRequest
    on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryRequest
    on_RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntryRequest
    on_RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntryRequest
    on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryRequest
    on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryRequest
    on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryRequest
    on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryRequest
    on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The application URL of the OAuth Application. */
    applicationUrl?: boolean|number
    /** The callback URL of the OAuth Application. */
    callbackUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The name of the OAuth Application. */
    oauthApplicationName?: boolean|number
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: boolean|number
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The rate limit of the OAuth Application. */
    rateLimit?: boolean|number
    /** The state of the OAuth Application. */
    state?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryDataRequest{
    /** The name of the OAuth Application. */
    oauthApplicationName?: boolean|number
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: boolean|number
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: boolean|number
    on_OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntryRequest
    on_OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntryRequest
    on_OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntryRequest
    on_OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The email address used to invite a billing manager for the organization. */
    invitationEmail?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The permission level of the member added to the organization. */
    permission?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The blocked user. */
    blockedUser?: UserRequest
    /** The username of the blocked user. */
    blockedUserName?: boolean|number
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath?: boolean|number
    /** The HTTP URL for the blocked user. */
    blockedUserUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The billing plan for the Organization. */
    billingPlan?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl?: boolean|number
    id?: boolean|number
    /** The SAML provider's issuer URL. */
    issuerUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl?: boolean|number
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The SAML provider's digest algorithm URL. */
    digestMethodUrl?: boolean|number
    id?: boolean|number
    /** The SAML provider's issuer URL. */
    issuerUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The SAML provider's signature algorithm URL. */
    signatureMethodUrl?: boolean|number
    /** The SAML provider's single sign-on URL. */
    singleSignOnUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The email address of the organization invitation. */
    email?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The organization invitation. */
    organizationInvitation?: OrganizationInvitationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The name of the OAuth Application. */
    oauthApplicationName?: boolean|number
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: boolean|number
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The name of the OAuth Application. */
    oauthApplicationName?: boolean|number
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: boolean|number
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The name of the OAuth Application. */
    oauthApplicationName?: boolean|number
    /** The HTTP path for the OAuth Application */
    oauthApplicationResourcePath?: boolean|number
    /** The HTTP URL for the OAuth Application */
    oauthApplicationUrl?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The reason for the billing manager being removed. */
    reason?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The types of membership the member has with the organization. */
    membershipTypes?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The reason for the member being removed. */
    reason?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The types of membership the outside collaborator has with the organization. */
    membershipTypes?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The reason for the outside collaborator being removed from the Organization. */
    reason?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The number of custom email routings for the restored member. */
    restoredCustomEmailRoutingsCount?: boolean|number
    /** The number of issue assignemnts for the restored member. */
    restoredIssueAssignmentsCount?: boolean|number
    /** Restored organization membership objects. */
    restoredMemberships?: OrgRestoreMemberAuditEntryMembershipRequest
    /** The number of restored memberships. */
    restoredMembershipsCount?: boolean|number
    /** The number of repositories of the restored member. */
    restoredRepositoriesCount?: boolean|number
    /** The number of starred repositories for the restored member. */
    restoredRepositoryStarsCount?: boolean|number
    /** The number of watched repositories for the restored member. */
    restoredRepositoryWatchesCount?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types of memberships that can be restored for an Organization member. */
export interface OrgRestoreMemberAuditEntryMembershipRequest{on_OrgRestoreMemberMembershipOrganizationAuditEntryData?:OrgRestoreMemberMembershipOrganizationAuditEntryDataRequest,on_OrgRestoreMemberMembershipRepositoryAuditEntryData?:OrgRestoreMemberMembershipRepositoryAuditEntryDataRequest,on_OrgRestoreMemberMembershipTeamAuditEntryData?:OrgRestoreMemberMembershipTeamAuditEntryDataRequest,__typename?:boolean|number}


/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataRequest{
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataRequest{
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryDataRequest{
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    on_OrgRestoreMemberMembershipRepositoryAuditEntryData?: OrgRestoreMemberMembershipRepositoryAuditEntryDataRequest
    on_PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntryRequest
    on_PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntryRequest
    on_RepoAccessAuditEntry?: RepoAccessAuditEntryRequest
    on_RepoAddMemberAuditEntry?: RepoAddMemberAuditEntryRequest
    on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryRequest
    on_RepoArchivedAuditEntry?: RepoArchivedAuditEntryRequest
    on_RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntryRequest
    on_RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntryRequest
    on_RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntryRequest
    on_RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntryRequest
    on_RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntryRequest
    on_RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntryRequest
    on_RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntryRequest
    on_RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntryRequest
    on_RepoCreateAuditEntry?: RepoCreateAuditEntryRequest
    on_RepoDestroyAuditEntry?: RepoDestroyAuditEntryRequest
    on_RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntryRequest
    on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryRequest
    on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryRequest
    on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryDataRequest{
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryDataRequest{
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    on_OrgRestoreMemberMembershipTeamAuditEntryData?: OrgRestoreMemberMembershipTeamAuditEntryDataRequest
    on_TeamAddMemberAuditEntry?: TeamAddMemberAuditEntryRequest
    on_TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntryRequest
    on_TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntryRequest
    on_TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntryRequest
    on_TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The user being unblocked by the organization. */
    blockedUser?: UserRequest
    /** The username of the blocked user. */
    blockedUserName?: boolean|number
    /** The HTTP path for the blocked user. */
    blockedUserResourcePath?: boolean|number
    /** The HTTP URL for the blocked user. */
    blockedUserUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The new default repository permission level for the organization. */
    permission?: boolean|number
    /** The former default repository permission level for the organization. */
    permissionWas?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The new member permission level for the organization. */
    permission?: boolean|number
    /** The former member permission level for the organization. */
    permissionWas?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** Can members create repositories in the organization. */
    canCreateRepositories?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The permission for visibility level of repositories for this organization. */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** Can outside collaborators be invited to repositories in the organization. */
    canInviteOutsideCollaboratorsToRepositories?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The name of the topic added to the repository */
    topic?: TopicRequest
    /** The name of the topic added to the repository */
    topicName?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryDataRequest{
    /** The name of the topic added to the repository */
    topic?: TopicRequest
    /** The name of the topic added to the repository */
    topicName?: boolean|number
    on_RepoAddTopicAuditEntry?: RepoAddTopicAuditEntryRequest
    on_RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the change was to enable (true) or disable (false) the merge type */
    isEnabled?: boolean|number
    /** The merge method affected by the change */
    mergeType?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The name of the parent repository for this forked repository. */
    forkParentName?: boolean|number
    /** The name of the root repository for this netork. */
    forkSourceName?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    /** The visibility of the repository */
    visibility?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The name of the topic added to the repository */
    topic?: TopicRequest
    /** The name of the topic added to the repository */
    topicName?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    /** The HTTP path for this enterprise. */
    enterpriseResourcePath?: boolean|number
    /** The slug of the enterprise. */
    enterpriseSlug?: boolean|number
    /** The HTTP URL for this enterprise. */
    enterpriseUrl?: boolean|number
    id?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The new parent team. */
    parentTeam?: TeamRequest
    /** The name of the new parent team */
    parentTeamName?: boolean|number
    /** The name of the former parent team */
    parentTeamNameWas?: boolean|number
    /** The HTTP path for the parent team */
    parentTeamResourcePath?: boolean|number
    /** The HTTP URL for the parent team */
    parentTeamUrl?: boolean|number
    /** The former parent team. */
    parentTeamWas?: TeamRequest
    /** The HTTP path for the previous parent team */
    parentTeamWasResourcePath?: boolean|number
    /** The HTTP URL for the previous parent team */
    parentTeamWasUrl?: boolean|number
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntryRequest{
    /** The action name */
    action?: boolean|number
    /** The user who initiated the action */
    actor?: AuditEntryActorRequest
    /** The IP address of the actor */
    actorIp?: boolean|number
    /** A readable representation of the actor's location */
    actorLocation?: ActorLocationRequest
    /** The username of the user who initiated the action */
    actorLogin?: boolean|number
    /** The HTTP path for the actor. */
    actorResourcePath?: boolean|number
    /** The HTTP URL for the actor. */
    actorUrl?: boolean|number
    /** The time the action was initiated */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the team was mapped to an LDAP Group. */
    isLdapMapped?: boolean|number
    /** The corresponding operation type for the action */
    operationType?: boolean|number
    /** The Organization associated with the Audit Entry. */
    organization?: OrganizationRequest
    /** The name of the Organization. */
    organizationName?: boolean|number
    /** The HTTP path for the organization */
    organizationResourcePath?: boolean|number
    /** The HTTP URL for the organization */
    organizationUrl?: boolean|number
    /** The repository associated with the action */
    repository?: RepositoryRequest
    /** The name of the repository */
    repositoryName?: boolean|number
    /** The HTTP path for the repository */
    repositoryResourcePath?: boolean|number
    /** The HTTP URL for the repository */
    repositoryUrl?: boolean|number
    /** The team associated with the action */
    team?: TeamRequest
    /** The name of the team */
    teamName?: boolean|number
    /** The HTTP path for this team */
    teamResourcePath?: boolean|number
    /** The HTTP URL for this team */
    teamUrl?: boolean|number
    /** The user affected by the action */
    user?: UserRequest
    /** For actions involving two users, the actor is the initiator and the user is the affected user. */
    userLogin?: boolean|number
    /** The HTTP path for the user. */
    userResourcePath?: boolean|number
    /** The HTTP URL for the user. */
    userUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for IP allow list entry connections. */
export interface IpAllowListEntryOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order IP allow list entries by. */
field: IpAllowListEntryOrderField}


/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnectionRequest{
    /** A list of edges. */
    edges?: IpAllowListEntryEdgeRequest
    /** A list of nodes. */
    nodes?: IpAllowListEntryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface IpAllowListEntryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: IpAllowListEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntryRequest{
    /** A single IP address or range of IP addresses in CIDR notation. */
    allowListValue?: boolean|number
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    id?: boolean|number
    /** Whether the entry is currently active. */
    isActive?: boolean|number
    /** The name of the IP allow list entry. */
    name?: boolean|number
    /** The owner of the IP allow list entry. */
    owner?: IpAllowListOwnerRequest
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Types that can own an IP allow list. */
export interface IpAllowListOwnerRequest{on_Enterprise?:EnterpriseRequest,on_Organization?:OrganizationRequest,__typename?:boolean|number}


/** The connection type for User. */
export interface OrganizationMemberConnectionRequest{
    /** A list of edges. */
    edges?: OrganizationMemberEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a user within an organization. */
export interface OrganizationMemberEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
    hasTwoFactorEnabled?: boolean|number
    /** The item at the end of the edge. */
    node?: UserRequest
    /** The role this user has in the organization. */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export interface OrganizationIdentityProviderRequest{
    /** The digest algorithm used to sign SAML requests for the Identity Provider. */
    digestMethod?: boolean|number
    /** External Identities provisioned by this Identity Provider */
    externalIdentities?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ExternalIdentityConnectionRequest]|ExternalIdentityConnectionRequest
    id?: boolean|number
    /** The x509 certificate used by the Identity Provder to sign assertions and responses. */
    idpCertificate?: boolean|number
    /** The Issuer Entity ID for the SAML Identity Provider */
    issuer?: boolean|number
    /** Organization this Identity Provider belongs to */
    organization?: OrganizationRequest
    /** The signature algorithm used to sign SAML requests for the Identity Provider. */
    signatureMethod?: boolean|number
    /** The URL endpoint for the Identity Provider's SAML SSO. */
    ssoUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnectionRequest{
    /** A list of edges. */
    edges?: ExternalIdentityEdgeRequest
    /** A list of nodes. */
    nodes?: ExternalIdentityRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface ExternalIdentityEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: ExternalIdentityRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An external identity provisioned by SAML SSO or SCIM. */
export interface ExternalIdentityRequest{
    /** The GUID for this identity */
    guid?: boolean|number
    id?: boolean|number
    /** Organization invitation for this SCIM-provisioned external identity */
    organizationInvitation?: OrganizationInvitationRequest
    /** SAML Identity attributes */
    samlIdentity?: ExternalIdentitySamlAttributesRequest
    /** SCIM Identity attributes */
    scimIdentity?: ExternalIdentityScimAttributesRequest
    /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributesRequest{
    /** The NameID of the SAML identity */
    nameId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributesRequest{
    /** The userName of the SCIM identity */
    username?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Enterprise information only visible to enterprise owners. */
export interface EnterpriseOwnerInfoRequest{
    /** A list of enterprise organizations configured with the provided action execution capabilities setting value. */
    actionExecutionCapabilitySettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null)},OrganizationConnectionRequest]|OrganizationConnectionRequest
    /** A list of all of the administrators for this enterprise. */
    admins?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for administrators returned from the connection. */
    orderBy?: (EnterpriseMemberOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** The role to filter by. */
    role?: (EnterpriseAdministratorRole|null)},EnterpriseAdministratorConnectionRequest]|EnterpriseAdministratorConnectionRequest
    /** A list of users in the enterprise who currently have two-factor authentication disabled. */
    affiliatedUsersWithTwoFactorDisabled?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},UserConnectionRequest]|UserConnectionRequest
    /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
    affiliatedUsersWithTwoFactorDisabledExist?: boolean|number
    /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
    allowPrivateRepositoryForkingSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided private repository forking setting value. */
    allowPrivateRepositoryForkingSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for base repository permissions for organizations in this enterprise. */
    defaultRepositoryPermissionSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided default repository permission. */
    defaultRepositoryPermissionSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The permission to find organizations for. */
    value: DefaultRepositoryPermissionField},OrganizationConnectionRequest]
    /** Enterprise Server installations owned by the enterprise. */
    enterpriseServerInstallations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Whether or not to only return installations discovered via GitHub Connect. */
    connectedOnly?: (Scalars["Boolean"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for Enterprise Server installations returned. */
    orderBy?: (EnterpriseServerInstallationOrder|null)},EnterpriseServerInstallationConnectionRequest]|EnterpriseServerInstallationConnectionRequest
    /** The setting value for whether the enterprise has an IP allow list enabled. */
    ipAllowListEnabledSetting?: boolean|number
    /** The IP addresses that are allowed to access resources owned by the enterprise. */
    ipAllowListEntries?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for IP allow list entries returned. */
    orderBy?: (IpAllowListEntryOrder|null)},IpAllowListEntryConnectionRequest]|IpAllowListEntryConnectionRequest
    /** Whether or not the default repository permission is currently being updated. */
    isUpdatingDefaultRepositoryPermission?: boolean|number
    /** Whether the two-factor authentication requirement is currently being enforced. */
    isUpdatingTwoFactorRequirement?: boolean|number
    /**
     * The setting value for whether organization members with admin permissions on a
     * repository can change repository visibility.
     */
    membersCanChangeRepositoryVisibilitySetting?: boolean|number
    /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
    membersCanChangeRepositoryVisibilitySettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
    membersCanCreateInternalRepositoriesSetting?: boolean|number
    /** The setting value for whether members of organizations in the enterprise can create private repositories. */
    membersCanCreatePrivateRepositoriesSetting?: boolean|number
    /** The setting value for whether members of organizations in the enterprise can create public repositories. */
    membersCanCreatePublicRepositoriesSetting?: boolean|number
    /** The setting value for whether members of organizations in the enterprise can create repositories. */
    membersCanCreateRepositoriesSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided repository creation setting value. */
    membersCanCreateRepositoriesSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting to find organizations for. */
    value: OrganizationMembersCanCreateRepositoriesSettingValue},OrganizationConnectionRequest]
    /** The setting value for whether members with admin permissions for repositories can delete issues. */
    membersCanDeleteIssuesSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
    membersCanDeleteIssuesSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
    membersCanDeleteRepositoriesSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
    membersCanDeleteRepositoriesSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
    membersCanInviteCollaboratorsSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
    membersCanInviteCollaboratorsSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
    membersCanMakePurchasesSetting?: boolean|number
    /** The setting value for whether members with admin permissions for repositories can update protected branches. */
    membersCanUpdateProtectedBranchesSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
    membersCanUpdateProtectedBranchesSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether members can view dependency insights. */
    membersCanViewDependencyInsightsSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
    membersCanViewDependencyInsightsSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
    organizationProjectsSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided organization projects setting value. */
    organizationProjectsSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** A list of outside collaborators across the repositories in the enterprise. */
    outsideCollaborators?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** The login of one specific outside collaborator. */
    login?: (Scalars["String"]|null),
    /** Ordering options for outside collaborators returned from the connection. */
    orderBy?: (EnterpriseMemberOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** Only return outside collaborators on repositories with this visibility. */
    visibility?: (RepositoryVisibility|null)},EnterpriseOutsideCollaboratorConnectionRequest]|EnterpriseOutsideCollaboratorConnectionRequest
    /** A list of pending administrator invitations for the enterprise. */
    pendingAdminInvitations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pending enterprise administrator invitations returned from the connection. */
    orderBy?: (EnterpriseAdministratorInvitationOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null),
    /** The role to filter by. */
    role?: (EnterpriseAdministratorRole|null)},EnterpriseAdministratorInvitationConnectionRequest]|EnterpriseAdministratorInvitationConnectionRequest
    /** A list of pending collaborator invitations across the repositories in the enterprise. */
    pendingCollaboratorInvitations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pending repository collaborator invitations returned from the connection. */
    orderBy?: (RepositoryInvitationOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null)},RepositoryInvitationConnectionRequest]|RepositoryInvitationConnectionRequest
    /**
     * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
     * A list of pending collaborators across the repositories in the enterprise.
     */
    pendingCollaborators?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for pending repository collaborator invitations returned from the connection. */
    orderBy?: (RepositoryInvitationOrder|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null)},EnterprisePendingCollaboratorConnectionRequest]|EnterprisePendingCollaboratorConnectionRequest
    /** A list of pending member invitations for organizations in the enterprise. */
    pendingMemberInvitations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** The search string to look for. */
    query?: (Scalars["String"]|null)},EnterprisePendingMemberInvitationConnectionRequest]|EnterprisePendingMemberInvitationConnectionRequest
    /** The setting value for whether repository projects are enabled in this enterprise. */
    repositoryProjectsSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided repository projects setting value. */
    repositoryProjectsSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The SAML Identity Provider for the enterprise. */
    samlIdentityProvider?: EnterpriseIdentityProviderRequest
    /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
    samlIdentityProviderSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: IdentityProviderConfigurationState},OrganizationConnectionRequest]
    /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
    teamDiscussionsSetting?: boolean|number
    /** A list of enterprise organizations configured with the provided team discussions setting value. */
    teamDiscussionsSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
    twoFactorRequiredSetting?: boolean|number
    /** A list of enterprise organizations configured with the two-factor authentication setting value. */
    twoFactorRequiredSettingOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for organizations with this setting. */
    orderBy?: (OrganizationOrder|null),
    /** The setting value to find organizations for. */
    value: Scalars["Boolean"]},OrganizationConnectionRequest]
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface EnterpriseAdministratorConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseAdministratorEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: UserRequest
    /** The role of the administrator. */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Enterprise Server installation connections. */
export interface EnterpriseServerInstallationOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order Enterprise Server installations by. */
field: EnterpriseServerInstallationOrderField}


/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseServerInstallationEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseServerInstallationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseServerInstallationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseServerInstallationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An Enterprise Server installation. */
export interface EnterpriseServerInstallationRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The customer name to which the Enterprise Server installation belongs. */
    customerName?: boolean|number
    /** The host name of the Enterprise Server installation. */
    hostName?: boolean|number
    id?: boolean|number
    /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
    isConnected?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** User accounts on this Enterprise Server installation. */
    userAccounts?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for Enterprise Server user accounts returned from the connection. */
    orderBy?: (EnterpriseServerUserAccountOrder|null)},EnterpriseServerUserAccountConnectionRequest]|EnterpriseServerUserAccountConnectionRequest
    /** User accounts uploads for the Enterprise Server installation. */
    userAccountsUploads?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
    orderBy?: (EnterpriseServerUserAccountsUploadOrder|null)},EnterpriseServerUserAccountsUploadConnectionRequest]|EnterpriseServerUserAccountsUploadConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Enterprise Server user account connections. */
export interface EnterpriseServerUserAccountOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order user accounts by. */
field: EnterpriseServerUserAccountOrderField}


/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseServerUserAccountEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseServerUserAccountRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseServerUserAccountRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** User emails belonging to this user account. */
    emails?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for Enterprise Server user account emails returned from the connection. */
    orderBy?: (EnterpriseServerUserAccountEmailOrder|null)},EnterpriseServerUserAccountEmailConnectionRequest]|EnterpriseServerUserAccountEmailConnectionRequest
    /** The Enterprise Server installation on which this user account exists. */
    enterpriseServerInstallation?: EnterpriseServerInstallationRequest
    id?: boolean|number
    /** Whether the user account is a site administrator on the Enterprise Server installation. */
    isSiteAdmin?: boolean|number
    /** The login of the user account on the Enterprise Server installation. */
    login?: boolean|number
    /** The profile name of the user account on the Enterprise Server installation. */
    profileName?: boolean|number
    /** The date and time when the user account was created on the Enterprise Server installation. */
    remoteCreatedAt?: boolean|number
    /** The ID of the user account on the Enterprise Server installation. */
    remoteUserId?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Enterprise Server user account email connections. */
export interface EnterpriseServerUserAccountEmailOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order emails by. */
field: EnterpriseServerUserAccountEmailOrderField}


/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseServerUserAccountEmailEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseServerUserAccountEmailRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseServerUserAccountEmailRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmailRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The email address. */
    email?: boolean|number
    id?: boolean|number
    /** Indicates whether this is the primary email of the associated user account. */
    isPrimary?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    /** The user account to which the email belongs. */
    userAccount?: EnterpriseServerUserAccountRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for Enterprise Server user accounts upload connections. */
export interface EnterpriseServerUserAccountsUploadOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order user accounts uploads by. */
field: EnterpriseServerUserAccountsUploadOrderField}


/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseServerUserAccountsUploadEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseServerUserAccountsUploadRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseServerUserAccountsUploadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUploadRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The enterprise to which this upload belongs. */
    enterprise?: EnterpriseRequest
    /** The Enterprise Server installation for which this upload was generated. */
    enterpriseServerInstallation?: EnterpriseServerInstallationRequest
    id?: boolean|number
    /** The name of the file uploaded. */
    name?: boolean|number
    /** The synchronization state of the upload */
    syncState?: boolean|number
    /** Identifies the date and time when the object was last updated. */
    updatedAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseOutsideCollaboratorEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** Whether the outside collaborator does not have a license for the enterprise. */
    isUnlicensed?: boolean|number
    /** The item at the end of the edge. */
    node?: UserRequest
    /** The enterprise organization repositories this user is a member of. */
    repositories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories. */
    orderBy?: (RepositoryOrder|null)},EnterpriseRepositoryInfoConnectionRequest]|EnterpriseRepositoryInfoConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseRepositoryInfoEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseRepositoryInfoRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseRepositoryInfoRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfoRequest{
    id?: boolean|number
    /** Identifies if the repository is private. */
    isPrivate?: boolean|number
    /** The repository's name. */
    name?: boolean|number
    /** The repository's name with owner. */
    nameWithOwner?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for enterprise administrator invitation connections */
export interface EnterpriseAdministratorInvitationOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order enterprise administrator invitations by. */
field: EnterpriseAdministratorInvitationOrderField}


/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseAdministratorInvitationEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseAdministratorInvitationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseAdministratorInvitationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitationRequest{
    /** Identifies the date and time when the object was created. */
    createdAt?: boolean|number
    /** The email of the person who was invited to the enterprise. */
    email?: boolean|number
    /** The enterprise the invitation is for. */
    enterprise?: EnterpriseRequest
    id?: boolean|number
    /** The user who was invited to the enterprise. */
    invitee?: UserRequest
    /** The user who created the invitation. */
    inviter?: UserRequest
    /** The invitee's pending role in the enterprise (owner or billing_manager). */
    role?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Ordering options for repository invitation connections. */
export interface RepositoryInvitationOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order repository invitations by. */
field: RepositoryInvitationOrderField}


/** The connection type for RepositoryInvitation. */
export interface RepositoryInvitationConnectionRequest{
    /** A list of edges. */
    edges?: RepositoryInvitationEdgeRequest
    /** A list of nodes. */
    nodes?: RepositoryInvitationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface RepositoryInvitationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: RepositoryInvitationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitationRequest{
    /** The email address that received the invitation. */
    email?: boolean|number
    id?: boolean|number
    /** The user who received the invitation. */
    invitee?: UserRequest
    /** The user who created the invitation. */
    inviter?: UserRequest
    /**
     * The permission granted on this repository by this invitation.
     * 
     * **Upcoming Change on 2020-10-01 UTC**
     * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * **Reason:** This field may return additional values
     */
    permission?: boolean|number
    /** The Repository the user is invited to. */
    repository?: RepositoryInfoRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for User. */
export interface EnterprisePendingCollaboratorConnectionRequest{
    /** A list of edges. */
    edges?: EnterprisePendingCollaboratorEdgeRequest
    /** A list of nodes. */
    nodes?: UserRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise. */
export interface EnterprisePendingCollaboratorEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** Whether the invited collaborator does not have a license for the enterprise. */
    isUnlicensed?: boolean|number
    /** The item at the end of the edge. */
    node?: UserRequest
    /** The enterprise organization repositories this user is a member of. */
    repositories?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null),
    /** Ordering options for repositories. */
    orderBy?: (RepositoryOrder|null)},EnterpriseRepositoryInfoConnectionRequest]|EnterpriseRepositoryInfoConnectionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnectionRequest{
    /** A list of edges. */
    edges?: EnterprisePendingMemberInvitationEdgeRequest
    /** A list of nodes. */
    nodes?: OrganizationInvitationRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    /** Identifies the total count of unique users in the connection. */
    totalUniqueUserCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** Whether the invitation has a license for the enterprise. */
    isUnlicensed?: boolean|number
    /** The item at the end of the edge. */
    node?: OrganizationInvitationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An identity provider configured to provision identities for an enterprise. */
export interface EnterpriseIdentityProviderRequest{
    /** The digest algorithm used to sign SAML requests for the identity provider. */
    digestMethod?: boolean|number
    /** The enterprise this identity provider belongs to. */
    enterprise?: EnterpriseRequest
    /** ExternalIdentities provisioned by this identity provider. */
    externalIdentities?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},ExternalIdentityConnectionRequest]|ExternalIdentityConnectionRequest
    id?: boolean|number
    /** The x509 certificate used by the identity provider to sign assertions and responses. */
    idpCertificate?: boolean|number
    /** The Issuer Entity ID for the SAML identity provider. */
    issuer?: boolean|number
    /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
    recoveryCodes?: boolean|number
    /** The signature algorithm used to sign SAML requests for the identity provider. */
    signatureMethod?: boolean|number
    /** The URL endpoint for the identity provider's SAML SSO. */
    ssoUrl?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The connection type for EnterpriseUserAccount. */
export interface EnterpriseUserAccountConnectionRequest{
    /** A list of edges. */
    edges?: EnterpriseUserAccountEdgeRequest
    /** A list of nodes. */
    nodes?: EnterpriseUserAccountRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface EnterpriseUserAccountEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: EnterpriseUserAccountRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A public description of a Marketplace category. */
export interface MarketplaceCategoryRequest{
    /** The category's description. */
    description?: boolean|number
    /** The technical description of how apps listed in this category work with GitHub. */
    howItWorks?: boolean|number
    id?: boolean|number
    /** The category's name. */
    name?: boolean|number
    /** How many Marketplace listings have this as their primary category. */
    primaryListingCount?: boolean|number
    /** The HTTP path for this Marketplace category. */
    resourcePath?: boolean|number
    /** How many Marketplace listings have this as their secondary category. */
    secondaryListingCount?: boolean|number
    /** The short name of the category used in its URL. */
    slug?: boolean|number
    /** The HTTP URL for this Marketplace category. */
    url?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListingRequest{
    /** The GitHub App this listing represents. */
    app?: AppRequest
    /** URL to the listing owner's company site. */
    companyUrl?: boolean|number
    /** The HTTP path for configuring access to the listing's integration or OAuth app */
    configurationResourcePath?: boolean|number
    /** The HTTP URL for configuring access to the listing's integration or OAuth app */
    configurationUrl?: boolean|number
    /** URL to the listing's documentation. */
    documentationUrl?: boolean|number
    /** The listing's detailed description. */
    extendedDescription?: boolean|number
    /** The listing's detailed description rendered to HTML. */
    extendedDescriptionHTML?: boolean|number
    /** The listing's introductory description. */
    fullDescription?: boolean|number
    /** The listing's introductory description rendered to HTML. */
    fullDescriptionHTML?: boolean|number
    /** Does this listing have any plans with a free trial? */
    hasPublishedFreeTrialPlans?: boolean|number
    /** Does this listing have a terms of service link? */
    hasTermsOfService?: boolean|number
    /** A technical description of how this app works with GitHub. */
    howItWorks?: boolean|number
    /** The listing's technical description rendered to HTML. */
    howItWorksHTML?: boolean|number
    id?: boolean|number
    /** URL to install the product to the viewer's account or organization. */
    installationUrl?: boolean|number
    /** Whether this listing's app has been installed for the current viewer */
    installedForViewer?: boolean|number
    /** Whether this listing has been removed from the Marketplace. */
    isArchived?: boolean|number
    /**
     * Whether this listing is still an editable draft that has not been submitted
     * for review and is not publicly visible in the Marketplace.
     */
    isDraft?: boolean|number
    /** Whether the product this listing represents is available as part of a paid plan. */
    isPaid?: boolean|number
    /** Whether this listing has been approved for display in the Marketplace. */
    isPublic?: boolean|number
    /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
    isRejected?: boolean|number
    /** Whether this listing has been approved for unverified display in the Marketplace. */
    isUnverified?: boolean|number
    /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
    isUnverifiedPending?: boolean|number
    /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
    isVerificationPendingFromDraft?: boolean|number
    /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
    isVerificationPendingFromUnverified?: boolean|number
    /** Whether this listing has been approved for verified display in the Marketplace. */
    isVerified?: boolean|number
    /** The hex color code, without the leading '#', for the logo background. */
    logoBackgroundColor?: boolean|number
    /** URL for the listing's logo image. */
    logoUrl?: [{
    /** The size in pixels of the resulting square image. */
    size?: (Scalars["Int"]|null)}]|boolean|number
    /** The listing's full name. */
    name?: boolean|number
    /** The listing's very short description without a trailing period or ampersands. */
    normalizedShortDescription?: boolean|number
    /** URL to the listing's detailed pricing. */
    pricingUrl?: boolean|number
    /** The category that best describes the listing. */
    primaryCategory?: MarketplaceCategoryRequest
    /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
    privacyPolicyUrl?: boolean|number
    /** The HTTP path for the Marketplace listing. */
    resourcePath?: boolean|number
    /** The URLs for the listing's screenshots. */
    screenshotUrls?: boolean|number
    /** An alternate category that describes the listing. */
    secondaryCategory?: MarketplaceCategoryRequest
    /** The listing's very short description. */
    shortDescription?: boolean|number
    /** The short name of the listing used in its URL. */
    slug?: boolean|number
    /** URL to the listing's status page. */
    statusUrl?: boolean|number
    /** An email address for support for this listing's app. */
    supportEmail?: boolean|number
    /**
     * Either a URL or an email address for support for this listing's app, may
     * return an empty string for listings that do not require a support URL.
     */
    supportUrl?: boolean|number
    /** URL to the listing's terms of service. */
    termsOfServiceUrl?: boolean|number
    /** The HTTP URL for the Marketplace listing. */
    url?: boolean|number
    /** Can the current viewer add plans for this Marketplace listing. */
    viewerCanAddPlans?: boolean|number
    /** Can the current viewer approve this Marketplace listing. */
    viewerCanApprove?: boolean|number
    /** Can the current viewer delist this Marketplace listing. */
    viewerCanDelist?: boolean|number
    /** Can the current viewer edit this Marketplace listing. */
    viewerCanEdit?: boolean|number
    /**
     * Can the current viewer edit the primary and secondary category of this
     * Marketplace listing.
     */
    viewerCanEditCategories?: boolean|number
    /** Can the current viewer edit the plans for this Marketplace listing. */
    viewerCanEditPlans?: boolean|number
    /**
     * Can the current viewer return this Marketplace listing to draft state
     * so it becomes editable again.
     */
    viewerCanRedraft?: boolean|number
    /**
     * Can the current viewer reject this Marketplace listing by returning it to
     * an editable draft state or rejecting it entirely.
     */
    viewerCanReject?: boolean|number
    /**
     * Can the current viewer request this listing be reviewed for display in
     * the Marketplace as verified.
     */
    viewerCanRequestApproval?: boolean|number
    /** Indicates whether the current user has an active subscription to this Marketplace listing. */
    viewerHasPurchased?: boolean|number
    /**
     * Indicates if the current user has purchased a subscription to this Marketplace listing
     * for all of the organizations the user owns.
     */
    viewerHasPurchasedForAllOrganizations?: boolean|number
    /** Does the current viewer role allow them to administer this Marketplace listing. */
    viewerIsListingAdmin?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Look up Marketplace Listings */
export interface MarketplaceListingConnectionRequest{
    /** A list of edges. */
    edges?: MarketplaceListingEdgeRequest
    /** A list of nodes. */
    nodes?: MarketplaceListingRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface MarketplaceListingEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: MarketplaceListingRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents information about the GitHub instance. */
export interface GitHubMetadataRequest{
    /** Returns a String that's a SHA of `github-services` */
    gitHubServicesSha?: boolean|number
    /** IP addresses that users connect to for git operations */
    gitIpAddresses?: boolean|number
    /** IP addresses that service hooks are sent from */
    hookIpAddresses?: boolean|number
    /** IP addresses that the importer connects from */
    importerIpAddresses?: boolean|number
    /** Whether or not users are verified */
    isPasswordAuthenticationVerifiable?: boolean|number
    /** IP addresses for GitHub Pages' A records */
    pagesIpAddresses?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents the client's rate limit. */
export interface RateLimitRequest{
    /** The point cost for the current query counting against the rate limit. */
    cost?: boolean|number
    /** The maximum number of points the client is permitted to consume in a 60 minute window. */
    limit?: boolean|number
    /** The maximum number of nodes this query may return */
    nodeCount?: boolean|number
    /** The number of points remaining in the current rate limit window. */
    remaining?: boolean|number
    /** The time at which the current rate limit window resets in UTC epoch seconds. */
    resetAt?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A list of results that matched against a search query. */
export interface SearchResultItemConnectionRequest{
    /** The number of pieces of code that matched the search query. */
    codeCount?: boolean|number
    /** A list of edges. */
    edges?: SearchResultItemEdgeRequest
    /** The number of issues that matched the search query. */
    issueCount?: boolean|number
    /** A list of nodes. */
    nodes?: SearchResultItemRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** The number of repositories that matched the search query. */
    repositoryCount?: boolean|number
    /** The number of users that matched the search query. */
    userCount?: boolean|number
    /** The number of wiki pages that matched the search query. */
    wikiCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SearchResultItemEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SearchResultItemRequest
    /** Text matches on the result found. */
    textMatches?: TextMatchRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The results of a search. */
export interface SearchResultItemRequest{on_App?:AppRequest,on_Issue?:IssueRequest,on_MarketplaceListing?:MarketplaceListingRequest,on_Organization?:OrganizationRequest,on_PullRequest?:PullRequestRequest,on_Repository?:RepositoryRequest,on_User?:UserRequest,__typename?:boolean|number}


/** A text match within a search result. */
export interface TextMatchRequest{
    /** The specific text fragment within the property matched on. */
    fragment?: boolean|number
    /** Highlights within the matched fragment. */
    highlights?: TextMatchHighlightRequest
    /** The property matched on. */
    property?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a single highlight in a search result match. */
export interface TextMatchHighlightRequest{
    /** The indice in the fragment where the matched text begins. */
    beginIndice?: boolean|number
    /** The indice in the fragment where the matched text ends. */
    endIndice?: boolean|number
    /** The text matched. */
    text?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An advisory identifier to filter results on. */
export interface SecurityAdvisoryIdentifierFilter{
/** The identifier type. */
type: SecurityAdvisoryIdentifierType,
/** The identifier string. Supports exact or partial matching. */
value: Scalars["String"]}


/** Ordering options for security advisory connections */
export interface SecurityAdvisoryOrder{
/** The ordering direction. */
direction: OrderDirection,
/** The field to order security advisories by. */
field: SecurityAdvisoryOrderField}


/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnectionRequest{
    /** A list of edges. */
    edges?: SecurityAdvisoryEdgeRequest
    /** A list of nodes. */
    nodes?: SecurityAdvisoryRequest
    /** Information to aid in pagination. */
    pageInfo?: PageInfoRequest
    /** Identifies the total count of items in the connection. */
    totalCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An edge in a connection. */
export interface SecurityAdvisoryEdgeRequest{
    /** A cursor for use in pagination. */
    cursor?: boolean|number
    /** The item at the end of the edge. */
    node?: SecurityAdvisoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** The root query for implementing GraphQL mutations. */
export interface MutationRequest{
    /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
    acceptEnterpriseAdministratorInvitation?: [{input: AcceptEnterpriseAdministratorInvitationInput},AcceptEnterpriseAdministratorInvitationPayloadRequest]
    /** Applies a suggested topic to the repository. */
    acceptTopicSuggestion?: [{input: AcceptTopicSuggestionInput},AcceptTopicSuggestionPayloadRequest]
    /** Adds assignees to an assignable object. */
    addAssigneesToAssignable?: [{input: AddAssigneesToAssignableInput},AddAssigneesToAssignablePayloadRequest]
    /** Adds a comment to an Issue or Pull Request. */
    addComment?: [{input: AddCommentInput},AddCommentPayloadRequest]
    /** Adds labels to a labelable object. */
    addLabelsToLabelable?: [{input: AddLabelsToLabelableInput},AddLabelsToLabelablePayloadRequest]
    /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
    addProjectCard?: [{input: AddProjectCardInput},AddProjectCardPayloadRequest]
    /** Adds a column to a Project. */
    addProjectColumn?: [{input: AddProjectColumnInput},AddProjectColumnPayloadRequest]
    /** Adds a review to a Pull Request. */
    addPullRequestReview?: [{input: AddPullRequestReviewInput},AddPullRequestReviewPayloadRequest]
    /** Adds a comment to a review. */
    addPullRequestReviewComment?: [{input: AddPullRequestReviewCommentInput},AddPullRequestReviewCommentPayloadRequest]
    /** Adds a new thread to a pending Pull Request Review. */
    addPullRequestReviewThread?: [{input: AddPullRequestReviewThreadInput},AddPullRequestReviewThreadPayloadRequest]
    /** Adds a reaction to a subject. */
    addReaction?: [{input: AddReactionInput},AddReactionPayloadRequest]
    /** Adds a star to a Starrable. */
    addStar?: [{input: AddStarInput},AddStarPayloadRequest]
    /** Marks a repository as archived. */
    archiveRepository?: [{input: ArchiveRepositoryInput},ArchiveRepositoryPayloadRequest]
    /** Cancels a pending invitation for an administrator to join an enterprise. */
    cancelEnterpriseAdminInvitation?: [{input: CancelEnterpriseAdminInvitationInput},CancelEnterpriseAdminInvitationPayloadRequest]
    /** Update your status on GitHub. */
    changeUserStatus?: [{input: ChangeUserStatusInput},ChangeUserStatusPayloadRequest]
    /** Clears all labels from a labelable object. */
    clearLabelsFromLabelable?: [{input: ClearLabelsFromLabelableInput},ClearLabelsFromLabelablePayloadRequest]
    /** Creates a new project by cloning configuration from an existing project. */
    cloneProject?: [{input: CloneProjectInput},CloneProjectPayloadRequest]
    /** Create a new repository with the same files and directory structure as a template repository. */
    cloneTemplateRepository?: [{input: CloneTemplateRepositoryInput},CloneTemplateRepositoryPayloadRequest]
    /** Close an issue. */
    closeIssue?: [{input: CloseIssueInput},CloseIssuePayloadRequest]
    /** Close a pull request. */
    closePullRequest?: [{input: ClosePullRequestInput},ClosePullRequestPayloadRequest]
    /** Convert a project note card to one associated with a newly created issue. */
    convertProjectCardNoteToIssue?: [{input: ConvertProjectCardNoteToIssueInput},ConvertProjectCardNoteToIssuePayloadRequest]
    /** Create a new branch protection rule */
    createBranchProtectionRule?: [{input: CreateBranchProtectionRuleInput},CreateBranchProtectionRulePayloadRequest]
    /** Create a check run. */
    createCheckRun?: [{input: CreateCheckRunInput},CreateCheckRunPayloadRequest]
    /** Create a check suite */
    createCheckSuite?: [{input: CreateCheckSuiteInput},CreateCheckSuitePayloadRequest]
    /** Create a content attachment. */
    createContentAttachment?: [{input: CreateContentAttachmentInput},CreateContentAttachmentPayloadRequest]
    /** Creates a new deployment event. */
    createDeployment?: [{input: CreateDeploymentInput},CreateDeploymentPayloadRequest]
    /** Create a deployment status. */
    createDeploymentStatus?: [{input: CreateDeploymentStatusInput},CreateDeploymentStatusPayloadRequest]
    /** Creates an organization as part of an enterprise account. */
    createEnterpriseOrganization?: [{input: CreateEnterpriseOrganizationInput},CreateEnterpriseOrganizationPayloadRequest]
    /** Creates a new IP allow list entry. */
    createIpAllowListEntry?: [{input: CreateIpAllowListEntryInput},CreateIpAllowListEntryPayloadRequest]
    /** Creates a new issue. */
    createIssue?: [{input: CreateIssueInput},CreateIssuePayloadRequest]
    /** Creates a new label. */
    createLabel?: [{input: CreateLabelInput},CreateLabelPayloadRequest]
    /** Creates a new project. */
    createProject?: [{input: CreateProjectInput},CreateProjectPayloadRequest]
    /** Create a new pull request */
    createPullRequest?: [{input: CreatePullRequestInput},CreatePullRequestPayloadRequest]
    /** Create a new Git Ref. */
    createRef?: [{input: CreateRefInput},CreateRefPayloadRequest]
    /** Create a new repository. */
    createRepository?: [{input: CreateRepositoryInput},CreateRepositoryPayloadRequest]
    /** Creates a new team discussion. */
    createTeamDiscussion?: [{input: CreateTeamDiscussionInput},CreateTeamDiscussionPayloadRequest]
    /** Creates a new team discussion comment. */
    createTeamDiscussionComment?: [{input: CreateTeamDiscussionCommentInput},CreateTeamDiscussionCommentPayloadRequest]
    /** Rejects a suggested topic for the repository. */
    declineTopicSuggestion?: [{input: DeclineTopicSuggestionInput},DeclineTopicSuggestionPayloadRequest]
    /** Delete a branch protection rule */
    deleteBranchProtectionRule?: [{input: DeleteBranchProtectionRuleInput},DeleteBranchProtectionRulePayloadRequest]
    /** Deletes a deployment. */
    deleteDeployment?: [{input: DeleteDeploymentInput},DeleteDeploymentPayloadRequest]
    /** Deletes an IP allow list entry. */
    deleteIpAllowListEntry?: [{input: DeleteIpAllowListEntryInput},DeleteIpAllowListEntryPayloadRequest]
    /** Deletes an Issue object. */
    deleteIssue?: [{input: DeleteIssueInput},DeleteIssuePayloadRequest]
    /** Deletes an IssueComment object. */
    deleteIssueComment?: [{input: DeleteIssueCommentInput},DeleteIssueCommentPayloadRequest]
    /** Deletes a label. */
    deleteLabel?: [{input: DeleteLabelInput},DeleteLabelPayloadRequest]
    /** Delete a package version. */
    deletePackageVersion?: [{input: DeletePackageVersionInput},DeletePackageVersionPayloadRequest]
    /** Deletes a project. */
    deleteProject?: [{input: DeleteProjectInput},DeleteProjectPayloadRequest]
    /** Deletes a project card. */
    deleteProjectCard?: [{input: DeleteProjectCardInput},DeleteProjectCardPayloadRequest]
    /** Deletes a project column. */
    deleteProjectColumn?: [{input: DeleteProjectColumnInput},DeleteProjectColumnPayloadRequest]
    /** Deletes a pull request review. */
    deletePullRequestReview?: [{input: DeletePullRequestReviewInput},DeletePullRequestReviewPayloadRequest]
    /** Deletes a pull request review comment. */
    deletePullRequestReviewComment?: [{input: DeletePullRequestReviewCommentInput},DeletePullRequestReviewCommentPayloadRequest]
    /** Delete a Git Ref. */
    deleteRef?: [{input: DeleteRefInput},DeleteRefPayloadRequest]
    /** Deletes a team discussion. */
    deleteTeamDiscussion?: [{input: DeleteTeamDiscussionInput},DeleteTeamDiscussionPayloadRequest]
    /** Deletes a team discussion comment. */
    deleteTeamDiscussionComment?: [{input: DeleteTeamDiscussionCommentInput},DeleteTeamDiscussionCommentPayloadRequest]
    /** Dismisses an approved or rejected pull request review. */
    dismissPullRequestReview?: [{input: DismissPullRequestReviewInput},DismissPullRequestReviewPayloadRequest]
    /** Follow a user. */
    followUser?: [{input: FollowUserInput},FollowUserPayloadRequest]
    /** Creates a new project by importing columns and a list of issues/PRs. */
    importProject?: [{input: ImportProjectInput},ImportProjectPayloadRequest]
    /** Invite someone to become an administrator of the enterprise. */
    inviteEnterpriseAdmin?: [{input: InviteEnterpriseAdminInput},InviteEnterpriseAdminPayloadRequest]
    /** Creates a repository link for a project. */
    linkRepositoryToProject?: [{input: LinkRepositoryToProjectInput},LinkRepositoryToProjectPayloadRequest]
    /** Lock a lockable object */
    lockLockable?: [{input: LockLockableInput},LockLockablePayloadRequest]
    /** Marks a pull request ready for review. */
    markPullRequestReadyForReview?: [{input: MarkPullRequestReadyForReviewInput},MarkPullRequestReadyForReviewPayloadRequest]
    /** Merge a head into a branch. */
    mergeBranch?: [{input: MergeBranchInput},MergeBranchPayloadRequest]
    /** Merge a pull request. */
    mergePullRequest?: [{input: MergePullRequestInput},MergePullRequestPayloadRequest]
    /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
    minimizeComment?: [{input: MinimizeCommentInput},MinimizeCommentPayloadRequest]
    /** Moves a project card to another place. */
    moveProjectCard?: [{input: MoveProjectCardInput},MoveProjectCardPayloadRequest]
    /** Moves a project column to another place. */
    moveProjectColumn?: [{input: MoveProjectColumnInput},MoveProjectColumnPayloadRequest]
    /** Pin an issue to a repository */
    pinIssue?: [{input: PinIssueInput},PinIssuePayloadRequest]
    /** Regenerates the identity provider recovery codes for an enterprise */
    regenerateEnterpriseIdentityProviderRecoveryCodes?: [{input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput},RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadRequest]
    /** Removes assignees from an assignable object. */
    removeAssigneesFromAssignable?: [{input: RemoveAssigneesFromAssignableInput},RemoveAssigneesFromAssignablePayloadRequest]
    /** Removes an administrator from the enterprise. */
    removeEnterpriseAdmin?: [{input: RemoveEnterpriseAdminInput},RemoveEnterpriseAdminPayloadRequest]
    /** Removes the identity provider from an enterprise */
    removeEnterpriseIdentityProvider?: [{input: RemoveEnterpriseIdentityProviderInput},RemoveEnterpriseIdentityProviderPayloadRequest]
    /** Removes an organization from the enterprise */
    removeEnterpriseOrganization?: [{input: RemoveEnterpriseOrganizationInput},RemoveEnterpriseOrganizationPayloadRequest]
    /** Removes labels from a Labelable object. */
    removeLabelsFromLabelable?: [{input: RemoveLabelsFromLabelableInput},RemoveLabelsFromLabelablePayloadRequest]
    /** Removes outside collaborator from all repositories in an organization. */
    removeOutsideCollaborator?: [{input: RemoveOutsideCollaboratorInput},RemoveOutsideCollaboratorPayloadRequest]
    /** Removes a reaction from a subject. */
    removeReaction?: [{input: RemoveReactionInput},RemoveReactionPayloadRequest]
    /** Removes a star from a Starrable. */
    removeStar?: [{input: RemoveStarInput},RemoveStarPayloadRequest]
    /** Reopen a issue. */
    reopenIssue?: [{input: ReopenIssueInput},ReopenIssuePayloadRequest]
    /** Reopen a pull request. */
    reopenPullRequest?: [{input: ReopenPullRequestInput},ReopenPullRequestPayloadRequest]
    /** Set review requests on a pull request. */
    requestReviews?: [{input: RequestReviewsInput},RequestReviewsPayloadRequest]
    /** Rerequests an existing check suite. */
    rerequestCheckSuite?: [{input: RerequestCheckSuiteInput},RerequestCheckSuitePayloadRequest]
    /** Marks a review thread as resolved. */
    resolveReviewThread?: [{input: ResolveReviewThreadInput},ResolveReviewThreadPayloadRequest]
    /** Creates or updates the identity provider for an enterprise. */
    setEnterpriseIdentityProvider?: [{input: SetEnterpriseIdentityProviderInput},SetEnterpriseIdentityProviderPayloadRequest]
    /** Submits a pending pull request review. */
    submitPullRequestReview?: [{input: SubmitPullRequestReviewInput},SubmitPullRequestReviewPayloadRequest]
    /** Transfer an issue to a different repository */
    transferIssue?: [{input: TransferIssueInput},TransferIssuePayloadRequest]
    /** Unarchives a repository. */
    unarchiveRepository?: [{input: UnarchiveRepositoryInput},UnarchiveRepositoryPayloadRequest]
    /** Unfollow a user. */
    unfollowUser?: [{input: UnfollowUserInput},UnfollowUserPayloadRequest]
    /** Deletes a repository link from a project. */
    unlinkRepositoryFromProject?: [{input: UnlinkRepositoryFromProjectInput},UnlinkRepositoryFromProjectPayloadRequest]
    /** Unlock a lockable object */
    unlockLockable?: [{input: UnlockLockableInput},UnlockLockablePayloadRequest]
    /** Unmark an issue as a duplicate of another issue. */
    unmarkIssueAsDuplicate?: [{input: UnmarkIssueAsDuplicateInput},UnmarkIssueAsDuplicatePayloadRequest]
    /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
    unminimizeComment?: [{input: UnminimizeCommentInput},UnminimizeCommentPayloadRequest]
    /** Unpin a pinned issue from a repository */
    unpinIssue?: [{input: UnpinIssueInput},UnpinIssuePayloadRequest]
    /** Marks a review thread as unresolved. */
    unresolveReviewThread?: [{input: UnresolveReviewThreadInput},UnresolveReviewThreadPayloadRequest]
    /** Create a new branch protection rule */
    updateBranchProtectionRule?: [{input: UpdateBranchProtectionRuleInput},UpdateBranchProtectionRulePayloadRequest]
    /** Update a check run */
    updateCheckRun?: [{input: UpdateCheckRunInput},UpdateCheckRunPayloadRequest]
    /** Modifies the settings of an existing check suite */
    updateCheckSuitePreferences?: [{input: UpdateCheckSuitePreferencesInput},UpdateCheckSuitePreferencesPayloadRequest]
    /** Sets the action execution capability setting for an enterprise. */
    updateEnterpriseActionExecutionCapabilitySetting?: [{input: UpdateEnterpriseActionExecutionCapabilitySettingInput},UpdateEnterpriseActionExecutionCapabilitySettingPayloadRequest]
    /** Updates the role of an enterprise administrator. */
    updateEnterpriseAdministratorRole?: [{input: UpdateEnterpriseAdministratorRoleInput},UpdateEnterpriseAdministratorRolePayloadRequest]
    /** Sets whether private repository forks are enabled for an enterprise. */
    updateEnterpriseAllowPrivateRepositoryForkingSetting?: [{input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput},UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadRequest]
    /** Sets the default repository permission for organizations in an enterprise. */
    updateEnterpriseDefaultRepositoryPermissionSetting?: [{input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput},UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadRequest]
    /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
    updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: [{input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput},UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadRequest]
    /** Sets the members can create repositories setting for an enterprise. */
    updateEnterpriseMembersCanCreateRepositoriesSetting?: [{input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput},UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadRequest]
    /** Sets the members can delete issues setting for an enterprise. */
    updateEnterpriseMembersCanDeleteIssuesSetting?: [{input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput},UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadRequest]
    /** Sets the members can delete repositories setting for an enterprise. */
    updateEnterpriseMembersCanDeleteRepositoriesSetting?: [{input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput},UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadRequest]
    /** Sets whether members can invite collaborators are enabled for an enterprise. */
    updateEnterpriseMembersCanInviteCollaboratorsSetting?: [{input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput},UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadRequest]
    /** Sets whether or not an organization admin can make purchases. */
    updateEnterpriseMembersCanMakePurchasesSetting?: [{input: UpdateEnterpriseMembersCanMakePurchasesSettingInput},UpdateEnterpriseMembersCanMakePurchasesSettingPayloadRequest]
    /** Sets the members can update protected branches setting for an enterprise. */
    updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: [{input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput},UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadRequest]
    /** Sets the members can view dependency insights for an enterprise. */
    updateEnterpriseMembersCanViewDependencyInsightsSetting?: [{input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput},UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadRequest]
    /** Sets whether organization projects are enabled for an enterprise. */
    updateEnterpriseOrganizationProjectsSetting?: [{input: UpdateEnterpriseOrganizationProjectsSettingInput},UpdateEnterpriseOrganizationProjectsSettingPayloadRequest]
    /** Updates an enterprise's profile. */
    updateEnterpriseProfile?: [{input: UpdateEnterpriseProfileInput},UpdateEnterpriseProfilePayloadRequest]
    /** Sets whether repository projects are enabled for a enterprise. */
    updateEnterpriseRepositoryProjectsSetting?: [{input: UpdateEnterpriseRepositoryProjectsSettingInput},UpdateEnterpriseRepositoryProjectsSettingPayloadRequest]
    /** Sets whether team discussions are enabled for an enterprise. */
    updateEnterpriseTeamDiscussionsSetting?: [{input: UpdateEnterpriseTeamDiscussionsSettingInput},UpdateEnterpriseTeamDiscussionsSettingPayloadRequest]
    /** Sets whether two factor authentication is required for all users in an enterprise. */
    updateEnterpriseTwoFactorAuthenticationRequiredSetting?: [{input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput},UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadRequest]
    /** Sets whether an IP allow list is enabled on an owner. */
    updateIpAllowListEnabledSetting?: [{input: UpdateIpAllowListEnabledSettingInput},UpdateIpAllowListEnabledSettingPayloadRequest]
    /** Updates an IP allow list entry. */
    updateIpAllowListEntry?: [{input: UpdateIpAllowListEntryInput},UpdateIpAllowListEntryPayloadRequest]
    /** Updates an Issue. */
    updateIssue?: [{input: UpdateIssueInput},UpdateIssuePayloadRequest]
    /** Updates an IssueComment object. */
    updateIssueComment?: [{input: UpdateIssueCommentInput},UpdateIssueCommentPayloadRequest]
    /** Updates an existing label. */
    updateLabel?: [{input: UpdateLabelInput},UpdateLabelPayloadRequest]
    /** Updates an existing project. */
    updateProject?: [{input: UpdateProjectInput},UpdateProjectPayloadRequest]
    /** Updates an existing project card. */
    updateProjectCard?: [{input: UpdateProjectCardInput},UpdateProjectCardPayloadRequest]
    /** Updates an existing project column. */
    updateProjectColumn?: [{input: UpdateProjectColumnInput},UpdateProjectColumnPayloadRequest]
    /** Update a pull request */
    updatePullRequest?: [{input: UpdatePullRequestInput},UpdatePullRequestPayloadRequest]
    /** Updates the body of a pull request review. */
    updatePullRequestReview?: [{input: UpdatePullRequestReviewInput},UpdatePullRequestReviewPayloadRequest]
    /** Updates a pull request review comment. */
    updatePullRequestReviewComment?: [{input: UpdatePullRequestReviewCommentInput},UpdatePullRequestReviewCommentPayloadRequest]
    /** Update a Git Ref. */
    updateRef?: [{input: UpdateRefInput},UpdateRefPayloadRequest]
    /**
     * Creates, updates and/or deletes multiple refs in a repository.
     * 
     * This mutation takes a list of `RefUpdate`s and performs these updates
     * on the repository. All updates are performed atomically, meaning that
     * if one of them is rejected, no other ref will be modified.
     * 
     * `RefUpdate.beforeOid` specifies that the given reference needs to point
     * to the given value before performing any updates. A value of
     * `0000000000000000000000000000000000000000` can be used to verify that
     * the references should not exist.
     * 
     * `RefUpdate.afterOid` specifies the value that the given reference
     * will point to after performing all updates. A value of
     * `0000000000000000000000000000000000000000` can be used to delete a
     * reference.
     * 
     * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
     * for the given reference will be allowed.
     */
    updateRefs?: [{input: UpdateRefsInput},UpdateRefsPayloadRequest]
    /** Update information about a repository. */
    updateRepository?: [{input: UpdateRepositoryInput},UpdateRepositoryPayloadRequest]
    /** Updates the state for subscribable subjects. */
    updateSubscription?: [{input: UpdateSubscriptionInput},UpdateSubscriptionPayloadRequest]
    /** Updates a team discussion. */
    updateTeamDiscussion?: [{input: UpdateTeamDiscussionInput},UpdateTeamDiscussionPayloadRequest]
    /** Updates a discussion comment. */
    updateTeamDiscussionComment?: [{input: UpdateTeamDiscussionCommentInput},UpdateTeamDiscussionCommentPayloadRequest]
    /** Updates team review assignment. */
    updateTeamReviewAssignment?: [{input: UpdateTeamReviewAssignmentInput},UpdateTeamReviewAssignmentPayloadRequest]
    /** Replaces the repository's topics with the given topics. */
    updateTopics?: [{input: UpdateTopicsInput},UpdateTopicsPayloadRequest]
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The id of the invitation being accepted */
invitationId: Scalars["ID"]}


/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The invitation that was accepted. */
    invitation?: EnterpriseAdministratorInvitationRequest
    /** A message confirming the result of accepting an administrator invitation. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of the suggested topic. */
name: Scalars["String"],
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The accepted topic. */
    topic?: TopicRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignableInput{
/** The id of the assignable object to add assignees to. */
assignableId: Scalars["ID"],
/** The id of users to add as assignees. */
assigneeIds: Scalars["ID"][],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null)}


/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayloadRequest{
    /** The item that was assigned. */
    assignable?: AssignableRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddComment */
export interface AddCommentInput{
/** The contents of the comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the subject to modify. */
subjectId: Scalars["ID"]}


/** Autogenerated return type of AddComment */
export interface AddCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The edge from the subject's comment connection. */
    commentEdge?: IssueCommentEdgeRequest
    /** The subject */
    subject?: NodeRequest
    /** The edge from the subject's timeline connection. */
    timelineEdge?: IssueTimelineItemEdgeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddLabelsToLabelable */
export interface AddLabelsToLabelableInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ids of the labels to add. */
labelIds: Scalars["ID"][],
/** The id of the labelable object to add labels to. */
labelableId: Scalars["ID"]}


/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The item that was labeled. */
    labelable?: LabelableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddProjectCard */
export interface AddProjectCardInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The content of the card. Must be a member of the ProjectCardItem union */
contentId?: (Scalars["ID"]|null),
/** The note on the card. */
note?: (Scalars["String"]|null),
/** The Node ID of the ProjectColumn. */
projectColumnId: Scalars["ID"]}


/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayloadRequest{
    /** The edge from the ProjectColumn's card connection. */
    cardEdge?: ProjectCardEdgeRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The ProjectColumn */
    projectColumn?: ProjectColumnRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddProjectColumn */
export interface AddProjectColumnInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of the column. */
name: Scalars["String"],
/** The Node ID of the project. */
projectId: Scalars["ID"]}


/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The edge from the project's column connection. */
    columnEdge?: ProjectColumnEdgeRequest
    /** The project */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddPullRequestReview */
export interface AddPullRequestReviewInput{
/** The contents of the review body comment. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The review line comments. */
comments?: ((DraftPullRequestReviewComment|null)[]|null),
/** The commit OID the review pertains to. */
commitOID?: (Scalars["GitObjectID"]|null),
/** The event to perform on the pull request review. */
event?: (PullRequestReviewEvent|null),
/** The Node ID of the pull request to modify. */
pullRequestId: Scalars["ID"],
/** The review line comment threads. */
threads?: ((DraftPullRequestReviewThread|null)[]|null)}


/** Specifies a review comment to be left with a Pull Request Review. */
export interface DraftPullRequestReviewComment{
/** Body of the comment to leave. */
body: Scalars["String"],
/** Path to the file being commented on. */
path: Scalars["String"],
/** Position in the file to leave a comment on. */
position: Scalars["Int"]}


/** Specifies a review comment thread to be left with a Pull Request Review. */
export interface DraftPullRequestReviewThread{
/** Body of the comment to leave. */
body: Scalars["String"],
/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
line: Scalars["Int"],
/** Path to the file being commented on. */
path: Scalars["String"],
/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
side?: (DiffSide|null),
/** The first line of the range to which the comment refers. */
startLine?: (Scalars["Int"]|null),
/** The side of the diff on which the start line resides. */
startSide?: (DiffSide|null)}


/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The newly created pull request review. */
    pullRequestReview?: PullRequestReviewRequest
    /** The edge from the pull request's review connection. */
    reviewEdge?: PullRequestReviewEdgeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentInput{
/** The text of the comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The SHA of the commit to comment on. */
commitOID?: (Scalars["GitObjectID"]|null),
/** The comment id to reply to. */
inReplyTo?: (Scalars["ID"]|null),
/** The relative path of the file to comment on. */
path?: (Scalars["String"]|null),
/** The line index in the diff to comment on. */
position?: (Scalars["Int"]|null),
/** The node ID of the pull request reviewing */
pullRequestId?: (Scalars["ID"]|null),
/** The Node ID of the review to modify. */
pullRequestReviewId?: (Scalars["ID"]|null)}


/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The newly created comment. */
    comment?: PullRequestReviewCommentRequest
    /** The edge from the review's comment connection. */
    commentEdge?: PullRequestReviewCommentEdgeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadInput{
/** Body of the thread's first comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
line: Scalars["Int"],
/** Path to the file being commented on. */
path: Scalars["String"],
/** The Node ID of the review to modify. */
pullRequestReviewId: Scalars["ID"],
/** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
side?: (DiffSide|null),
/** The first line of the range to which the comment refers. */
startLine?: (Scalars["Int"]|null),
/** The side of the diff on which the start line resides. */
startSide?: (DiffSide|null)}


/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The newly created thread. */
    thread?: PullRequestReviewThreadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddReaction */
export interface AddReactionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of the emoji to react with. */
content: ReactionContent,
/** The Node ID of the subject to modify. */
subjectId: Scalars["ID"]}


/** Autogenerated return type of AddReaction */
export interface AddReactionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The reaction object. */
    reaction?: ReactionRequest
    /** The reactable subject. */
    subject?: ReactableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of AddStar */
export interface AddStarInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Starrable ID to star. */
starrableId: Scalars["ID"]}


/** Autogenerated return type of AddStar */
export interface AddStarPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The starrable. */
    starrable?: StarrableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ArchiveRepository */
export interface ArchiveRepositoryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the repository to mark as archived. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The repository that was marked as archived. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the pending enterprise administrator invitation. */
invitationId: Scalars["ID"]}


/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The invitation that was canceled. */
    invitation?: EnterpriseAdministratorInvitationRequest
    /** A message confirming the result of canceling an administrator invitation. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ChangeUserStatus */
export interface ChangeUserStatusInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
emoji?: (Scalars["String"]|null),
/** If set, the user status will not be shown after this date. */
expiresAt?: (Scalars["DateTime"]|null),
/** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
limitedAvailability?: (Scalars["Boolean"]|null),
/** A short description of your current status. */
message?: (Scalars["String"]|null),
/**
 * The ID of the organization whose members will be allowed to see the status. If
 * omitted, the status will be publicly visible.
 */
organizationId?: (Scalars["ID"]|null)}


/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** Your updated status. */
    status?: UserStatusRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelableInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The id of the labelable object to clear the labels from. */
labelableId: Scalars["ID"]}


/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The item that was unlabeled. */
    labelable?: LabelableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CloneProject */
export interface CloneProjectInput{
/** The description of the project. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Whether or not to clone the source project's workflows. */
includeWorkflows: Scalars["Boolean"],
/** The name of the project. */
name: Scalars["String"],
/** The visibility of the project, defaults to false (private). */
public?: (Scalars["Boolean"]|null),
/** The source project to clone. */
sourceId: Scalars["ID"],
/** The owner ID to create the project under. */
targetOwnerId: Scalars["ID"]}


/** Autogenerated return type of CloneProject */
export interface CloneProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The id of the JobStatus for populating cloned fields. */
    jobStatusId?: boolean|number
    /** The new cloned project. */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CloneTemplateRepository */
export interface CloneTemplateRepositoryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A short description of the new repository. */
description?: (Scalars["String"]|null),
/**
 * Whether to copy all branches from the template to the new repository. Defaults
 * to copying only the default branch of the template.
 */
includeAllBranches?: (Scalars["Boolean"]|null),
/** The name of the new repository. */
name: Scalars["String"],
/** The ID of the owner for the new repository. */
ownerId: Scalars["ID"],
/** The Node ID of the template repository. */
repositoryId: Scalars["ID"],
/** Indicates the repository's visibility level. */
visibility: RepositoryVisibility}


/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CloseIssue */
export interface CloseIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the issue to be closed. */
issueId: Scalars["ID"]}


/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue that was closed. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ClosePullRequest */
export interface ClosePullRequestInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the pull request to be closed. */
pullRequestId: Scalars["ID"]}


/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request that was closed. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssueInput{
/** The body of the newly created issue. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ProjectCard ID to convert. */
projectCardId: Scalars["ID"],
/** The ID of the repository to create the issue in. */
repositoryId: Scalars["ID"],
/** The title of the newly created issue. Defaults to the card's note text. */
title?: (Scalars["String"]|null)}


/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated ProjectCard. */
    projectCard?: ProjectCardRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRuleInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Will new commits pushed to matching branches dismiss pull request review approvals. */
dismissesStaleReviews?: (Scalars["Boolean"]|null),
/** Can admins overwrite branch protection. */
isAdminEnforced?: (Scalars["Boolean"]|null),
/** The glob-like pattern used to determine matching branches. */
pattern: Scalars["String"],
/** A list of User, Team or App IDs allowed to push to matching branches. */
pushActorIds?: (Scalars["ID"][]|null),
/** The global relay id of the repository in which a new branch protection rule should be created in. */
repositoryId: Scalars["ID"],
/** Number of approving reviews required to update matching branches. */
requiredApprovingReviewCount?: (Scalars["Int"]|null),
/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
requiredStatusCheckContexts?: (Scalars["String"][]|null),
/** Are approving reviews required to update matching branches. */
requiresApprovingReviews?: (Scalars["Boolean"]|null),
/** Are reviews from code owners required to update matching branches. */
requiresCodeOwnerReviews?: (Scalars["Boolean"]|null),
/** Are commits required to be signed. */
requiresCommitSignatures?: (Scalars["Boolean"]|null),
/** Are status checks required to update matching branches. */
requiresStatusChecks?: (Scalars["Boolean"]|null),
/** Are branches required to be up to date before merging. */
requiresStrictStatusChecks?: (Scalars["Boolean"]|null),
/** Is pushing to matching branches restricted. */
restrictsPushes?: (Scalars["Boolean"]|null),
/** Is dismissal of pull request reviews restricted. */
restrictsReviewDismissals?: (Scalars["Boolean"]|null),
/** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
reviewDismissalActorIds?: (Scalars["ID"][]|null)}


/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayloadRequest{
    /** The newly created BranchProtectionRule. */
    branchProtectionRule?: BranchProtectionRuleRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateCheckRun */
export interface CreateCheckRunInput{
/** Possible further actions the integrator can perform, which a user may trigger. */
actions?: (CheckRunAction[]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The time that the check run finished. */
completedAt?: (Scalars["DateTime"]|null),
/** The final conclusion of the check. */
conclusion?: (CheckConclusionState|null),
/** The URL of the integrator's site that has the full details of the check. */
detailsUrl?: (Scalars["URI"]|null),
/** A reference for the run on the integrator's system. */
externalId?: (Scalars["String"]|null),
/** The SHA of the head commit. */
headSha: Scalars["GitObjectID"],
/** The name of the check. */
name: Scalars["String"],
/** Descriptive details about the run. */
output?: (CheckRunOutput|null),
/** The node ID of the repository. */
repositoryId: Scalars["ID"],
/** The time that the check run began. */
startedAt?: (Scalars["DateTime"]|null),
/** The current status. */
status?: (RequestableCheckStatusState|null)}


/** Possible further actions the integrator can perform. */
export interface CheckRunAction{
/** A short explanation of what this action would do. */
description: Scalars["String"],
/** A reference for the action on the integrator's system. */
identifier: Scalars["String"],
/** The text to be displayed on a button in the web UI. */
label: Scalars["String"]}


/** Descriptive details about the check run. */
export interface CheckRunOutput{
/** The annotations that are made as part of the check run. */
annotations?: (CheckAnnotationData[]|null),
/** Images attached to the check run output displayed in the GitHub pull request UI. */
images?: (CheckRunOutputImage[]|null),
/** The summary of the check run (supports Commonmark). */
summary: Scalars["String"],
/** The details of the check run (supports Commonmark). */
text?: (Scalars["String"]|null),
/** A title to provide for this check run. */
title: Scalars["String"]}


/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationData{
/** Represents an annotation's information level */
annotationLevel: CheckAnnotationLevel,
/** The location of the annotation */
location: CheckAnnotationRange,
/** A short description of the feedback for these lines of code. */
message: Scalars["String"],
/** The path of the file to add an annotation to. */
path: Scalars["String"],
/** Details about this annotation. */
rawDetails?: (Scalars["String"]|null),
/** The title that represents the annotation. */
title?: (Scalars["String"]|null)}


/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationRange{
/** The ending column of the range. */
endColumn?: (Scalars["Int"]|null),
/** The ending line of the range. */
endLine: Scalars["Int"],
/** The starting column of the range. */
startColumn?: (Scalars["Int"]|null),
/** The starting line of the range. */
startLine: Scalars["Int"]}


/** Images attached to the check run output displayed in the GitHub pull request UI. */
export interface CheckRunOutputImage{
/** The alternative text for the image. */
alt: Scalars["String"],
/** A short image description. */
caption?: (Scalars["String"]|null),
/** The full URL of the image. */
imageUrl: Scalars["URI"]}


/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayloadRequest{
    /** The newly created check run. */
    checkRun?: CheckRunRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateCheckSuite */
export interface CreateCheckSuiteInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The SHA of the head commit. */
headSha: Scalars["GitObjectID"],
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayloadRequest{
    /** The newly created check suite. */
    checkSuite?: CheckSuiteRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateContentAttachment */
export interface CreateContentAttachmentInput{
/** The body of the content attachment, which may contain markdown. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The node ID of the content_reference. */
contentReferenceId: Scalars["ID"],
/** The title of the content attachment. */
title: Scalars["String"]}


/** Autogenerated return type of CreateContentAttachment */
export interface CreateContentAttachmentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The newly created content attachment. */
    contentAttachment?: ContentAttachmentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A content attachment */
export interface ContentAttachmentRequest{
    /** The body text of the content attachment. This parameter supports markdown. */
    body?: boolean|number
    /** The content reference that the content attachment is attached to. */
    contentReference?: ContentReferenceRequest
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The title of the content attachment. */
    title?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A content reference */
export interface ContentReferenceRequest{
    /** Identifies the primary key from the database. */
    databaseId?: boolean|number
    id?: boolean|number
    /** The reference of the content reference. */
    reference?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateDeployment */
export interface CreateDeploymentInput{
/** Attempt to automatically merge the default branch into the requested ref, defaults to true. */
autoMerge?: (Scalars["Boolean"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Short description of the deployment. */
description?: (Scalars["String"]|null),
/** Name for the target deployment environment. */
environment?: (Scalars["String"]|null),
/** JSON payload with extra information about the deployment. */
payload?: (Scalars["String"]|null),
/** The node ID of the ref to be deployed. */
refId: Scalars["ID"],
/** The node ID of the repository. */
repositoryId: Scalars["ID"],
/**
 * The status contexts to verify against commit status checks. To bypass required
 * contexts, pass an empty array. Defaults to all unique contexts.
 */
requiredContexts?: (Scalars["String"][]|null),
/** Specifies a task to execute. */
task?: (Scalars["String"]|null)}


/** Autogenerated return type of CreateDeployment */
export interface CreateDeploymentPayloadRequest{
    /** True if the default branch has been auto-merged into the deployment ref. */
    autoMerged?: boolean|number
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new deployment. */
    deployment?: DeploymentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateDeploymentStatus */
export interface CreateDeploymentStatusInput{
/**
 * Adds a new inactive status to all non-transient, non-production environment
 * deployments with the same repository and environment name as the created
 * status's deployment.
 */
autoInactive?: (Scalars["Boolean"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The node ID of the deployment. */
deploymentId: Scalars["ID"],
/** A short description of the status. Maximum length of 140 characters. */
description?: (Scalars["String"]|null),
/** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */
environment?: (Scalars["String"]|null),
/** Sets the URL for accessing your environment. */
environmentUrl?: (Scalars["String"]|null),
/**
 * The log URL to associate with this status.       This URL should contain
 * output to keep the user updated while the task is running       or serve as
 * historical information for what happened in the deployment.
 */
logUrl?: (Scalars["String"]|null),
/** The state of the deployment. */
state: DeploymentStatusState}


/** Autogenerated return type of CreateDeploymentStatus */
export interface CreateDeploymentStatusPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new deployment status. */
    deploymentStatus?: DeploymentStatusRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationInput{
/** The logins for the administrators of the new organization. */
adminLogins: Scalars["String"][],
/** The email used for sending billing receipts. */
billingEmail: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise owning the new organization. */
enterpriseId: Scalars["ID"],
/** The login of the new organization. */
login: Scalars["String"],
/** The profile name of the new organization. */
profileName: Scalars["String"]}


/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise that owns the created organization. */
    enterprise?: EnterpriseRequest
    /** The organization that was created. */
    organization?: OrganizationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryInput{
/** An IP address or range of addresses in CIDR notation. */
allowListValue: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Whether the IP allow list entry is active when an IP allow list is enabled. */
isActive: Scalars["Boolean"],
/** An optional name for the IP allow list entry. */
name?: (Scalars["String"]|null),
/** The ID of the owner for which to create the new IP allow list entry. */
ownerId: Scalars["ID"]}


/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The IP allow list entry that was created. */
    ipAllowListEntry?: IpAllowListEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateIssue */
export interface CreateIssueInput{
/** The Node ID for the user assignee for this issue. */
assigneeIds?: (Scalars["ID"][]|null),
/** The body for the issue description. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** An array of Node IDs of labels for this issue. */
labelIds?: (Scalars["ID"][]|null),
/** The Node ID of the milestone for this issue. */
milestoneId?: (Scalars["ID"]|null),
/** An array of Node IDs for projects associated with this issue. */
projectIds?: (Scalars["ID"][]|null),
/** The Node ID of the repository. */
repositoryId: Scalars["ID"],
/** The title for the issue. */
title: Scalars["String"]}


/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new issue. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateLabel */
export interface CreateLabelInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A 6 character hex code, without the leading #, identifying the color of the label. */
color: Scalars["String"],
/** A brief description of the label, such as its purpose. */
description?: (Scalars["String"]|null),
/** The name of the label. */
name: Scalars["String"],
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of CreateLabel */
export interface CreateLabelPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new label. */
    label?: LabelRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateProject */
export interface CreateProjectInput{
/** The description of project. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of project. */
name: Scalars["String"],
/** The owner ID to create the project under. */
ownerId: Scalars["ID"],
/** A list of repository IDs to create as linked repositories for the project */
repositoryIds?: (Scalars["ID"][]|null),
/** The name of the GitHub-provided template. */
template?: (ProjectTemplate|null)}


/** Autogenerated return type of CreateProject */
export interface CreateProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new project. */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreatePullRequest */
export interface CreatePullRequestInput{
/**
 * The name of the branch you want your changes pulled into. This should be an existing branch
 * on the current repository. You cannot update the base branch on a pull request to point
 * to another repository.
 */
baseRefName: Scalars["String"],
/** The contents of the pull request. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Indicates whether this pull request should be a draft. */
draft?: (Scalars["Boolean"]|null),
/**
 * The name of the branch where your changes are implemented. For cross-repository pull requests
 * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
 */
headRefName: Scalars["String"],
/** Indicates whether maintainers can modify the pull request. */
maintainerCanModify?: (Scalars["Boolean"]|null),
/** The Node ID of the repository. */
repositoryId: Scalars["ID"],
/** The title of the pull request. */
title: Scalars["String"]}


/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new pull request. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateRef */
export interface CreateRefInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
name: Scalars["String"],
/** The GitObjectID that the new Ref shall target. Must point to a commit. */
oid: Scalars["GitObjectID"],
/** The Node ID of the Repository to create the Ref in. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of CreateRef */
export interface CreateRefPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The newly created ref. */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateRepository */
export interface CreateRepositoryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A short description of the new repository. */
description?: (Scalars["String"]|null),
/** Indicates if the repository should have the issues feature enabled. */
hasIssuesEnabled?: (Scalars["Boolean"]|null),
/** Indicates if the repository should have the wiki feature enabled. */
hasWikiEnabled?: (Scalars["Boolean"]|null),
/** The URL for a web page about this repository. */
homepageUrl?: (Scalars["URI"]|null),
/** The name of the new repository. */
name: Scalars["String"],
/** The ID of the owner for the new repository. */
ownerId?: (Scalars["ID"]|null),
/**
 * When an organization is specified as the owner, this ID identifies the team
 * that should be granted access to the new repository.
 */
teamId?: (Scalars["ID"]|null),
/**
 * Whether this repository should be marked as a template such that anyone who
 * can access it can create new repositories with the same files and directory structure.
 */
template?: (Scalars["Boolean"]|null),
/** Indicates the repository's visibility level. */
visibility: RepositoryVisibility}


/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateTeamDiscussion */
export interface CreateTeamDiscussionInput{
/** The content of the discussion. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/**
 * If true, restricts the visiblity of this discussion to team members and
 * organization admins. If false or not specified, allows any organization member
 * to view this discussion.
 */
private?: (Scalars["Boolean"]|null),
/** The ID of the team to which the discussion belongs. */
teamId: Scalars["ID"],
/** The title of the discussion. */
title: Scalars["String"]}


/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new discussion. */
    teamDiscussion?: TeamDiscussionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentInput{
/** The content of the comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the discussion to which the comment belongs. */
discussionId: Scalars["ID"]}


/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new comment. */
    teamDiscussionComment?: TeamDiscussionCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of the suggested topic. */
name: Scalars["String"],
/** The reason why the suggested topic is declined. */
reason: TopicSuggestionDeclineReason,
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The declined topic. */
    topic?: TopicRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRuleInput{
/** The global relay id of the branch protection rule to be deleted. */
branchProtectionRuleId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null)}


/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteDeployment */
export interface DeleteDeploymentInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the deployment to be deleted. */
id: Scalars["ID"]}


/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the IP allow list entry to delete. */
ipAllowListEntryId: Scalars["ID"]}


/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The IP allow list entry that was deleted. */
    ipAllowListEntry?: IpAllowListEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteIssue */
export interface DeleteIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the issue to delete. */
issueId: Scalars["ID"]}


/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The repository the issue belonged to */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteIssueComment */
export interface DeleteIssueCommentInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the comment to delete. */
id: Scalars["ID"]}


/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteLabel */
export interface DeleteLabelInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the label to be deleted. */
id: Scalars["ID"]}


/** Autogenerated return type of DeleteLabel */
export interface DeleteLabelPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeletePackageVersion */
export interface DeletePackageVersionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the package version to be deleted. */
packageVersionId: Scalars["ID"]}


/** Autogenerated return type of DeletePackageVersion */
export interface DeletePackageVersionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** Whether or not the operation succeeded. */
    success?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteProject */
export interface DeleteProjectInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Project ID to update. */
projectId: Scalars["ID"]}


/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The repository or organization the project was removed from. */
    owner?: ProjectOwnerRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteProjectCard */
export interface DeleteProjectCardInput{
/** The id of the card to delete. */
cardId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null)}


/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The column the deleted card was in. */
    column?: ProjectColumnRequest
    /** The deleted card ID. */
    deletedCardId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteProjectColumn */
export interface DeleteProjectColumnInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The id of the column to delete. */
columnId: Scalars["ID"]}


/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The deleted column ID. */
    deletedColumnId?: boolean|number
    /** The project the deleted column was in. */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeletePullRequestReview */
export interface DeletePullRequestReviewInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the pull request review to delete. */
pullRequestReviewId: Scalars["ID"]}


/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The deleted pull request review. */
    pullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the comment to delete. */
id: Scalars["ID"]}


/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request review the deleted comment belonged to. */
    pullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteRef */
export interface DeleteRefInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the Ref to be deleted. */
refId: Scalars["ID"]}


/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The discussion ID to delete. */
id: Scalars["ID"]}


/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the comment to delete. */
id: Scalars["ID"]}


/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of DismissPullRequestReview */
export interface DismissPullRequestReviewInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The contents of the pull request review dismissal message. */
message: Scalars["String"],
/** The Node ID of the pull request review to modify. */
pullRequestReviewId: Scalars["ID"]}


/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The dismissed pull request review. */
    pullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of FollowUser */
export interface FollowUserInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the user to follow. */
userId: Scalars["ID"]}


/** Autogenerated return type of FollowUser */
export interface FollowUserPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The user that was followed. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ImportProject */
export interface ImportProjectInput{
/** The description of Project. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A list of columns containing issues and pull requests. */
columnImports: ProjectColumnImport[],
/** The name of Project. */
name: Scalars["String"],
/** The name of the Organization or User to create the Project under. */
ownerName: Scalars["String"],
/** Whether the Project is public or not. */
public?: (Scalars["Boolean"]|null)}


/** A project column and a list of its issues and PRs. */
export interface ProjectColumnImport{
/** The name of the column. */
columnName: Scalars["String"],
/** A list of issues and pull requests in the column. */
issues?: (ProjectCardImport[]|null),
/** The position of the column, starting from 0. */
position: Scalars["Int"]}


/** An issue or PR and its owning repository to be used in a project card. */
export interface ProjectCardImport{
/** The issue or pull request number. */
number: Scalars["Int"],
/** Repository name with owner (owner/repository). */
repository: Scalars["String"]}


/** Autogenerated return type of ImportProject */
export interface ImportProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new Project! */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The email of the person to invite as an administrator. */
email?: (Scalars["String"]|null),
/** The ID of the enterprise to which you want to invite an administrator. */
enterpriseId: Scalars["ID"],
/** The login of a user to invite as an administrator. */
invitee?: (Scalars["String"]|null),
/** The role of the administrator. */
role?: (EnterpriseAdministratorRole|null)}


/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The created enterprise administrator invitation. */
    invitation?: EnterpriseAdministratorInvitationRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the Project to link to a Repository */
projectId: Scalars["ID"],
/** The ID of the Repository to link to a Project. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The linked Project. */
    project?: ProjectRequest
    /** The linked Repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of LockLockable */
export interface LockLockableInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A reason for why the issue or pull request will be locked. */
lockReason?: (LockReason|null),
/** ID of the issue or pull request to be locked. */
lockableId: Scalars["ID"]}


/** Autogenerated return type of LockLockable */
export interface LockLockablePayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The item that was locked. */
    lockedRecord?: LockableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the pull request to be marked as ready for review. */
pullRequestId: Scalars["ID"]}


/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request that is ready for review. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MergeBranch */
export interface MergeBranchInput{
/** The name of the base branch that the provided head will be merged into. */
base: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Message to use for the merge commit. If omitted, a default will be used. */
commitMessage?: (Scalars["String"]|null),
/** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
head: Scalars["String"],
/** The Node ID of the Repository containing the base branch that will be modified. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The resulting merge Commit. */
    mergeCommit?: CommitRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MergePullRequest */
export interface MergePullRequestInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Commit body to use for the merge commit; if omitted, a default message will be used */
commitBody?: (Scalars["String"]|null),
/** Commit headline to use for the merge commit; if omitted, a default message will be used. */
commitHeadline?: (Scalars["String"]|null),
/** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
expectedHeadOid?: (Scalars["GitObjectID"]|null),
/** The merge method to use. If omitted, defaults to 'MERGE' */
mergeMethod?: (PullRequestMergeMethod|null),
/** ID of the pull request to be merged. */
pullRequestId: Scalars["ID"]}


/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request that was merged. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MinimizeComment */
export interface MinimizeCommentInput{
/** The classification of comment */
classifier: ReportedContentClassifiers,
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the subject to modify. */
subjectId: Scalars["ID"]}


/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The comment that was minimized. */
    minimizedComment?: MinimizableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MoveProjectCard */
export interface MoveProjectCardInput{
/** Place the new card after the card with this id. Pass null to place it at the top. */
afterCardId?: (Scalars["ID"]|null),
/** The id of the card to move. */
cardId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The id of the column to move it into. */
columnId: Scalars["ID"]}


/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayloadRequest{
    /** The new edge of the moved card. */
    cardEdge?: ProjectCardEdgeRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of MoveProjectColumn */
export interface MoveProjectColumnInput{
/** Place the new column after the column with this id. Pass null to place it at the front. */
afterColumnId?: (Scalars["ID"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The id of the column to move. */
columnId: Scalars["ID"]}


/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The new edge of the moved column. */
    columnEdge?: ProjectColumnEdgeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of PinIssue */
export interface PinIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the issue to be pinned */
issueId: Scalars["ID"]}


/** Autogenerated return type of PinIssue */
export interface PinIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue that was pinned */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set an identity provider. */
enterpriseId: Scalars["ID"]}


/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The identity provider for the enterprise. */
    identityProvider?: EnterpriseIdentityProviderRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignableInput{
/** The id of the assignable object to remove assignees from. */
assignableId: Scalars["ID"],
/** The id of users to remove as assignees. */
assigneeIds: Scalars["ID"][],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null)}


/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayloadRequest{
    /** The item that was unassigned. */
    assignable?: AssignableRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Enterprise ID from which to remove the administrator. */
enterpriseId: Scalars["ID"],
/** The login of the user to remove as an administrator. */
login: Scalars["String"]}


/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayloadRequest{
    /** The user who was removed as an administrator. */
    admin?: UserRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated enterprise. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of removing an administrator. */
    message?: boolean|number
    /** The viewer performing the mutation. */
    viewer?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise from which to remove the identity provider. */
enterpriseId: Scalars["ID"]}


/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The identity provider that was removed from the enterprise. */
    identityProvider?: EnterpriseIdentityProviderRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise from which the organization should be removed. */
enterpriseId: Scalars["ID"],
/** The ID of the organization to remove from the enterprise. */
organizationId: Scalars["ID"]}


/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated enterprise. */
    enterprise?: EnterpriseRequest
    /** The organization that was removed from the enterprise. */
    organization?: OrganizationRequest
    /** The viewer performing the mutation. */
    viewer?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelableInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ids of labels to remove. */
labelIds: Scalars["ID"][],
/** The id of the Labelable to remove labels from. */
labelableId: Scalars["ID"]}


/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The Labelable the labels were removed from. */
    labelable?: LabelableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the organization to remove the outside collaborator from. */
organizationId: Scalars["ID"],
/** The ID of the outside collaborator to remove. */
userId: Scalars["ID"]}


/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The user that was removed as an outside collaborator. */
    removedUser?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveReaction */
export interface RemoveReactionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of the emoji reaction to remove. */
content: ReactionContent,
/** The Node ID of the subject to modify. */
subjectId: Scalars["ID"]}


/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The reaction object. */
    reaction?: ReactionRequest
    /** The reactable subject. */
    subject?: ReactableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RemoveStar */
export interface RemoveStarInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Starrable ID to unstar. */
starrableId: Scalars["ID"]}


/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The starrable. */
    starrable?: StarrableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ReopenIssue */
export interface ReopenIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the issue to be opened. */
issueId: Scalars["ID"]}


/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue that was opened. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ReopenPullRequest */
export interface ReopenPullRequestInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the pull request to be reopened. */
pullRequestId: Scalars["ID"]}


/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request that was reopened. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RequestReviews */
export interface RequestReviewsInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the pull request to modify. */
pullRequestId: Scalars["ID"],
/** The Node IDs of the team to request. */
teamIds?: (Scalars["ID"][]|null),
/** Add users to the set rather than replace. */
union?: (Scalars["Boolean"]|null),
/** The Node IDs of the user to request. */
userIds?: (Scalars["ID"][]|null)}


/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The pull request that is getting requests. */
    pullRequest?: PullRequestRequest
    /** The edge from the pull request to the requested reviewers. */
    requestedReviewersEdge?: UserEdgeRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of RerequestCheckSuite */
export interface RerequestCheckSuiteInput{
/** The Node ID of the check suite. */
checkSuiteId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayloadRequest{
    /** The requested check suite. */
    checkSuite?: CheckSuiteRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of ResolveReviewThread */
export interface ResolveReviewThreadInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the thread to resolve */
threadId: Scalars["ID"]}


/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The thread to resolve. */
    thread?: PullRequestReviewThreadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The digest algorithm used to sign SAML requests for the identity provider. */
digestMethod: SamlDigestAlgorithm,
/** The ID of the enterprise on which to set an identity provider. */
enterpriseId: Scalars["ID"],
/** The x509 certificate used by the identity provider to sign assertions and responses. */
idpCertificate: Scalars["String"],
/** The Issuer Entity ID for the SAML identity provider */
issuer?: (Scalars["String"]|null),
/** The signature algorithm used to sign SAML requests for the identity provider. */
signatureMethod: SamlSignatureAlgorithm,
/** The URL endpoint for the identity provider's SAML SSO. */
ssoUrl: Scalars["URI"]}


/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The identity provider for the enterprise. */
    identityProvider?: EnterpriseIdentityProviderRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewInput{
/** The text field to set on the Pull Request Review. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The event to send to the Pull Request Review. */
event: PullRequestReviewEvent,
/** The Pull Request ID to submit any pending reviews. */
pullRequestId?: (Scalars["ID"]|null),
/** The Pull Request Review ID to submit. */
pullRequestReviewId?: (Scalars["ID"]|null)}


/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The submitted pull request review. */
    pullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of TransferIssue */
export interface TransferIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the issue to be transferred */
issueId: Scalars["ID"],
/** The Node ID of the repository the issue should be transferred to */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue that was transferred */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnarchiveRepository */
export interface UnarchiveRepositoryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the repository to unarchive. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The repository that was unarchived. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnfollowUser */
export interface UnfollowUserInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the user to unfollow. */
userId: Scalars["ID"]}


/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The user that was unfollowed. */
    user?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the Project linked to the Repository. */
projectId: Scalars["ID"],
/** The ID of the Repository linked to the Project. */
repositoryId: Scalars["ID"]}


/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The linked Project. */
    project?: ProjectRequest
    /** The linked Repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnlockLockable */
export interface UnlockLockableInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the issue or pull request to be unlocked. */
lockableId: Scalars["ID"]}


/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The item that was unlocked. */
    unlockedRecord?: LockableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicateInput{
/** ID of the issue or pull request currently considered canonical/authoritative/original. */
canonicalId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** ID of the issue or pull request currently marked as a duplicate. */
duplicateId: Scalars["ID"]}


/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue or pull request that was marked as a duplicate. */
    duplicate?: IssueOrPullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnminimizeComment */
export interface UnminimizeCommentInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the subject to modify. */
subjectId: Scalars["ID"]}


/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The comment that was unminimized. */
    unminimizedComment?: MinimizableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnpinIssue */
export interface UnpinIssueInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the issue to be unpinned */
issueId: Scalars["ID"]}


/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue that was unpinned */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UnresolveReviewThread */
export interface UnresolveReviewThreadInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the thread to unresolve */
threadId: Scalars["ID"]}


/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The thread to resolve. */
    thread?: PullRequestReviewThreadRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRuleInput{
/** The global relay id of the branch protection rule to be updated. */
branchProtectionRuleId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Will new commits pushed to matching branches dismiss pull request review approvals. */
dismissesStaleReviews?: (Scalars["Boolean"]|null),
/** Can admins overwrite branch protection. */
isAdminEnforced?: (Scalars["Boolean"]|null),
/** The glob-like pattern used to determine matching branches. */
pattern?: (Scalars["String"]|null),
/** A list of User, Team or App IDs allowed to push to matching branches. */
pushActorIds?: (Scalars["ID"][]|null),
/** Number of approving reviews required to update matching branches. */
requiredApprovingReviewCount?: (Scalars["Int"]|null),
/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
requiredStatusCheckContexts?: (Scalars["String"][]|null),
/** Are approving reviews required to update matching branches. */
requiresApprovingReviews?: (Scalars["Boolean"]|null),
/** Are reviews from code owners required to update matching branches. */
requiresCodeOwnerReviews?: (Scalars["Boolean"]|null),
/** Are commits required to be signed. */
requiresCommitSignatures?: (Scalars["Boolean"]|null),
/** Are status checks required to update matching branches. */
requiresStatusChecks?: (Scalars["Boolean"]|null),
/** Are branches required to be up to date before merging. */
requiresStrictStatusChecks?: (Scalars["Boolean"]|null),
/** Is pushing to matching branches restricted. */
restrictsPushes?: (Scalars["Boolean"]|null),
/** Is dismissal of pull request reviews restricted. */
restrictsReviewDismissals?: (Scalars["Boolean"]|null),
/** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
reviewDismissalActorIds?: (Scalars["ID"][]|null)}


/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayloadRequest{
    /** The newly created BranchProtectionRule. */
    branchProtectionRule?: BranchProtectionRuleRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateCheckRun */
export interface UpdateCheckRunInput{
/** Possible further actions the integrator can perform, which a user may trigger. */
actions?: (CheckRunAction[]|null),
/** The node of the check. */
checkRunId: Scalars["ID"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The time that the check run finished. */
completedAt?: (Scalars["DateTime"]|null),
/** The final conclusion of the check. */
conclusion?: (CheckConclusionState|null),
/** The URL of the integrator's site that has the full details of the check. */
detailsUrl?: (Scalars["URI"]|null),
/** A reference for the run on the integrator's system. */
externalId?: (Scalars["String"]|null),
/** The name of the check. */
name?: (Scalars["String"]|null),
/** Descriptive details about the run. */
output?: (CheckRunOutput|null),
/** The node ID of the repository. */
repositoryId: Scalars["ID"],
/** The time that the check run began. */
startedAt?: (Scalars["DateTime"]|null),
/** The current status. */
status?: (RequestableCheckStatusState|null)}


/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayloadRequest{
    /** The updated check run. */
    checkRun?: CheckRunRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesInput{
/** The check suite preferences to modify. */
autoTriggerPreferences: CheckSuiteAutoTriggerPreference[],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** The auto-trigger preferences that are available for check suites. */
export interface CheckSuiteAutoTriggerPreference{
/** The node ID of the application that owns the check suite. */
appId: Scalars["ID"],
/** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
setting: Scalars["Boolean"]}


/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseActionExecutionCapabilitySetting */
export interface UpdateEnterpriseActionExecutionCapabilitySettingInput{
/** The value for the action execution capability setting on the enterprise. */
capability: ActionExecutionCapabilitySetting,
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can create repositories setting. */
enterpriseId: Scalars["ID"]}


/** Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting */
export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated action execution capability setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the action execution capability setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRoleInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the Enterprise which the admin belongs to. */
enterpriseId: Scalars["ID"],
/** The login of a administrator whose role is being changed. */
login: Scalars["String"],
/** The new role for the Enterprise administrator. */
role: EnterpriseAdministratorRole}


/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** A message confirming the result of changing the administrator's role. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the allow private repository forking setting. */
enterpriseId: Scalars["ID"],
/** The value for the allow private repository forking setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated allow private repository forking setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the allow private repository forking setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the default repository permission setting. */
enterpriseId: Scalars["ID"],
/** The value for the default repository permission setting on the enterprise. */
settingValue: EnterpriseDefaultRepositoryPermissionSettingValue}


/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated default repository permission setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the default repository permission setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can change repository visibility setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can change repository visibility setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can change repository visibility setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can change repository visibility setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can create repositories setting. */
enterpriseId: Scalars["ID"],
/** Allow members to create internal repositories. Defaults to current value. */
membersCanCreateInternalRepositories?: (Scalars["Boolean"]|null),
/** Allow members to create private repositories. Defaults to current value. */
membersCanCreatePrivateRepositories?: (Scalars["Boolean"]|null),
/** Allow members to create public repositories. Defaults to current value. */
membersCanCreatePublicRepositories?: (Scalars["Boolean"]|null),
/** When false, allow member organizations to set their own repository creation member privileges. */
membersCanCreateRepositoriesPolicyEnabled?: (Scalars["Boolean"]|null),
/**
 * Value for the members can create repositories setting on the enterprise. This
 * or the granular public/private/internal allowed fields (but not both) must be provided.
 */
settingValue?: (EnterpriseMembersCanCreateRepositoriesSettingValue|null)}


/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can create repositories setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can create repositories setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can delete issues setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can delete issues setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can delete issues setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can delete issues setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can delete repositories setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can delete repositories setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can delete repositories setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can delete repositories setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can invite collaborators setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can invite collaborators setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can invite collaborators setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can invite collaborators setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can make purchases setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can make purchases setting on the enterprise. */
settingValue: EnterpriseMembersCanMakePurchasesSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can make purchases setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can make purchases setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can update protected branches setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can update protected branches setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can update protected branches setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can update protected branches setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the members can view dependency insights setting. */
enterpriseId: Scalars["ID"],
/** The value for the members can view dependency insights setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated members can view dependency insights setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the members can view dependency insights setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the organization projects setting. */
enterpriseId: Scalars["ID"],
/** The value for the organization projects setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated organization projects setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the organization projects setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfileInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The description of the enterprise. */
description?: (Scalars["String"]|null),
/** The Enterprise ID to update. */
enterpriseId: Scalars["ID"],
/** The location of the enterprise. */
location?: (Scalars["String"]|null),
/** The name of the enterprise. */
name?: (Scalars["String"]|null),
/** The URL of the enterprise's website. */
websiteUrl?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated enterprise. */
    enterprise?: EnterpriseRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the repository projects setting. */
enterpriseId: Scalars["ID"],
/** The value for the repository projects setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated repository projects setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the repository projects setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the team discussions setting. */
enterpriseId: Scalars["ID"],
/** The value for the team discussions setting on the enterprise. */
settingValue: EnterpriseEnabledDisabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated team discussions setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the team discussions setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the enterprise on which to set the two factor authentication required setting. */
enterpriseId: Scalars["ID"],
/** The value for the two factor authentication required setting on the enterprise. */
settingValue: EnterpriseEnabledSettingValue}


/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The enterprise with the updated two factor authentication required setting. */
    enterprise?: EnterpriseRequest
    /** A message confirming the result of updating the two factor authentication required setting. */
    message?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the owner on which to set the IP allow list enabled setting. */
ownerId: Scalars["ID"],
/** The value for the IP allow list enabled setting. */
settingValue: IpAllowListEnabledSettingValue}


/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The IP allow list owner on which the setting was updated. */
    owner?: IpAllowListOwnerRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryInput{
/** An IP address or range of addresses in CIDR notation. */
allowListValue: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the IP allow list entry to update. */
ipAllowListEntryId: Scalars["ID"],
/** Whether the IP allow list entry is active when an IP allow list is enabled. */
isActive: Scalars["Boolean"],
/** An optional name for the IP allow list entry. */
name?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The IP allow list entry that was updated. */
    ipAllowListEntry?: IpAllowListEntryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateIssue */
export interface UpdateIssueInput{
/** An array of Node IDs of users for this issue. */
assigneeIds?: (Scalars["ID"][]|null),
/** The body for the issue description. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the Issue to modify. */
id: Scalars["ID"],
/** An array of Node IDs of labels for this issue. */
labelIds?: (Scalars["ID"][]|null),
/** The Node ID of the milestone for this issue. */
milestoneId?: (Scalars["ID"]|null),
/** An array of Node IDs for projects associated with this issue. */
projectIds?: (Scalars["ID"][]|null),
/** The desired issue state. */
state?: (IssueState|null),
/** The title for the issue. */
title?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The issue. */
    issue?: IssueRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateIssueComment */
export interface UpdateIssueCommentInput{
/** The updated text of the comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the IssueComment to modify. */
id: Scalars["ID"]}


/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated comment. */
    issueComment?: IssueCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateLabel */
export interface UpdateLabelInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A 6 character hex code, without the leading #, identifying the updated color of the label. */
color?: (Scalars["String"]|null),
/** A brief description of the label, such as its purpose. */
description?: (Scalars["String"]|null),
/** The Node ID of the label to be updated. */
id: Scalars["ID"],
/** The updated name of the label. */
name?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdateLabel */
export interface UpdateLabelPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated label. */
    label?: LabelRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateProject */
export interface UpdateProjectInput{
/** The description of project. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of project. */
name?: (Scalars["String"]|null),
/** The Project ID to update. */
projectId: Scalars["ID"],
/** Whether the project is public or not. */
public?: (Scalars["Boolean"]|null),
/** Whether the project is open or closed. */
state?: (ProjectState|null)}


/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated project. */
    project?: ProjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateProjectCard */
export interface UpdateProjectCardInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Whether or not the ProjectCard should be archived */
isArchived?: (Scalars["Boolean"]|null),
/** The note of ProjectCard. */
note?: (Scalars["String"]|null),
/** The ProjectCard ID to update. */
projectCardId: Scalars["ID"]}


/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated ProjectCard. */
    projectCard?: ProjectCardRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateProjectColumn */
export interface UpdateProjectColumnInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The name of project column. */
name: Scalars["String"],
/** The ProjectColumn ID to update. */
projectColumnId: Scalars["ID"]}


/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated project column. */
    projectColumn?: ProjectColumnRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdatePullRequest */
export interface UpdatePullRequestInput{
/** An array of Node IDs of users for this pull request. */
assigneeIds?: (Scalars["ID"][]|null),
/**
 * The name of the branch you want your changes pulled into. This should be an existing branch
 * on the current repository.
 */
baseRefName?: (Scalars["String"]|null),
/** The contents of the pull request. */
body?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** An array of Node IDs of labels for this pull request. */
labelIds?: (Scalars["ID"][]|null),
/** Indicates whether maintainers can modify the pull request. */
maintainerCanModify?: (Scalars["Boolean"]|null),
/** The Node ID of the milestone for this pull request. */
milestoneId?: (Scalars["ID"]|null),
/** An array of Node IDs for projects associated with this pull request. */
projectIds?: (Scalars["ID"][]|null),
/** The Node ID of the pull request. */
pullRequestId: Scalars["ID"],
/** The target state of the pull request. */
state?: (PullRequestUpdateState|null),
/** The title of the pull request. */
title?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayloadRequest{
    /** Identifies the actor who performed the event. */
    actor?: ActorRequest
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated pull request. */
    pullRequest?: PullRequestRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewInput{
/** The contents of the pull request review body. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the pull request review to modify. */
pullRequestReviewId: Scalars["ID"]}


/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated pull request review. */
    pullRequestReview?: PullRequestReviewRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentInput{
/** The text of the comment. */
body: Scalars["String"],
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the comment to modify. */
pullRequestReviewCommentId: Scalars["ID"]}


/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated comment. */
    pullRequestReviewComment?: PullRequestReviewCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateRef */
export interface UpdateRefInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Permit updates of branch Refs that are not fast-forwards? */
force?: (Scalars["Boolean"]|null),
/** The GitObjectID that the Ref shall be updated to target. */
oid: Scalars["GitObjectID"],
/** The Node ID of the Ref to be updated. */
refId: Scalars["ID"]}


/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated Ref. */
    ref?: RefRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateRefs */
export interface UpdateRefsInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A list of ref updates. */
refUpdates: RefUpdate[],
/** The Node ID of the repository. */
repositoryId: Scalars["ID"]}


/** A ref update */
export interface RefUpdate{
/** The value this ref should be updated to. */
afterOid: Scalars["GitObjectID"],
/** The value this ref needs to point to before the update. */
beforeOid?: (Scalars["GitObjectID"]|null),
/** Force a non fast-forward update. */
force?: (Scalars["Boolean"]|null),
/** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */
name: Scalars["GitRefname"]}


/** Autogenerated return type of UpdateRefs */
export interface UpdateRefsPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateRepository */
export interface UpdateRepositoryInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** A new description for the repository. Pass an empty string to erase the existing description. */
description?: (Scalars["String"]|null),
/** Indicates if the repository should have the issues feature enabled. */
hasIssuesEnabled?: (Scalars["Boolean"]|null),
/** Indicates if the repository should have the project boards feature enabled. */
hasProjectsEnabled?: (Scalars["Boolean"]|null),
/** Indicates if the repository should have the wiki feature enabled. */
hasWikiEnabled?: (Scalars["Boolean"]|null),
/** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
homepageUrl?: (Scalars["URI"]|null),
/** The new name of the repository. */
name?: (Scalars["String"]|null),
/** The ID of the repository to update. */
repositoryId: Scalars["ID"],
/**
 * Whether this repository should be marked as a template such that anyone who
 * can access it can create new repositories with the same files and directory structure.
 */
template?: (Scalars["Boolean"]|null)}


/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateSubscription */
export interface UpdateSubscriptionInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The new state of the subscription. */
state: SubscriptionState,
/** The Node ID of the subscribable object to modify. */
subscribableId: Scalars["ID"]}


/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The input subscribable entity. */
    subscribable?: SubscribableRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionInput{
/** The updated text of the discussion. */
body?: (Scalars["String"]|null),
/**
 * The current version of the body content. If provided, this update operation
 * will be rejected if the given version does not match the latest version on the server.
 */
bodyVersion?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the discussion to modify. */
id: Scalars["ID"],
/** If provided, sets the pinned state of the updated discussion. */
pinned?: (Scalars["Boolean"]|null),
/** The updated title of the discussion. */
title?: (Scalars["String"]|null)}


/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated discussion. */
    teamDiscussion?: TeamDiscussionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentInput{
/** The updated text of the comment. */
body: Scalars["String"],
/** The current version of the body content. */
bodyVersion?: (Scalars["String"]|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The ID of the comment to modify. */
id: Scalars["ID"]}


/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The updated comment. */
    teamDiscussionComment?: TeamDiscussionCommentRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentInput{
/** The algorithm to use for review assignment */
algorithm?: (TeamReviewAssignmentAlgorithm|null),
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** Turn on or off review assignment */
enabled: Scalars["Boolean"],
/** An array of team member IDs to exclude */
excludedTeamMemberIds?: (Scalars["ID"][]|null),
/** The Node ID of the team to update review assginments of */
id: Scalars["ID"],
/** Notify the entire team of the PR if it is delegated */
notifyTeam?: (Scalars["Boolean"]|null),
/** The number of team members to assign */
teamMemberCount?: (Scalars["Int"]|null)}


/** Autogenerated return type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** The team that was modified */
    team?: TeamRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Autogenerated input type of UpdateTopics */
export interface UpdateTopicsInput{
/** A unique identifier for the client performing the mutation. */
clientMutationId?: (Scalars["String"]|null),
/** The Node ID of the repository. */
repositoryId: Scalars["ID"],
/** An array of topic names. */
topicNames: Scalars["String"][]}


/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayloadRequest{
    /** A unique identifier for the client performing the mutation. */
    clientMutationId?: boolean|number
    /** Names of the provided topics that are not valid. */
    invalidTopicNames?: boolean|number
    /** The updated repository. */
    repository?: RepositoryRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git blob. */
export interface BlobRequest{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid?: boolean|number
    /** Byte size of Blob object */
    byteSize?: boolean|number
    /** The HTTP path for this Git object */
    commitResourcePath?: boolean|number
    /** The HTTP URL for this Git object */
    commitUrl?: boolean|number
    id?: boolean|number
    /**
     * Indicates whether the Blob is binary or text
     * 
     * **Upcoming Change on 2019-07-01 UTC**
     * **Description:** Type for `isBinary` will change from `Boolean!` to `Boolean`.
     * **Reason:** The `isBinary` field may return `null` when it cannot determine if a Blob is binary.
     */
    isBinary?: boolean|number
    /** Indicates whether the contents is truncated */
    isTruncated?: boolean|number
    /** The Git object ID */
    oid?: boolean|number
    /** The Repository the Git object belongs to */
    repository?: RepositoryRequest
    /** UTF8 text data or null if the Blob is binary */
    text?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A generic hovercard context with a message and icon */
export interface GenericHovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignatureRequest{
    /** Email used to sign this object. */
    email?: boolean|number
    /** True if the signature is valid and verified by GitHub. */
    isValid?: boolean|number
    /** Hex-encoded ID of the key that signed this object. */
    keyId?: boolean|number
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload?: boolean|number
    /** ASCII-armored signature header from object. */
    signature?: boolean|number
    /** GitHub user corresponding to the email signing this commit. */
    signer?: UserRequest
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state?: boolean|number
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    /** Teams in this organization the user is a member of that are relevant */
    relevantTeams?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},TeamConnectionRequest]|TeamConnectionRequest
    /** The path for the full team list for this user */
    teamsResourcePath?: boolean|number
    /** The URL for the full team list for this user */
    teamsUrl?: boolean|number
    /** The total number of teams the user is on in the organization */
    totalTeamCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** An organization list hovercard context */
export interface OrganizationsHovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    /** Organizations this user is a member of that are relevant */
    relevantOrganizations?: [{
    /** Returns the elements in the list that come after the specified cursor. */
    after?: (Scalars["String"]|null),
    /** Returns the elements in the list that come before the specified cursor. */
    before?: (Scalars["String"]|null),
    /** Returns the first _n_ elements from the list. */
    first?: (Scalars["Int"]|null),
    /** Returns the last _n_ elements from the list. */
    last?: (Scalars["Int"]|null)},OrganizationConnectionRequest]|OrganizationConnectionRequest
    /** The total number of organizations this user is in */
    totalOrganizationCount?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTagRequest{
    id?: boolean|number
    /** Identifies the tag name of the version. */
    name?: boolean|number
    /** Version that the tag is associated with. */
    version?: PackageVersionRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface ReviewStatusHovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    /** The current status of the pull request with respect to code review. */
    reviewDecision?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignatureRequest{
    /** Email used to sign this object. */
    email?: boolean|number
    /** True if the signature is valid and verified by GitHub. */
    isValid?: boolean|number
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload?: boolean|number
    /** ASCII-armored signature header from object. */
    signature?: boolean|number
    /** GitHub user corresponding to the email signing this commit. */
    signer?: UserRequest
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state?: boolean|number
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents a Git tag. */
export interface TagRequest{
    /** An abbreviated version of the Git object ID */
    abbreviatedOid?: boolean|number
    /** The HTTP path for this Git object */
    commitResourcePath?: boolean|number
    /** The HTTP URL for this Git object */
    commitUrl?: boolean|number
    id?: boolean|number
    /** The Git tag message. */
    message?: boolean|number
    /** The Git tag name. */
    name?: boolean|number
    /** The Git object ID */
    oid?: boolean|number
    /** The Repository the Git object belongs to */
    repository?: RepositoryRequest
    /** Details about the tag author. */
    tagger?: GitActorRequest
    /** The Git object the tag points to. */
    target?: GitObjectRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignatureRequest{
    /** Email used to sign this object. */
    email?: boolean|number
    /** True if the signature is valid and verified by GitHub. */
    isValid?: boolean|number
    /** Payload for GPG signing object. Raw ODB object without the signature header. */
    payload?: boolean|number
    /** ASCII-armored signature header from object. */
    signature?: boolean|number
    /** GitHub user corresponding to the email signing this commit. */
    signer?: UserRequest
    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    state?: boolean|number
    /** True if the signature was made with GitHub's signing key. */
    wasSignedByGitHub?: boolean|number
    __typename?: boolean|number
    __scalar?: boolean|number
}


/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContextRequest{
    /** A string describing this context */
    message?: boolean|number
    /** An octicon to accompany this context */
    octicon?: boolean|number
    /** Identifies the user who is related to this context. */
    viewer?: UserRequest
    __typename?: boolean|number
    __scalar?: boolean|number
}


const Query_possibleTypes = ['Query']
export const isQuery = (obj: { __typename: string }): obj is Query => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Query_possibleTypes.includes(obj.__typename)
}



const CodeOfConduct_possibleTypes = ['CodeOfConduct']
export const isCodeOfConduct = (obj: { __typename: string }): obj is CodeOfConduct => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CodeOfConduct_possibleTypes.includes(obj.__typename)
}



const Node_possibleTypes = ['CodeOfConduct','Enterprise','EnterpriseUserAccount','Organization','UserStatus','User','Package','PackageVersion','PackageFile','Release','ReleaseAsset','Ref','PullRequest','UserContentEdit','Label','Issue','Reaction','Repository','Project','ProjectColumn','ProjectCard','RegistryPackage','RegistryPackageVersion','RegistryPackageDependency','RegistryPackageFile','RegistryPackageTag','Topic','License','BranchProtectionRule','PushAllowance','App','Team','TeamDiscussion','TeamDiscussionComment','OrganizationInvitation','ReviewDismissalAllowance','CommitComment','Commit','CheckSuite','CheckRun','Push','Deployment','DeploymentStatus','Status','StatusContext','StatusCheckRollup','Tree','DependencyGraphManifest','DeployKey','Language','Milestone','PinnedIssue','RepositoryTopic','RepositoryVulnerabilityAlert','SecurityAdvisory','IssueComment','AssignedEvent','Bot','Mannequin','ClosedEvent','CrossReferencedEvent','DemilestonedEvent','LabeledEvent','LockedEvent','MilestonedEvent','ReferencedEvent','RenamedTitleEvent','ReopenedEvent','SubscribedEvent','TransferredEvent','UnassignedEvent','UnlabeledEvent','UnlockedEvent','UnsubscribedEvent','UserBlockedEvent','AddedToProjectEvent','CommentDeletedEvent','ConnectedEvent','ConvertedNoteToIssueEvent','DisconnectedEvent','MarkedAsDuplicateEvent','MentionedEvent','MovedColumnsInProjectEvent','PinnedEvent','RemovedFromProjectEvent','UnmarkedAsDuplicateEvent','UnpinnedEvent','PullRequestCommit','ReviewRequest','PullRequestReviewThread','PullRequestReviewComment','PullRequestReview','BaseRefForcePushedEvent','CommitCommentThread','DeployedEvent','DeploymentEnvironmentChangedEvent','HeadRefDeletedEvent','HeadRefForcePushedEvent','HeadRefRestoredEvent','MergedEvent','ReviewDismissedEvent','ReviewRequestRemovedEvent','ReviewRequestedEvent','AutomaticBaseChangeFailedEvent','AutomaticBaseChangeSucceededEvent','BaseRefChangedEvent','ConvertToDraftEvent','PullRequestCommitCommentThread','ReadyForReviewEvent','Gist','GistComment','SponsorsListing','SponsorsTier','Sponsorship','PublicKey','SavedReply','MembersCanDeleteReposClearAuditEntry','MembersCanDeleteReposDisableAuditEntry','MembersCanDeleteReposEnableAuditEntry','OauthApplicationCreateAuditEntry','OrgAddBillingManagerAuditEntry','OrgAddMemberAuditEntry','OrgBlockUserAuditEntry','OrgConfigDisableCollaboratorsOnlyAuditEntry','OrgConfigEnableCollaboratorsOnlyAuditEntry','OrgCreateAuditEntry','OrgDisableOauthAppRestrictionsAuditEntry','OrgDisableSamlAuditEntry','OrgDisableTwoFactorRequirementAuditEntry','OrgEnableOauthAppRestrictionsAuditEntry','OrgEnableSamlAuditEntry','OrgEnableTwoFactorRequirementAuditEntry','OrgInviteMemberAuditEntry','OrgInviteToBusinessAuditEntry','OrgOauthAppAccessApprovedAuditEntry','OrgOauthAppAccessDeniedAuditEntry','OrgOauthAppAccessRequestedAuditEntry','OrgRemoveBillingManagerAuditEntry','OrgRemoveMemberAuditEntry','OrgRemoveOutsideCollaboratorAuditEntry','OrgRestoreMemberAuditEntry','OrgUnblockUserAuditEntry','OrgUpdateDefaultRepositoryPermissionAuditEntry','OrgUpdateMemberAuditEntry','OrgUpdateMemberRepositoryCreationPermissionAuditEntry','OrgUpdateMemberRepositoryInvitationPermissionAuditEntry','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepoAccessAuditEntry','RepoAddMemberAuditEntry','RepoAddTopicAuditEntry','RepoArchivedAuditEntry','RepoChangeMergeSettingAuditEntry','RepoConfigDisableAnonymousGitAccessAuditEntry','RepoConfigDisableCollaboratorsOnlyAuditEntry','RepoConfigDisableContributorsOnlyAuditEntry','RepoConfigDisableSockpuppetDisallowedAuditEntry','RepoConfigEnableAnonymousGitAccessAuditEntry','RepoConfigEnableCollaboratorsOnlyAuditEntry','RepoConfigEnableContributorsOnlyAuditEntry','RepoConfigEnableSockpuppetDisallowedAuditEntry','RepoConfigLockAnonymousGitAccessAuditEntry','RepoConfigUnlockAnonymousGitAccessAuditEntry','RepoCreateAuditEntry','RepoDestroyAuditEntry','RepoRemoveMemberAuditEntry','RepoRemoveTopicAuditEntry','RepositoryVisibilityChangeDisableAuditEntry','RepositoryVisibilityChangeEnableAuditEntry','TeamAddMemberAuditEntry','TeamAddRepositoryAuditEntry','TeamChangeParentTeamAuditEntry','TeamRemoveMemberAuditEntry','TeamRemoveRepositoryAuditEntry','IpAllowListEntry','OrganizationIdentityProvider','ExternalIdentity','EnterpriseServerInstallation','EnterpriseServerUserAccount','EnterpriseServerUserAccountEmail','EnterpriseServerUserAccountsUpload','EnterpriseRepositoryInfo','EnterpriseAdministratorInvitation','RepositoryInvitation','EnterpriseIdentityProvider','MarketplaceCategory','MarketplaceListing','Blob','PackageTag','Tag']
export const isNode = (obj: { __typename: string }): obj is Node => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Node_possibleTypes.includes(obj.__typename)
}



const Enterprise_possibleTypes = ['Enterprise']
export const isEnterprise = (obj: { __typename: string }): obj is Enterprise => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Enterprise_possibleTypes.includes(obj.__typename)
}



const EnterpriseBillingInfo_possibleTypes = ['EnterpriseBillingInfo']
export const isEnterpriseBillingInfo = (obj: { __typename: string }): obj is EnterpriseBillingInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseBillingInfo_possibleTypes.includes(obj.__typename)
}



const EnterpriseMemberConnection_possibleTypes = ['EnterpriseMemberConnection']
export const isEnterpriseMemberConnection = (obj: { __typename: string }): obj is EnterpriseMemberConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseMemberConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseMemberEdge_possibleTypes = ['EnterpriseMemberEdge']
export const isEnterpriseMemberEdge = (obj: { __typename: string }): obj is EnterpriseMemberEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseMemberEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseMember_possibleTypes = ['EnterpriseUserAccount','User']
export const isEnterpriseMember = (obj: { __typename: string }): obj is EnterpriseMember => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseMember_possibleTypes.includes(obj.__typename)
}



const EnterpriseUserAccount_possibleTypes = ['EnterpriseUserAccount']
export const isEnterpriseUserAccount = (obj: { __typename: string }): obj is EnterpriseUserAccount => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseUserAccount_possibleTypes.includes(obj.__typename)
}



const Actor_possibleTypes = ['EnterpriseUserAccount','Organization','User','Bot','Mannequin']
export const isActor = (obj: { __typename: string }): obj is Actor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Actor_possibleTypes.includes(obj.__typename)
}



const EnterpriseOrganizationMembershipConnection_possibleTypes = ['EnterpriseOrganizationMembershipConnection']
export const isEnterpriseOrganizationMembershipConnection = (obj: { __typename: string }): obj is EnterpriseOrganizationMembershipConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseOrganizationMembershipConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseOrganizationMembershipEdge_possibleTypes = ['EnterpriseOrganizationMembershipEdge']
export const isEnterpriseOrganizationMembershipEdge = (obj: { __typename: string }): obj is EnterpriseOrganizationMembershipEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseOrganizationMembershipEdge_possibleTypes.includes(obj.__typename)
}



const Organization_possibleTypes = ['Organization']
export const isOrganization = (obj: { __typename: string }): obj is Organization => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Organization_possibleTypes.includes(obj.__typename)
}



const MemberStatusable_possibleTypes = ['Organization','Team']
export const isMemberStatusable = (obj: { __typename: string }): obj is MemberStatusable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MemberStatusable_possibleTypes.includes(obj.__typename)
}



const UserStatusConnection_possibleTypes = ['UserStatusConnection']
export const isUserStatusConnection = (obj: { __typename: string }): obj is UserStatusConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserStatusConnection_possibleTypes.includes(obj.__typename)
}



const UserStatusEdge_possibleTypes = ['UserStatusEdge']
export const isUserStatusEdge = (obj: { __typename: string }): obj is UserStatusEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserStatusEdge_possibleTypes.includes(obj.__typename)
}



const UserStatus_possibleTypes = ['UserStatus']
export const isUserStatus = (obj: { __typename: string }): obj is UserStatus => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserStatus_possibleTypes.includes(obj.__typename)
}



const User_possibleTypes = ['User']
export const isUser = (obj: { __typename: string }): obj is User => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return User_possibleTypes.includes(obj.__typename)
}



const PackageOwner_possibleTypes = ['Organization','User','Repository']
export const isPackageOwner = (obj: { __typename: string }): obj is PackageOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageOwner_possibleTypes.includes(obj.__typename)
}



const PackageConnection_possibleTypes = ['PackageConnection']
export const isPackageConnection = (obj: { __typename: string }): obj is PackageConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageConnection_possibleTypes.includes(obj.__typename)
}



const PackageEdge_possibleTypes = ['PackageEdge']
export const isPackageEdge = (obj: { __typename: string }): obj is PackageEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageEdge_possibleTypes.includes(obj.__typename)
}



const Package_possibleTypes = ['Package']
export const isPackage = (obj: { __typename: string }): obj is Package => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Package_possibleTypes.includes(obj.__typename)
}



const PackageVersion_possibleTypes = ['PackageVersion']
export const isPackageVersion = (obj: { __typename: string }): obj is PackageVersion => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageVersion_possibleTypes.includes(obj.__typename)
}



const PackageFileConnection_possibleTypes = ['PackageFileConnection']
export const isPackageFileConnection = (obj: { __typename: string }): obj is PackageFileConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageFileConnection_possibleTypes.includes(obj.__typename)
}



const PackageFileEdge_possibleTypes = ['PackageFileEdge']
export const isPackageFileEdge = (obj: { __typename: string }): obj is PackageFileEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageFileEdge_possibleTypes.includes(obj.__typename)
}



const PackageFile_possibleTypes = ['PackageFile']
export const isPackageFile = (obj: { __typename: string }): obj is PackageFile => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageFile_possibleTypes.includes(obj.__typename)
}



const PageInfo_possibleTypes = ['PageInfo']
export const isPageInfo = (obj: { __typename: string }): obj is PageInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PageInfo_possibleTypes.includes(obj.__typename)
}



const Release_possibleTypes = ['Release']
export const isRelease = (obj: { __typename: string }): obj is Release => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Release_possibleTypes.includes(obj.__typename)
}



const UniformResourceLocatable_possibleTypes = ['Organization','User','Release','PullRequest','Issue','Repository','TeamDiscussion','TeamDiscussionComment','Commit','CheckRun','Milestone','RepositoryTopic','Bot','Mannequin','ClosedEvent','CrossReferencedEvent','PullRequestCommit','MergedEvent','ReviewDismissedEvent','ConvertToDraftEvent','ReadyForReviewEvent','Gist']
export const isUniformResourceLocatable = (obj: { __typename: string }): obj is UniformResourceLocatable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UniformResourceLocatable_possibleTypes.includes(obj.__typename)
}



const ReleaseAssetConnection_possibleTypes = ['ReleaseAssetConnection']
export const isReleaseAssetConnection = (obj: { __typename: string }): obj is ReleaseAssetConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReleaseAssetConnection_possibleTypes.includes(obj.__typename)
}



const ReleaseAssetEdge_possibleTypes = ['ReleaseAssetEdge']
export const isReleaseAssetEdge = (obj: { __typename: string }): obj is ReleaseAssetEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReleaseAssetEdge_possibleTypes.includes(obj.__typename)
}



const ReleaseAsset_possibleTypes = ['ReleaseAsset']
export const isReleaseAsset = (obj: { __typename: string }): obj is ReleaseAsset => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReleaseAsset_possibleTypes.includes(obj.__typename)
}



const Ref_possibleTypes = ['Ref']
export const isRef = (obj: { __typename: string }): obj is Ref => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Ref_possibleTypes.includes(obj.__typename)
}



const PullRequestConnection_possibleTypes = ['PullRequestConnection']
export const isPullRequestConnection = (obj: { __typename: string }): obj is PullRequestConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestEdge_possibleTypes = ['PullRequestEdge']
export const isPullRequestEdge = (obj: { __typename: string }): obj is PullRequestEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestEdge_possibleTypes.includes(obj.__typename)
}



const PullRequest_possibleTypes = ['PullRequest']
export const isPullRequest = (obj: { __typename: string }): obj is PullRequest => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequest_possibleTypes.includes(obj.__typename)
}



const Assignable_possibleTypes = ['PullRequest','Issue']
export const isAssignable = (obj: { __typename: string }): obj is Assignable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Assignable_possibleTypes.includes(obj.__typename)
}



const UserConnection_possibleTypes = ['UserConnection']
export const isUserConnection = (obj: { __typename: string }): obj is UserConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserConnection_possibleTypes.includes(obj.__typename)
}



const UserEdge_possibleTypes = ['UserEdge']
export const isUserEdge = (obj: { __typename: string }): obj is UserEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserEdge_possibleTypes.includes(obj.__typename)
}



const Closable_possibleTypes = ['PullRequest','Issue','Project','Milestone']
export const isClosable = (obj: { __typename: string }): obj is Closable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Closable_possibleTypes.includes(obj.__typename)
}



const Comment_possibleTypes = ['PullRequest','Issue','TeamDiscussion','TeamDiscussionComment','CommitComment','IssueComment','PullRequestReviewComment','PullRequestReview','GistComment']
export const isComment = (obj: { __typename: string }): obj is Comment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Comment_possibleTypes.includes(obj.__typename)
}



const UserContentEditConnection_possibleTypes = ['UserContentEditConnection']
export const isUserContentEditConnection = (obj: { __typename: string }): obj is UserContentEditConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserContentEditConnection_possibleTypes.includes(obj.__typename)
}



const UserContentEditEdge_possibleTypes = ['UserContentEditEdge']
export const isUserContentEditEdge = (obj: { __typename: string }): obj is UserContentEditEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserContentEditEdge_possibleTypes.includes(obj.__typename)
}



const UserContentEdit_possibleTypes = ['UserContentEdit']
export const isUserContentEdit = (obj: { __typename: string }): obj is UserContentEdit => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserContentEdit_possibleTypes.includes(obj.__typename)
}



const Labelable_possibleTypes = ['PullRequest','Issue']
export const isLabelable = (obj: { __typename: string }): obj is Labelable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Labelable_possibleTypes.includes(obj.__typename)
}



const LabelConnection_possibleTypes = ['LabelConnection']
export const isLabelConnection = (obj: { __typename: string }): obj is LabelConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LabelConnection_possibleTypes.includes(obj.__typename)
}



const LabelEdge_possibleTypes = ['LabelEdge']
export const isLabelEdge = (obj: { __typename: string }): obj is LabelEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LabelEdge_possibleTypes.includes(obj.__typename)
}



const Label_possibleTypes = ['Label']
export const isLabel = (obj: { __typename: string }): obj is Label => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Label_possibleTypes.includes(obj.__typename)
}



const IssueConnection_possibleTypes = ['IssueConnection']
export const isIssueConnection = (obj: { __typename: string }): obj is IssueConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueConnection_possibleTypes.includes(obj.__typename)
}



const IssueEdge_possibleTypes = ['IssueEdge']
export const isIssueEdge = (obj: { __typename: string }): obj is IssueEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueEdge_possibleTypes.includes(obj.__typename)
}



const Issue_possibleTypes = ['Issue']
export const isIssue = (obj: { __typename: string }): obj is Issue => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Issue_possibleTypes.includes(obj.__typename)
}



const Lockable_possibleTypes = ['PullRequest','Issue']
export const isLockable = (obj: { __typename: string }): obj is Lockable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Lockable_possibleTypes.includes(obj.__typename)
}



const Reactable_possibleTypes = ['PullRequest','Issue','TeamDiscussion','TeamDiscussionComment','CommitComment','IssueComment','PullRequestReviewComment','PullRequestReview']
export const isReactable = (obj: { __typename: string }): obj is Reactable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Reactable_possibleTypes.includes(obj.__typename)
}



const ReactionGroup_possibleTypes = ['ReactionGroup']
export const isReactionGroup = (obj: { __typename: string }): obj is ReactionGroup => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReactionGroup_possibleTypes.includes(obj.__typename)
}



const ReactingUserConnection_possibleTypes = ['ReactingUserConnection']
export const isReactingUserConnection = (obj: { __typename: string }): obj is ReactingUserConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReactingUserConnection_possibleTypes.includes(obj.__typename)
}



const ReactingUserEdge_possibleTypes = ['ReactingUserEdge']
export const isReactingUserEdge = (obj: { __typename: string }): obj is ReactingUserEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReactingUserEdge_possibleTypes.includes(obj.__typename)
}



const ReactionConnection_possibleTypes = ['ReactionConnection']
export const isReactionConnection = (obj: { __typename: string }): obj is ReactionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReactionConnection_possibleTypes.includes(obj.__typename)
}



const ReactionEdge_possibleTypes = ['ReactionEdge']
export const isReactionEdge = (obj: { __typename: string }): obj is ReactionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReactionEdge_possibleTypes.includes(obj.__typename)
}



const Reaction_possibleTypes = ['Reaction']
export const isReaction = (obj: { __typename: string }): obj is Reaction => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Reaction_possibleTypes.includes(obj.__typename)
}



const RepositoryNode_possibleTypes = ['PullRequest','Issue','CommitComment','RepositoryVulnerabilityAlert','IssueComment','PullRequestReviewComment','PullRequestReview','CommitCommentThread','PullRequestCommitCommentThread']
export const isRepositoryNode = (obj: { __typename: string }): obj is RepositoryNode => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryNode_possibleTypes.includes(obj.__typename)
}



const Repository_possibleTypes = ['Repository']
export const isRepository = (obj: { __typename: string }): obj is Repository => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Repository_possibleTypes.includes(obj.__typename)
}



const ProjectOwner_possibleTypes = ['Organization','User','Repository']
export const isProjectOwner = (obj: { __typename: string }): obj is ProjectOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectOwner_possibleTypes.includes(obj.__typename)
}



const Project_possibleTypes = ['Project']
export const isProject = (obj: { __typename: string }): obj is Project => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Project_possibleTypes.includes(obj.__typename)
}



const Updatable_possibleTypes = ['PullRequest','Issue','Project','TeamDiscussion','TeamDiscussionComment','CommitComment','IssueComment','PullRequestReviewComment','PullRequestReview','GistComment']
export const isUpdatable = (obj: { __typename: string }): obj is Updatable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Updatable_possibleTypes.includes(obj.__typename)
}



const ProjectColumnConnection_possibleTypes = ['ProjectColumnConnection']
export const isProjectColumnConnection = (obj: { __typename: string }): obj is ProjectColumnConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectColumnConnection_possibleTypes.includes(obj.__typename)
}



const ProjectColumnEdge_possibleTypes = ['ProjectColumnEdge']
export const isProjectColumnEdge = (obj: { __typename: string }): obj is ProjectColumnEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectColumnEdge_possibleTypes.includes(obj.__typename)
}



const ProjectColumn_possibleTypes = ['ProjectColumn']
export const isProjectColumn = (obj: { __typename: string }): obj is ProjectColumn => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectColumn_possibleTypes.includes(obj.__typename)
}



const ProjectCardConnection_possibleTypes = ['ProjectCardConnection']
export const isProjectCardConnection = (obj: { __typename: string }): obj is ProjectCardConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectCardConnection_possibleTypes.includes(obj.__typename)
}



const ProjectCardEdge_possibleTypes = ['ProjectCardEdge']
export const isProjectCardEdge = (obj: { __typename: string }): obj is ProjectCardEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectCardEdge_possibleTypes.includes(obj.__typename)
}



const ProjectCard_possibleTypes = ['ProjectCard']
export const isProjectCard = (obj: { __typename: string }): obj is ProjectCard => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectCard_possibleTypes.includes(obj.__typename)
}



const ProjectCardItem_possibleTypes = ['Issue','PullRequest']
export const isProjectCardItem = (obj: { __typename: string }): obj is ProjectCardItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectCardItem_possibleTypes.includes(obj.__typename)
}



const ProjectConnection_possibleTypes = ['ProjectConnection']
export const isProjectConnection = (obj: { __typename: string }): obj is ProjectConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectConnection_possibleTypes.includes(obj.__typename)
}



const ProjectEdge_possibleTypes = ['ProjectEdge']
export const isProjectEdge = (obj: { __typename: string }): obj is ProjectEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProjectEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageOwner_possibleTypes = ['Organization','User','Repository']
export const isRegistryPackageOwner = (obj: { __typename: string }): obj is RegistryPackageOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageOwner_possibleTypes.includes(obj.__typename)
}



const RegistryPackageConnection_possibleTypes = ['RegistryPackageConnection']
export const isRegistryPackageConnection = (obj: { __typename: string }): obj is RegistryPackageConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageConnection_possibleTypes.includes(obj.__typename)
}



const RegistryPackageEdge_possibleTypes = ['RegistryPackageEdge']
export const isRegistryPackageEdge = (obj: { __typename: string }): obj is RegistryPackageEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackage_possibleTypes = ['RegistryPackage']
export const isRegistryPackage = (obj: { __typename: string }): obj is RegistryPackage => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackage_possibleTypes.includes(obj.__typename)
}



const RegistryPackageVersion_possibleTypes = ['RegistryPackageVersion']
export const isRegistryPackageVersion = (obj: { __typename: string }): obj is RegistryPackageVersion => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageVersion_possibleTypes.includes(obj.__typename)
}



const RegistryPackageDependencyConnection_possibleTypes = ['RegistryPackageDependencyConnection']
export const isRegistryPackageDependencyConnection = (obj: { __typename: string }): obj is RegistryPackageDependencyConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageDependencyConnection_possibleTypes.includes(obj.__typename)
}



const RegistryPackageDependencyEdge_possibleTypes = ['RegistryPackageDependencyEdge']
export const isRegistryPackageDependencyEdge = (obj: { __typename: string }): obj is RegistryPackageDependencyEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageDependencyEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageDependency_possibleTypes = ['RegistryPackageDependency']
export const isRegistryPackageDependency = (obj: { __typename: string }): obj is RegistryPackageDependency => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageDependency_possibleTypes.includes(obj.__typename)
}



const RegistryPackageFile_possibleTypes = ['RegistryPackageFile']
export const isRegistryPackageFile = (obj: { __typename: string }): obj is RegistryPackageFile => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageFile_possibleTypes.includes(obj.__typename)
}



const RegistryPackageFileConnection_possibleTypes = ['RegistryPackageFileConnection']
export const isRegistryPackageFileConnection = (obj: { __typename: string }): obj is RegistryPackageFileConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageFileConnection_possibleTypes.includes(obj.__typename)
}



const RegistryPackageFileEdge_possibleTypes = ['RegistryPackageFileEdge']
export const isRegistryPackageFileEdge = (obj: { __typename: string }): obj is RegistryPackageFileEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageFileEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageVersionStatistics_possibleTypes = ['RegistryPackageVersionStatistics']
export const isRegistryPackageVersionStatistics = (obj: { __typename: string }): obj is RegistryPackageVersionStatistics => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageVersionStatistics_possibleTypes.includes(obj.__typename)
}



const RegistryPackageVersionConnection_possibleTypes = ['RegistryPackageVersionConnection']
export const isRegistryPackageVersionConnection = (obj: { __typename: string }): obj is RegistryPackageVersionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageVersionConnection_possibleTypes.includes(obj.__typename)
}



const RegistryPackageVersionEdge_possibleTypes = ['RegistryPackageVersionEdge']
export const isRegistryPackageVersionEdge = (obj: { __typename: string }): obj is RegistryPackageVersionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageVersionEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageStatistics_possibleTypes = ['RegistryPackageStatistics']
export const isRegistryPackageStatistics = (obj: { __typename: string }): obj is RegistryPackageStatistics => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageStatistics_possibleTypes.includes(obj.__typename)
}



const RegistryPackageTagConnection_possibleTypes = ['RegistryPackageTagConnection']
export const isRegistryPackageTagConnection = (obj: { __typename: string }): obj is RegistryPackageTagConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageTagConnection_possibleTypes.includes(obj.__typename)
}



const RegistryPackageTagEdge_possibleTypes = ['RegistryPackageTagEdge']
export const isRegistryPackageTagEdge = (obj: { __typename: string }): obj is RegistryPackageTagEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageTagEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageTag_possibleTypes = ['RegistryPackageTag']
export const isRegistryPackageTag = (obj: { __typename: string }): obj is RegistryPackageTag => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageTag_possibleTypes.includes(obj.__typename)
}



const TopicConnection_possibleTypes = ['TopicConnection']
export const isTopicConnection = (obj: { __typename: string }): obj is TopicConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TopicConnection_possibleTypes.includes(obj.__typename)
}



const TopicEdge_possibleTypes = ['TopicEdge']
export const isTopicEdge = (obj: { __typename: string }): obj is TopicEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TopicEdge_possibleTypes.includes(obj.__typename)
}



const Topic_possibleTypes = ['Topic']
export const isTopic = (obj: { __typename: string }): obj is Topic => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Topic_possibleTypes.includes(obj.__typename)
}



const Starrable_possibleTypes = ['Repository','Topic','Gist']
export const isStarrable = (obj: { __typename: string }): obj is Starrable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Starrable_possibleTypes.includes(obj.__typename)
}



const StargazerConnection_possibleTypes = ['StargazerConnection']
export const isStargazerConnection = (obj: { __typename: string }): obj is StargazerConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StargazerConnection_possibleTypes.includes(obj.__typename)
}



const StargazerEdge_possibleTypes = ['StargazerEdge']
export const isStargazerEdge = (obj: { __typename: string }): obj is StargazerEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StargazerEdge_possibleTypes.includes(obj.__typename)
}



const RegistryPackageSearch_possibleTypes = ['Organization','User','Repository']
export const isRegistryPackageSearch = (obj: { __typename: string }): obj is RegistryPackageSearch => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegistryPackageSearch_possibleTypes.includes(obj.__typename)
}



const RepositoryInfo_possibleTypes = ['Repository']
export const isRepositoryInfo = (obj: { __typename: string }): obj is RepositoryInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryInfo_possibleTypes.includes(obj.__typename)
}



const License_possibleTypes = ['License']
export const isLicense = (obj: { __typename: string }): obj is License => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return License_possibleTypes.includes(obj.__typename)
}



const LicenseRule_possibleTypes = ['LicenseRule']
export const isLicenseRule = (obj: { __typename: string }): obj is LicenseRule => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LicenseRule_possibleTypes.includes(obj.__typename)
}



const RepositoryOwner_possibleTypes = ['Organization','User']
export const isRepositoryOwner = (obj: { __typename: string }): obj is RepositoryOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryOwner_possibleTypes.includes(obj.__typename)
}



const RepositoryConnection_possibleTypes = ['RepositoryConnection']
export const isRepositoryConnection = (obj: { __typename: string }): obj is RepositoryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryConnection_possibleTypes.includes(obj.__typename)
}



const RepositoryEdge_possibleTypes = ['RepositoryEdge']
export const isRepositoryEdge = (obj: { __typename: string }): obj is RepositoryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryEdge_possibleTypes.includes(obj.__typename)
}



const Subscribable_possibleTypes = ['PullRequest','Issue','Repository','Team','TeamDiscussion','Commit']
export const isSubscribable = (obj: { __typename: string }): obj is Subscribable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Subscribable_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRuleConnection_possibleTypes = ['BranchProtectionRuleConnection']
export const isBranchProtectionRuleConnection = (obj: { __typename: string }): obj is BranchProtectionRuleConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRuleConnection_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRuleEdge_possibleTypes = ['BranchProtectionRuleEdge']
export const isBranchProtectionRuleEdge = (obj: { __typename: string }): obj is BranchProtectionRuleEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRuleEdge_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRule_possibleTypes = ['BranchProtectionRule']
export const isBranchProtectionRule = (obj: { __typename: string }): obj is BranchProtectionRule => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRule_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRuleConflictConnection_possibleTypes = ['BranchProtectionRuleConflictConnection']
export const isBranchProtectionRuleConflictConnection = (obj: { __typename: string }): obj is BranchProtectionRuleConflictConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRuleConflictConnection_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRuleConflictEdge_possibleTypes = ['BranchProtectionRuleConflictEdge']
export const isBranchProtectionRuleConflictEdge = (obj: { __typename: string }): obj is BranchProtectionRuleConflictEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRuleConflictEdge_possibleTypes.includes(obj.__typename)
}



const BranchProtectionRuleConflict_possibleTypes = ['BranchProtectionRuleConflict']
export const isBranchProtectionRuleConflict = (obj: { __typename: string }): obj is BranchProtectionRuleConflict => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BranchProtectionRuleConflict_possibleTypes.includes(obj.__typename)
}



const RefConnection_possibleTypes = ['RefConnection']
export const isRefConnection = (obj: { __typename: string }): obj is RefConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RefConnection_possibleTypes.includes(obj.__typename)
}



const RefEdge_possibleTypes = ['RefEdge']
export const isRefEdge = (obj: { __typename: string }): obj is RefEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RefEdge_possibleTypes.includes(obj.__typename)
}



const PushAllowanceConnection_possibleTypes = ['PushAllowanceConnection']
export const isPushAllowanceConnection = (obj: { __typename: string }): obj is PushAllowanceConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PushAllowanceConnection_possibleTypes.includes(obj.__typename)
}



const PushAllowanceEdge_possibleTypes = ['PushAllowanceEdge']
export const isPushAllowanceEdge = (obj: { __typename: string }): obj is PushAllowanceEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PushAllowanceEdge_possibleTypes.includes(obj.__typename)
}



const PushAllowance_possibleTypes = ['PushAllowance']
export const isPushAllowance = (obj: { __typename: string }): obj is PushAllowance => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PushAllowance_possibleTypes.includes(obj.__typename)
}



const PushAllowanceActor_possibleTypes = ['App','Team','User']
export const isPushAllowanceActor = (obj: { __typename: string }): obj is PushAllowanceActor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PushAllowanceActor_possibleTypes.includes(obj.__typename)
}



const App_possibleTypes = ['App']
export const isApp = (obj: { __typename: string }): obj is App => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return App_possibleTypes.includes(obj.__typename)
}



const Team_possibleTypes = ['Team']
export const isTeam = (obj: { __typename: string }): obj is Team => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Team_possibleTypes.includes(obj.__typename)
}



const TeamConnection_possibleTypes = ['TeamConnection']
export const isTeamConnection = (obj: { __typename: string }): obj is TeamConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamConnection_possibleTypes.includes(obj.__typename)
}



const TeamEdge_possibleTypes = ['TeamEdge']
export const isTeamEdge = (obj: { __typename: string }): obj is TeamEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamEdge_possibleTypes.includes(obj.__typename)
}



const TeamDiscussion_possibleTypes = ['TeamDiscussion']
export const isTeamDiscussion = (obj: { __typename: string }): obj is TeamDiscussion => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussion_possibleTypes.includes(obj.__typename)
}



const Deletable_possibleTypes = ['TeamDiscussion','TeamDiscussionComment','CommitComment','IssueComment','PullRequestReviewComment','PullRequestReview','GistComment']
export const isDeletable = (obj: { __typename: string }): obj is Deletable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Deletable_possibleTypes.includes(obj.__typename)
}



const UpdatableComment_possibleTypes = ['PullRequest','Issue','TeamDiscussion','TeamDiscussionComment','CommitComment','IssueComment','PullRequestReviewComment','PullRequestReview','GistComment']
export const isUpdatableComment = (obj: { __typename: string }): obj is UpdatableComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdatableComment_possibleTypes.includes(obj.__typename)
}



const TeamDiscussionCommentConnection_possibleTypes = ['TeamDiscussionCommentConnection']
export const isTeamDiscussionCommentConnection = (obj: { __typename: string }): obj is TeamDiscussionCommentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussionCommentConnection_possibleTypes.includes(obj.__typename)
}



const TeamDiscussionCommentEdge_possibleTypes = ['TeamDiscussionCommentEdge']
export const isTeamDiscussionCommentEdge = (obj: { __typename: string }): obj is TeamDiscussionCommentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussionCommentEdge_possibleTypes.includes(obj.__typename)
}



const TeamDiscussionComment_possibleTypes = ['TeamDiscussionComment']
export const isTeamDiscussionComment = (obj: { __typename: string }): obj is TeamDiscussionComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussionComment_possibleTypes.includes(obj.__typename)
}



const TeamDiscussionConnection_possibleTypes = ['TeamDiscussionConnection']
export const isTeamDiscussionConnection = (obj: { __typename: string }): obj is TeamDiscussionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussionConnection_possibleTypes.includes(obj.__typename)
}



const TeamDiscussionEdge_possibleTypes = ['TeamDiscussionEdge']
export const isTeamDiscussionEdge = (obj: { __typename: string }): obj is TeamDiscussionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamDiscussionEdge_possibleTypes.includes(obj.__typename)
}



const OrganizationInvitationConnection_possibleTypes = ['OrganizationInvitationConnection']
export const isOrganizationInvitationConnection = (obj: { __typename: string }): obj is OrganizationInvitationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationInvitationConnection_possibleTypes.includes(obj.__typename)
}



const OrganizationInvitationEdge_possibleTypes = ['OrganizationInvitationEdge']
export const isOrganizationInvitationEdge = (obj: { __typename: string }): obj is OrganizationInvitationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationInvitationEdge_possibleTypes.includes(obj.__typename)
}



const OrganizationInvitation_possibleTypes = ['OrganizationInvitation']
export const isOrganizationInvitation = (obj: { __typename: string }): obj is OrganizationInvitation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationInvitation_possibleTypes.includes(obj.__typename)
}



const TeamMemberConnection_possibleTypes = ['TeamMemberConnection']
export const isTeamMemberConnection = (obj: { __typename: string }): obj is TeamMemberConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamMemberConnection_possibleTypes.includes(obj.__typename)
}



const TeamMemberEdge_possibleTypes = ['TeamMemberEdge']
export const isTeamMemberEdge = (obj: { __typename: string }): obj is TeamMemberEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamMemberEdge_possibleTypes.includes(obj.__typename)
}



const TeamRepositoryConnection_possibleTypes = ['TeamRepositoryConnection']
export const isTeamRepositoryConnection = (obj: { __typename: string }): obj is TeamRepositoryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamRepositoryConnection_possibleTypes.includes(obj.__typename)
}



const TeamRepositoryEdge_possibleTypes = ['TeamRepositoryEdge']
export const isTeamRepositoryEdge = (obj: { __typename: string }): obj is TeamRepositoryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamRepositoryEdge_possibleTypes.includes(obj.__typename)
}



const ReviewDismissalAllowanceConnection_possibleTypes = ['ReviewDismissalAllowanceConnection']
export const isReviewDismissalAllowanceConnection = (obj: { __typename: string }): obj is ReviewDismissalAllowanceConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewDismissalAllowanceConnection_possibleTypes.includes(obj.__typename)
}



const ReviewDismissalAllowanceEdge_possibleTypes = ['ReviewDismissalAllowanceEdge']
export const isReviewDismissalAllowanceEdge = (obj: { __typename: string }): obj is ReviewDismissalAllowanceEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewDismissalAllowanceEdge_possibleTypes.includes(obj.__typename)
}



const ReviewDismissalAllowance_possibleTypes = ['ReviewDismissalAllowance']
export const isReviewDismissalAllowance = (obj: { __typename: string }): obj is ReviewDismissalAllowance => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewDismissalAllowance_possibleTypes.includes(obj.__typename)
}



const ReviewDismissalAllowanceActor_possibleTypes = ['Team','User']
export const isReviewDismissalAllowanceActor = (obj: { __typename: string }): obj is ReviewDismissalAllowanceActor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewDismissalAllowanceActor_possibleTypes.includes(obj.__typename)
}



const RepositoryCollaboratorConnection_possibleTypes = ['RepositoryCollaboratorConnection']
export const isRepositoryCollaboratorConnection = (obj: { __typename: string }): obj is RepositoryCollaboratorConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryCollaboratorConnection_possibleTypes.includes(obj.__typename)
}



const RepositoryCollaboratorEdge_possibleTypes = ['RepositoryCollaboratorEdge']
export const isRepositoryCollaboratorEdge = (obj: { __typename: string }): obj is RepositoryCollaboratorEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryCollaboratorEdge_possibleTypes.includes(obj.__typename)
}



const PermissionSource_possibleTypes = ['PermissionSource']
export const isPermissionSource = (obj: { __typename: string }): obj is PermissionSource => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PermissionSource_possibleTypes.includes(obj.__typename)
}



const PermissionGranter_possibleTypes = ['Organization','Repository','Team']
export const isPermissionGranter = (obj: { __typename: string }): obj is PermissionGranter => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PermissionGranter_possibleTypes.includes(obj.__typename)
}



const CommitCommentConnection_possibleTypes = ['CommitCommentConnection']
export const isCommitCommentConnection = (obj: { __typename: string }): obj is CommitCommentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitCommentConnection_possibleTypes.includes(obj.__typename)
}



const CommitCommentEdge_possibleTypes = ['CommitCommentEdge']
export const isCommitCommentEdge = (obj: { __typename: string }): obj is CommitCommentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitCommentEdge_possibleTypes.includes(obj.__typename)
}



const CommitComment_possibleTypes = ['CommitComment']
export const isCommitComment = (obj: { __typename: string }): obj is CommitComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitComment_possibleTypes.includes(obj.__typename)
}



const Minimizable_possibleTypes = ['CommitComment','IssueComment','PullRequestReviewComment','GistComment']
export const isMinimizable = (obj: { __typename: string }): obj is Minimizable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Minimizable_possibleTypes.includes(obj.__typename)
}



const Commit_possibleTypes = ['Commit']
export const isCommit = (obj: { __typename: string }): obj is Commit => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Commit_possibleTypes.includes(obj.__typename)
}



const GitObject_possibleTypes = ['Commit','Tree','Blob','Tag']
export const isGitObject = (obj: { __typename: string }): obj is GitObject => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GitObject_possibleTypes.includes(obj.__typename)
}



const GitActor_possibleTypes = ['GitActor']
export const isGitActor = (obj: { __typename: string }): obj is GitActor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GitActor_possibleTypes.includes(obj.__typename)
}



const Blame_possibleTypes = ['Blame']
export const isBlame = (obj: { __typename: string }): obj is Blame => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Blame_possibleTypes.includes(obj.__typename)
}



const BlameRange_possibleTypes = ['BlameRange']
export const isBlameRange = (obj: { __typename: string }): obj is BlameRange => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BlameRange_possibleTypes.includes(obj.__typename)
}



const CheckSuiteConnection_possibleTypes = ['CheckSuiteConnection']
export const isCheckSuiteConnection = (obj: { __typename: string }): obj is CheckSuiteConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckSuiteConnection_possibleTypes.includes(obj.__typename)
}



const CheckSuiteEdge_possibleTypes = ['CheckSuiteEdge']
export const isCheckSuiteEdge = (obj: { __typename: string }): obj is CheckSuiteEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckSuiteEdge_possibleTypes.includes(obj.__typename)
}



const CheckSuite_possibleTypes = ['CheckSuite']
export const isCheckSuite = (obj: { __typename: string }): obj is CheckSuite => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckSuite_possibleTypes.includes(obj.__typename)
}



const CheckRunConnection_possibleTypes = ['CheckRunConnection']
export const isCheckRunConnection = (obj: { __typename: string }): obj is CheckRunConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckRunConnection_possibleTypes.includes(obj.__typename)
}



const CheckRunEdge_possibleTypes = ['CheckRunEdge']
export const isCheckRunEdge = (obj: { __typename: string }): obj is CheckRunEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckRunEdge_possibleTypes.includes(obj.__typename)
}



const CheckRun_possibleTypes = ['CheckRun']
export const isCheckRun = (obj: { __typename: string }): obj is CheckRun => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckRun_possibleTypes.includes(obj.__typename)
}



const CheckAnnotationConnection_possibleTypes = ['CheckAnnotationConnection']
export const isCheckAnnotationConnection = (obj: { __typename: string }): obj is CheckAnnotationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckAnnotationConnection_possibleTypes.includes(obj.__typename)
}



const CheckAnnotationEdge_possibleTypes = ['CheckAnnotationEdge']
export const isCheckAnnotationEdge = (obj: { __typename: string }): obj is CheckAnnotationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckAnnotationEdge_possibleTypes.includes(obj.__typename)
}



const CheckAnnotation_possibleTypes = ['CheckAnnotation']
export const isCheckAnnotation = (obj: { __typename: string }): obj is CheckAnnotation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckAnnotation_possibleTypes.includes(obj.__typename)
}



const CheckAnnotationSpan_possibleTypes = ['CheckAnnotationSpan']
export const isCheckAnnotationSpan = (obj: { __typename: string }): obj is CheckAnnotationSpan => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckAnnotationSpan_possibleTypes.includes(obj.__typename)
}



const CheckAnnotationPosition_possibleTypes = ['CheckAnnotationPosition']
export const isCheckAnnotationPosition = (obj: { __typename: string }): obj is CheckAnnotationPosition => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CheckAnnotationPosition_possibleTypes.includes(obj.__typename)
}



const Push_possibleTypes = ['Push']
export const isPush = (obj: { __typename: string }): obj is Push => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Push_possibleTypes.includes(obj.__typename)
}



const DeploymentConnection_possibleTypes = ['DeploymentConnection']
export const isDeploymentConnection = (obj: { __typename: string }): obj is DeploymentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentConnection_possibleTypes.includes(obj.__typename)
}



const DeploymentEdge_possibleTypes = ['DeploymentEdge']
export const isDeploymentEdge = (obj: { __typename: string }): obj is DeploymentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentEdge_possibleTypes.includes(obj.__typename)
}



const Deployment_possibleTypes = ['Deployment']
export const isDeployment = (obj: { __typename: string }): obj is Deployment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Deployment_possibleTypes.includes(obj.__typename)
}



const DeploymentStatus_possibleTypes = ['DeploymentStatus']
export const isDeploymentStatus = (obj: { __typename: string }): obj is DeploymentStatus => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentStatus_possibleTypes.includes(obj.__typename)
}



const DeploymentStatusConnection_possibleTypes = ['DeploymentStatusConnection']
export const isDeploymentStatusConnection = (obj: { __typename: string }): obj is DeploymentStatusConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentStatusConnection_possibleTypes.includes(obj.__typename)
}



const DeploymentStatusEdge_possibleTypes = ['DeploymentStatusEdge']
export const isDeploymentStatusEdge = (obj: { __typename: string }): obj is DeploymentStatusEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentStatusEdge_possibleTypes.includes(obj.__typename)
}



const CommitHistoryConnection_possibleTypes = ['CommitHistoryConnection']
export const isCommitHistoryConnection = (obj: { __typename: string }): obj is CommitHistoryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitHistoryConnection_possibleTypes.includes(obj.__typename)
}



const CommitEdge_possibleTypes = ['CommitEdge']
export const isCommitEdge = (obj: { __typename: string }): obj is CommitEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitEdge_possibleTypes.includes(obj.__typename)
}



const CommitConnection_possibleTypes = ['CommitConnection']
export const isCommitConnection = (obj: { __typename: string }): obj is CommitConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitConnection_possibleTypes.includes(obj.__typename)
}



const GitSignature_possibleTypes = ['GpgSignature','SmimeSignature','UnknownSignature']
export const isGitSignature = (obj: { __typename: string }): obj is GitSignature => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GitSignature_possibleTypes.includes(obj.__typename)
}



const Status_possibleTypes = ['Status']
export const isStatus = (obj: { __typename: string }): obj is Status => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Status_possibleTypes.includes(obj.__typename)
}



const StatusContext_possibleTypes = ['StatusContext']
export const isStatusContext = (obj: { __typename: string }): obj is StatusContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StatusContext_possibleTypes.includes(obj.__typename)
}



const StatusCheckRollup_possibleTypes = ['StatusCheckRollup']
export const isStatusCheckRollup = (obj: { __typename: string }): obj is StatusCheckRollup => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StatusCheckRollup_possibleTypes.includes(obj.__typename)
}



const StatusCheckRollupContextConnection_possibleTypes = ['StatusCheckRollupContextConnection']
export const isStatusCheckRollupContextConnection = (obj: { __typename: string }): obj is StatusCheckRollupContextConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StatusCheckRollupContextConnection_possibleTypes.includes(obj.__typename)
}



const StatusCheckRollupContextEdge_possibleTypes = ['StatusCheckRollupContextEdge']
export const isStatusCheckRollupContextEdge = (obj: { __typename: string }): obj is StatusCheckRollupContextEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StatusCheckRollupContextEdge_possibleTypes.includes(obj.__typename)
}



const StatusCheckRollupContext_possibleTypes = ['CheckRun','StatusContext']
export const isStatusCheckRollupContext = (obj: { __typename: string }): obj is StatusCheckRollupContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StatusCheckRollupContext_possibleTypes.includes(obj.__typename)
}



const SubmoduleConnection_possibleTypes = ['SubmoduleConnection']
export const isSubmoduleConnection = (obj: { __typename: string }): obj is SubmoduleConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SubmoduleConnection_possibleTypes.includes(obj.__typename)
}



const SubmoduleEdge_possibleTypes = ['SubmoduleEdge']
export const isSubmoduleEdge = (obj: { __typename: string }): obj is SubmoduleEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SubmoduleEdge_possibleTypes.includes(obj.__typename)
}



const Submodule_possibleTypes = ['Submodule']
export const isSubmodule = (obj: { __typename: string }): obj is Submodule => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Submodule_possibleTypes.includes(obj.__typename)
}



const Tree_possibleTypes = ['Tree']
export const isTree = (obj: { __typename: string }): obj is Tree => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Tree_possibleTypes.includes(obj.__typename)
}



const TreeEntry_possibleTypes = ['TreeEntry']
export const isTreeEntry = (obj: { __typename: string }): obj is TreeEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TreeEntry_possibleTypes.includes(obj.__typename)
}



const DependencyGraphManifestConnection_possibleTypes = ['DependencyGraphManifestConnection']
export const isDependencyGraphManifestConnection = (obj: { __typename: string }): obj is DependencyGraphManifestConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphManifestConnection_possibleTypes.includes(obj.__typename)
}



const DependencyGraphManifestEdge_possibleTypes = ['DependencyGraphManifestEdge']
export const isDependencyGraphManifestEdge = (obj: { __typename: string }): obj is DependencyGraphManifestEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphManifestEdge_possibleTypes.includes(obj.__typename)
}



const DependencyGraphManifest_possibleTypes = ['DependencyGraphManifest']
export const isDependencyGraphManifest = (obj: { __typename: string }): obj is DependencyGraphManifest => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphManifest_possibleTypes.includes(obj.__typename)
}



const DependencyGraphDependencyConnection_possibleTypes = ['DependencyGraphDependencyConnection']
export const isDependencyGraphDependencyConnection = (obj: { __typename: string }): obj is DependencyGraphDependencyConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphDependencyConnection_possibleTypes.includes(obj.__typename)
}



const DependencyGraphDependencyEdge_possibleTypes = ['DependencyGraphDependencyEdge']
export const isDependencyGraphDependencyEdge = (obj: { __typename: string }): obj is DependencyGraphDependencyEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphDependencyEdge_possibleTypes.includes(obj.__typename)
}



const DependencyGraphDependency_possibleTypes = ['DependencyGraphDependency']
export const isDependencyGraphDependency = (obj: { __typename: string }): obj is DependencyGraphDependency => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DependencyGraphDependency_possibleTypes.includes(obj.__typename)
}



const DeployKeyConnection_possibleTypes = ['DeployKeyConnection']
export const isDeployKeyConnection = (obj: { __typename: string }): obj is DeployKeyConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeployKeyConnection_possibleTypes.includes(obj.__typename)
}



const DeployKeyEdge_possibleTypes = ['DeployKeyEdge']
export const isDeployKeyEdge = (obj: { __typename: string }): obj is DeployKeyEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeployKeyEdge_possibleTypes.includes(obj.__typename)
}



const DeployKey_possibleTypes = ['DeployKey']
export const isDeployKey = (obj: { __typename: string }): obj is DeployKey => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeployKey_possibleTypes.includes(obj.__typename)
}



const FundingLink_possibleTypes = ['FundingLink']
export const isFundingLink = (obj: { __typename: string }): obj is FundingLink => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return FundingLink_possibleTypes.includes(obj.__typename)
}



const IssueOrPullRequest_possibleTypes = ['Issue','PullRequest']
export const isIssueOrPullRequest = (obj: { __typename: string }): obj is IssueOrPullRequest => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueOrPullRequest_possibleTypes.includes(obj.__typename)
}



const LanguageConnection_possibleTypes = ['LanguageConnection']
export const isLanguageConnection = (obj: { __typename: string }): obj is LanguageConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LanguageConnection_possibleTypes.includes(obj.__typename)
}



const LanguageEdge_possibleTypes = ['LanguageEdge']
export const isLanguageEdge = (obj: { __typename: string }): obj is LanguageEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LanguageEdge_possibleTypes.includes(obj.__typename)
}



const Language_possibleTypes = ['Language']
export const isLanguage = (obj: { __typename: string }): obj is Language => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Language_possibleTypes.includes(obj.__typename)
}



const Milestone_possibleTypes = ['Milestone']
export const isMilestone = (obj: { __typename: string }): obj is Milestone => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Milestone_possibleTypes.includes(obj.__typename)
}



const MilestoneConnection_possibleTypes = ['MilestoneConnection']
export const isMilestoneConnection = (obj: { __typename: string }): obj is MilestoneConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MilestoneConnection_possibleTypes.includes(obj.__typename)
}



const MilestoneEdge_possibleTypes = ['MilestoneEdge']
export const isMilestoneEdge = (obj: { __typename: string }): obj is MilestoneEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MilestoneEdge_possibleTypes.includes(obj.__typename)
}



const PinnedIssueConnection_possibleTypes = ['PinnedIssueConnection']
export const isPinnedIssueConnection = (obj: { __typename: string }): obj is PinnedIssueConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnedIssueConnection_possibleTypes.includes(obj.__typename)
}



const PinnedIssueEdge_possibleTypes = ['PinnedIssueEdge']
export const isPinnedIssueEdge = (obj: { __typename: string }): obj is PinnedIssueEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnedIssueEdge_possibleTypes.includes(obj.__typename)
}



const PinnedIssue_possibleTypes = ['PinnedIssue']
export const isPinnedIssue = (obj: { __typename: string }): obj is PinnedIssue => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnedIssue_possibleTypes.includes(obj.__typename)
}



const ReleaseConnection_possibleTypes = ['ReleaseConnection']
export const isReleaseConnection = (obj: { __typename: string }): obj is ReleaseConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReleaseConnection_possibleTypes.includes(obj.__typename)
}



const ReleaseEdge_possibleTypes = ['ReleaseEdge']
export const isReleaseEdge = (obj: { __typename: string }): obj is ReleaseEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReleaseEdge_possibleTypes.includes(obj.__typename)
}



const RepositoryTopicConnection_possibleTypes = ['RepositoryTopicConnection']
export const isRepositoryTopicConnection = (obj: { __typename: string }): obj is RepositoryTopicConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryTopicConnection_possibleTypes.includes(obj.__typename)
}



const RepositoryTopicEdge_possibleTypes = ['RepositoryTopicEdge']
export const isRepositoryTopicEdge = (obj: { __typename: string }): obj is RepositoryTopicEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryTopicEdge_possibleTypes.includes(obj.__typename)
}



const RepositoryTopic_possibleTypes = ['RepositoryTopic']
export const isRepositoryTopic = (obj: { __typename: string }): obj is RepositoryTopic => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryTopic_possibleTypes.includes(obj.__typename)
}



const RepositoryVulnerabilityAlertConnection_possibleTypes = ['RepositoryVulnerabilityAlertConnection']
export const isRepositoryVulnerabilityAlertConnection = (obj: { __typename: string }): obj is RepositoryVulnerabilityAlertConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryVulnerabilityAlertConnection_possibleTypes.includes(obj.__typename)
}



const RepositoryVulnerabilityAlertEdge_possibleTypes = ['RepositoryVulnerabilityAlertEdge']
export const isRepositoryVulnerabilityAlertEdge = (obj: { __typename: string }): obj is RepositoryVulnerabilityAlertEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryVulnerabilityAlertEdge_possibleTypes.includes(obj.__typename)
}



const RepositoryVulnerabilityAlert_possibleTypes = ['RepositoryVulnerabilityAlert']
export const isRepositoryVulnerabilityAlert = (obj: { __typename: string }): obj is RepositoryVulnerabilityAlert => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryVulnerabilityAlert_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisory_possibleTypes = ['SecurityAdvisory']
export const isSecurityAdvisory = (obj: { __typename: string }): obj is SecurityAdvisory => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisory_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryIdentifier_possibleTypes = ['SecurityAdvisoryIdentifier']
export const isSecurityAdvisoryIdentifier = (obj: { __typename: string }): obj is SecurityAdvisoryIdentifier => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryIdentifier_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryReference_possibleTypes = ['SecurityAdvisoryReference']
export const isSecurityAdvisoryReference = (obj: { __typename: string }): obj is SecurityAdvisoryReference => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryReference_possibleTypes.includes(obj.__typename)
}



const SecurityVulnerabilityConnection_possibleTypes = ['SecurityVulnerabilityConnection']
export const isSecurityVulnerabilityConnection = (obj: { __typename: string }): obj is SecurityVulnerabilityConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityVulnerabilityConnection_possibleTypes.includes(obj.__typename)
}



const SecurityVulnerabilityEdge_possibleTypes = ['SecurityVulnerabilityEdge']
export const isSecurityVulnerabilityEdge = (obj: { __typename: string }): obj is SecurityVulnerabilityEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityVulnerabilityEdge_possibleTypes.includes(obj.__typename)
}



const SecurityVulnerability_possibleTypes = ['SecurityVulnerability']
export const isSecurityVulnerability = (obj: { __typename: string }): obj is SecurityVulnerability => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityVulnerability_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryPackageVersion_possibleTypes = ['SecurityAdvisoryPackageVersion']
export const isSecurityAdvisoryPackageVersion = (obj: { __typename: string }): obj is SecurityAdvisoryPackageVersion => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryPackageVersion_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryPackage_possibleTypes = ['SecurityAdvisoryPackage']
export const isSecurityAdvisoryPackage = (obj: { __typename: string }): obj is SecurityAdvisoryPackage => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryPackage_possibleTypes.includes(obj.__typename)
}



const IssueCommentConnection_possibleTypes = ['IssueCommentConnection']
export const isIssueCommentConnection = (obj: { __typename: string }): obj is IssueCommentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueCommentConnection_possibleTypes.includes(obj.__typename)
}



const IssueCommentEdge_possibleTypes = ['IssueCommentEdge']
export const isIssueCommentEdge = (obj: { __typename: string }): obj is IssueCommentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueCommentEdge_possibleTypes.includes(obj.__typename)
}



const IssueComment_possibleTypes = ['IssueComment']
export const isIssueComment = (obj: { __typename: string }): obj is IssueComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueComment_possibleTypes.includes(obj.__typename)
}



const Hovercard_possibleTypes = ['Hovercard']
export const isHovercard = (obj: { __typename: string }): obj is Hovercard => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Hovercard_possibleTypes.includes(obj.__typename)
}



const HovercardContext_possibleTypes = ['GenericHovercardContext','OrganizationTeamsHovercardContext','OrganizationsHovercardContext','ReviewStatusHovercardContext','ViewerHovercardContext']
export const isHovercardContext = (obj: { __typename: string }): obj is HovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return HovercardContext_possibleTypes.includes(obj.__typename)
}



const IssueTimelineConnection_possibleTypes = ['IssueTimelineConnection']
export const isIssueTimelineConnection = (obj: { __typename: string }): obj is IssueTimelineConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineConnection_possibleTypes.includes(obj.__typename)
}



const IssueTimelineItemEdge_possibleTypes = ['IssueTimelineItemEdge']
export const isIssueTimelineItemEdge = (obj: { __typename: string }): obj is IssueTimelineItemEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineItemEdge_possibleTypes.includes(obj.__typename)
}



const IssueTimelineItem_possibleTypes = ['AssignedEvent','ClosedEvent','Commit','CrossReferencedEvent','DemilestonedEvent','IssueComment','LabeledEvent','LockedEvent','MilestonedEvent','ReferencedEvent','RenamedTitleEvent','ReopenedEvent','SubscribedEvent','TransferredEvent','UnassignedEvent','UnlabeledEvent','UnlockedEvent','UnsubscribedEvent','UserBlockedEvent']
export const isIssueTimelineItem = (obj: { __typename: string }): obj is IssueTimelineItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineItem_possibleTypes.includes(obj.__typename)
}



const AssignedEvent_possibleTypes = ['AssignedEvent']
export const isAssignedEvent = (obj: { __typename: string }): obj is AssignedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AssignedEvent_possibleTypes.includes(obj.__typename)
}



const Assignee_possibleTypes = ['Bot','Mannequin','Organization','User']
export const isAssignee = (obj: { __typename: string }): obj is Assignee => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Assignee_possibleTypes.includes(obj.__typename)
}



const Bot_possibleTypes = ['Bot']
export const isBot = (obj: { __typename: string }): obj is Bot => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Bot_possibleTypes.includes(obj.__typename)
}



const Mannequin_possibleTypes = ['Mannequin']
export const isMannequin = (obj: { __typename: string }): obj is Mannequin => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Mannequin_possibleTypes.includes(obj.__typename)
}



const ClosedEvent_possibleTypes = ['ClosedEvent']
export const isClosedEvent = (obj: { __typename: string }): obj is ClosedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ClosedEvent_possibleTypes.includes(obj.__typename)
}



const Closer_possibleTypes = ['Commit','PullRequest']
export const isCloser = (obj: { __typename: string }): obj is Closer => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Closer_possibleTypes.includes(obj.__typename)
}



const CrossReferencedEvent_possibleTypes = ['CrossReferencedEvent']
export const isCrossReferencedEvent = (obj: { __typename: string }): obj is CrossReferencedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CrossReferencedEvent_possibleTypes.includes(obj.__typename)
}



const ReferencedSubject_possibleTypes = ['Issue','PullRequest']
export const isReferencedSubject = (obj: { __typename: string }): obj is ReferencedSubject => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReferencedSubject_possibleTypes.includes(obj.__typename)
}



const DemilestonedEvent_possibleTypes = ['DemilestonedEvent']
export const isDemilestonedEvent = (obj: { __typename: string }): obj is DemilestonedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DemilestonedEvent_possibleTypes.includes(obj.__typename)
}



const MilestoneItem_possibleTypes = ['Issue','PullRequest']
export const isMilestoneItem = (obj: { __typename: string }): obj is MilestoneItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MilestoneItem_possibleTypes.includes(obj.__typename)
}



const LabeledEvent_possibleTypes = ['LabeledEvent']
export const isLabeledEvent = (obj: { __typename: string }): obj is LabeledEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LabeledEvent_possibleTypes.includes(obj.__typename)
}



const LockedEvent_possibleTypes = ['LockedEvent']
export const isLockedEvent = (obj: { __typename: string }): obj is LockedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LockedEvent_possibleTypes.includes(obj.__typename)
}



const MilestonedEvent_possibleTypes = ['MilestonedEvent']
export const isMilestonedEvent = (obj: { __typename: string }): obj is MilestonedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MilestonedEvent_possibleTypes.includes(obj.__typename)
}



const ReferencedEvent_possibleTypes = ['ReferencedEvent']
export const isReferencedEvent = (obj: { __typename: string }): obj is ReferencedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReferencedEvent_possibleTypes.includes(obj.__typename)
}



const RenamedTitleEvent_possibleTypes = ['RenamedTitleEvent']
export const isRenamedTitleEvent = (obj: { __typename: string }): obj is RenamedTitleEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RenamedTitleEvent_possibleTypes.includes(obj.__typename)
}



const RenamedTitleSubject_possibleTypes = ['Issue','PullRequest']
export const isRenamedTitleSubject = (obj: { __typename: string }): obj is RenamedTitleSubject => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RenamedTitleSubject_possibleTypes.includes(obj.__typename)
}



const ReopenedEvent_possibleTypes = ['ReopenedEvent']
export const isReopenedEvent = (obj: { __typename: string }): obj is ReopenedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReopenedEvent_possibleTypes.includes(obj.__typename)
}



const SubscribedEvent_possibleTypes = ['SubscribedEvent']
export const isSubscribedEvent = (obj: { __typename: string }): obj is SubscribedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SubscribedEvent_possibleTypes.includes(obj.__typename)
}



const TransferredEvent_possibleTypes = ['TransferredEvent']
export const isTransferredEvent = (obj: { __typename: string }): obj is TransferredEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TransferredEvent_possibleTypes.includes(obj.__typename)
}



const UnassignedEvent_possibleTypes = ['UnassignedEvent']
export const isUnassignedEvent = (obj: { __typename: string }): obj is UnassignedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnassignedEvent_possibleTypes.includes(obj.__typename)
}



const UnlabeledEvent_possibleTypes = ['UnlabeledEvent']
export const isUnlabeledEvent = (obj: { __typename: string }): obj is UnlabeledEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnlabeledEvent_possibleTypes.includes(obj.__typename)
}



const UnlockedEvent_possibleTypes = ['UnlockedEvent']
export const isUnlockedEvent = (obj: { __typename: string }): obj is UnlockedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnlockedEvent_possibleTypes.includes(obj.__typename)
}



const UnsubscribedEvent_possibleTypes = ['UnsubscribedEvent']
export const isUnsubscribedEvent = (obj: { __typename: string }): obj is UnsubscribedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnsubscribedEvent_possibleTypes.includes(obj.__typename)
}



const UserBlockedEvent_possibleTypes = ['UserBlockedEvent']
export const isUserBlockedEvent = (obj: { __typename: string }): obj is UserBlockedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UserBlockedEvent_possibleTypes.includes(obj.__typename)
}



const IssueTimelineItemsConnection_possibleTypes = ['IssueTimelineItemsConnection']
export const isIssueTimelineItemsConnection = (obj: { __typename: string }): obj is IssueTimelineItemsConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineItemsConnection_possibleTypes.includes(obj.__typename)
}



const IssueTimelineItemsEdge_possibleTypes = ['IssueTimelineItemsEdge']
export const isIssueTimelineItemsEdge = (obj: { __typename: string }): obj is IssueTimelineItemsEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineItemsEdge_possibleTypes.includes(obj.__typename)
}



const IssueTimelineItems_possibleTypes = ['AddedToProjectEvent','AssignedEvent','ClosedEvent','CommentDeletedEvent','ConnectedEvent','ConvertedNoteToIssueEvent','CrossReferencedEvent','DemilestonedEvent','DisconnectedEvent','IssueComment','LabeledEvent','LockedEvent','MarkedAsDuplicateEvent','MentionedEvent','MilestonedEvent','MovedColumnsInProjectEvent','PinnedEvent','ReferencedEvent','RemovedFromProjectEvent','RenamedTitleEvent','ReopenedEvent','SubscribedEvent','TransferredEvent','UnassignedEvent','UnlabeledEvent','UnlockedEvent','UnmarkedAsDuplicateEvent','UnpinnedEvent','UnsubscribedEvent','UserBlockedEvent']
export const isIssueTimelineItems = (obj: { __typename: string }): obj is IssueTimelineItems => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueTimelineItems_possibleTypes.includes(obj.__typename)
}



const AddedToProjectEvent_possibleTypes = ['AddedToProjectEvent']
export const isAddedToProjectEvent = (obj: { __typename: string }): obj is AddedToProjectEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddedToProjectEvent_possibleTypes.includes(obj.__typename)
}



const CommentDeletedEvent_possibleTypes = ['CommentDeletedEvent']
export const isCommentDeletedEvent = (obj: { __typename: string }): obj is CommentDeletedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommentDeletedEvent_possibleTypes.includes(obj.__typename)
}



const ConnectedEvent_possibleTypes = ['ConnectedEvent']
export const isConnectedEvent = (obj: { __typename: string }): obj is ConnectedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ConnectedEvent_possibleTypes.includes(obj.__typename)
}



const ConvertedNoteToIssueEvent_possibleTypes = ['ConvertedNoteToIssueEvent']
export const isConvertedNoteToIssueEvent = (obj: { __typename: string }): obj is ConvertedNoteToIssueEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ConvertedNoteToIssueEvent_possibleTypes.includes(obj.__typename)
}



const DisconnectedEvent_possibleTypes = ['DisconnectedEvent']
export const isDisconnectedEvent = (obj: { __typename: string }): obj is DisconnectedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DisconnectedEvent_possibleTypes.includes(obj.__typename)
}



const MarkedAsDuplicateEvent_possibleTypes = ['MarkedAsDuplicateEvent']
export const isMarkedAsDuplicateEvent = (obj: { __typename: string }): obj is MarkedAsDuplicateEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarkedAsDuplicateEvent_possibleTypes.includes(obj.__typename)
}



const MentionedEvent_possibleTypes = ['MentionedEvent']
export const isMentionedEvent = (obj: { __typename: string }): obj is MentionedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MentionedEvent_possibleTypes.includes(obj.__typename)
}



const MovedColumnsInProjectEvent_possibleTypes = ['MovedColumnsInProjectEvent']
export const isMovedColumnsInProjectEvent = (obj: { __typename: string }): obj is MovedColumnsInProjectEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MovedColumnsInProjectEvent_possibleTypes.includes(obj.__typename)
}



const PinnedEvent_possibleTypes = ['PinnedEvent']
export const isPinnedEvent = (obj: { __typename: string }): obj is PinnedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnedEvent_possibleTypes.includes(obj.__typename)
}



const RemovedFromProjectEvent_possibleTypes = ['RemovedFromProjectEvent']
export const isRemovedFromProjectEvent = (obj: { __typename: string }): obj is RemovedFromProjectEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemovedFromProjectEvent_possibleTypes.includes(obj.__typename)
}



const UnmarkedAsDuplicateEvent_possibleTypes = ['UnmarkedAsDuplicateEvent']
export const isUnmarkedAsDuplicateEvent = (obj: { __typename: string }): obj is UnmarkedAsDuplicateEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnmarkedAsDuplicateEvent_possibleTypes.includes(obj.__typename)
}



const UnpinnedEvent_possibleTypes = ['UnpinnedEvent']
export const isUnpinnedEvent = (obj: { __typename: string }): obj is UnpinnedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnpinnedEvent_possibleTypes.includes(obj.__typename)
}



const PullRequestCommitConnection_possibleTypes = ['PullRequestCommitConnection']
export const isPullRequestCommitConnection = (obj: { __typename: string }): obj is PullRequestCommitConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestCommitConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestCommitEdge_possibleTypes = ['PullRequestCommitEdge']
export const isPullRequestCommitEdge = (obj: { __typename: string }): obj is PullRequestCommitEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestCommitEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestCommit_possibleTypes = ['PullRequestCommit']
export const isPullRequestCommit = (obj: { __typename: string }): obj is PullRequestCommit => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestCommit_possibleTypes.includes(obj.__typename)
}



const PullRequestChangedFileConnection_possibleTypes = ['PullRequestChangedFileConnection']
export const isPullRequestChangedFileConnection = (obj: { __typename: string }): obj is PullRequestChangedFileConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestChangedFileConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestChangedFileEdge_possibleTypes = ['PullRequestChangedFileEdge']
export const isPullRequestChangedFileEdge = (obj: { __typename: string }): obj is PullRequestChangedFileEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestChangedFileEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestChangedFile_possibleTypes = ['PullRequestChangedFile']
export const isPullRequestChangedFile = (obj: { __typename: string }): obj is PullRequestChangedFile => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestChangedFile_possibleTypes.includes(obj.__typename)
}



const ReviewRequestConnection_possibleTypes = ['ReviewRequestConnection']
export const isReviewRequestConnection = (obj: { __typename: string }): obj is ReviewRequestConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewRequestConnection_possibleTypes.includes(obj.__typename)
}



const ReviewRequestEdge_possibleTypes = ['ReviewRequestEdge']
export const isReviewRequestEdge = (obj: { __typename: string }): obj is ReviewRequestEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewRequestEdge_possibleTypes.includes(obj.__typename)
}



const ReviewRequest_possibleTypes = ['ReviewRequest']
export const isReviewRequest = (obj: { __typename: string }): obj is ReviewRequest => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewRequest_possibleTypes.includes(obj.__typename)
}



const RequestedReviewer_possibleTypes = ['Mannequin','Team','User']
export const isRequestedReviewer = (obj: { __typename: string }): obj is RequestedReviewer => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RequestedReviewer_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewThreadConnection_possibleTypes = ['PullRequestReviewThreadConnection']
export const isPullRequestReviewThreadConnection = (obj: { __typename: string }): obj is PullRequestReviewThreadConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewThreadConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewThreadEdge_possibleTypes = ['PullRequestReviewThreadEdge']
export const isPullRequestReviewThreadEdge = (obj: { __typename: string }): obj is PullRequestReviewThreadEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewThreadEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewThread_possibleTypes = ['PullRequestReviewThread']
export const isPullRequestReviewThread = (obj: { __typename: string }): obj is PullRequestReviewThread => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewThread_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewCommentConnection_possibleTypes = ['PullRequestReviewCommentConnection']
export const isPullRequestReviewCommentConnection = (obj: { __typename: string }): obj is PullRequestReviewCommentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewCommentConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewCommentEdge_possibleTypes = ['PullRequestReviewCommentEdge']
export const isPullRequestReviewCommentEdge = (obj: { __typename: string }): obj is PullRequestReviewCommentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewCommentEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewComment_possibleTypes = ['PullRequestReviewComment']
export const isPullRequestReviewComment = (obj: { __typename: string }): obj is PullRequestReviewComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewComment_possibleTypes.includes(obj.__typename)
}



const PullRequestReview_possibleTypes = ['PullRequestReview']
export const isPullRequestReview = (obj: { __typename: string }): obj is PullRequestReview => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReview_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewConnection_possibleTypes = ['PullRequestReviewConnection']
export const isPullRequestReviewConnection = (obj: { __typename: string }): obj is PullRequestReviewConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewEdge_possibleTypes = ['PullRequestReviewEdge']
export const isPullRequestReviewEdge = (obj: { __typename: string }): obj is PullRequestReviewEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewEdge_possibleTypes.includes(obj.__typename)
}



const SuggestedReviewer_possibleTypes = ['SuggestedReviewer']
export const isSuggestedReviewer = (obj: { __typename: string }): obj is SuggestedReviewer => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SuggestedReviewer_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineConnection_possibleTypes = ['PullRequestTimelineConnection']
export const isPullRequestTimelineConnection = (obj: { __typename: string }): obj is PullRequestTimelineConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineItemEdge_possibleTypes = ['PullRequestTimelineItemEdge']
export const isPullRequestTimelineItemEdge = (obj: { __typename: string }): obj is PullRequestTimelineItemEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineItemEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineItem_possibleTypes = ['AssignedEvent','BaseRefForcePushedEvent','ClosedEvent','Commit','CommitCommentThread','CrossReferencedEvent','DemilestonedEvent','DeployedEvent','DeploymentEnvironmentChangedEvent','HeadRefDeletedEvent','HeadRefForcePushedEvent','HeadRefRestoredEvent','IssueComment','LabeledEvent','LockedEvent','MergedEvent','MilestonedEvent','PullRequestReview','PullRequestReviewComment','PullRequestReviewThread','ReferencedEvent','RenamedTitleEvent','ReopenedEvent','ReviewDismissedEvent','ReviewRequestRemovedEvent','ReviewRequestedEvent','SubscribedEvent','UnassignedEvent','UnlabeledEvent','UnlockedEvent','UnsubscribedEvent','UserBlockedEvent']
export const isPullRequestTimelineItem = (obj: { __typename: string }): obj is PullRequestTimelineItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineItem_possibleTypes.includes(obj.__typename)
}



const BaseRefForcePushedEvent_possibleTypes = ['BaseRefForcePushedEvent']
export const isBaseRefForcePushedEvent = (obj: { __typename: string }): obj is BaseRefForcePushedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BaseRefForcePushedEvent_possibleTypes.includes(obj.__typename)
}



const CommitCommentThread_possibleTypes = ['CommitCommentThread']
export const isCommitCommentThread = (obj: { __typename: string }): obj is CommitCommentThread => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitCommentThread_possibleTypes.includes(obj.__typename)
}



const DeployedEvent_possibleTypes = ['DeployedEvent']
export const isDeployedEvent = (obj: { __typename: string }): obj is DeployedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeployedEvent_possibleTypes.includes(obj.__typename)
}



const DeploymentEnvironmentChangedEvent_possibleTypes = ['DeploymentEnvironmentChangedEvent']
export const isDeploymentEnvironmentChangedEvent = (obj: { __typename: string }): obj is DeploymentEnvironmentChangedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeploymentEnvironmentChangedEvent_possibleTypes.includes(obj.__typename)
}



const HeadRefDeletedEvent_possibleTypes = ['HeadRefDeletedEvent']
export const isHeadRefDeletedEvent = (obj: { __typename: string }): obj is HeadRefDeletedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return HeadRefDeletedEvent_possibleTypes.includes(obj.__typename)
}



const HeadRefForcePushedEvent_possibleTypes = ['HeadRefForcePushedEvent']
export const isHeadRefForcePushedEvent = (obj: { __typename: string }): obj is HeadRefForcePushedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return HeadRefForcePushedEvent_possibleTypes.includes(obj.__typename)
}



const HeadRefRestoredEvent_possibleTypes = ['HeadRefRestoredEvent']
export const isHeadRefRestoredEvent = (obj: { __typename: string }): obj is HeadRefRestoredEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return HeadRefRestoredEvent_possibleTypes.includes(obj.__typename)
}



const MergedEvent_possibleTypes = ['MergedEvent']
export const isMergedEvent = (obj: { __typename: string }): obj is MergedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MergedEvent_possibleTypes.includes(obj.__typename)
}



const ReviewDismissedEvent_possibleTypes = ['ReviewDismissedEvent']
export const isReviewDismissedEvent = (obj: { __typename: string }): obj is ReviewDismissedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewDismissedEvent_possibleTypes.includes(obj.__typename)
}



const ReviewRequestRemovedEvent_possibleTypes = ['ReviewRequestRemovedEvent']
export const isReviewRequestRemovedEvent = (obj: { __typename: string }): obj is ReviewRequestRemovedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewRequestRemovedEvent_possibleTypes.includes(obj.__typename)
}



const ReviewRequestedEvent_possibleTypes = ['ReviewRequestedEvent']
export const isReviewRequestedEvent = (obj: { __typename: string }): obj is ReviewRequestedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewRequestedEvent_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineItemsConnection_possibleTypes = ['PullRequestTimelineItemsConnection']
export const isPullRequestTimelineItemsConnection = (obj: { __typename: string }): obj is PullRequestTimelineItemsConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineItemsConnection_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineItemsEdge_possibleTypes = ['PullRequestTimelineItemsEdge']
export const isPullRequestTimelineItemsEdge = (obj: { __typename: string }): obj is PullRequestTimelineItemsEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineItemsEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestTimelineItems_possibleTypes = ['AddedToProjectEvent','AssignedEvent','AutomaticBaseChangeFailedEvent','AutomaticBaseChangeSucceededEvent','BaseRefChangedEvent','BaseRefForcePushedEvent','ClosedEvent','CommentDeletedEvent','ConnectedEvent','ConvertToDraftEvent','ConvertedNoteToIssueEvent','CrossReferencedEvent','DemilestonedEvent','DeployedEvent','DeploymentEnvironmentChangedEvent','DisconnectedEvent','HeadRefDeletedEvent','HeadRefForcePushedEvent','HeadRefRestoredEvent','IssueComment','LabeledEvent','LockedEvent','MarkedAsDuplicateEvent','MentionedEvent','MergedEvent','MilestonedEvent','MovedColumnsInProjectEvent','PinnedEvent','PullRequestCommit','PullRequestCommitCommentThread','PullRequestReview','PullRequestReviewThread','PullRequestRevisionMarker','ReadyForReviewEvent','ReferencedEvent','RemovedFromProjectEvent','RenamedTitleEvent','ReopenedEvent','ReviewDismissedEvent','ReviewRequestRemovedEvent','ReviewRequestedEvent','SubscribedEvent','TransferredEvent','UnassignedEvent','UnlabeledEvent','UnlockedEvent','UnmarkedAsDuplicateEvent','UnpinnedEvent','UnsubscribedEvent','UserBlockedEvent']
export const isPullRequestTimelineItems = (obj: { __typename: string }): obj is PullRequestTimelineItems => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestTimelineItems_possibleTypes.includes(obj.__typename)
}



const AutomaticBaseChangeFailedEvent_possibleTypes = ['AutomaticBaseChangeFailedEvent']
export const isAutomaticBaseChangeFailedEvent = (obj: { __typename: string }): obj is AutomaticBaseChangeFailedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AutomaticBaseChangeFailedEvent_possibleTypes.includes(obj.__typename)
}



const AutomaticBaseChangeSucceededEvent_possibleTypes = ['AutomaticBaseChangeSucceededEvent']
export const isAutomaticBaseChangeSucceededEvent = (obj: { __typename: string }): obj is AutomaticBaseChangeSucceededEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AutomaticBaseChangeSucceededEvent_possibleTypes.includes(obj.__typename)
}



const BaseRefChangedEvent_possibleTypes = ['BaseRefChangedEvent']
export const isBaseRefChangedEvent = (obj: { __typename: string }): obj is BaseRefChangedEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return BaseRefChangedEvent_possibleTypes.includes(obj.__typename)
}



const ConvertToDraftEvent_possibleTypes = ['ConvertToDraftEvent']
export const isConvertToDraftEvent = (obj: { __typename: string }): obj is ConvertToDraftEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ConvertToDraftEvent_possibleTypes.includes(obj.__typename)
}



const PullRequestCommitCommentThread_possibleTypes = ['PullRequestCommitCommentThread']
export const isPullRequestCommitCommentThread = (obj: { __typename: string }): obj is PullRequestCommitCommentThread => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestCommitCommentThread_possibleTypes.includes(obj.__typename)
}



const PullRequestRevisionMarker_possibleTypes = ['PullRequestRevisionMarker']
export const isPullRequestRevisionMarker = (obj: { __typename: string }): obj is PullRequestRevisionMarker => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestRevisionMarker_possibleTypes.includes(obj.__typename)
}



const ReadyForReviewEvent_possibleTypes = ['ReadyForReviewEvent']
export const isReadyForReviewEvent = (obj: { __typename: string }): obj is ReadyForReviewEvent => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReadyForReviewEvent_possibleTypes.includes(obj.__typename)
}



const PackageVersionStatistics_possibleTypes = ['PackageVersionStatistics']
export const isPackageVersionStatistics = (obj: { __typename: string }): obj is PackageVersionStatistics => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageVersionStatistics_possibleTypes.includes(obj.__typename)
}



const PackageStatistics_possibleTypes = ['PackageStatistics']
export const isPackageStatistics = (obj: { __typename: string }): obj is PackageStatistics => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageStatistics_possibleTypes.includes(obj.__typename)
}



const PackageVersionConnection_possibleTypes = ['PackageVersionConnection']
export const isPackageVersionConnection = (obj: { __typename: string }): obj is PackageVersionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageVersionConnection_possibleTypes.includes(obj.__typename)
}



const PackageVersionEdge_possibleTypes = ['PackageVersionEdge']
export const isPackageVersionEdge = (obj: { __typename: string }): obj is PackageVersionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageVersionEdge_possibleTypes.includes(obj.__typename)
}



const ProfileOwner_possibleTypes = ['Organization','User']
export const isProfileOwner = (obj: { __typename: string }): obj is ProfileOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProfileOwner_possibleTypes.includes(obj.__typename)
}



const ProfileItemShowcase_possibleTypes = ['ProfileItemShowcase']
export const isProfileItemShowcase = (obj: { __typename: string }): obj is ProfileItemShowcase => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ProfileItemShowcase_possibleTypes.includes(obj.__typename)
}



const PinnableItemConnection_possibleTypes = ['PinnableItemConnection']
export const isPinnableItemConnection = (obj: { __typename: string }): obj is PinnableItemConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnableItemConnection_possibleTypes.includes(obj.__typename)
}



const PinnableItemEdge_possibleTypes = ['PinnableItemEdge']
export const isPinnableItemEdge = (obj: { __typename: string }): obj is PinnableItemEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnableItemEdge_possibleTypes.includes(obj.__typename)
}



const PinnableItem_possibleTypes = ['Gist','Repository']
export const isPinnableItem = (obj: { __typename: string }): obj is PinnableItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinnableItem_possibleTypes.includes(obj.__typename)
}



const Gist_possibleTypes = ['Gist']
export const isGist = (obj: { __typename: string }): obj is Gist => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Gist_possibleTypes.includes(obj.__typename)
}



const GistCommentConnection_possibleTypes = ['GistCommentConnection']
export const isGistCommentConnection = (obj: { __typename: string }): obj is GistCommentConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistCommentConnection_possibleTypes.includes(obj.__typename)
}



const GistCommentEdge_possibleTypes = ['GistCommentEdge']
export const isGistCommentEdge = (obj: { __typename: string }): obj is GistCommentEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistCommentEdge_possibleTypes.includes(obj.__typename)
}



const GistComment_possibleTypes = ['GistComment']
export const isGistComment = (obj: { __typename: string }): obj is GistComment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistComment_possibleTypes.includes(obj.__typename)
}



const GistFile_possibleTypes = ['GistFile']
export const isGistFile = (obj: { __typename: string }): obj is GistFile => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistFile_possibleTypes.includes(obj.__typename)
}



const GistConnection_possibleTypes = ['GistConnection']
export const isGistConnection = (obj: { __typename: string }): obj is GistConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistConnection_possibleTypes.includes(obj.__typename)
}



const GistEdge_possibleTypes = ['GistEdge']
export const isGistEdge = (obj: { __typename: string }): obj is GistEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GistEdge_possibleTypes.includes(obj.__typename)
}



const Sponsorable_possibleTypes = ['Organization','User']
export const isSponsorable = (obj: { __typename: string }): obj is Sponsorable => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Sponsorable_possibleTypes.includes(obj.__typename)
}



const SponsorsListing_possibleTypes = ['SponsorsListing']
export const isSponsorsListing = (obj: { __typename: string }): obj is SponsorsListing => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorsListing_possibleTypes.includes(obj.__typename)
}



const SponsorsTierConnection_possibleTypes = ['SponsorsTierConnection']
export const isSponsorsTierConnection = (obj: { __typename: string }): obj is SponsorsTierConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorsTierConnection_possibleTypes.includes(obj.__typename)
}



const SponsorsTierEdge_possibleTypes = ['SponsorsTierEdge']
export const isSponsorsTierEdge = (obj: { __typename: string }): obj is SponsorsTierEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorsTierEdge_possibleTypes.includes(obj.__typename)
}



const SponsorsTier_possibleTypes = ['SponsorsTier']
export const isSponsorsTier = (obj: { __typename: string }): obj is SponsorsTier => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorsTier_possibleTypes.includes(obj.__typename)
}



const SponsorsTierAdminInfo_possibleTypes = ['SponsorsTierAdminInfo']
export const isSponsorsTierAdminInfo = (obj: { __typename: string }): obj is SponsorsTierAdminInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorsTierAdminInfo_possibleTypes.includes(obj.__typename)
}



const SponsorshipConnection_possibleTypes = ['SponsorshipConnection']
export const isSponsorshipConnection = (obj: { __typename: string }): obj is SponsorshipConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorshipConnection_possibleTypes.includes(obj.__typename)
}



const SponsorshipEdge_possibleTypes = ['SponsorshipEdge']
export const isSponsorshipEdge = (obj: { __typename: string }): obj is SponsorshipEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SponsorshipEdge_possibleTypes.includes(obj.__typename)
}



const Sponsorship_possibleTypes = ['Sponsorship']
export const isSponsorship = (obj: { __typename: string }): obj is Sponsorship => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Sponsorship_possibleTypes.includes(obj.__typename)
}



const Sponsor_possibleTypes = ['Organization','User']
export const isSponsor = (obj: { __typename: string }): obj is Sponsor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Sponsor_possibleTypes.includes(obj.__typename)
}



const ContributionsCollection_possibleTypes = ['ContributionsCollection']
export const isContributionsCollection = (obj: { __typename: string }): obj is ContributionsCollection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContributionsCollection_possibleTypes.includes(obj.__typename)
}



const CommitContributionsByRepository_possibleTypes = ['CommitContributionsByRepository']
export const isCommitContributionsByRepository = (obj: { __typename: string }): obj is CommitContributionsByRepository => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CommitContributionsByRepository_possibleTypes.includes(obj.__typename)
}



const CreatedCommitContributionConnection_possibleTypes = ['CreatedCommitContributionConnection']
export const isCreatedCommitContributionConnection = (obj: { __typename: string }): obj is CreatedCommitContributionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedCommitContributionConnection_possibleTypes.includes(obj.__typename)
}



const CreatedCommitContributionEdge_possibleTypes = ['CreatedCommitContributionEdge']
export const isCreatedCommitContributionEdge = (obj: { __typename: string }): obj is CreatedCommitContributionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedCommitContributionEdge_possibleTypes.includes(obj.__typename)
}



const CreatedCommitContribution_possibleTypes = ['CreatedCommitContribution']
export const isCreatedCommitContribution = (obj: { __typename: string }): obj is CreatedCommitContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedCommitContribution_possibleTypes.includes(obj.__typename)
}



const Contribution_possibleTypes = ['CreatedCommitContribution','CreatedIssueContribution','RestrictedContribution','CreatedPullRequestContribution','CreatedRepositoryContribution','JoinedGitHubContribution','CreatedPullRequestReviewContribution']
export const isContribution = (obj: { __typename: string }): obj is Contribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Contribution_possibleTypes.includes(obj.__typename)
}



const ContributionCalendar_possibleTypes = ['ContributionCalendar']
export const isContributionCalendar = (obj: { __typename: string }): obj is ContributionCalendar => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContributionCalendar_possibleTypes.includes(obj.__typename)
}



const ContributionCalendarMonth_possibleTypes = ['ContributionCalendarMonth']
export const isContributionCalendarMonth = (obj: { __typename: string }): obj is ContributionCalendarMonth => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContributionCalendarMonth_possibleTypes.includes(obj.__typename)
}



const ContributionCalendarWeek_possibleTypes = ['ContributionCalendarWeek']
export const isContributionCalendarWeek = (obj: { __typename: string }): obj is ContributionCalendarWeek => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContributionCalendarWeek_possibleTypes.includes(obj.__typename)
}



const ContributionCalendarDay_possibleTypes = ['ContributionCalendarDay']
export const isContributionCalendarDay = (obj: { __typename: string }): obj is ContributionCalendarDay => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContributionCalendarDay_possibleTypes.includes(obj.__typename)
}



const CreatedIssueOrRestrictedContribution_possibleTypes = ['CreatedIssueContribution','RestrictedContribution']
export const isCreatedIssueOrRestrictedContribution = (obj: { __typename: string }): obj is CreatedIssueOrRestrictedContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedIssueOrRestrictedContribution_possibleTypes.includes(obj.__typename)
}



const CreatedIssueContribution_possibleTypes = ['CreatedIssueContribution']
export const isCreatedIssueContribution = (obj: { __typename: string }): obj is CreatedIssueContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedIssueContribution_possibleTypes.includes(obj.__typename)
}



const RestrictedContribution_possibleTypes = ['RestrictedContribution']
export const isRestrictedContribution = (obj: { __typename: string }): obj is RestrictedContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RestrictedContribution_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestOrRestrictedContribution_possibleTypes = ['CreatedPullRequestContribution','RestrictedContribution']
export const isCreatedPullRequestOrRestrictedContribution = (obj: { __typename: string }): obj is CreatedPullRequestOrRestrictedContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestOrRestrictedContribution_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestContribution_possibleTypes = ['CreatedPullRequestContribution']
export const isCreatedPullRequestContribution = (obj: { __typename: string }): obj is CreatedPullRequestContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestContribution_possibleTypes.includes(obj.__typename)
}



const CreatedRepositoryOrRestrictedContribution_possibleTypes = ['CreatedRepositoryContribution','RestrictedContribution']
export const isCreatedRepositoryOrRestrictedContribution = (obj: { __typename: string }): obj is CreatedRepositoryOrRestrictedContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedRepositoryOrRestrictedContribution_possibleTypes.includes(obj.__typename)
}



const CreatedRepositoryContribution_possibleTypes = ['CreatedRepositoryContribution']
export const isCreatedRepositoryContribution = (obj: { __typename: string }): obj is CreatedRepositoryContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedRepositoryContribution_possibleTypes.includes(obj.__typename)
}



const CreatedIssueContributionConnection_possibleTypes = ['CreatedIssueContributionConnection']
export const isCreatedIssueContributionConnection = (obj: { __typename: string }): obj is CreatedIssueContributionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedIssueContributionConnection_possibleTypes.includes(obj.__typename)
}



const CreatedIssueContributionEdge_possibleTypes = ['CreatedIssueContributionEdge']
export const isCreatedIssueContributionEdge = (obj: { __typename: string }): obj is CreatedIssueContributionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedIssueContributionEdge_possibleTypes.includes(obj.__typename)
}



const IssueContributionsByRepository_possibleTypes = ['IssueContributionsByRepository']
export const isIssueContributionsByRepository = (obj: { __typename: string }): obj is IssueContributionsByRepository => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IssueContributionsByRepository_possibleTypes.includes(obj.__typename)
}



const JoinedGitHubContribution_possibleTypes = ['JoinedGitHubContribution']
export const isJoinedGitHubContribution = (obj: { __typename: string }): obj is JoinedGitHubContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return JoinedGitHubContribution_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestContributionConnection_possibleTypes = ['CreatedPullRequestContributionConnection']
export const isCreatedPullRequestContributionConnection = (obj: { __typename: string }): obj is CreatedPullRequestContributionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestContributionConnection_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestContributionEdge_possibleTypes = ['CreatedPullRequestContributionEdge']
export const isCreatedPullRequestContributionEdge = (obj: { __typename: string }): obj is CreatedPullRequestContributionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestContributionEdge_possibleTypes.includes(obj.__typename)
}



const PullRequestContributionsByRepository_possibleTypes = ['PullRequestContributionsByRepository']
export const isPullRequestContributionsByRepository = (obj: { __typename: string }): obj is PullRequestContributionsByRepository => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestContributionsByRepository_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestReviewContributionConnection_possibleTypes = ['CreatedPullRequestReviewContributionConnection']
export const isCreatedPullRequestReviewContributionConnection = (obj: { __typename: string }): obj is CreatedPullRequestReviewContributionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestReviewContributionConnection_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestReviewContributionEdge_possibleTypes = ['CreatedPullRequestReviewContributionEdge']
export const isCreatedPullRequestReviewContributionEdge = (obj: { __typename: string }): obj is CreatedPullRequestReviewContributionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestReviewContributionEdge_possibleTypes.includes(obj.__typename)
}



const CreatedPullRequestReviewContribution_possibleTypes = ['CreatedPullRequestReviewContribution']
export const isCreatedPullRequestReviewContribution = (obj: { __typename: string }): obj is CreatedPullRequestReviewContribution => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedPullRequestReviewContribution_possibleTypes.includes(obj.__typename)
}



const PullRequestReviewContributionsByRepository_possibleTypes = ['PullRequestReviewContributionsByRepository']
export const isPullRequestReviewContributionsByRepository = (obj: { __typename: string }): obj is PullRequestReviewContributionsByRepository => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PullRequestReviewContributionsByRepository_possibleTypes.includes(obj.__typename)
}



const CreatedRepositoryContributionConnection_possibleTypes = ['CreatedRepositoryContributionConnection']
export const isCreatedRepositoryContributionConnection = (obj: { __typename: string }): obj is CreatedRepositoryContributionConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedRepositoryContributionConnection_possibleTypes.includes(obj.__typename)
}



const CreatedRepositoryContributionEdge_possibleTypes = ['CreatedRepositoryContributionEdge']
export const isCreatedRepositoryContributionEdge = (obj: { __typename: string }): obj is CreatedRepositoryContributionEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatedRepositoryContributionEdge_possibleTypes.includes(obj.__typename)
}



const FollowerConnection_possibleTypes = ['FollowerConnection']
export const isFollowerConnection = (obj: { __typename: string }): obj is FollowerConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return FollowerConnection_possibleTypes.includes(obj.__typename)
}



const FollowingConnection_possibleTypes = ['FollowingConnection']
export const isFollowingConnection = (obj: { __typename: string }): obj is FollowingConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return FollowingConnection_possibleTypes.includes(obj.__typename)
}



const OrganizationConnection_possibleTypes = ['OrganizationConnection']
export const isOrganizationConnection = (obj: { __typename: string }): obj is OrganizationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationConnection_possibleTypes.includes(obj.__typename)
}



const OrganizationEdge_possibleTypes = ['OrganizationEdge']
export const isOrganizationEdge = (obj: { __typename: string }): obj is OrganizationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationEdge_possibleTypes.includes(obj.__typename)
}



const PublicKeyConnection_possibleTypes = ['PublicKeyConnection']
export const isPublicKeyConnection = (obj: { __typename: string }): obj is PublicKeyConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PublicKeyConnection_possibleTypes.includes(obj.__typename)
}



const PublicKeyEdge_possibleTypes = ['PublicKeyEdge']
export const isPublicKeyEdge = (obj: { __typename: string }): obj is PublicKeyEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PublicKeyEdge_possibleTypes.includes(obj.__typename)
}



const PublicKey_possibleTypes = ['PublicKey']
export const isPublicKey = (obj: { __typename: string }): obj is PublicKey => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PublicKey_possibleTypes.includes(obj.__typename)
}



const SavedReplyConnection_possibleTypes = ['SavedReplyConnection']
export const isSavedReplyConnection = (obj: { __typename: string }): obj is SavedReplyConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SavedReplyConnection_possibleTypes.includes(obj.__typename)
}



const SavedReplyEdge_possibleTypes = ['SavedReplyEdge']
export const isSavedReplyEdge = (obj: { __typename: string }): obj is SavedReplyEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SavedReplyEdge_possibleTypes.includes(obj.__typename)
}



const SavedReply_possibleTypes = ['SavedReply']
export const isSavedReply = (obj: { __typename: string }): obj is SavedReply => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SavedReply_possibleTypes.includes(obj.__typename)
}



const StarredRepositoryConnection_possibleTypes = ['StarredRepositoryConnection']
export const isStarredRepositoryConnection = (obj: { __typename: string }): obj is StarredRepositoryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StarredRepositoryConnection_possibleTypes.includes(obj.__typename)
}



const StarredRepositoryEdge_possibleTypes = ['StarredRepositoryEdge']
export const isStarredRepositoryEdge = (obj: { __typename: string }): obj is StarredRepositoryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return StarredRepositoryEdge_possibleTypes.includes(obj.__typename)
}



const OrganizationAuditEntryConnection_possibleTypes = ['OrganizationAuditEntryConnection']
export const isOrganizationAuditEntryConnection = (obj: { __typename: string }): obj is OrganizationAuditEntryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationAuditEntryConnection_possibleTypes.includes(obj.__typename)
}



const OrganizationAuditEntryEdge_possibleTypes = ['OrganizationAuditEntryEdge']
export const isOrganizationAuditEntryEdge = (obj: { __typename: string }): obj is OrganizationAuditEntryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationAuditEntryEdge_possibleTypes.includes(obj.__typename)
}



const OrganizationAuditEntry_possibleTypes = ['MembersCanDeleteReposClearAuditEntry','MembersCanDeleteReposDisableAuditEntry','MembersCanDeleteReposEnableAuditEntry','OauthApplicationCreateAuditEntry','OrgAddBillingManagerAuditEntry','OrgAddMemberAuditEntry','OrgBlockUserAuditEntry','OrgConfigDisableCollaboratorsOnlyAuditEntry','OrgConfigEnableCollaboratorsOnlyAuditEntry','OrgCreateAuditEntry','OrgDisableOauthAppRestrictionsAuditEntry','OrgDisableSamlAuditEntry','OrgDisableTwoFactorRequirementAuditEntry','OrgEnableOauthAppRestrictionsAuditEntry','OrgEnableSamlAuditEntry','OrgEnableTwoFactorRequirementAuditEntry','OrgInviteMemberAuditEntry','OrgInviteToBusinessAuditEntry','OrgOauthAppAccessApprovedAuditEntry','OrgOauthAppAccessDeniedAuditEntry','OrgOauthAppAccessRequestedAuditEntry','OrgRemoveBillingManagerAuditEntry','OrgRemoveMemberAuditEntry','OrgRemoveOutsideCollaboratorAuditEntry','OrgRestoreMemberAuditEntry','OrgUnblockUserAuditEntry','OrgUpdateDefaultRepositoryPermissionAuditEntry','OrgUpdateMemberAuditEntry','OrgUpdateMemberRepositoryCreationPermissionAuditEntry','OrgUpdateMemberRepositoryInvitationPermissionAuditEntry','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepoAccessAuditEntry','RepoAddMemberAuditEntry','RepoAddTopicAuditEntry','RepoArchivedAuditEntry','RepoChangeMergeSettingAuditEntry','RepoConfigDisableAnonymousGitAccessAuditEntry','RepoConfigDisableCollaboratorsOnlyAuditEntry','RepoConfigDisableContributorsOnlyAuditEntry','RepoConfigDisableSockpuppetDisallowedAuditEntry','RepoConfigEnableAnonymousGitAccessAuditEntry','RepoConfigEnableCollaboratorsOnlyAuditEntry','RepoConfigEnableContributorsOnlyAuditEntry','RepoConfigEnableSockpuppetDisallowedAuditEntry','RepoConfigLockAnonymousGitAccessAuditEntry','RepoConfigUnlockAnonymousGitAccessAuditEntry','RepoCreateAuditEntry','RepoDestroyAuditEntry','RepoRemoveMemberAuditEntry','RepoRemoveTopicAuditEntry','RepositoryVisibilityChangeDisableAuditEntry','RepositoryVisibilityChangeEnableAuditEntry','TeamAddMemberAuditEntry','TeamAddRepositoryAuditEntry','TeamChangeParentTeamAuditEntry','TeamRemoveMemberAuditEntry','TeamRemoveRepositoryAuditEntry']
export const isOrganizationAuditEntry = (obj: { __typename: string }): obj is OrganizationAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationAuditEntry_possibleTypes.includes(obj.__typename)
}



const MembersCanDeleteReposClearAuditEntry_possibleTypes = ['MembersCanDeleteReposClearAuditEntry']
export const isMembersCanDeleteReposClearAuditEntry = (obj: { __typename: string }): obj is MembersCanDeleteReposClearAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MembersCanDeleteReposClearAuditEntry_possibleTypes.includes(obj.__typename)
}



const AuditEntry_possibleTypes = ['MembersCanDeleteReposClearAuditEntry','MembersCanDeleteReposDisableAuditEntry','MembersCanDeleteReposEnableAuditEntry','OauthApplicationCreateAuditEntry','OrgAddBillingManagerAuditEntry','OrgAddMemberAuditEntry','OrgBlockUserAuditEntry','OrgConfigDisableCollaboratorsOnlyAuditEntry','OrgConfigEnableCollaboratorsOnlyAuditEntry','OrgCreateAuditEntry','OrgDisableOauthAppRestrictionsAuditEntry','OrgDisableSamlAuditEntry','OrgDisableTwoFactorRequirementAuditEntry','OrgEnableOauthAppRestrictionsAuditEntry','OrgEnableSamlAuditEntry','OrgEnableTwoFactorRequirementAuditEntry','OrgInviteMemberAuditEntry','OrgInviteToBusinessAuditEntry','OrgOauthAppAccessApprovedAuditEntry','OrgOauthAppAccessDeniedAuditEntry','OrgOauthAppAccessRequestedAuditEntry','OrgRemoveBillingManagerAuditEntry','OrgRemoveMemberAuditEntry','OrgRemoveOutsideCollaboratorAuditEntry','OrgRestoreMemberAuditEntry','OrgUnblockUserAuditEntry','OrgUpdateDefaultRepositoryPermissionAuditEntry','OrgUpdateMemberAuditEntry','OrgUpdateMemberRepositoryCreationPermissionAuditEntry','OrgUpdateMemberRepositoryInvitationPermissionAuditEntry','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepoAccessAuditEntry','RepoAddMemberAuditEntry','RepoAddTopicAuditEntry','RepoArchivedAuditEntry','RepoChangeMergeSettingAuditEntry','RepoConfigDisableAnonymousGitAccessAuditEntry','RepoConfigDisableCollaboratorsOnlyAuditEntry','RepoConfigDisableContributorsOnlyAuditEntry','RepoConfigDisableSockpuppetDisallowedAuditEntry','RepoConfigEnableAnonymousGitAccessAuditEntry','RepoConfigEnableCollaboratorsOnlyAuditEntry','RepoConfigEnableContributorsOnlyAuditEntry','RepoConfigEnableSockpuppetDisallowedAuditEntry','RepoConfigLockAnonymousGitAccessAuditEntry','RepoConfigUnlockAnonymousGitAccessAuditEntry','RepoCreateAuditEntry','RepoDestroyAuditEntry','RepoRemoveMemberAuditEntry','RepoRemoveTopicAuditEntry','RepositoryVisibilityChangeDisableAuditEntry','RepositoryVisibilityChangeEnableAuditEntry','TeamAddMemberAuditEntry','TeamAddRepositoryAuditEntry','TeamChangeParentTeamAuditEntry','TeamRemoveMemberAuditEntry','TeamRemoveRepositoryAuditEntry']
export const isAuditEntry = (obj: { __typename: string }): obj is AuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AuditEntry_possibleTypes.includes(obj.__typename)
}



const AuditEntryActor_possibleTypes = ['Bot','Organization','User']
export const isAuditEntryActor = (obj: { __typename: string }): obj is AuditEntryActor => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AuditEntryActor_possibleTypes.includes(obj.__typename)
}



const ActorLocation_possibleTypes = ['ActorLocation']
export const isActorLocation = (obj: { __typename: string }): obj is ActorLocation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ActorLocation_possibleTypes.includes(obj.__typename)
}



const EnterpriseAuditEntryData_possibleTypes = ['MembersCanDeleteReposClearAuditEntry','MembersCanDeleteReposDisableAuditEntry','MembersCanDeleteReposEnableAuditEntry','OrgInviteToBusinessAuditEntry','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepositoryVisibilityChangeDisableAuditEntry','RepositoryVisibilityChangeEnableAuditEntry']
export const isEnterpriseAuditEntryData = (obj: { __typename: string }): obj is EnterpriseAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAuditEntryData_possibleTypes.includes(obj.__typename)
}



const OrganizationAuditEntryData_possibleTypes = ['MembersCanDeleteReposClearAuditEntry','MembersCanDeleteReposDisableAuditEntry','MembersCanDeleteReposEnableAuditEntry','OauthApplicationCreateAuditEntry','OrgAddBillingManagerAuditEntry','OrgAddMemberAuditEntry','OrgBlockUserAuditEntry','OrgConfigDisableCollaboratorsOnlyAuditEntry','OrgConfigEnableCollaboratorsOnlyAuditEntry','OrgCreateAuditEntry','OrgDisableOauthAppRestrictionsAuditEntry','OrgDisableSamlAuditEntry','OrgDisableTwoFactorRequirementAuditEntry','OrgEnableOauthAppRestrictionsAuditEntry','OrgEnableSamlAuditEntry','OrgEnableTwoFactorRequirementAuditEntry','OrgInviteMemberAuditEntry','OrgInviteToBusinessAuditEntry','OrgOauthAppAccessApprovedAuditEntry','OrgOauthAppAccessDeniedAuditEntry','OrgOauthAppAccessRequestedAuditEntry','OrgRemoveBillingManagerAuditEntry','OrgRemoveMemberAuditEntry','OrgRemoveOutsideCollaboratorAuditEntry','OrgRestoreMemberAuditEntry','OrgRestoreMemberMembershipOrganizationAuditEntryData','OrgUnblockUserAuditEntry','OrgUpdateDefaultRepositoryPermissionAuditEntry','OrgUpdateMemberAuditEntry','OrgUpdateMemberRepositoryCreationPermissionAuditEntry','OrgUpdateMemberRepositoryInvitationPermissionAuditEntry','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepoAccessAuditEntry','RepoAddMemberAuditEntry','RepoAddTopicAuditEntry','RepoArchivedAuditEntry','RepoChangeMergeSettingAuditEntry','RepoConfigDisableAnonymousGitAccessAuditEntry','RepoConfigDisableCollaboratorsOnlyAuditEntry','RepoConfigDisableContributorsOnlyAuditEntry','RepoConfigDisableSockpuppetDisallowedAuditEntry','RepoConfigEnableAnonymousGitAccessAuditEntry','RepoConfigEnableCollaboratorsOnlyAuditEntry','RepoConfigEnableContributorsOnlyAuditEntry','RepoConfigEnableSockpuppetDisallowedAuditEntry','RepoConfigLockAnonymousGitAccessAuditEntry','RepoConfigUnlockAnonymousGitAccessAuditEntry','RepoCreateAuditEntry','RepoDestroyAuditEntry','RepoRemoveMemberAuditEntry','RepoRemoveTopicAuditEntry','RepositoryVisibilityChangeDisableAuditEntry','RepositoryVisibilityChangeEnableAuditEntry','TeamAddMemberAuditEntry','TeamAddRepositoryAuditEntry','TeamChangeParentTeamAuditEntry','TeamRemoveMemberAuditEntry','TeamRemoveRepositoryAuditEntry']
export const isOrganizationAuditEntryData = (obj: { __typename: string }): obj is OrganizationAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationAuditEntryData_possibleTypes.includes(obj.__typename)
}



const MembersCanDeleteReposDisableAuditEntry_possibleTypes = ['MembersCanDeleteReposDisableAuditEntry']
export const isMembersCanDeleteReposDisableAuditEntry = (obj: { __typename: string }): obj is MembersCanDeleteReposDisableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MembersCanDeleteReposDisableAuditEntry_possibleTypes.includes(obj.__typename)
}



const MembersCanDeleteReposEnableAuditEntry_possibleTypes = ['MembersCanDeleteReposEnableAuditEntry']
export const isMembersCanDeleteReposEnableAuditEntry = (obj: { __typename: string }): obj is MembersCanDeleteReposEnableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MembersCanDeleteReposEnableAuditEntry_possibleTypes.includes(obj.__typename)
}



const OauthApplicationCreateAuditEntry_possibleTypes = ['OauthApplicationCreateAuditEntry']
export const isOauthApplicationCreateAuditEntry = (obj: { __typename: string }): obj is OauthApplicationCreateAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OauthApplicationCreateAuditEntry_possibleTypes.includes(obj.__typename)
}



const OauthApplicationAuditEntryData_possibleTypes = ['OauthApplicationCreateAuditEntry','OrgOauthAppAccessApprovedAuditEntry','OrgOauthAppAccessDeniedAuditEntry','OrgOauthAppAccessRequestedAuditEntry']
export const isOauthApplicationAuditEntryData = (obj: { __typename: string }): obj is OauthApplicationAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OauthApplicationAuditEntryData_possibleTypes.includes(obj.__typename)
}



const OrgAddBillingManagerAuditEntry_possibleTypes = ['OrgAddBillingManagerAuditEntry']
export const isOrgAddBillingManagerAuditEntry = (obj: { __typename: string }): obj is OrgAddBillingManagerAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgAddBillingManagerAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgAddMemberAuditEntry_possibleTypes = ['OrgAddMemberAuditEntry']
export const isOrgAddMemberAuditEntry = (obj: { __typename: string }): obj is OrgAddMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgAddMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgBlockUserAuditEntry_possibleTypes = ['OrgBlockUserAuditEntry']
export const isOrgBlockUserAuditEntry = (obj: { __typename: string }): obj is OrgBlockUserAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgBlockUserAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes = ['OrgConfigDisableCollaboratorsOnlyAuditEntry']
export const isOrgConfigDisableCollaboratorsOnlyAuditEntry = (obj: { __typename: string }): obj is OrgConfigDisableCollaboratorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes = ['OrgConfigEnableCollaboratorsOnlyAuditEntry']
export const isOrgConfigEnableCollaboratorsOnlyAuditEntry = (obj: { __typename: string }): obj is OrgConfigEnableCollaboratorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgCreateAuditEntry_possibleTypes = ['OrgCreateAuditEntry']
export const isOrgCreateAuditEntry = (obj: { __typename: string }): obj is OrgCreateAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgCreateAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgDisableOauthAppRestrictionsAuditEntry_possibleTypes = ['OrgDisableOauthAppRestrictionsAuditEntry']
export const isOrgDisableOauthAppRestrictionsAuditEntry = (obj: { __typename: string }): obj is OrgDisableOauthAppRestrictionsAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgDisableOauthAppRestrictionsAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgDisableSamlAuditEntry_possibleTypes = ['OrgDisableSamlAuditEntry']
export const isOrgDisableSamlAuditEntry = (obj: { __typename: string }): obj is OrgDisableSamlAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgDisableSamlAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgDisableTwoFactorRequirementAuditEntry_possibleTypes = ['OrgDisableTwoFactorRequirementAuditEntry']
export const isOrgDisableTwoFactorRequirementAuditEntry = (obj: { __typename: string }): obj is OrgDisableTwoFactorRequirementAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgDisableTwoFactorRequirementAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgEnableOauthAppRestrictionsAuditEntry_possibleTypes = ['OrgEnableOauthAppRestrictionsAuditEntry']
export const isOrgEnableOauthAppRestrictionsAuditEntry = (obj: { __typename: string }): obj is OrgEnableOauthAppRestrictionsAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgEnableOauthAppRestrictionsAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgEnableSamlAuditEntry_possibleTypes = ['OrgEnableSamlAuditEntry']
export const isOrgEnableSamlAuditEntry = (obj: { __typename: string }): obj is OrgEnableSamlAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgEnableSamlAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgEnableTwoFactorRequirementAuditEntry_possibleTypes = ['OrgEnableTwoFactorRequirementAuditEntry']
export const isOrgEnableTwoFactorRequirementAuditEntry = (obj: { __typename: string }): obj is OrgEnableTwoFactorRequirementAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgEnableTwoFactorRequirementAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgInviteMemberAuditEntry_possibleTypes = ['OrgInviteMemberAuditEntry']
export const isOrgInviteMemberAuditEntry = (obj: { __typename: string }): obj is OrgInviteMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgInviteMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgInviteToBusinessAuditEntry_possibleTypes = ['OrgInviteToBusinessAuditEntry']
export const isOrgInviteToBusinessAuditEntry = (obj: { __typename: string }): obj is OrgInviteToBusinessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgInviteToBusinessAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgOauthAppAccessApprovedAuditEntry_possibleTypes = ['OrgOauthAppAccessApprovedAuditEntry']
export const isOrgOauthAppAccessApprovedAuditEntry = (obj: { __typename: string }): obj is OrgOauthAppAccessApprovedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgOauthAppAccessApprovedAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgOauthAppAccessDeniedAuditEntry_possibleTypes = ['OrgOauthAppAccessDeniedAuditEntry']
export const isOrgOauthAppAccessDeniedAuditEntry = (obj: { __typename: string }): obj is OrgOauthAppAccessDeniedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgOauthAppAccessDeniedAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgOauthAppAccessRequestedAuditEntry_possibleTypes = ['OrgOauthAppAccessRequestedAuditEntry']
export const isOrgOauthAppAccessRequestedAuditEntry = (obj: { __typename: string }): obj is OrgOauthAppAccessRequestedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgOauthAppAccessRequestedAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgRemoveBillingManagerAuditEntry_possibleTypes = ['OrgRemoveBillingManagerAuditEntry']
export const isOrgRemoveBillingManagerAuditEntry = (obj: { __typename: string }): obj is OrgRemoveBillingManagerAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRemoveBillingManagerAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgRemoveMemberAuditEntry_possibleTypes = ['OrgRemoveMemberAuditEntry']
export const isOrgRemoveMemberAuditEntry = (obj: { __typename: string }): obj is OrgRemoveMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgRemoveOutsideCollaboratorAuditEntry_possibleTypes = ['OrgRemoveOutsideCollaboratorAuditEntry']
export const isOrgRemoveOutsideCollaboratorAuditEntry = (obj: { __typename: string }): obj is OrgRemoveOutsideCollaboratorAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRemoveOutsideCollaboratorAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgRestoreMemberAuditEntry_possibleTypes = ['OrgRestoreMemberAuditEntry']
export const isOrgRestoreMemberAuditEntry = (obj: { __typename: string }): obj is OrgRestoreMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRestoreMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgRestoreMemberAuditEntryMembership_possibleTypes = ['OrgRestoreMemberMembershipOrganizationAuditEntryData','OrgRestoreMemberMembershipRepositoryAuditEntryData','OrgRestoreMemberMembershipTeamAuditEntryData']
export const isOrgRestoreMemberAuditEntryMembership = (obj: { __typename: string }): obj is OrgRestoreMemberAuditEntryMembership => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRestoreMemberAuditEntryMembership_possibleTypes.includes(obj.__typename)
}



const OrgRestoreMemberMembershipOrganizationAuditEntryData_possibleTypes = ['OrgRestoreMemberMembershipOrganizationAuditEntryData']
export const isOrgRestoreMemberMembershipOrganizationAuditEntryData = (obj: { __typename: string }): obj is OrgRestoreMemberMembershipOrganizationAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRestoreMemberMembershipOrganizationAuditEntryData_possibleTypes.includes(obj.__typename)
}



const OrgRestoreMemberMembershipRepositoryAuditEntryData_possibleTypes = ['OrgRestoreMemberMembershipRepositoryAuditEntryData']
export const isOrgRestoreMemberMembershipRepositoryAuditEntryData = (obj: { __typename: string }): obj is OrgRestoreMemberMembershipRepositoryAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRestoreMemberMembershipRepositoryAuditEntryData_possibleTypes.includes(obj.__typename)
}



const RepositoryAuditEntryData_possibleTypes = ['OrgRestoreMemberMembershipRepositoryAuditEntryData','PrivateRepositoryForkingDisableAuditEntry','PrivateRepositoryForkingEnableAuditEntry','RepoAccessAuditEntry','RepoAddMemberAuditEntry','RepoAddTopicAuditEntry','RepoArchivedAuditEntry','RepoChangeMergeSettingAuditEntry','RepoConfigDisableAnonymousGitAccessAuditEntry','RepoConfigDisableCollaboratorsOnlyAuditEntry','RepoConfigDisableContributorsOnlyAuditEntry','RepoConfigDisableSockpuppetDisallowedAuditEntry','RepoConfigEnableAnonymousGitAccessAuditEntry','RepoConfigEnableCollaboratorsOnlyAuditEntry','RepoConfigEnableContributorsOnlyAuditEntry','RepoConfigEnableSockpuppetDisallowedAuditEntry','RepoConfigLockAnonymousGitAccessAuditEntry','RepoConfigUnlockAnonymousGitAccessAuditEntry','RepoCreateAuditEntry','RepoDestroyAuditEntry','RepoRemoveMemberAuditEntry','RepoRemoveTopicAuditEntry','TeamAddRepositoryAuditEntry','TeamRemoveRepositoryAuditEntry']
export const isRepositoryAuditEntryData = (obj: { __typename: string }): obj is RepositoryAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryAuditEntryData_possibleTypes.includes(obj.__typename)
}



const OrgRestoreMemberMembershipTeamAuditEntryData_possibleTypes = ['OrgRestoreMemberMembershipTeamAuditEntryData']
export const isOrgRestoreMemberMembershipTeamAuditEntryData = (obj: { __typename: string }): obj is OrgRestoreMemberMembershipTeamAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgRestoreMemberMembershipTeamAuditEntryData_possibleTypes.includes(obj.__typename)
}



const TeamAuditEntryData_possibleTypes = ['OrgRestoreMemberMembershipTeamAuditEntryData','TeamAddMemberAuditEntry','TeamAddRepositoryAuditEntry','TeamChangeParentTeamAuditEntry','TeamRemoveMemberAuditEntry','TeamRemoveRepositoryAuditEntry']
export const isTeamAuditEntryData = (obj: { __typename: string }): obj is TeamAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamAuditEntryData_possibleTypes.includes(obj.__typename)
}



const OrgUnblockUserAuditEntry_possibleTypes = ['OrgUnblockUserAuditEntry']
export const isOrgUnblockUserAuditEntry = (obj: { __typename: string }): obj is OrgUnblockUserAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgUnblockUserAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgUpdateDefaultRepositoryPermissionAuditEntry_possibleTypes = ['OrgUpdateDefaultRepositoryPermissionAuditEntry']
export const isOrgUpdateDefaultRepositoryPermissionAuditEntry = (obj: { __typename: string }): obj is OrgUpdateDefaultRepositoryPermissionAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgUpdateDefaultRepositoryPermissionAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgUpdateMemberAuditEntry_possibleTypes = ['OrgUpdateMemberAuditEntry']
export const isOrgUpdateMemberAuditEntry = (obj: { __typename: string }): obj is OrgUpdateMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgUpdateMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgUpdateMemberRepositoryCreationPermissionAuditEntry_possibleTypes = ['OrgUpdateMemberRepositoryCreationPermissionAuditEntry']
export const isOrgUpdateMemberRepositoryCreationPermissionAuditEntry = (obj: { __typename: string }): obj is OrgUpdateMemberRepositoryCreationPermissionAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgUpdateMemberRepositoryCreationPermissionAuditEntry_possibleTypes.includes(obj.__typename)
}



const OrgUpdateMemberRepositoryInvitationPermissionAuditEntry_possibleTypes = ['OrgUpdateMemberRepositoryInvitationPermissionAuditEntry']
export const isOrgUpdateMemberRepositoryInvitationPermissionAuditEntry = (obj: { __typename: string }): obj is OrgUpdateMemberRepositoryInvitationPermissionAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrgUpdateMemberRepositoryInvitationPermissionAuditEntry_possibleTypes.includes(obj.__typename)
}



const PrivateRepositoryForkingDisableAuditEntry_possibleTypes = ['PrivateRepositoryForkingDisableAuditEntry']
export const isPrivateRepositoryForkingDisableAuditEntry = (obj: { __typename: string }): obj is PrivateRepositoryForkingDisableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PrivateRepositoryForkingDisableAuditEntry_possibleTypes.includes(obj.__typename)
}



const PrivateRepositoryForkingEnableAuditEntry_possibleTypes = ['PrivateRepositoryForkingEnableAuditEntry']
export const isPrivateRepositoryForkingEnableAuditEntry = (obj: { __typename: string }): obj is PrivateRepositoryForkingEnableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PrivateRepositoryForkingEnableAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoAccessAuditEntry_possibleTypes = ['RepoAccessAuditEntry']
export const isRepoAccessAuditEntry = (obj: { __typename: string }): obj is RepoAccessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoAccessAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoAddMemberAuditEntry_possibleTypes = ['RepoAddMemberAuditEntry']
export const isRepoAddMemberAuditEntry = (obj: { __typename: string }): obj is RepoAddMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoAddMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoAddTopicAuditEntry_possibleTypes = ['RepoAddTopicAuditEntry']
export const isRepoAddTopicAuditEntry = (obj: { __typename: string }): obj is RepoAddTopicAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoAddTopicAuditEntry_possibleTypes.includes(obj.__typename)
}



const TopicAuditEntryData_possibleTypes = ['RepoAddTopicAuditEntry','RepoRemoveTopicAuditEntry']
export const isTopicAuditEntryData = (obj: { __typename: string }): obj is TopicAuditEntryData => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TopicAuditEntryData_possibleTypes.includes(obj.__typename)
}



const RepoArchivedAuditEntry_possibleTypes = ['RepoArchivedAuditEntry']
export const isRepoArchivedAuditEntry = (obj: { __typename: string }): obj is RepoArchivedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoArchivedAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoChangeMergeSettingAuditEntry_possibleTypes = ['RepoChangeMergeSettingAuditEntry']
export const isRepoChangeMergeSettingAuditEntry = (obj: { __typename: string }): obj is RepoChangeMergeSettingAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoChangeMergeSettingAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigDisableAnonymousGitAccessAuditEntry_possibleTypes = ['RepoConfigDisableAnonymousGitAccessAuditEntry']
export const isRepoConfigDisableAnonymousGitAccessAuditEntry = (obj: { __typename: string }): obj is RepoConfigDisableAnonymousGitAccessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigDisableAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes = ['RepoConfigDisableCollaboratorsOnlyAuditEntry']
export const isRepoConfigDisableCollaboratorsOnlyAuditEntry = (obj: { __typename: string }): obj is RepoConfigDisableCollaboratorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigDisableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigDisableContributorsOnlyAuditEntry_possibleTypes = ['RepoConfigDisableContributorsOnlyAuditEntry']
export const isRepoConfigDisableContributorsOnlyAuditEntry = (obj: { __typename: string }): obj is RepoConfigDisableContributorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigDisableContributorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigDisableSockpuppetDisallowedAuditEntry_possibleTypes = ['RepoConfigDisableSockpuppetDisallowedAuditEntry']
export const isRepoConfigDisableSockpuppetDisallowedAuditEntry = (obj: { __typename: string }): obj is RepoConfigDisableSockpuppetDisallowedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigDisableSockpuppetDisallowedAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigEnableAnonymousGitAccessAuditEntry_possibleTypes = ['RepoConfigEnableAnonymousGitAccessAuditEntry']
export const isRepoConfigEnableAnonymousGitAccessAuditEntry = (obj: { __typename: string }): obj is RepoConfigEnableAnonymousGitAccessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigEnableAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes = ['RepoConfigEnableCollaboratorsOnlyAuditEntry']
export const isRepoConfigEnableCollaboratorsOnlyAuditEntry = (obj: { __typename: string }): obj is RepoConfigEnableCollaboratorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigEnableCollaboratorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigEnableContributorsOnlyAuditEntry_possibleTypes = ['RepoConfigEnableContributorsOnlyAuditEntry']
export const isRepoConfigEnableContributorsOnlyAuditEntry = (obj: { __typename: string }): obj is RepoConfigEnableContributorsOnlyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigEnableContributorsOnlyAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigEnableSockpuppetDisallowedAuditEntry_possibleTypes = ['RepoConfigEnableSockpuppetDisallowedAuditEntry']
export const isRepoConfigEnableSockpuppetDisallowedAuditEntry = (obj: { __typename: string }): obj is RepoConfigEnableSockpuppetDisallowedAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigEnableSockpuppetDisallowedAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigLockAnonymousGitAccessAuditEntry_possibleTypes = ['RepoConfigLockAnonymousGitAccessAuditEntry']
export const isRepoConfigLockAnonymousGitAccessAuditEntry = (obj: { __typename: string }): obj is RepoConfigLockAnonymousGitAccessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigLockAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoConfigUnlockAnonymousGitAccessAuditEntry_possibleTypes = ['RepoConfigUnlockAnonymousGitAccessAuditEntry']
export const isRepoConfigUnlockAnonymousGitAccessAuditEntry = (obj: { __typename: string }): obj is RepoConfigUnlockAnonymousGitAccessAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoConfigUnlockAnonymousGitAccessAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoCreateAuditEntry_possibleTypes = ['RepoCreateAuditEntry']
export const isRepoCreateAuditEntry = (obj: { __typename: string }): obj is RepoCreateAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoCreateAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoDestroyAuditEntry_possibleTypes = ['RepoDestroyAuditEntry']
export const isRepoDestroyAuditEntry = (obj: { __typename: string }): obj is RepoDestroyAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoDestroyAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoRemoveMemberAuditEntry_possibleTypes = ['RepoRemoveMemberAuditEntry']
export const isRepoRemoveMemberAuditEntry = (obj: { __typename: string }): obj is RepoRemoveMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepoRemoveTopicAuditEntry_possibleTypes = ['RepoRemoveTopicAuditEntry']
export const isRepoRemoveTopicAuditEntry = (obj: { __typename: string }): obj is RepoRemoveTopicAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepoRemoveTopicAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepositoryVisibilityChangeDisableAuditEntry_possibleTypes = ['RepositoryVisibilityChangeDisableAuditEntry']
export const isRepositoryVisibilityChangeDisableAuditEntry = (obj: { __typename: string }): obj is RepositoryVisibilityChangeDisableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryVisibilityChangeDisableAuditEntry_possibleTypes.includes(obj.__typename)
}



const RepositoryVisibilityChangeEnableAuditEntry_possibleTypes = ['RepositoryVisibilityChangeEnableAuditEntry']
export const isRepositoryVisibilityChangeEnableAuditEntry = (obj: { __typename: string }): obj is RepositoryVisibilityChangeEnableAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryVisibilityChangeEnableAuditEntry_possibleTypes.includes(obj.__typename)
}



const TeamAddMemberAuditEntry_possibleTypes = ['TeamAddMemberAuditEntry']
export const isTeamAddMemberAuditEntry = (obj: { __typename: string }): obj is TeamAddMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamAddMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const TeamAddRepositoryAuditEntry_possibleTypes = ['TeamAddRepositoryAuditEntry']
export const isTeamAddRepositoryAuditEntry = (obj: { __typename: string }): obj is TeamAddRepositoryAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamAddRepositoryAuditEntry_possibleTypes.includes(obj.__typename)
}



const TeamChangeParentTeamAuditEntry_possibleTypes = ['TeamChangeParentTeamAuditEntry']
export const isTeamChangeParentTeamAuditEntry = (obj: { __typename: string }): obj is TeamChangeParentTeamAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamChangeParentTeamAuditEntry_possibleTypes.includes(obj.__typename)
}



const TeamRemoveMemberAuditEntry_possibleTypes = ['TeamRemoveMemberAuditEntry']
export const isTeamRemoveMemberAuditEntry = (obj: { __typename: string }): obj is TeamRemoveMemberAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamRemoveMemberAuditEntry_possibleTypes.includes(obj.__typename)
}



const TeamRemoveRepositoryAuditEntry_possibleTypes = ['TeamRemoveRepositoryAuditEntry']
export const isTeamRemoveRepositoryAuditEntry = (obj: { __typename: string }): obj is TeamRemoveRepositoryAuditEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TeamRemoveRepositoryAuditEntry_possibleTypes.includes(obj.__typename)
}



const IpAllowListEntryConnection_possibleTypes = ['IpAllowListEntryConnection']
export const isIpAllowListEntryConnection = (obj: { __typename: string }): obj is IpAllowListEntryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IpAllowListEntryConnection_possibleTypes.includes(obj.__typename)
}



const IpAllowListEntryEdge_possibleTypes = ['IpAllowListEntryEdge']
export const isIpAllowListEntryEdge = (obj: { __typename: string }): obj is IpAllowListEntryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IpAllowListEntryEdge_possibleTypes.includes(obj.__typename)
}



const IpAllowListEntry_possibleTypes = ['IpAllowListEntry']
export const isIpAllowListEntry = (obj: { __typename: string }): obj is IpAllowListEntry => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IpAllowListEntry_possibleTypes.includes(obj.__typename)
}



const IpAllowListOwner_possibleTypes = ['Enterprise','Organization']
export const isIpAllowListOwner = (obj: { __typename: string }): obj is IpAllowListOwner => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return IpAllowListOwner_possibleTypes.includes(obj.__typename)
}



const OrganizationMemberConnection_possibleTypes = ['OrganizationMemberConnection']
export const isOrganizationMemberConnection = (obj: { __typename: string }): obj is OrganizationMemberConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationMemberConnection_possibleTypes.includes(obj.__typename)
}



const OrganizationMemberEdge_possibleTypes = ['OrganizationMemberEdge']
export const isOrganizationMemberEdge = (obj: { __typename: string }): obj is OrganizationMemberEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationMemberEdge_possibleTypes.includes(obj.__typename)
}



const OrganizationIdentityProvider_possibleTypes = ['OrganizationIdentityProvider']
export const isOrganizationIdentityProvider = (obj: { __typename: string }): obj is OrganizationIdentityProvider => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationIdentityProvider_possibleTypes.includes(obj.__typename)
}



const ExternalIdentityConnection_possibleTypes = ['ExternalIdentityConnection']
export const isExternalIdentityConnection = (obj: { __typename: string }): obj is ExternalIdentityConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ExternalIdentityConnection_possibleTypes.includes(obj.__typename)
}



const ExternalIdentityEdge_possibleTypes = ['ExternalIdentityEdge']
export const isExternalIdentityEdge = (obj: { __typename: string }): obj is ExternalIdentityEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ExternalIdentityEdge_possibleTypes.includes(obj.__typename)
}



const ExternalIdentity_possibleTypes = ['ExternalIdentity']
export const isExternalIdentity = (obj: { __typename: string }): obj is ExternalIdentity => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ExternalIdentity_possibleTypes.includes(obj.__typename)
}



const ExternalIdentitySamlAttributes_possibleTypes = ['ExternalIdentitySamlAttributes']
export const isExternalIdentitySamlAttributes = (obj: { __typename: string }): obj is ExternalIdentitySamlAttributes => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ExternalIdentitySamlAttributes_possibleTypes.includes(obj.__typename)
}



const ExternalIdentityScimAttributes_possibleTypes = ['ExternalIdentityScimAttributes']
export const isExternalIdentityScimAttributes = (obj: { __typename: string }): obj is ExternalIdentityScimAttributes => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ExternalIdentityScimAttributes_possibleTypes.includes(obj.__typename)
}



const EnterpriseOwnerInfo_possibleTypes = ['EnterpriseOwnerInfo']
export const isEnterpriseOwnerInfo = (obj: { __typename: string }): obj is EnterpriseOwnerInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseOwnerInfo_possibleTypes.includes(obj.__typename)
}



const EnterpriseAdministratorConnection_possibleTypes = ['EnterpriseAdministratorConnection']
export const isEnterpriseAdministratorConnection = (obj: { __typename: string }): obj is EnterpriseAdministratorConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAdministratorConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseAdministratorEdge_possibleTypes = ['EnterpriseAdministratorEdge']
export const isEnterpriseAdministratorEdge = (obj: { __typename: string }): obj is EnterpriseAdministratorEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAdministratorEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerInstallationConnection_possibleTypes = ['EnterpriseServerInstallationConnection']
export const isEnterpriseServerInstallationConnection = (obj: { __typename: string }): obj is EnterpriseServerInstallationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerInstallationConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerInstallationEdge_possibleTypes = ['EnterpriseServerInstallationEdge']
export const isEnterpriseServerInstallationEdge = (obj: { __typename: string }): obj is EnterpriseServerInstallationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerInstallationEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerInstallation_possibleTypes = ['EnterpriseServerInstallation']
export const isEnterpriseServerInstallation = (obj: { __typename: string }): obj is EnterpriseServerInstallation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerInstallation_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountConnection_possibleTypes = ['EnterpriseServerUserAccountConnection']
export const isEnterpriseServerUserAccountConnection = (obj: { __typename: string }): obj is EnterpriseServerUserAccountConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountEdge_possibleTypes = ['EnterpriseServerUserAccountEdge']
export const isEnterpriseServerUserAccountEdge = (obj: { __typename: string }): obj is EnterpriseServerUserAccountEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccount_possibleTypes = ['EnterpriseServerUserAccount']
export const isEnterpriseServerUserAccount = (obj: { __typename: string }): obj is EnterpriseServerUserAccount => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccount_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountEmailConnection_possibleTypes = ['EnterpriseServerUserAccountEmailConnection']
export const isEnterpriseServerUserAccountEmailConnection = (obj: { __typename: string }): obj is EnterpriseServerUserAccountEmailConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountEmailConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountEmailEdge_possibleTypes = ['EnterpriseServerUserAccountEmailEdge']
export const isEnterpriseServerUserAccountEmailEdge = (obj: { __typename: string }): obj is EnterpriseServerUserAccountEmailEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountEmailEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountEmail_possibleTypes = ['EnterpriseServerUserAccountEmail']
export const isEnterpriseServerUserAccountEmail = (obj: { __typename: string }): obj is EnterpriseServerUserAccountEmail => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountEmail_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountsUploadConnection_possibleTypes = ['EnterpriseServerUserAccountsUploadConnection']
export const isEnterpriseServerUserAccountsUploadConnection = (obj: { __typename: string }): obj is EnterpriseServerUserAccountsUploadConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountsUploadConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountsUploadEdge_possibleTypes = ['EnterpriseServerUserAccountsUploadEdge']
export const isEnterpriseServerUserAccountsUploadEdge = (obj: { __typename: string }): obj is EnterpriseServerUserAccountsUploadEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountsUploadEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseServerUserAccountsUpload_possibleTypes = ['EnterpriseServerUserAccountsUpload']
export const isEnterpriseServerUserAccountsUpload = (obj: { __typename: string }): obj is EnterpriseServerUserAccountsUpload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseServerUserAccountsUpload_possibleTypes.includes(obj.__typename)
}



const EnterpriseOutsideCollaboratorConnection_possibleTypes = ['EnterpriseOutsideCollaboratorConnection']
export const isEnterpriseOutsideCollaboratorConnection = (obj: { __typename: string }): obj is EnterpriseOutsideCollaboratorConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseOutsideCollaboratorConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseOutsideCollaboratorEdge_possibleTypes = ['EnterpriseOutsideCollaboratorEdge']
export const isEnterpriseOutsideCollaboratorEdge = (obj: { __typename: string }): obj is EnterpriseOutsideCollaboratorEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseOutsideCollaboratorEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseRepositoryInfoConnection_possibleTypes = ['EnterpriseRepositoryInfoConnection']
export const isEnterpriseRepositoryInfoConnection = (obj: { __typename: string }): obj is EnterpriseRepositoryInfoConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseRepositoryInfoConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseRepositoryInfoEdge_possibleTypes = ['EnterpriseRepositoryInfoEdge']
export const isEnterpriseRepositoryInfoEdge = (obj: { __typename: string }): obj is EnterpriseRepositoryInfoEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseRepositoryInfoEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseRepositoryInfo_possibleTypes = ['EnterpriseRepositoryInfo']
export const isEnterpriseRepositoryInfo = (obj: { __typename: string }): obj is EnterpriseRepositoryInfo => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseRepositoryInfo_possibleTypes.includes(obj.__typename)
}



const EnterpriseAdministratorInvitationConnection_possibleTypes = ['EnterpriseAdministratorInvitationConnection']
export const isEnterpriseAdministratorInvitationConnection = (obj: { __typename: string }): obj is EnterpriseAdministratorInvitationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAdministratorInvitationConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseAdministratorInvitationEdge_possibleTypes = ['EnterpriseAdministratorInvitationEdge']
export const isEnterpriseAdministratorInvitationEdge = (obj: { __typename: string }): obj is EnterpriseAdministratorInvitationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAdministratorInvitationEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseAdministratorInvitation_possibleTypes = ['EnterpriseAdministratorInvitation']
export const isEnterpriseAdministratorInvitation = (obj: { __typename: string }): obj is EnterpriseAdministratorInvitation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseAdministratorInvitation_possibleTypes.includes(obj.__typename)
}



const RepositoryInvitationConnection_possibleTypes = ['RepositoryInvitationConnection']
export const isRepositoryInvitationConnection = (obj: { __typename: string }): obj is RepositoryInvitationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryInvitationConnection_possibleTypes.includes(obj.__typename)
}



const RepositoryInvitationEdge_possibleTypes = ['RepositoryInvitationEdge']
export const isRepositoryInvitationEdge = (obj: { __typename: string }): obj is RepositoryInvitationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryInvitationEdge_possibleTypes.includes(obj.__typename)
}



const RepositoryInvitation_possibleTypes = ['RepositoryInvitation']
export const isRepositoryInvitation = (obj: { __typename: string }): obj is RepositoryInvitation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RepositoryInvitation_possibleTypes.includes(obj.__typename)
}



const EnterprisePendingCollaboratorConnection_possibleTypes = ['EnterprisePendingCollaboratorConnection']
export const isEnterprisePendingCollaboratorConnection = (obj: { __typename: string }): obj is EnterprisePendingCollaboratorConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterprisePendingCollaboratorConnection_possibleTypes.includes(obj.__typename)
}



const EnterprisePendingCollaboratorEdge_possibleTypes = ['EnterprisePendingCollaboratorEdge']
export const isEnterprisePendingCollaboratorEdge = (obj: { __typename: string }): obj is EnterprisePendingCollaboratorEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterprisePendingCollaboratorEdge_possibleTypes.includes(obj.__typename)
}



const EnterprisePendingMemberInvitationConnection_possibleTypes = ['EnterprisePendingMemberInvitationConnection']
export const isEnterprisePendingMemberInvitationConnection = (obj: { __typename: string }): obj is EnterprisePendingMemberInvitationConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterprisePendingMemberInvitationConnection_possibleTypes.includes(obj.__typename)
}



const EnterprisePendingMemberInvitationEdge_possibleTypes = ['EnterprisePendingMemberInvitationEdge']
export const isEnterprisePendingMemberInvitationEdge = (obj: { __typename: string }): obj is EnterprisePendingMemberInvitationEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterprisePendingMemberInvitationEdge_possibleTypes.includes(obj.__typename)
}



const EnterpriseIdentityProvider_possibleTypes = ['EnterpriseIdentityProvider']
export const isEnterpriseIdentityProvider = (obj: { __typename: string }): obj is EnterpriseIdentityProvider => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseIdentityProvider_possibleTypes.includes(obj.__typename)
}



const EnterpriseUserAccountConnection_possibleTypes = ['EnterpriseUserAccountConnection']
export const isEnterpriseUserAccountConnection = (obj: { __typename: string }): obj is EnterpriseUserAccountConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseUserAccountConnection_possibleTypes.includes(obj.__typename)
}



const EnterpriseUserAccountEdge_possibleTypes = ['EnterpriseUserAccountEdge']
export const isEnterpriseUserAccountEdge = (obj: { __typename: string }): obj is EnterpriseUserAccountEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return EnterpriseUserAccountEdge_possibleTypes.includes(obj.__typename)
}



const MarketplaceCategory_possibleTypes = ['MarketplaceCategory']
export const isMarketplaceCategory = (obj: { __typename: string }): obj is MarketplaceCategory => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarketplaceCategory_possibleTypes.includes(obj.__typename)
}



const MarketplaceListing_possibleTypes = ['MarketplaceListing']
export const isMarketplaceListing = (obj: { __typename: string }): obj is MarketplaceListing => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarketplaceListing_possibleTypes.includes(obj.__typename)
}



const MarketplaceListingConnection_possibleTypes = ['MarketplaceListingConnection']
export const isMarketplaceListingConnection = (obj: { __typename: string }): obj is MarketplaceListingConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarketplaceListingConnection_possibleTypes.includes(obj.__typename)
}



const MarketplaceListingEdge_possibleTypes = ['MarketplaceListingEdge']
export const isMarketplaceListingEdge = (obj: { __typename: string }): obj is MarketplaceListingEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarketplaceListingEdge_possibleTypes.includes(obj.__typename)
}



const GitHubMetadata_possibleTypes = ['GitHubMetadata']
export const isGitHubMetadata = (obj: { __typename: string }): obj is GitHubMetadata => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GitHubMetadata_possibleTypes.includes(obj.__typename)
}



const RateLimit_possibleTypes = ['RateLimit']
export const isRateLimit = (obj: { __typename: string }): obj is RateLimit => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RateLimit_possibleTypes.includes(obj.__typename)
}



const SearchResultItemConnection_possibleTypes = ['SearchResultItemConnection']
export const isSearchResultItemConnection = (obj: { __typename: string }): obj is SearchResultItemConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SearchResultItemConnection_possibleTypes.includes(obj.__typename)
}



const SearchResultItemEdge_possibleTypes = ['SearchResultItemEdge']
export const isSearchResultItemEdge = (obj: { __typename: string }): obj is SearchResultItemEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SearchResultItemEdge_possibleTypes.includes(obj.__typename)
}



const SearchResultItem_possibleTypes = ['App','Issue','MarketplaceListing','Organization','PullRequest','Repository','User']
export const isSearchResultItem = (obj: { __typename: string }): obj is SearchResultItem => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SearchResultItem_possibleTypes.includes(obj.__typename)
}



const TextMatch_possibleTypes = ['TextMatch']
export const isTextMatch = (obj: { __typename: string }): obj is TextMatch => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TextMatch_possibleTypes.includes(obj.__typename)
}



const TextMatchHighlight_possibleTypes = ['TextMatchHighlight']
export const isTextMatchHighlight = (obj: { __typename: string }): obj is TextMatchHighlight => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TextMatchHighlight_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryConnection_possibleTypes = ['SecurityAdvisoryConnection']
export const isSecurityAdvisoryConnection = (obj: { __typename: string }): obj is SecurityAdvisoryConnection => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryConnection_possibleTypes.includes(obj.__typename)
}



const SecurityAdvisoryEdge_possibleTypes = ['SecurityAdvisoryEdge']
export const isSecurityAdvisoryEdge = (obj: { __typename: string }): obj is SecurityAdvisoryEdge => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SecurityAdvisoryEdge_possibleTypes.includes(obj.__typename)
}



const Mutation_possibleTypes = ['Mutation']
export const isMutation = (obj: { __typename: string }): obj is Mutation => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Mutation_possibleTypes.includes(obj.__typename)
}



const AcceptEnterpriseAdministratorInvitationPayload_possibleTypes = ['AcceptEnterpriseAdministratorInvitationPayload']
export const isAcceptEnterpriseAdministratorInvitationPayload = (obj: { __typename: string }): obj is AcceptEnterpriseAdministratorInvitationPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AcceptEnterpriseAdministratorInvitationPayload_possibleTypes.includes(obj.__typename)
}



const AcceptTopicSuggestionPayload_possibleTypes = ['AcceptTopicSuggestionPayload']
export const isAcceptTopicSuggestionPayload = (obj: { __typename: string }): obj is AcceptTopicSuggestionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AcceptTopicSuggestionPayload_possibleTypes.includes(obj.__typename)
}



const AddAssigneesToAssignablePayload_possibleTypes = ['AddAssigneesToAssignablePayload']
export const isAddAssigneesToAssignablePayload = (obj: { __typename: string }): obj is AddAssigneesToAssignablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddAssigneesToAssignablePayload_possibleTypes.includes(obj.__typename)
}



const AddCommentPayload_possibleTypes = ['AddCommentPayload']
export const isAddCommentPayload = (obj: { __typename: string }): obj is AddCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddCommentPayload_possibleTypes.includes(obj.__typename)
}



const AddLabelsToLabelablePayload_possibleTypes = ['AddLabelsToLabelablePayload']
export const isAddLabelsToLabelablePayload = (obj: { __typename: string }): obj is AddLabelsToLabelablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddLabelsToLabelablePayload_possibleTypes.includes(obj.__typename)
}



const AddProjectCardPayload_possibleTypes = ['AddProjectCardPayload']
export const isAddProjectCardPayload = (obj: { __typename: string }): obj is AddProjectCardPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddProjectCardPayload_possibleTypes.includes(obj.__typename)
}



const AddProjectColumnPayload_possibleTypes = ['AddProjectColumnPayload']
export const isAddProjectColumnPayload = (obj: { __typename: string }): obj is AddProjectColumnPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddProjectColumnPayload_possibleTypes.includes(obj.__typename)
}



const AddPullRequestReviewPayload_possibleTypes = ['AddPullRequestReviewPayload']
export const isAddPullRequestReviewPayload = (obj: { __typename: string }): obj is AddPullRequestReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddPullRequestReviewPayload_possibleTypes.includes(obj.__typename)
}



const AddPullRequestReviewCommentPayload_possibleTypes = ['AddPullRequestReviewCommentPayload']
export const isAddPullRequestReviewCommentPayload = (obj: { __typename: string }): obj is AddPullRequestReviewCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddPullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename)
}



const AddPullRequestReviewThreadPayload_possibleTypes = ['AddPullRequestReviewThreadPayload']
export const isAddPullRequestReviewThreadPayload = (obj: { __typename: string }): obj is AddPullRequestReviewThreadPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddPullRequestReviewThreadPayload_possibleTypes.includes(obj.__typename)
}



const AddReactionPayload_possibleTypes = ['AddReactionPayload']
export const isAddReactionPayload = (obj: { __typename: string }): obj is AddReactionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddReactionPayload_possibleTypes.includes(obj.__typename)
}



const AddStarPayload_possibleTypes = ['AddStarPayload']
export const isAddStarPayload = (obj: { __typename: string }): obj is AddStarPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return AddStarPayload_possibleTypes.includes(obj.__typename)
}



const ArchiveRepositoryPayload_possibleTypes = ['ArchiveRepositoryPayload']
export const isArchiveRepositoryPayload = (obj: { __typename: string }): obj is ArchiveRepositoryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ArchiveRepositoryPayload_possibleTypes.includes(obj.__typename)
}



const CancelEnterpriseAdminInvitationPayload_possibleTypes = ['CancelEnterpriseAdminInvitationPayload']
export const isCancelEnterpriseAdminInvitationPayload = (obj: { __typename: string }): obj is CancelEnterpriseAdminInvitationPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CancelEnterpriseAdminInvitationPayload_possibleTypes.includes(obj.__typename)
}



const ChangeUserStatusPayload_possibleTypes = ['ChangeUserStatusPayload']
export const isChangeUserStatusPayload = (obj: { __typename: string }): obj is ChangeUserStatusPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ChangeUserStatusPayload_possibleTypes.includes(obj.__typename)
}



const ClearLabelsFromLabelablePayload_possibleTypes = ['ClearLabelsFromLabelablePayload']
export const isClearLabelsFromLabelablePayload = (obj: { __typename: string }): obj is ClearLabelsFromLabelablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ClearLabelsFromLabelablePayload_possibleTypes.includes(obj.__typename)
}



const CloneProjectPayload_possibleTypes = ['CloneProjectPayload']
export const isCloneProjectPayload = (obj: { __typename: string }): obj is CloneProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CloneProjectPayload_possibleTypes.includes(obj.__typename)
}



const CloneTemplateRepositoryPayload_possibleTypes = ['CloneTemplateRepositoryPayload']
export const isCloneTemplateRepositoryPayload = (obj: { __typename: string }): obj is CloneTemplateRepositoryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CloneTemplateRepositoryPayload_possibleTypes.includes(obj.__typename)
}



const CloseIssuePayload_possibleTypes = ['CloseIssuePayload']
export const isCloseIssuePayload = (obj: { __typename: string }): obj is CloseIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CloseIssuePayload_possibleTypes.includes(obj.__typename)
}



const ClosePullRequestPayload_possibleTypes = ['ClosePullRequestPayload']
export const isClosePullRequestPayload = (obj: { __typename: string }): obj is ClosePullRequestPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ClosePullRequestPayload_possibleTypes.includes(obj.__typename)
}



const ConvertProjectCardNoteToIssuePayload_possibleTypes = ['ConvertProjectCardNoteToIssuePayload']
export const isConvertProjectCardNoteToIssuePayload = (obj: { __typename: string }): obj is ConvertProjectCardNoteToIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ConvertProjectCardNoteToIssuePayload_possibleTypes.includes(obj.__typename)
}



const CreateBranchProtectionRulePayload_possibleTypes = ['CreateBranchProtectionRulePayload']
export const isCreateBranchProtectionRulePayload = (obj: { __typename: string }): obj is CreateBranchProtectionRulePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateBranchProtectionRulePayload_possibleTypes.includes(obj.__typename)
}



const CreateCheckRunPayload_possibleTypes = ['CreateCheckRunPayload']
export const isCreateCheckRunPayload = (obj: { __typename: string }): obj is CreateCheckRunPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateCheckRunPayload_possibleTypes.includes(obj.__typename)
}



const CreateCheckSuitePayload_possibleTypes = ['CreateCheckSuitePayload']
export const isCreateCheckSuitePayload = (obj: { __typename: string }): obj is CreateCheckSuitePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateCheckSuitePayload_possibleTypes.includes(obj.__typename)
}



const CreateContentAttachmentPayload_possibleTypes = ['CreateContentAttachmentPayload']
export const isCreateContentAttachmentPayload = (obj: { __typename: string }): obj is CreateContentAttachmentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateContentAttachmentPayload_possibleTypes.includes(obj.__typename)
}



const ContentAttachment_possibleTypes = ['ContentAttachment']
export const isContentAttachment = (obj: { __typename: string }): obj is ContentAttachment => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContentAttachment_possibleTypes.includes(obj.__typename)
}



const ContentReference_possibleTypes = ['ContentReference']
export const isContentReference = (obj: { __typename: string }): obj is ContentReference => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ContentReference_possibleTypes.includes(obj.__typename)
}



const CreateDeploymentPayload_possibleTypes = ['CreateDeploymentPayload']
export const isCreateDeploymentPayload = (obj: { __typename: string }): obj is CreateDeploymentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateDeploymentPayload_possibleTypes.includes(obj.__typename)
}



const CreateDeploymentStatusPayload_possibleTypes = ['CreateDeploymentStatusPayload']
export const isCreateDeploymentStatusPayload = (obj: { __typename: string }): obj is CreateDeploymentStatusPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateDeploymentStatusPayload_possibleTypes.includes(obj.__typename)
}



const CreateEnterpriseOrganizationPayload_possibleTypes = ['CreateEnterpriseOrganizationPayload']
export const isCreateEnterpriseOrganizationPayload = (obj: { __typename: string }): obj is CreateEnterpriseOrganizationPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateEnterpriseOrganizationPayload_possibleTypes.includes(obj.__typename)
}



const CreateIpAllowListEntryPayload_possibleTypes = ['CreateIpAllowListEntryPayload']
export const isCreateIpAllowListEntryPayload = (obj: { __typename: string }): obj is CreateIpAllowListEntryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateIpAllowListEntryPayload_possibleTypes.includes(obj.__typename)
}



const CreateIssuePayload_possibleTypes = ['CreateIssuePayload']
export const isCreateIssuePayload = (obj: { __typename: string }): obj is CreateIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateIssuePayload_possibleTypes.includes(obj.__typename)
}



const CreateLabelPayload_possibleTypes = ['CreateLabelPayload']
export const isCreateLabelPayload = (obj: { __typename: string }): obj is CreateLabelPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateLabelPayload_possibleTypes.includes(obj.__typename)
}



const CreateProjectPayload_possibleTypes = ['CreateProjectPayload']
export const isCreateProjectPayload = (obj: { __typename: string }): obj is CreateProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateProjectPayload_possibleTypes.includes(obj.__typename)
}



const CreatePullRequestPayload_possibleTypes = ['CreatePullRequestPayload']
export const isCreatePullRequestPayload = (obj: { __typename: string }): obj is CreatePullRequestPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreatePullRequestPayload_possibleTypes.includes(obj.__typename)
}



const CreateRefPayload_possibleTypes = ['CreateRefPayload']
export const isCreateRefPayload = (obj: { __typename: string }): obj is CreateRefPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateRefPayload_possibleTypes.includes(obj.__typename)
}



const CreateRepositoryPayload_possibleTypes = ['CreateRepositoryPayload']
export const isCreateRepositoryPayload = (obj: { __typename: string }): obj is CreateRepositoryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateRepositoryPayload_possibleTypes.includes(obj.__typename)
}



const CreateTeamDiscussionPayload_possibleTypes = ['CreateTeamDiscussionPayload']
export const isCreateTeamDiscussionPayload = (obj: { __typename: string }): obj is CreateTeamDiscussionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateTeamDiscussionPayload_possibleTypes.includes(obj.__typename)
}



const CreateTeamDiscussionCommentPayload_possibleTypes = ['CreateTeamDiscussionCommentPayload']
export const isCreateTeamDiscussionCommentPayload = (obj: { __typename: string }): obj is CreateTeamDiscussionCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return CreateTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename)
}



const DeclineTopicSuggestionPayload_possibleTypes = ['DeclineTopicSuggestionPayload']
export const isDeclineTopicSuggestionPayload = (obj: { __typename: string }): obj is DeclineTopicSuggestionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeclineTopicSuggestionPayload_possibleTypes.includes(obj.__typename)
}



const DeleteBranchProtectionRulePayload_possibleTypes = ['DeleteBranchProtectionRulePayload']
export const isDeleteBranchProtectionRulePayload = (obj: { __typename: string }): obj is DeleteBranchProtectionRulePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteBranchProtectionRulePayload_possibleTypes.includes(obj.__typename)
}



const DeleteDeploymentPayload_possibleTypes = ['DeleteDeploymentPayload']
export const isDeleteDeploymentPayload = (obj: { __typename: string }): obj is DeleteDeploymentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteDeploymentPayload_possibleTypes.includes(obj.__typename)
}



const DeleteIpAllowListEntryPayload_possibleTypes = ['DeleteIpAllowListEntryPayload']
export const isDeleteIpAllowListEntryPayload = (obj: { __typename: string }): obj is DeleteIpAllowListEntryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteIpAllowListEntryPayload_possibleTypes.includes(obj.__typename)
}



const DeleteIssuePayload_possibleTypes = ['DeleteIssuePayload']
export const isDeleteIssuePayload = (obj: { __typename: string }): obj is DeleteIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteIssuePayload_possibleTypes.includes(obj.__typename)
}



const DeleteIssueCommentPayload_possibleTypes = ['DeleteIssueCommentPayload']
export const isDeleteIssueCommentPayload = (obj: { __typename: string }): obj is DeleteIssueCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteIssueCommentPayload_possibleTypes.includes(obj.__typename)
}



const DeleteLabelPayload_possibleTypes = ['DeleteLabelPayload']
export const isDeleteLabelPayload = (obj: { __typename: string }): obj is DeleteLabelPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteLabelPayload_possibleTypes.includes(obj.__typename)
}



const DeletePackageVersionPayload_possibleTypes = ['DeletePackageVersionPayload']
export const isDeletePackageVersionPayload = (obj: { __typename: string }): obj is DeletePackageVersionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeletePackageVersionPayload_possibleTypes.includes(obj.__typename)
}



const DeleteProjectPayload_possibleTypes = ['DeleteProjectPayload']
export const isDeleteProjectPayload = (obj: { __typename: string }): obj is DeleteProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteProjectPayload_possibleTypes.includes(obj.__typename)
}



const DeleteProjectCardPayload_possibleTypes = ['DeleteProjectCardPayload']
export const isDeleteProjectCardPayload = (obj: { __typename: string }): obj is DeleteProjectCardPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteProjectCardPayload_possibleTypes.includes(obj.__typename)
}



const DeleteProjectColumnPayload_possibleTypes = ['DeleteProjectColumnPayload']
export const isDeleteProjectColumnPayload = (obj: { __typename: string }): obj is DeleteProjectColumnPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteProjectColumnPayload_possibleTypes.includes(obj.__typename)
}



const DeletePullRequestReviewPayload_possibleTypes = ['DeletePullRequestReviewPayload']
export const isDeletePullRequestReviewPayload = (obj: { __typename: string }): obj is DeletePullRequestReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeletePullRequestReviewPayload_possibleTypes.includes(obj.__typename)
}



const DeletePullRequestReviewCommentPayload_possibleTypes = ['DeletePullRequestReviewCommentPayload']
export const isDeletePullRequestReviewCommentPayload = (obj: { __typename: string }): obj is DeletePullRequestReviewCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeletePullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename)
}



const DeleteRefPayload_possibleTypes = ['DeleteRefPayload']
export const isDeleteRefPayload = (obj: { __typename: string }): obj is DeleteRefPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteRefPayload_possibleTypes.includes(obj.__typename)
}



const DeleteTeamDiscussionPayload_possibleTypes = ['DeleteTeamDiscussionPayload']
export const isDeleteTeamDiscussionPayload = (obj: { __typename: string }): obj is DeleteTeamDiscussionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteTeamDiscussionPayload_possibleTypes.includes(obj.__typename)
}



const DeleteTeamDiscussionCommentPayload_possibleTypes = ['DeleteTeamDiscussionCommentPayload']
export const isDeleteTeamDiscussionCommentPayload = (obj: { __typename: string }): obj is DeleteTeamDiscussionCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DeleteTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename)
}



const DismissPullRequestReviewPayload_possibleTypes = ['DismissPullRequestReviewPayload']
export const isDismissPullRequestReviewPayload = (obj: { __typename: string }): obj is DismissPullRequestReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return DismissPullRequestReviewPayload_possibleTypes.includes(obj.__typename)
}



const FollowUserPayload_possibleTypes = ['FollowUserPayload']
export const isFollowUserPayload = (obj: { __typename: string }): obj is FollowUserPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return FollowUserPayload_possibleTypes.includes(obj.__typename)
}



const ImportProjectPayload_possibleTypes = ['ImportProjectPayload']
export const isImportProjectPayload = (obj: { __typename: string }): obj is ImportProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ImportProjectPayload_possibleTypes.includes(obj.__typename)
}



const InviteEnterpriseAdminPayload_possibleTypes = ['InviteEnterpriseAdminPayload']
export const isInviteEnterpriseAdminPayload = (obj: { __typename: string }): obj is InviteEnterpriseAdminPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return InviteEnterpriseAdminPayload_possibleTypes.includes(obj.__typename)
}



const LinkRepositoryToProjectPayload_possibleTypes = ['LinkRepositoryToProjectPayload']
export const isLinkRepositoryToProjectPayload = (obj: { __typename: string }): obj is LinkRepositoryToProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LinkRepositoryToProjectPayload_possibleTypes.includes(obj.__typename)
}



const LockLockablePayload_possibleTypes = ['LockLockablePayload']
export const isLockLockablePayload = (obj: { __typename: string }): obj is LockLockablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return LockLockablePayload_possibleTypes.includes(obj.__typename)
}



const MarkPullRequestReadyForReviewPayload_possibleTypes = ['MarkPullRequestReadyForReviewPayload']
export const isMarkPullRequestReadyForReviewPayload = (obj: { __typename: string }): obj is MarkPullRequestReadyForReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MarkPullRequestReadyForReviewPayload_possibleTypes.includes(obj.__typename)
}



const MergeBranchPayload_possibleTypes = ['MergeBranchPayload']
export const isMergeBranchPayload = (obj: { __typename: string }): obj is MergeBranchPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MergeBranchPayload_possibleTypes.includes(obj.__typename)
}



const MergePullRequestPayload_possibleTypes = ['MergePullRequestPayload']
export const isMergePullRequestPayload = (obj: { __typename: string }): obj is MergePullRequestPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MergePullRequestPayload_possibleTypes.includes(obj.__typename)
}



const MinimizeCommentPayload_possibleTypes = ['MinimizeCommentPayload']
export const isMinimizeCommentPayload = (obj: { __typename: string }): obj is MinimizeCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MinimizeCommentPayload_possibleTypes.includes(obj.__typename)
}



const MoveProjectCardPayload_possibleTypes = ['MoveProjectCardPayload']
export const isMoveProjectCardPayload = (obj: { __typename: string }): obj is MoveProjectCardPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MoveProjectCardPayload_possibleTypes.includes(obj.__typename)
}



const MoveProjectColumnPayload_possibleTypes = ['MoveProjectColumnPayload']
export const isMoveProjectColumnPayload = (obj: { __typename: string }): obj is MoveProjectColumnPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return MoveProjectColumnPayload_possibleTypes.includes(obj.__typename)
}



const PinIssuePayload_possibleTypes = ['PinIssuePayload']
export const isPinIssuePayload = (obj: { __typename: string }): obj is PinIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PinIssuePayload_possibleTypes.includes(obj.__typename)
}



const RegenerateEnterpriseIdentityProviderRecoveryCodesPayload_possibleTypes = ['RegenerateEnterpriseIdentityProviderRecoveryCodesPayload']
export const isRegenerateEnterpriseIdentityProviderRecoveryCodesPayload = (obj: { __typename: string }): obj is RegenerateEnterpriseIdentityProviderRecoveryCodesPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RegenerateEnterpriseIdentityProviderRecoveryCodesPayload_possibleTypes.includes(obj.__typename)
}



const RemoveAssigneesFromAssignablePayload_possibleTypes = ['RemoveAssigneesFromAssignablePayload']
export const isRemoveAssigneesFromAssignablePayload = (obj: { __typename: string }): obj is RemoveAssigneesFromAssignablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveAssigneesFromAssignablePayload_possibleTypes.includes(obj.__typename)
}



const RemoveEnterpriseAdminPayload_possibleTypes = ['RemoveEnterpriseAdminPayload']
export const isRemoveEnterpriseAdminPayload = (obj: { __typename: string }): obj is RemoveEnterpriseAdminPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveEnterpriseAdminPayload_possibleTypes.includes(obj.__typename)
}



const RemoveEnterpriseIdentityProviderPayload_possibleTypes = ['RemoveEnterpriseIdentityProviderPayload']
export const isRemoveEnterpriseIdentityProviderPayload = (obj: { __typename: string }): obj is RemoveEnterpriseIdentityProviderPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveEnterpriseIdentityProviderPayload_possibleTypes.includes(obj.__typename)
}



const RemoveEnterpriseOrganizationPayload_possibleTypes = ['RemoveEnterpriseOrganizationPayload']
export const isRemoveEnterpriseOrganizationPayload = (obj: { __typename: string }): obj is RemoveEnterpriseOrganizationPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveEnterpriseOrganizationPayload_possibleTypes.includes(obj.__typename)
}



const RemoveLabelsFromLabelablePayload_possibleTypes = ['RemoveLabelsFromLabelablePayload']
export const isRemoveLabelsFromLabelablePayload = (obj: { __typename: string }): obj is RemoveLabelsFromLabelablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveLabelsFromLabelablePayload_possibleTypes.includes(obj.__typename)
}



const RemoveOutsideCollaboratorPayload_possibleTypes = ['RemoveOutsideCollaboratorPayload']
export const isRemoveOutsideCollaboratorPayload = (obj: { __typename: string }): obj is RemoveOutsideCollaboratorPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveOutsideCollaboratorPayload_possibleTypes.includes(obj.__typename)
}



const RemoveReactionPayload_possibleTypes = ['RemoveReactionPayload']
export const isRemoveReactionPayload = (obj: { __typename: string }): obj is RemoveReactionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveReactionPayload_possibleTypes.includes(obj.__typename)
}



const RemoveStarPayload_possibleTypes = ['RemoveStarPayload']
export const isRemoveStarPayload = (obj: { __typename: string }): obj is RemoveStarPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RemoveStarPayload_possibleTypes.includes(obj.__typename)
}



const ReopenIssuePayload_possibleTypes = ['ReopenIssuePayload']
export const isReopenIssuePayload = (obj: { __typename: string }): obj is ReopenIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReopenIssuePayload_possibleTypes.includes(obj.__typename)
}



const ReopenPullRequestPayload_possibleTypes = ['ReopenPullRequestPayload']
export const isReopenPullRequestPayload = (obj: { __typename: string }): obj is ReopenPullRequestPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReopenPullRequestPayload_possibleTypes.includes(obj.__typename)
}



const RequestReviewsPayload_possibleTypes = ['RequestReviewsPayload']
export const isRequestReviewsPayload = (obj: { __typename: string }): obj is RequestReviewsPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RequestReviewsPayload_possibleTypes.includes(obj.__typename)
}



const RerequestCheckSuitePayload_possibleTypes = ['RerequestCheckSuitePayload']
export const isRerequestCheckSuitePayload = (obj: { __typename: string }): obj is RerequestCheckSuitePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return RerequestCheckSuitePayload_possibleTypes.includes(obj.__typename)
}



const ResolveReviewThreadPayload_possibleTypes = ['ResolveReviewThreadPayload']
export const isResolveReviewThreadPayload = (obj: { __typename: string }): obj is ResolveReviewThreadPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ResolveReviewThreadPayload_possibleTypes.includes(obj.__typename)
}



const SetEnterpriseIdentityProviderPayload_possibleTypes = ['SetEnterpriseIdentityProviderPayload']
export const isSetEnterpriseIdentityProviderPayload = (obj: { __typename: string }): obj is SetEnterpriseIdentityProviderPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SetEnterpriseIdentityProviderPayload_possibleTypes.includes(obj.__typename)
}



const SubmitPullRequestReviewPayload_possibleTypes = ['SubmitPullRequestReviewPayload']
export const isSubmitPullRequestReviewPayload = (obj: { __typename: string }): obj is SubmitPullRequestReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SubmitPullRequestReviewPayload_possibleTypes.includes(obj.__typename)
}



const TransferIssuePayload_possibleTypes = ['TransferIssuePayload']
export const isTransferIssuePayload = (obj: { __typename: string }): obj is TransferIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return TransferIssuePayload_possibleTypes.includes(obj.__typename)
}



const UnarchiveRepositoryPayload_possibleTypes = ['UnarchiveRepositoryPayload']
export const isUnarchiveRepositoryPayload = (obj: { __typename: string }): obj is UnarchiveRepositoryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnarchiveRepositoryPayload_possibleTypes.includes(obj.__typename)
}



const UnfollowUserPayload_possibleTypes = ['UnfollowUserPayload']
export const isUnfollowUserPayload = (obj: { __typename: string }): obj is UnfollowUserPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnfollowUserPayload_possibleTypes.includes(obj.__typename)
}



const UnlinkRepositoryFromProjectPayload_possibleTypes = ['UnlinkRepositoryFromProjectPayload']
export const isUnlinkRepositoryFromProjectPayload = (obj: { __typename: string }): obj is UnlinkRepositoryFromProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnlinkRepositoryFromProjectPayload_possibleTypes.includes(obj.__typename)
}



const UnlockLockablePayload_possibleTypes = ['UnlockLockablePayload']
export const isUnlockLockablePayload = (obj: { __typename: string }): obj is UnlockLockablePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnlockLockablePayload_possibleTypes.includes(obj.__typename)
}



const UnmarkIssueAsDuplicatePayload_possibleTypes = ['UnmarkIssueAsDuplicatePayload']
export const isUnmarkIssueAsDuplicatePayload = (obj: { __typename: string }): obj is UnmarkIssueAsDuplicatePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnmarkIssueAsDuplicatePayload_possibleTypes.includes(obj.__typename)
}



const UnminimizeCommentPayload_possibleTypes = ['UnminimizeCommentPayload']
export const isUnminimizeCommentPayload = (obj: { __typename: string }): obj is UnminimizeCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnminimizeCommentPayload_possibleTypes.includes(obj.__typename)
}



const UnpinIssuePayload_possibleTypes = ['UnpinIssuePayload']
export const isUnpinIssuePayload = (obj: { __typename: string }): obj is UnpinIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnpinIssuePayload_possibleTypes.includes(obj.__typename)
}



const UnresolveReviewThreadPayload_possibleTypes = ['UnresolveReviewThreadPayload']
export const isUnresolveReviewThreadPayload = (obj: { __typename: string }): obj is UnresolveReviewThreadPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnresolveReviewThreadPayload_possibleTypes.includes(obj.__typename)
}



const UpdateBranchProtectionRulePayload_possibleTypes = ['UpdateBranchProtectionRulePayload']
export const isUpdateBranchProtectionRulePayload = (obj: { __typename: string }): obj is UpdateBranchProtectionRulePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateBranchProtectionRulePayload_possibleTypes.includes(obj.__typename)
}



const UpdateCheckRunPayload_possibleTypes = ['UpdateCheckRunPayload']
export const isUpdateCheckRunPayload = (obj: { __typename: string }): obj is UpdateCheckRunPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateCheckRunPayload_possibleTypes.includes(obj.__typename)
}



const UpdateCheckSuitePreferencesPayload_possibleTypes = ['UpdateCheckSuitePreferencesPayload']
export const isUpdateCheckSuitePreferencesPayload = (obj: { __typename: string }): obj is UpdateCheckSuitePreferencesPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateCheckSuitePreferencesPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseActionExecutionCapabilitySettingPayload_possibleTypes = ['UpdateEnterpriseActionExecutionCapabilitySettingPayload']
export const isUpdateEnterpriseActionExecutionCapabilitySettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseActionExecutionCapabilitySettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseActionExecutionCapabilitySettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseAdministratorRolePayload_possibleTypes = ['UpdateEnterpriseAdministratorRolePayload']
export const isUpdateEnterpriseAdministratorRolePayload = (obj: { __typename: string }): obj is UpdateEnterpriseAdministratorRolePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseAdministratorRolePayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload_possibleTypes = ['UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload']
export const isUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseDefaultRepositoryPermissionSettingPayload_possibleTypes = ['UpdateEnterpriseDefaultRepositoryPermissionSettingPayload']
export const isUpdateEnterpriseDefaultRepositoryPermissionSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseDefaultRepositoryPermissionSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseDefaultRepositoryPermissionSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload']
export const isUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload']
export const isUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanDeleteIssuesSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanDeleteIssuesSettingPayload']
export const isUpdateEnterpriseMembersCanDeleteIssuesSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanDeleteIssuesSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanDeleteIssuesSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload']
export const isUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload']
export const isUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanMakePurchasesSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanMakePurchasesSettingPayload']
export const isUpdateEnterpriseMembersCanMakePurchasesSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanMakePurchasesSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanMakePurchasesSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload']
export const isUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload_possibleTypes = ['UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload']
export const isUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseOrganizationProjectsSettingPayload_possibleTypes = ['UpdateEnterpriseOrganizationProjectsSettingPayload']
export const isUpdateEnterpriseOrganizationProjectsSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseOrganizationProjectsSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseOrganizationProjectsSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseProfilePayload_possibleTypes = ['UpdateEnterpriseProfilePayload']
export const isUpdateEnterpriseProfilePayload = (obj: { __typename: string }): obj is UpdateEnterpriseProfilePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseProfilePayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseRepositoryProjectsSettingPayload_possibleTypes = ['UpdateEnterpriseRepositoryProjectsSettingPayload']
export const isUpdateEnterpriseRepositoryProjectsSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseRepositoryProjectsSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseRepositoryProjectsSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseTeamDiscussionsSettingPayload_possibleTypes = ['UpdateEnterpriseTeamDiscussionsSettingPayload']
export const isUpdateEnterpriseTeamDiscussionsSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseTeamDiscussionsSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseTeamDiscussionsSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload_possibleTypes = ['UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload']
export const isUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = (obj: { __typename: string }): obj is UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateIpAllowListEnabledSettingPayload_possibleTypes = ['UpdateIpAllowListEnabledSettingPayload']
export const isUpdateIpAllowListEnabledSettingPayload = (obj: { __typename: string }): obj is UpdateIpAllowListEnabledSettingPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateIpAllowListEnabledSettingPayload_possibleTypes.includes(obj.__typename)
}



const UpdateIpAllowListEntryPayload_possibleTypes = ['UpdateIpAllowListEntryPayload']
export const isUpdateIpAllowListEntryPayload = (obj: { __typename: string }): obj is UpdateIpAllowListEntryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateIpAllowListEntryPayload_possibleTypes.includes(obj.__typename)
}



const UpdateIssuePayload_possibleTypes = ['UpdateIssuePayload']
export const isUpdateIssuePayload = (obj: { __typename: string }): obj is UpdateIssuePayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateIssuePayload_possibleTypes.includes(obj.__typename)
}



const UpdateIssueCommentPayload_possibleTypes = ['UpdateIssueCommentPayload']
export const isUpdateIssueCommentPayload = (obj: { __typename: string }): obj is UpdateIssueCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateIssueCommentPayload_possibleTypes.includes(obj.__typename)
}



const UpdateLabelPayload_possibleTypes = ['UpdateLabelPayload']
export const isUpdateLabelPayload = (obj: { __typename: string }): obj is UpdateLabelPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateLabelPayload_possibleTypes.includes(obj.__typename)
}



const UpdateProjectPayload_possibleTypes = ['UpdateProjectPayload']
export const isUpdateProjectPayload = (obj: { __typename: string }): obj is UpdateProjectPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateProjectPayload_possibleTypes.includes(obj.__typename)
}



const UpdateProjectCardPayload_possibleTypes = ['UpdateProjectCardPayload']
export const isUpdateProjectCardPayload = (obj: { __typename: string }): obj is UpdateProjectCardPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateProjectCardPayload_possibleTypes.includes(obj.__typename)
}



const UpdateProjectColumnPayload_possibleTypes = ['UpdateProjectColumnPayload']
export const isUpdateProjectColumnPayload = (obj: { __typename: string }): obj is UpdateProjectColumnPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateProjectColumnPayload_possibleTypes.includes(obj.__typename)
}



const UpdatePullRequestPayload_possibleTypes = ['UpdatePullRequestPayload']
export const isUpdatePullRequestPayload = (obj: { __typename: string }): obj is UpdatePullRequestPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdatePullRequestPayload_possibleTypes.includes(obj.__typename)
}



const UpdatePullRequestReviewPayload_possibleTypes = ['UpdatePullRequestReviewPayload']
export const isUpdatePullRequestReviewPayload = (obj: { __typename: string }): obj is UpdatePullRequestReviewPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdatePullRequestReviewPayload_possibleTypes.includes(obj.__typename)
}



const UpdatePullRequestReviewCommentPayload_possibleTypes = ['UpdatePullRequestReviewCommentPayload']
export const isUpdatePullRequestReviewCommentPayload = (obj: { __typename: string }): obj is UpdatePullRequestReviewCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdatePullRequestReviewCommentPayload_possibleTypes.includes(obj.__typename)
}



const UpdateRefPayload_possibleTypes = ['UpdateRefPayload']
export const isUpdateRefPayload = (obj: { __typename: string }): obj is UpdateRefPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateRefPayload_possibleTypes.includes(obj.__typename)
}



const UpdateRefsPayload_possibleTypes = ['UpdateRefsPayload']
export const isUpdateRefsPayload = (obj: { __typename: string }): obj is UpdateRefsPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateRefsPayload_possibleTypes.includes(obj.__typename)
}



const UpdateRepositoryPayload_possibleTypes = ['UpdateRepositoryPayload']
export const isUpdateRepositoryPayload = (obj: { __typename: string }): obj is UpdateRepositoryPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateRepositoryPayload_possibleTypes.includes(obj.__typename)
}



const UpdateSubscriptionPayload_possibleTypes = ['UpdateSubscriptionPayload']
export const isUpdateSubscriptionPayload = (obj: { __typename: string }): obj is UpdateSubscriptionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateSubscriptionPayload_possibleTypes.includes(obj.__typename)
}



const UpdateTeamDiscussionPayload_possibleTypes = ['UpdateTeamDiscussionPayload']
export const isUpdateTeamDiscussionPayload = (obj: { __typename: string }): obj is UpdateTeamDiscussionPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateTeamDiscussionPayload_possibleTypes.includes(obj.__typename)
}



const UpdateTeamDiscussionCommentPayload_possibleTypes = ['UpdateTeamDiscussionCommentPayload']
export const isUpdateTeamDiscussionCommentPayload = (obj: { __typename: string }): obj is UpdateTeamDiscussionCommentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateTeamDiscussionCommentPayload_possibleTypes.includes(obj.__typename)
}



const UpdateTeamReviewAssignmentPayload_possibleTypes = ['UpdateTeamReviewAssignmentPayload']
export const isUpdateTeamReviewAssignmentPayload = (obj: { __typename: string }): obj is UpdateTeamReviewAssignmentPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateTeamReviewAssignmentPayload_possibleTypes.includes(obj.__typename)
}



const UpdateTopicsPayload_possibleTypes = ['UpdateTopicsPayload']
export const isUpdateTopicsPayload = (obj: { __typename: string }): obj is UpdateTopicsPayload => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UpdateTopicsPayload_possibleTypes.includes(obj.__typename)
}



const Blob_possibleTypes = ['Blob']
export const isBlob = (obj: { __typename: string }): obj is Blob => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Blob_possibleTypes.includes(obj.__typename)
}



const GenericHovercardContext_possibleTypes = ['GenericHovercardContext']
export const isGenericHovercardContext = (obj: { __typename: string }): obj is GenericHovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GenericHovercardContext_possibleTypes.includes(obj.__typename)
}



const GpgSignature_possibleTypes = ['GpgSignature']
export const isGpgSignature = (obj: { __typename: string }): obj is GpgSignature => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return GpgSignature_possibleTypes.includes(obj.__typename)
}



const OrganizationTeamsHovercardContext_possibleTypes = ['OrganizationTeamsHovercardContext']
export const isOrganizationTeamsHovercardContext = (obj: { __typename: string }): obj is OrganizationTeamsHovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationTeamsHovercardContext_possibleTypes.includes(obj.__typename)
}



const OrganizationsHovercardContext_possibleTypes = ['OrganizationsHovercardContext']
export const isOrganizationsHovercardContext = (obj: { __typename: string }): obj is OrganizationsHovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return OrganizationsHovercardContext_possibleTypes.includes(obj.__typename)
}



const PackageTag_possibleTypes = ['PackageTag']
export const isPackageTag = (obj: { __typename: string }): obj is PackageTag => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return PackageTag_possibleTypes.includes(obj.__typename)
}



const ReviewStatusHovercardContext_possibleTypes = ['ReviewStatusHovercardContext']
export const isReviewStatusHovercardContext = (obj: { __typename: string }): obj is ReviewStatusHovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ReviewStatusHovercardContext_possibleTypes.includes(obj.__typename)
}



const SmimeSignature_possibleTypes = ['SmimeSignature']
export const isSmimeSignature = (obj: { __typename: string }): obj is SmimeSignature => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return SmimeSignature_possibleTypes.includes(obj.__typename)
}



const Tag_possibleTypes = ['Tag']
export const isTag = (obj: { __typename: string }): obj is Tag => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return Tag_possibleTypes.includes(obj.__typename)
}



const UnknownSignature_possibleTypes = ['UnknownSignature']
export const isUnknownSignature = (obj: { __typename: string }): obj is UnknownSignature => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return UnknownSignature_possibleTypes.includes(obj.__typename)
}



const ViewerHovercardContext_possibleTypes = ['ViewerHovercardContext']
export const isViewerHovercardContext = (obj: { __typename: string }): obj is ViewerHovercardContext => {
  if (!obj.__typename) throw new Error('__typename is missing')
  return ViewerHovercardContext_possibleTypes.includes(obj.__typename)
}



/** The query root of GitHub's GraphQL interface. */
export interface QueryPromiseChain{
/** Look up a code of conduct by its key */
codeOfConduct:((args:{
/** The code of conduct's key */
key: Scalars["String"]})=>CodeOfConductPromiseChain & {get:<R extends CodeOfConductRequest>(request: R, defaultValue?:(FieldsSelection<CodeOfConduct, R>|null))=>Promise<(FieldsSelection<CodeOfConduct, R>|null)>}),
/** Look up a code of conduct by its key */
codesOfConduct:({get:<R extends CodeOfConductRequest>(request: R, defaultValue?:((FieldsSelection<CodeOfConduct, R>|null)[]|null))=>Promise<((FieldsSelection<CodeOfConduct, R>|null)[]|null)>}),
/** Look up an enterprise by URL slug. */
enterprise:((args:{
/** The enterprise invitation token. */
invitationToken?: (Scalars["String"]|null),
/** The enterprise URL slug. */
slug: Scalars["String"]})=>EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
enterpriseAdministratorInvitation:((args:{
/** The slug of the enterprise the user was invited to join. */
enterpriseSlug: Scalars["String"],
/** The role for the business member invitation. */
role: EnterpriseAdministratorRole,
/** The login of the user invited to join the business. */
userLogin: Scalars["String"]})=>EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** Look up a pending enterprise administrator invitation by invitation token. */
enterpriseAdministratorInvitationByToken:((args:{
/** The invitation token sent with the invitation email. */
invitationToken: Scalars["String"]})=>EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** Look up an open source license by its key */
license:((args:{
/** The license's downcased SPDX ID */
key: Scalars["String"]})=>LicensePromiseChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Promise<(FieldsSelection<License, R>|null)>}),
/** Return a list of known open source licenses */
licenses:({get:<R extends LicenseRequest>(request: R, defaultValue?:(License|null)[])=>Promise<(License|null)[]>}),
/** Get alphabetically sorted list of Marketplace categories */
marketplaceCategories:((args?:{
/** Exclude categories with no listings. */
excludeEmpty?: (Scalars["Boolean"]|null),
/** Returns top level categories only, excluding any subcategories. */
excludeSubcategories?: (Scalars["Boolean"]|null),
/** Return only the specified categories. */
includeCategories?: (Scalars["String"][]|null)})=>{get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory[])=>Promise<MarketplaceCategory[]>})&({get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory[])=>Promise<MarketplaceCategory[]>}),
/** Look up a Marketplace category by its slug. */
marketplaceCategory:((args:{
/** The URL slug of the category. */
slug: Scalars["String"],
/** Also check topic aliases for the category slug */
useTopicAliases?: (Scalars["Boolean"]|null)})=>MarketplaceCategoryPromiseChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceCategory, R>|null))=>Promise<(FieldsSelection<MarketplaceCategory, R>|null)>}),
/** Look up a single Marketplace listing */
marketplaceListing:((args:{
/** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
slug: Scalars["String"]})=>MarketplaceListingPromiseChain & {get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceListing, R>|null))=>Promise<(FieldsSelection<MarketplaceListing, R>|null)>}),
/** Look up Marketplace listings */
marketplaceListings:((args?:{
/** Select listings that can be administered by the specified user. */
adminId?: (Scalars["ID"]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/**
 * Select listings visible to the viewer even if they are not approved. If omitted or
 * false, only approved listings will be returned.
 */
allStates?: (Scalars["Boolean"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Select only listings with the given category. */
categorySlug?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Select listings for products owned by the specified organization. */
organizationId?: (Scalars["ID"]|null),
/** Select only listings where the primary category matches the given category slug. */
primaryCategoryOnly?: (Scalars["Boolean"]|null),
/** Select the listings with these slugs, if they are visible to the viewer. */
slugs?: ((Scalars["String"]|null)[]|null),
/** Also check topic aliases for the category slug */
useTopicAliases?: (Scalars["Boolean"]|null),
/**
 * Select listings to which user has admin access. If omitted, listings visible to the
 * viewer are returned.
 */
viewerCanAdmin?: (Scalars["Boolean"]|null),
/** Select only listings that offer a free trial. */
withFreeTrialsOnly?: (Scalars["Boolean"]|null)})=>MarketplaceListingConnectionPromiseChain & {get:<R extends MarketplaceListingConnectionRequest>(request: R, defaultValue?:MarketplaceListingConnection)=>Promise<MarketplaceListingConnection>})&(MarketplaceListingConnectionPromiseChain & {get:<R extends MarketplaceListingConnectionRequest>(request: R, defaultValue?:MarketplaceListingConnection)=>Promise<MarketplaceListingConnection>}),
/** Return information about the GitHub instance */
meta:(GitHubMetadataPromiseChain & {get:<R extends GitHubMetadataRequest>(request: R, defaultValue?:GitHubMetadata)=>Promise<GitHubMetadata>}),
/** Fetches an object given its ID. */
node:((args:{
/** ID of the object. */
id: Scalars["ID"]})=>NodePromiseChain & {get:<R extends NodeRequest>(request: R, defaultValue?:(FieldsSelection<Node, R>|null))=>Promise<(FieldsSelection<Node, R>|null)>}),
/** Lookup nodes by a list of IDs. */
nodes:((args:{
/** The list of node IDs. */
ids: Scalars["ID"][]})=>{get:<R extends NodeRequest>(request: R, defaultValue?:(Node|null)[])=>Promise<(Node|null)[]>}),
/** Lookup a organization by login. */
organization:((args:{
/** The organization's login. */
login: Scalars["String"]})=>OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The client's rate limit information. */
rateLimit:((args?:{
/** If true, calculate the cost for the query without evaluating it */
dryRun?: (Scalars["Boolean"]|null)})=>RateLimitPromiseChain & {get:<R extends RateLimitRequest>(request: R, defaultValue?:(FieldsSelection<RateLimit, R>|null))=>Promise<(FieldsSelection<RateLimit, R>|null)>})&(RateLimitPromiseChain & {get:<R extends RateLimitRequest>(request: R, defaultValue?:(FieldsSelection<RateLimit, R>|null))=>Promise<(FieldsSelection<RateLimit, R>|null)>}),
/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
relay:(QueryPromiseChain & {get:<R extends QueryRequest>(request: R, defaultValue?:Query)=>Promise<Query>}),
/** Lookup a given repository by the owner and repository name. */
repository:((args:{
/** The name of the repository */
name: Scalars["String"],
/** The login field of a user or organization */
owner: Scalars["String"]})=>RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** Lookup a repository owner (ie. either a User or an Organization) by login. */
repositoryOwner:((args:{
/** The username to lookup the owner by. */
login: Scalars["String"]})=>RepositoryOwnerPromiseChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Promise<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** Lookup resource by a URL. */
resource:((args:{
/** The URL. */
url: Scalars["URI"]})=>UniformResourceLocatablePromiseChain & {get:<R extends UniformResourceLocatableRequest>(request: R, defaultValue?:(FieldsSelection<UniformResourceLocatable, R>|null))=>Promise<(FieldsSelection<UniformResourceLocatable, R>|null)>}),
/** Perform a search across resources. */
search:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The search string to look for. */
query: Scalars["String"],
/** The types of search items to search within. */
type: SearchType})=>SearchResultItemConnectionPromiseChain & {get:<R extends SearchResultItemConnectionRequest>(request: R, defaultValue?:SearchResultItemConnection)=>Promise<SearchResultItemConnection>}),
/** GitHub Security Advisories */
securityAdvisories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter advisories by identifier, e.g. GHSA or CVE. */
identifier?: (SecurityAdvisoryIdentifierFilter|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityAdvisoryOrder|null),
/** Filter advisories to those published since a time in the past. */
publishedSince?: (Scalars["DateTime"]|null),
/** Filter advisories to those updated since a time in the past. */
updatedSince?: (Scalars["DateTime"]|null)})=>SecurityAdvisoryConnectionPromiseChain & {get:<R extends SecurityAdvisoryConnectionRequest>(request: R, defaultValue?:SecurityAdvisoryConnection)=>Promise<SecurityAdvisoryConnection>})&(SecurityAdvisoryConnectionPromiseChain & {get:<R extends SecurityAdvisoryConnectionRequest>(request: R, defaultValue?:SecurityAdvisoryConnection)=>Promise<SecurityAdvisoryConnection>}),
/** Fetch a Security Advisory by its GHSA ID */
securityAdvisory:((args:{
/** GitHub Security Advisory ID. */
ghsaId: Scalars["String"]})=>SecurityAdvisoryPromiseChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Promise<(FieldsSelection<SecurityAdvisory, R>|null)>}),
/** Software Vulnerabilities documented by GitHub Security Advisories */
securityVulnerabilities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** An ecosystem to filter vulnerabilities by. */
ecosystem?: (SecurityAdvisoryEcosystem|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityVulnerabilityOrder|null),
/** A package name to filter vulnerabilities by. */
package?: (Scalars["String"]|null),
/** A list of severities to filter vulnerabilities by. */
severities?: (SecurityAdvisorySeverity[]|null)})=>SecurityVulnerabilityConnectionPromiseChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Promise<SecurityVulnerabilityConnection>})&(SecurityVulnerabilityConnectionPromiseChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Promise<SecurityVulnerabilityConnection>}),
/**
 * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
 * Look up a single Sponsors Listing
 */
sponsorsListing:((args:{
/** Select the Sponsors listing which matches this slug */
slug: Scalars["String"]})=>SponsorsListingPromiseChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Promise<(FieldsSelection<SponsorsListing, R>|null)>}),
/** Look up a topic by name. */
topic:((args:{
/** The topic's name. */
name: Scalars["String"]})=>TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>}),
/** Lookup a user by login. */
user:((args:{
/** The user's login. */
login: Scalars["String"]})=>UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The currently authenticated user. */
viewer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** The query root of GitHub's GraphQL interface. */
export interface QueryObservableChain{
/** Look up a code of conduct by its key */
codeOfConduct:((args:{
/** The code of conduct's key */
key: Scalars["String"]})=>CodeOfConductObservableChain & {get:<R extends CodeOfConductRequest>(request: R, defaultValue?:(FieldsSelection<CodeOfConduct, R>|null))=>Observable<(FieldsSelection<CodeOfConduct, R>|null)>}),
/** Look up a code of conduct by its key */
codesOfConduct:({get:<R extends CodeOfConductRequest>(request: R, defaultValue?:((FieldsSelection<CodeOfConduct, R>|null)[]|null))=>Observable<((FieldsSelection<CodeOfConduct, R>|null)[]|null)>}),
/** Look up an enterprise by URL slug. */
enterprise:((args:{
/** The enterprise invitation token. */
invitationToken?: (Scalars["String"]|null),
/** The enterprise URL slug. */
slug: Scalars["String"]})=>EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
enterpriseAdministratorInvitation:((args:{
/** The slug of the enterprise the user was invited to join. */
enterpriseSlug: Scalars["String"],
/** The role for the business member invitation. */
role: EnterpriseAdministratorRole,
/** The login of the user invited to join the business. */
userLogin: Scalars["String"]})=>EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** Look up a pending enterprise administrator invitation by invitation token. */
enterpriseAdministratorInvitationByToken:((args:{
/** The invitation token sent with the invitation email. */
invitationToken: Scalars["String"]})=>EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** Look up an open source license by its key */
license:((args:{
/** The license's downcased SPDX ID */
key: Scalars["String"]})=>LicenseObservableChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Observable<(FieldsSelection<License, R>|null)>}),
/** Return a list of known open source licenses */
licenses:({get:<R extends LicenseRequest>(request: R, defaultValue?:(License|null)[])=>Observable<(License|null)[]>}),
/** Get alphabetically sorted list of Marketplace categories */
marketplaceCategories:((args?:{
/** Exclude categories with no listings. */
excludeEmpty?: (Scalars["Boolean"]|null),
/** Returns top level categories only, excluding any subcategories. */
excludeSubcategories?: (Scalars["Boolean"]|null),
/** Return only the specified categories. */
includeCategories?: (Scalars["String"][]|null)})=>{get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory[])=>Observable<MarketplaceCategory[]>})&({get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory[])=>Observable<MarketplaceCategory[]>}),
/** Look up a Marketplace category by its slug. */
marketplaceCategory:((args:{
/** The URL slug of the category. */
slug: Scalars["String"],
/** Also check topic aliases for the category slug */
useTopicAliases?: (Scalars["Boolean"]|null)})=>MarketplaceCategoryObservableChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceCategory, R>|null))=>Observable<(FieldsSelection<MarketplaceCategory, R>|null)>}),
/** Look up a single Marketplace listing */
marketplaceListing:((args:{
/** Select the listing that matches this slug. It's the short name of the listing used in its URL. */
slug: Scalars["String"]})=>MarketplaceListingObservableChain & {get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceListing, R>|null))=>Observable<(FieldsSelection<MarketplaceListing, R>|null)>}),
/** Look up Marketplace listings */
marketplaceListings:((args?:{
/** Select listings that can be administered by the specified user. */
adminId?: (Scalars["ID"]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/**
 * Select listings visible to the viewer even if they are not approved. If omitted or
 * false, only approved listings will be returned.
 */
allStates?: (Scalars["Boolean"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Select only listings with the given category. */
categorySlug?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Select listings for products owned by the specified organization. */
organizationId?: (Scalars["ID"]|null),
/** Select only listings where the primary category matches the given category slug. */
primaryCategoryOnly?: (Scalars["Boolean"]|null),
/** Select the listings with these slugs, if they are visible to the viewer. */
slugs?: ((Scalars["String"]|null)[]|null),
/** Also check topic aliases for the category slug */
useTopicAliases?: (Scalars["Boolean"]|null),
/**
 * Select listings to which user has admin access. If omitted, listings visible to the
 * viewer are returned.
 */
viewerCanAdmin?: (Scalars["Boolean"]|null),
/** Select only listings that offer a free trial. */
withFreeTrialsOnly?: (Scalars["Boolean"]|null)})=>MarketplaceListingConnectionObservableChain & {get:<R extends MarketplaceListingConnectionRequest>(request: R, defaultValue?:MarketplaceListingConnection)=>Observable<MarketplaceListingConnection>})&(MarketplaceListingConnectionObservableChain & {get:<R extends MarketplaceListingConnectionRequest>(request: R, defaultValue?:MarketplaceListingConnection)=>Observable<MarketplaceListingConnection>}),
/** Return information about the GitHub instance */
meta:(GitHubMetadataObservableChain & {get:<R extends GitHubMetadataRequest>(request: R, defaultValue?:GitHubMetadata)=>Observable<GitHubMetadata>}),
/** Fetches an object given its ID. */
node:((args:{
/** ID of the object. */
id: Scalars["ID"]})=>NodeObservableChain & {get:<R extends NodeRequest>(request: R, defaultValue?:(FieldsSelection<Node, R>|null))=>Observable<(FieldsSelection<Node, R>|null)>}),
/** Lookup nodes by a list of IDs. */
nodes:((args:{
/** The list of node IDs. */
ids: Scalars["ID"][]})=>{get:<R extends NodeRequest>(request: R, defaultValue?:(Node|null)[])=>Observable<(Node|null)[]>}),
/** Lookup a organization by login. */
organization:((args:{
/** The organization's login. */
login: Scalars["String"]})=>OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The client's rate limit information. */
rateLimit:((args?:{
/** If true, calculate the cost for the query without evaluating it */
dryRun?: (Scalars["Boolean"]|null)})=>RateLimitObservableChain & {get:<R extends RateLimitRequest>(request: R, defaultValue?:(FieldsSelection<RateLimit, R>|null))=>Observable<(FieldsSelection<RateLimit, R>|null)>})&(RateLimitObservableChain & {get:<R extends RateLimitRequest>(request: R, defaultValue?:(FieldsSelection<RateLimit, R>|null))=>Observable<(FieldsSelection<RateLimit, R>|null)>}),
/** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
relay:(QueryObservableChain & {get:<R extends QueryRequest>(request: R, defaultValue?:Query)=>Observable<Query>}),
/** Lookup a given repository by the owner and repository name. */
repository:((args:{
/** The name of the repository */
name: Scalars["String"],
/** The login field of a user or organization */
owner: Scalars["String"]})=>RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** Lookup a repository owner (ie. either a User or an Organization) by login. */
repositoryOwner:((args:{
/** The username to lookup the owner by. */
login: Scalars["String"]})=>RepositoryOwnerObservableChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Observable<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** Lookup resource by a URL. */
resource:((args:{
/** The URL. */
url: Scalars["URI"]})=>UniformResourceLocatableObservableChain & {get:<R extends UniformResourceLocatableRequest>(request: R, defaultValue?:(FieldsSelection<UniformResourceLocatable, R>|null))=>Observable<(FieldsSelection<UniformResourceLocatable, R>|null)>}),
/** Perform a search across resources. */
search:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The search string to look for. */
query: Scalars["String"],
/** The types of search items to search within. */
type: SearchType})=>SearchResultItemConnectionObservableChain & {get:<R extends SearchResultItemConnectionRequest>(request: R, defaultValue?:SearchResultItemConnection)=>Observable<SearchResultItemConnection>}),
/** GitHub Security Advisories */
securityAdvisories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter advisories by identifier, e.g. GHSA or CVE. */
identifier?: (SecurityAdvisoryIdentifierFilter|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityAdvisoryOrder|null),
/** Filter advisories to those published since a time in the past. */
publishedSince?: (Scalars["DateTime"]|null),
/** Filter advisories to those updated since a time in the past. */
updatedSince?: (Scalars["DateTime"]|null)})=>SecurityAdvisoryConnectionObservableChain & {get:<R extends SecurityAdvisoryConnectionRequest>(request: R, defaultValue?:SecurityAdvisoryConnection)=>Observable<SecurityAdvisoryConnection>})&(SecurityAdvisoryConnectionObservableChain & {get:<R extends SecurityAdvisoryConnectionRequest>(request: R, defaultValue?:SecurityAdvisoryConnection)=>Observable<SecurityAdvisoryConnection>}),
/** Fetch a Security Advisory by its GHSA ID */
securityAdvisory:((args:{
/** GitHub Security Advisory ID. */
ghsaId: Scalars["String"]})=>SecurityAdvisoryObservableChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Observable<(FieldsSelection<SecurityAdvisory, R>|null)>}),
/** Software Vulnerabilities documented by GitHub Security Advisories */
securityVulnerabilities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** An ecosystem to filter vulnerabilities by. */
ecosystem?: (SecurityAdvisoryEcosystem|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityVulnerabilityOrder|null),
/** A package name to filter vulnerabilities by. */
package?: (Scalars["String"]|null),
/** A list of severities to filter vulnerabilities by. */
severities?: (SecurityAdvisorySeverity[]|null)})=>SecurityVulnerabilityConnectionObservableChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Observable<SecurityVulnerabilityConnection>})&(SecurityVulnerabilityConnectionObservableChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Observable<SecurityVulnerabilityConnection>}),
/**
 * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
 * Look up a single Sponsors Listing
 */
sponsorsListing:((args:{
/** Select the Sponsors listing which matches this slug */
slug: Scalars["String"]})=>SponsorsListingObservableChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Observable<(FieldsSelection<SponsorsListing, R>|null)>}),
/** Look up a topic by name. */
topic:((args:{
/** The topic's name. */
name: Scalars["String"]})=>TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>}),
/** Lookup a user by login. */
user:((args:{
/** The user's login. */
login: Scalars["String"]})=>UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The currently authenticated user. */
viewer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** The Code of Conduct for a repository */
export interface CodeOfConductPromiseChain{
/** The body of the Code of Conduct */
body:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The key for the Code of Conduct */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The formal name of the Code of Conduct */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this Code of Conduct */
resourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this Code of Conduct */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** The Code of Conduct for a repository */
export interface CodeOfConductObservableChain{
/** The body of the Code of Conduct */
body:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The key for the Code of Conduct */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The formal name of the Code of Conduct */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this Code of Conduct */
resourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this Code of Conduct */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** An object with an ID. */
export interface NodePromiseChain{
/** ID of the object. */
id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** An object with an ID. */
export interface NodeObservableChain{
/** ID of the object. */
id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** An account to manage multiple organizations with consolidated policy and billing. */
export interface EnterprisePromiseChain{
/** A URL pointing to the enterprise's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Enterprise billing informationÂ visible to enterprise billing managers. */
billingInfo:(EnterpriseBillingInfoPromiseChain & {get:<R extends EnterpriseBillingInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseBillingInfo, R>|null))=>Promise<(FieldsSelection<EnterpriseBillingInfo, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The description of the enterprise. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The description of the enterprise as HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The location of the enterprise. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A list of users who are members of this enterprise. */
members:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Only return members within the selected GitHub Enterprise deployment */
deployment?: (EnterpriseUserDeployment|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for members returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** Only return members within the organizations with these logins */
organizationLogins?: (Scalars["String"][]|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role of the user in the enterprise organization or server. */
role?: (EnterpriseUserAccountMembershipRole|null)})=>EnterpriseMemberConnectionPromiseChain & {get:<R extends EnterpriseMemberConnectionRequest>(request: R, defaultValue?:EnterpriseMemberConnection)=>Promise<EnterpriseMemberConnection>})&(EnterpriseMemberConnectionPromiseChain & {get:<R extends EnterpriseMemberConnectionRequest>(request: R, defaultValue?:EnterpriseMemberConnection)=>Promise<EnterpriseMemberConnection>}),
/** The name of the enterprise. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of organizations that belong to this enterprise. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations returned from the connection. */
orderBy?: (OrganizationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>})&(OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** Enterprise information only visible to enterprise owners. */
ownerInfo:(EnterpriseOwnerInfoPromiseChain & {get:<R extends EnterpriseOwnerInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseOwnerInfo, R>|null))=>Promise<(FieldsSelection<EnterpriseOwnerInfo, R>|null)>}),
/** The HTTP path for this enterprise. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The URL-friendly identifier for the enterprise. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP URL for this enterprise. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of user accounts on this enterprise. */
userAccounts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>EnterpriseUserAccountConnectionPromiseChain & {get:<R extends EnterpriseUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseUserAccountConnection)=>Promise<EnterpriseUserAccountConnection>})&(EnterpriseUserAccountConnectionPromiseChain & {get:<R extends EnterpriseUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseUserAccountConnection)=>Promise<EnterpriseUserAccountConnection>}),
/** Is the current viewer an admin of this enterprise? */
viewerIsAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The URL of the enterprise website. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** An account to manage multiple organizations with consolidated policy and billing. */
export interface EnterpriseObservableChain{
/** A URL pointing to the enterprise's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Enterprise billing informationÂ visible to enterprise billing managers. */
billingInfo:(EnterpriseBillingInfoObservableChain & {get:<R extends EnterpriseBillingInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseBillingInfo, R>|null))=>Observable<(FieldsSelection<EnterpriseBillingInfo, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The description of the enterprise. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The description of the enterprise as HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The location of the enterprise. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A list of users who are members of this enterprise. */
members:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Only return members within the selected GitHub Enterprise deployment */
deployment?: (EnterpriseUserDeployment|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for members returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** Only return members within the organizations with these logins */
organizationLogins?: (Scalars["String"][]|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role of the user in the enterprise organization or server. */
role?: (EnterpriseUserAccountMembershipRole|null)})=>EnterpriseMemberConnectionObservableChain & {get:<R extends EnterpriseMemberConnectionRequest>(request: R, defaultValue?:EnterpriseMemberConnection)=>Observable<EnterpriseMemberConnection>})&(EnterpriseMemberConnectionObservableChain & {get:<R extends EnterpriseMemberConnectionRequest>(request: R, defaultValue?:EnterpriseMemberConnection)=>Observable<EnterpriseMemberConnection>}),
/** The name of the enterprise. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of organizations that belong to this enterprise. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations returned from the connection. */
orderBy?: (OrganizationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>})&(OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** Enterprise information only visible to enterprise owners. */
ownerInfo:(EnterpriseOwnerInfoObservableChain & {get:<R extends EnterpriseOwnerInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseOwnerInfo, R>|null))=>Observable<(FieldsSelection<EnterpriseOwnerInfo, R>|null)>}),
/** The HTTP path for this enterprise. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The URL-friendly identifier for the enterprise. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP URL for this enterprise. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of user accounts on this enterprise. */
userAccounts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>EnterpriseUserAccountConnectionObservableChain & {get:<R extends EnterpriseUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseUserAccountConnection)=>Observable<EnterpriseUserAccountConnection>})&(EnterpriseUserAccountConnectionObservableChain & {get:<R extends EnterpriseUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseUserAccountConnection)=>Observable<EnterpriseUserAccountConnection>}),
/** Is the current viewer an admin of this enterprise? */
viewerIsAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The URL of the enterprise website. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfoPromiseChain{
/** The number of licenseable users/emails across the enterprise. */
allLicensableUsersCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of data packs used by all organizations owned by the enterprise. */
assetPacks:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
 * The number of available seats across all owned organizations based on the unique number of billable users.
 */
availableSeats:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The bandwidth quota in GB for all organizations owned by the enterprise. */
bandwidthQuota:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Promise<Scalars["Float"]>}),
/** The bandwidth usage in GB for all organizations owned by the enterprise. */
bandwidthUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Promise<Scalars["Float"]>}),
/** The bandwidth usage as a percentage of the bandwidth quota. */
bandwidthUsagePercentage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
 * The total seats across all organizations owned by the enterprise.
 */
seats:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The storage quota in GB for all organizations owned by the enterprise. */
storageQuota:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Promise<Scalars["Float"]>}),
/** The storage usage in GB for all organizations owned by the enterprise. */
storageUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Promise<Scalars["Float"]>}),
/** The storage usage as a percentage of the storage quota. */
storageUsagePercentage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of available licenses across all owned organizations based on the unique number of billable users. */
totalAvailableLicenses:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The total number of licenses allocated. */
totalLicenses:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Enterprise billing information visible to enterprise billing managers and owners. */
export interface EnterpriseBillingInfoObservableChain{
/** The number of licenseable users/emails across the enterprise. */
allLicensableUsersCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of data packs used by all organizations owned by the enterprise. */
assetPacks:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
 * The number of available seats across all owned organizations based on the unique number of billable users.
 */
availableSeats:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The bandwidth quota in GB for all organizations owned by the enterprise. */
bandwidthQuota:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Observable<Scalars["Float"]>}),
/** The bandwidth usage in GB for all organizations owned by the enterprise. */
bandwidthUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Observable<Scalars["Float"]>}),
/** The bandwidth usage as a percentage of the bandwidth quota. */
bandwidthUsagePercentage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
 * The total seats across all organizations owned by the enterprise.
 */
seats:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The storage quota in GB for all organizations owned by the enterprise. */
storageQuota:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Observable<Scalars["Float"]>}),
/** The storage usage in GB for all organizations owned by the enterprise. */
storageUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Float"])=>Observable<Scalars["Float"]>}),
/** The storage usage as a percentage of the storage quota. */
storageUsagePercentage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of available licenses across all owned organizations based on the unique number of billable users. */
totalAvailableLicenses:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The total number of licenses allocated. */
totalLicenses:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseMemberEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseMemberRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseMember, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseMember, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseMember. */
export interface EnterpriseMemberConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseMemberEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseMemberRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseMember, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseMember, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether the user does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:({get:<R extends EnterpriseMemberRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseMember, R>|null))=>Promise<(FieldsSelection<EnterpriseMember, R>|null)>})}


/** A User who is a member of an enterprise through one or more organizations. */
export interface EnterpriseMemberEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether the user does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:({get:<R extends EnterpriseMemberRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseMember, R>|null))=>Observable<(FieldsSelection<EnterpriseMember, R>|null)>})}


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccountPromiseChain{
/** A URL pointing to the enterprise user account's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The enterprise in which this user account exists. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Promise<Enterprise>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** An identifier for the enterprise user account, a login or email address */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The name of the enterprise user account */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A list of enterprise organizations this user is a member of. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations returned from the connection. */
orderBy?: (OrganizationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role of the user in the enterprise organization. */
role?: (EnterpriseUserAccountMembershipRole|null)})=>EnterpriseOrganizationMembershipConnectionPromiseChain & {get:<R extends EnterpriseOrganizationMembershipConnectionRequest>(request: R, defaultValue?:EnterpriseOrganizationMembershipConnection)=>Promise<EnterpriseOrganizationMembershipConnection>})&(EnterpriseOrganizationMembershipConnectionPromiseChain & {get:<R extends EnterpriseOrganizationMembershipConnectionRequest>(request: R, defaultValue?:EnterpriseOrganizationMembershipConnection)=>Promise<EnterpriseOrganizationMembershipConnection>}),
/** The HTTP path for this user. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this user. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user within the enterprise. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export interface EnterpriseUserAccountObservableChain{
/** A URL pointing to the enterprise user account's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The enterprise in which this user account exists. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Observable<Enterprise>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** An identifier for the enterprise user account, a login or email address */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The name of the enterprise user account */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A list of enterprise organizations this user is a member of. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations returned from the connection. */
orderBy?: (OrganizationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role of the user in the enterprise organization. */
role?: (EnterpriseUserAccountMembershipRole|null)})=>EnterpriseOrganizationMembershipConnectionObservableChain & {get:<R extends EnterpriseOrganizationMembershipConnectionRequest>(request: R, defaultValue?:EnterpriseOrganizationMembershipConnection)=>Observable<EnterpriseOrganizationMembershipConnection>})&(EnterpriseOrganizationMembershipConnectionObservableChain & {get:<R extends EnterpriseOrganizationMembershipConnectionRequest>(request: R, defaultValue?:EnterpriseOrganizationMembershipConnection)=>Observable<EnterpriseOrganizationMembershipConnection>}),
/** The HTTP path for this user. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this user. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user within the enterprise. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface ActorPromiseChain{
/** A URL pointing to the actor's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this actor. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this actor. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export interface ActorObservableChain{
/** A URL pointing to the actor's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this actor. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this actor. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseOrganizationMembershipEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseOrganizationMembershipEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseOrganizationMembershipEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationRequest>(request: R, defaultValue?:((FieldsSelection<Organization, R>|null)[]|null))=>Promise<((FieldsSelection<Organization, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Organization. */
export interface EnterpriseOrganizationMembershipConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseOrganizationMembershipEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseOrganizationMembershipEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseOrganizationMembershipEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationRequest>(request: R, defaultValue?:((FieldsSelection<Organization, R>|null)[]|null))=>Observable<((FieldsSelection<Organization, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The role of the user in the enterprise membership. */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseUserAccountMembershipRole)=>Promise<EnterpriseUserAccountMembershipRole>})}


/** An enterprise organization that a user is a member of. */
export interface EnterpriseOrganizationMembershipEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The role of the user in the enterprise membership. */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseUserAccountMembershipRole)=>Observable<EnterpriseUserAccountMembershipRole>})}


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface OrganizationPromiseChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Audit log entries of the organization */
auditLog:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned audit log entries. */
orderBy?: (AuditLogOrder|null),
/** The query string to filter audit entries */
query?: (Scalars["String"]|null)})=>OrganizationAuditEntryConnectionPromiseChain & {get:<R extends OrganizationAuditEntryConnectionRequest>(request: R, defaultValue?:OrganizationAuditEntryConnection)=>Promise<OrganizationAuditEntryConnection>})&(OrganizationAuditEntryConnectionPromiseChain & {get:<R extends OrganizationAuditEntryConnectionRequest>(request: R, defaultValue?:OrganizationAuditEntryConnection)=>Promise<OrganizationAuditEntryConnection>}),
/** A URL pointing to the organization's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The organization's public profile description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The organization's public profile description rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The organization's public email. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The setting value for whether the organization has an IP allow list enabled. */
ipAllowListEnabledSetting:({get:(request?:boolean|number,defaultValue?:IpAllowListEnabledSettingValue)=>Promise<IpAllowListEnabledSettingValue>}),
/** The IP addresses that are allowed to access resources owned by the organization. */
ipAllowListEntries:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for IP allow list entries returned. */
orderBy?: (IpAllowListEntryOrder|null)})=>IpAllowListEntryConnectionPromiseChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Promise<IpAllowListEntryConnection>})&(IpAllowListEntryConnectionPromiseChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Promise<IpAllowListEntryConnection>}),
/** Whether the organization has verified its profile email and website. */
isVerified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcasePromiseChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Promise<ProfileItemShowcase>}),
/** The organization's public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The organization's login name. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>})&(UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>}),
/** A list of users who are members of this organization. */
membersWithRole:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationMemberConnectionPromiseChain & {get:<R extends OrganizationMemberConnectionRequest>(request: R, defaultValue?:OrganizationMemberConnection)=>Promise<OrganizationMemberConnection>})&(OrganizationMemberConnectionPromiseChain & {get:<R extends OrganizationMemberConnectionRequest>(request: R, defaultValue?:OrganizationMemberConnection)=>Promise<OrganizationMemberConnection>}),
/** The organization's public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path creating a new team */
newTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL creating a new team */
newTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The billing email for the organization. */
organizationBillingEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>})&(PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>}),
/** A list of users who have been invited to join this organization. */
pendingMembers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>})&(ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>}),
/** The HTTP path listing organization's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL listing organization's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/**
 * When true the organization requires all members, billing managers, and outside
 * collaborators to enable two-factor authentication.
 */
requiresTwoFactorAuthentication:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The HTTP path for this organization. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The Organization's SAML identity providers */
samlIdentityProvider:(OrganizationIdentityProviderPromiseChain & {get:<R extends OrganizationIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationIdentityProvider, R>|null))=>Promise<(FieldsSelection<OrganizationIdentityProvider, R>|null)>}),
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingPromiseChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Promise<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>}),
/** Find an organization's team by its slug. */
team:((args:{
/** The name or slug of the team to find. */
slug: Scalars["String"]})=>TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** A list of teams in this organization. */
teams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
ldapMapped?: (Scalars["Boolean"]|null),
/** Ordering options for teams returned from the connection */
orderBy?: (TeamOrder|null),
/** If non-null, filters teams according to privacy */
privacy?: (TeamPrivacy|null),
/** If non-null, filters teams with query on team name and team slug */
query?: (Scalars["String"]|null),
/** If non-null, filters teams according to whether the viewer is an admin or member on team */
role?: (TeamRole|null),
/** If true, restrict to only root teams */
rootTeamsOnly?: (Scalars["Boolean"]|null),
/** User logins to filter by */
userLogins?: (Scalars["String"][]|null)})=>TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>})&(TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>}),
/** The HTTP path listing organization's teams */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL listing organization's teams */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The organization's Twitter username. */
twitterUsername:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this organization. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Organization is adminable by the viewer. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Viewer can create repositories on this organization */
viewerCanCreateRepositories:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Viewer can create teams on this organization. */
viewerCanCreateTeams:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Viewer is an active member of this organization. */
viewerIsAMember:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The organization's public profile URL. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export interface OrganizationObservableChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Audit log entries of the organization */
auditLog:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned audit log entries. */
orderBy?: (AuditLogOrder|null),
/** The query string to filter audit entries */
query?: (Scalars["String"]|null)})=>OrganizationAuditEntryConnectionObservableChain & {get:<R extends OrganizationAuditEntryConnectionRequest>(request: R, defaultValue?:OrganizationAuditEntryConnection)=>Observable<OrganizationAuditEntryConnection>})&(OrganizationAuditEntryConnectionObservableChain & {get:<R extends OrganizationAuditEntryConnectionRequest>(request: R, defaultValue?:OrganizationAuditEntryConnection)=>Observable<OrganizationAuditEntryConnection>}),
/** A URL pointing to the organization's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The organization's public profile description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The organization's public profile description rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The organization's public email. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The setting value for whether the organization has an IP allow list enabled. */
ipAllowListEnabledSetting:({get:(request?:boolean|number,defaultValue?:IpAllowListEnabledSettingValue)=>Observable<IpAllowListEnabledSettingValue>}),
/** The IP addresses that are allowed to access resources owned by the organization. */
ipAllowListEntries:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for IP allow list entries returned. */
orderBy?: (IpAllowListEntryOrder|null)})=>IpAllowListEntryConnectionObservableChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Observable<IpAllowListEntryConnection>})&(IpAllowListEntryConnectionObservableChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Observable<IpAllowListEntryConnection>}),
/** Whether the organization has verified its profile email and website. */
isVerified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcaseObservableChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Observable<ProfileItemShowcase>}),
/** The organization's public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The organization's login name. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>})&(UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>}),
/** A list of users who are members of this organization. */
membersWithRole:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationMemberConnectionObservableChain & {get:<R extends OrganizationMemberConnectionRequest>(request: R, defaultValue?:OrganizationMemberConnection)=>Observable<OrganizationMemberConnection>})&(OrganizationMemberConnectionObservableChain & {get:<R extends OrganizationMemberConnectionRequest>(request: R, defaultValue?:OrganizationMemberConnection)=>Observable<OrganizationMemberConnection>}),
/** The organization's public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path creating a new team */
newTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL creating a new team */
newTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The billing email for the organization. */
organizationBillingEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>})&(PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>}),
/** A list of users who have been invited to join this organization. */
pendingMembers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>})&(ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>}),
/** The HTTP path listing organization's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL listing organization's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/**
 * When true the organization requires all members, billing managers, and outside
 * collaborators to enable two-factor authentication.
 */
requiresTwoFactorAuthentication:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The HTTP path for this organization. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The Organization's SAML identity providers */
samlIdentityProvider:(OrganizationIdentityProviderObservableChain & {get:<R extends OrganizationIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationIdentityProvider, R>|null))=>Observable<(FieldsSelection<OrganizationIdentityProvider, R>|null)>}),
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingObservableChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Observable<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>}),
/** Find an organization's team by its slug. */
team:((args:{
/** The name or slug of the team to find. */
slug: Scalars["String"]})=>TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** A list of teams in this organization. */
teams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** If true, filters teams that are mapped to an LDAP Group (Enterprise only) */
ldapMapped?: (Scalars["Boolean"]|null),
/** Ordering options for teams returned from the connection */
orderBy?: (TeamOrder|null),
/** If non-null, filters teams according to privacy */
privacy?: (TeamPrivacy|null),
/** If non-null, filters teams with query on team name and team slug */
query?: (Scalars["String"]|null),
/** If non-null, filters teams according to whether the viewer is an admin or member on team */
role?: (TeamRole|null),
/** If true, restrict to only root teams */
rootTeamsOnly?: (Scalars["Boolean"]|null),
/** User logins to filter by */
userLogins?: (Scalars["String"][]|null)})=>TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>})&(TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>}),
/** The HTTP path listing organization's teams */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL listing organization's teams */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The organization's Twitter username. */
twitterUsername:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this organization. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Organization is adminable by the viewer. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Viewer can create repositories on this organization */
viewerCanCreateRepositories:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Viewer can create teams on this organization. */
viewerCanCreateTeams:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Viewer is an active member of this organization. */
viewerIsAMember:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The organization's public profile URL. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Entities that have members who can set status messages. */
export interface MemberStatusablePromiseChain{
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>})&(UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>})}


/** Entities that have members who can set status messages. */
export interface MemberStatusableObservableChain{
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>})&(UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>})}


/** The connection type for UserStatus. */
export interface UserStatusConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends UserStatusEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserStatusEdge, R>|null)[]|null))=>Promise<((FieldsSelection<UserStatusEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserStatusRequest>(request: R, defaultValue?:((FieldsSelection<UserStatus, R>|null)[]|null))=>Promise<((FieldsSelection<UserStatus, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for UserStatus. */
export interface UserStatusConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends UserStatusEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserStatusEdge, R>|null)[]|null))=>Observable<((FieldsSelection<UserStatusEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserStatusRequest>(request: R, defaultValue?:((FieldsSelection<UserStatus, R>|null)[]|null))=>Observable<((FieldsSelection<UserStatus, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface UserStatusEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserStatusPromiseChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Promise<(FieldsSelection<UserStatus, R>|null)>})}


/** An edge in a connection. */
export interface UserStatusEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserStatusObservableChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Observable<(FieldsSelection<UserStatus, R>|null)>})}


/** The user's description of what they're currently doing. */
export interface UserStatusPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** An emoji summarizing the user's status. */
emoji:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The status emoji as HTML. */
emojiHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Promise<(Scalars["HTML"]|null)>}),
/** If set, the status will not be shown after this date. */
expiresAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** ID of the object. */
id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether this status indicates the user is not fully available on GitHub. */
indicatesLimitedAvailability:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A brief message describing what the user is doing. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The organization whose members can see this status. If null, this status is publicly visible. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The user who has this status. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** The user's description of what they're currently doing. */
export interface UserStatusObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** An emoji summarizing the user's status. */
emoji:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The status emoji as HTML. */
emojiHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Observable<(Scalars["HTML"]|null)>}),
/** If set, the status will not be shown after this date. */
expiresAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** ID of the object. */
id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether this status indicates the user is not fully available on GitHub. */
indicatesLimitedAvailability:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A brief message describing what the user is doing. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The organization whose members can see this status. If null, this status is publicly visible. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The user who has this status. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface UserPromiseChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A URL pointing to the user's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user's public profile bio. */
bio:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user's public profile bio as HTML. */
bioHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** A list of commit comments made by this user. */
commitComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>})&(CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>}),
/** The user's public profile company. */
company:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user's public profile company as HTML. */
companyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The collection of contributions this user has made to different repositories. */
contributionsCollection:((args?:{
/** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
from?: (Scalars["DateTime"]|null),
/** The ID of the organization used to filter contributions. */
organizationID?: (Scalars["ID"]|null),
/**
 * Only contributions made before and up to and including this time will be
 * counted. If omitted, defaults to the current time.
 */
to?: (Scalars["DateTime"]|null)})=>ContributionsCollectionPromiseChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:ContributionsCollection)=>Promise<ContributionsCollection>})&(ContributionsCollectionPromiseChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:ContributionsCollection)=>Promise<ContributionsCollection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The user's publicly visible profile email. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of users the given user is followed by. */
followers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>FollowerConnectionPromiseChain & {get:<R extends FollowerConnectionRequest>(request: R, defaultValue?:FollowerConnection)=>Promise<FollowerConnection>})&(FollowerConnectionPromiseChain & {get:<R extends FollowerConnectionRequest>(request: R, defaultValue?:FollowerConnection)=>Promise<FollowerConnection>}),
/** A list of users the given user is following. */
following:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>FollowingConnectionPromiseChain & {get:<R extends FollowingConnectionRequest>(request: R, defaultValue?:FollowingConnection)=>Promise<FollowingConnection>})&(FollowingConnectionPromiseChain & {get:<R extends FollowingConnectionRequest>(request: R, defaultValue?:FollowingConnection)=>Promise<FollowingConnection>}),
/** Find gist by repo name. */
gist:((args:{
/** The gist name to find. */
name: Scalars["String"]})=>GistPromiseChain & {get:<R extends GistRequest>(request: R, defaultValue?:(FieldsSelection<Gist, R>|null))=>Promise<(FieldsSelection<Gist, R>|null)>}),
/** A list of gist comments made by this user. */
gistComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>GistCommentConnectionPromiseChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Promise<GistCommentConnection>})&(GistCommentConnectionPromiseChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Promise<GistCommentConnection>}),
/** A list of the Gists the user has created. */
gists:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for gists returned from the connection */
orderBy?: (GistOrder|null),
/** Filters Gists according to privacy. */
privacy?: (GistPrivacy|null)})=>GistConnectionPromiseChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Promise<GistConnection>})&(GistConnectionPromiseChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Promise<GistConnection>}),
/** The hovercard information for this user in a given context */
hovercard:((args?:{
/** The ID of the subject to get the hovercard in the context of */
primarySubjectId?: (Scalars["ID"]|null)})=>HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>})&(HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
isBountyHunter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
isCampusExpert:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is a GitHub Developer Program member. */
isDeveloperProgramMember:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is a GitHub employee. */
isEmployee:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the user has marked themselves as for hire. */
isHireable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is a site administrator. */
isSiteAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is the viewing user. */
isViewer:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of issue comments made by this user. */
issueComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>})&(IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>}),
/** A list of issues associated with this user. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>})&(IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcasePromiseChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Promise<ProfileItemShowcase>}),
/** The user's public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user's public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Find an organization by its login that the user belongs to. */
organization:((args:{
/** The login of the organization to find. */
login: Scalars["String"]})=>OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** Verified email addresses that match verified domains for a specified organization the user is a member of. */
organizationVerifiedDomainEmails:((args:{
/** The login of the organization to match verified domains from. */
login: Scalars["String"]})=>{get:(request?:boolean|number,defaultValue?:Scalars["String"][])=>Promise<Scalars["String"][]>}),
/** A list of organizations the user belongs to. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>})&(OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>})&(PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>})&(ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>}),
/** The HTTP path listing user's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL listing user's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of public keys associated with this user. */
publicKeys:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PublicKeyConnectionPromiseChain & {get:<R extends PublicKeyConnectionRequest>(request: R, defaultValue?:PublicKeyConnection)=>Promise<PublicKeyConnection>})&(PublicKeyConnectionPromiseChain & {get:<R extends PublicKeyConnectionRequest>(request: R, defaultValue?:PublicKeyConnection)=>Promise<PublicKeyConnection>}),
/** A list of pull requests associated with this user. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** A list of repositories that the user recently contributed to. */
repositoriesContributedTo:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/**
 * If non-null, include only the specified types of contributions. The
 * GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
 */
contributionTypes?: ((RepositoryContributionType|null)[]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If true, include user repositories */
includeUserRepositories?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The HTTP path for this user */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Replies this user has saved */
savedReplies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The field to order saved replies by. */
orderBy?: (SavedReplyOrder|null)})=>SavedReplyConnectionPromiseChain & {get:<R extends SavedReplyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SavedReplyConnection, R>|null))=>Promise<(FieldsSelection<SavedReplyConnection, R>|null)>})&(SavedReplyConnectionPromiseChain & {get:<R extends SavedReplyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SavedReplyConnection, R>|null))=>Promise<(FieldsSelection<SavedReplyConnection, R>|null)>}),
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingPromiseChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Promise<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>}),
/** Repositories the user has starred. */
starredRepositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null),
/** Filters starred repositories to only return repositories owned by the viewer. */
ownedByViewer?: (Scalars["Boolean"]|null)})=>StarredRepositoryConnectionPromiseChain & {get:<R extends StarredRepositoryConnectionRequest>(request: R, defaultValue?:StarredRepositoryConnection)=>Promise<StarredRepositoryConnection>})&(StarredRepositoryConnectionPromiseChain & {get:<R extends StarredRepositoryConnectionRequest>(request: R, defaultValue?:StarredRepositoryConnection)=>Promise<StarredRepositoryConnection>}),
/** The user's description of what they're currently doing. */
status:(UserStatusPromiseChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Promise<(FieldsSelection<UserStatus, R>|null)>}),
/** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
topRepositories:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy: RepositoryOrder,
/** How far back in time to fetch contributed repositories */
since?: (Scalars["DateTime"]|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** The user's Twitter username. */
twitterUsername:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this user */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the viewer is able to follow the user. */
viewerCanFollow:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not this user is followed by the viewer. */
viewerIsFollowing:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of repositories the given user is watching. */
watching:((args?:{
/**
 * Affiliation options for repositories returned from the connection. If none
 * specified, the results will include repositories for which the current
 * viewer is an owner or collaborator, or member.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** A URL pointing to the user's public website/blog. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export interface UserObservableChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A URL pointing to the user's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user's public profile bio. */
bio:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user's public profile bio as HTML. */
bioHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** A list of commit comments made by this user. */
commitComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>})&(CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>}),
/** The user's public profile company. */
company:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user's public profile company as HTML. */
companyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The collection of contributions this user has made to different repositories. */
contributionsCollection:((args?:{
/** Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. */
from?: (Scalars["DateTime"]|null),
/** The ID of the organization used to filter contributions. */
organizationID?: (Scalars["ID"]|null),
/**
 * Only contributions made before and up to and including this time will be
 * counted. If omitted, defaults to the current time.
 */
to?: (Scalars["DateTime"]|null)})=>ContributionsCollectionObservableChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:ContributionsCollection)=>Observable<ContributionsCollection>})&(ContributionsCollectionObservableChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:ContributionsCollection)=>Observable<ContributionsCollection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The user's publicly visible profile email. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of users the given user is followed by. */
followers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>FollowerConnectionObservableChain & {get:<R extends FollowerConnectionRequest>(request: R, defaultValue?:FollowerConnection)=>Observable<FollowerConnection>})&(FollowerConnectionObservableChain & {get:<R extends FollowerConnectionRequest>(request: R, defaultValue?:FollowerConnection)=>Observable<FollowerConnection>}),
/** A list of users the given user is following. */
following:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>FollowingConnectionObservableChain & {get:<R extends FollowingConnectionRequest>(request: R, defaultValue?:FollowingConnection)=>Observable<FollowingConnection>})&(FollowingConnectionObservableChain & {get:<R extends FollowingConnectionRequest>(request: R, defaultValue?:FollowingConnection)=>Observable<FollowingConnection>}),
/** Find gist by repo name. */
gist:((args:{
/** The gist name to find. */
name: Scalars["String"]})=>GistObservableChain & {get:<R extends GistRequest>(request: R, defaultValue?:(FieldsSelection<Gist, R>|null))=>Observable<(FieldsSelection<Gist, R>|null)>}),
/** A list of gist comments made by this user. */
gistComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>GistCommentConnectionObservableChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Observable<GistCommentConnection>})&(GistCommentConnectionObservableChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Observable<GistCommentConnection>}),
/** A list of the Gists the user has created. */
gists:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for gists returned from the connection */
orderBy?: (GistOrder|null),
/** Filters Gists according to privacy. */
privacy?: (GistPrivacy|null)})=>GistConnectionObservableChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Observable<GistConnection>})&(GistConnectionObservableChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Observable<GistConnection>}),
/** The hovercard information for this user in a given context */
hovercard:((args?:{
/** The ID of the subject to get the hovercard in the context of */
primarySubjectId?: (Scalars["ID"]|null)})=>HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>})&(HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
isBountyHunter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is a participant in the GitHub Campus Experts Program. */
isCampusExpert:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is a GitHub Developer Program member. */
isDeveloperProgramMember:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is a GitHub employee. */
isEmployee:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the user has marked themselves as for hire. */
isHireable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is a site administrator. */
isSiteAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is the viewing user. */
isViewer:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of issue comments made by this user. */
issueComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>})&(IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>}),
/** A list of issues associated with this user. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>})&(IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcaseObservableChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Observable<ProfileItemShowcase>}),
/** The user's public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user's public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Find an organization by its login that the user belongs to. */
organization:((args:{
/** The login of the organization to find. */
login: Scalars["String"]})=>OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** Verified email addresses that match verified domains for a specified organization the user is a member of. */
organizationVerifiedDomainEmails:((args:{
/** The login of the organization to match verified domains from. */
login: Scalars["String"]})=>{get:(request?:boolean|number,defaultValue?:Scalars["String"][])=>Observable<Scalars["String"][]>}),
/** A list of organizations the user belongs to. */
organizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>})&(OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>})&(PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>})&(ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>}),
/** The HTTP path listing user's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL listing user's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of public keys associated with this user. */
publicKeys:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PublicKeyConnectionObservableChain & {get:<R extends PublicKeyConnectionRequest>(request: R, defaultValue?:PublicKeyConnection)=>Observable<PublicKeyConnection>})&(PublicKeyConnectionObservableChain & {get:<R extends PublicKeyConnectionRequest>(request: R, defaultValue?:PublicKeyConnection)=>Observable<PublicKeyConnection>}),
/** A list of pull requests associated with this user. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** A list of repositories that the user recently contributed to. */
repositoriesContributedTo:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/**
 * If non-null, include only the specified types of contributions. The
 * GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
 */
contributionTypes?: ((RepositoryContributionType|null)[]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If true, include user repositories */
includeUserRepositories?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The HTTP path for this user */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Replies this user has saved */
savedReplies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The field to order saved replies by. */
orderBy?: (SavedReplyOrder|null)})=>SavedReplyConnectionObservableChain & {get:<R extends SavedReplyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SavedReplyConnection, R>|null))=>Observable<(FieldsSelection<SavedReplyConnection, R>|null)>})&(SavedReplyConnectionObservableChain & {get:<R extends SavedReplyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SavedReplyConnection, R>|null))=>Observable<(FieldsSelection<SavedReplyConnection, R>|null)>}),
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingObservableChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Observable<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>}),
/** Repositories the user has starred. */
starredRepositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null),
/** Filters starred repositories to only return repositories owned by the viewer. */
ownedByViewer?: (Scalars["Boolean"]|null)})=>StarredRepositoryConnectionObservableChain & {get:<R extends StarredRepositoryConnectionRequest>(request: R, defaultValue?:StarredRepositoryConnection)=>Observable<StarredRepositoryConnection>})&(StarredRepositoryConnectionObservableChain & {get:<R extends StarredRepositoryConnectionRequest>(request: R, defaultValue?:StarredRepositoryConnection)=>Observable<StarredRepositoryConnection>}),
/** The user's description of what they're currently doing. */
status:(UserStatusObservableChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Observable<(FieldsSelection<UserStatus, R>|null)>}),
/** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
topRepositories:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy: RepositoryOrder,
/** How far back in time to fetch contributed repositories */
since?: (Scalars["DateTime"]|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** The user's Twitter username. */
twitterUsername:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this user */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the viewer is able to follow the user. */
viewerCanFollow:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not this user is followed by the viewer. */
viewerIsFollowing:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of repositories the given user is watching. */
watching:((args?:{
/**
 * Affiliation options for repositories returned from the connection. If none
 * specified, the results will include repositories for which the current
 * viewer is an owner or collaborator, or member.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** A URL pointing to the user's public website/blog. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Represents an owner of a package. */
export interface PackageOwnerPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>})&(PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>})}


/** Represents an owner of a package. */
export interface PackageOwnerObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>})&(PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>})}


/** The connection type for Package. */
export interface PackageConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PackageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PackageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageRequest>(request: R, defaultValue?:((FieldsSelection<Package, R>|null)[]|null))=>Promise<((FieldsSelection<Package, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Package. */
export interface PackageConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PackageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PackageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageRequest>(request: R, defaultValue?:((FieldsSelection<Package, R>|null)[]|null))=>Observable<((FieldsSelection<Package, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PackageEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackagePromiseChain & {get:<R extends PackageRequest>(request: R, defaultValue?:(FieldsSelection<Package, R>|null))=>Promise<(FieldsSelection<Package, R>|null)>})}


/** An edge in a connection. */
export interface PackageEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackageObservableChain & {get:<R extends PackageRequest>(request: R, defaultValue?:(FieldsSelection<Package, R>|null))=>Observable<(FieldsSelection<Package, R>|null)>})}


/** Information for an uploaded package. */
export interface PackagePromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Find the latest version for the package. */
latestVersion:(PackageVersionPromiseChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Promise<(FieldsSelection<PackageVersion, R>|null)>}),
/** Identifies the name of the package. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the type of the package. */
packageType:({get:(request?:boolean|number,defaultValue?:PackageType)=>Promise<PackageType>}),
/** The repository this package belongs to. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** Statistics about package activity. */
statistics:(PackageStatisticsPromiseChain & {get:<R extends PackageStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<PackageStatistics, R>|null))=>Promise<(FieldsSelection<PackageStatistics, R>|null)>}),
/** Find package version by version string. */
version:((args:{
/** The package version. */
version: Scalars["String"]})=>PackageVersionPromiseChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Promise<(FieldsSelection<PackageVersion, R>|null)>}),
/** list of versions for this package */
versions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageVersionOrder|null)})=>PackageVersionConnectionPromiseChain & {get:<R extends PackageVersionConnectionRequest>(request: R, defaultValue?:PackageVersionConnection)=>Promise<PackageVersionConnection>})&(PackageVersionConnectionPromiseChain & {get:<R extends PackageVersionConnectionRequest>(request: R, defaultValue?:PackageVersionConnection)=>Promise<PackageVersionConnection>})}


/** Information for an uploaded package. */
export interface PackageObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Find the latest version for the package. */
latestVersion:(PackageVersionObservableChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Observable<(FieldsSelection<PackageVersion, R>|null)>}),
/** Identifies the name of the package. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the type of the package. */
packageType:({get:(request?:boolean|number,defaultValue?:PackageType)=>Observable<PackageType>}),
/** The repository this package belongs to. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** Statistics about package activity. */
statistics:(PackageStatisticsObservableChain & {get:<R extends PackageStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<PackageStatistics, R>|null))=>Observable<(FieldsSelection<PackageStatistics, R>|null)>}),
/** Find package version by version string. */
version:((args:{
/** The package version. */
version: Scalars["String"]})=>PackageVersionObservableChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Observable<(FieldsSelection<PackageVersion, R>|null)>}),
/** list of versions for this package */
versions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageVersionOrder|null)})=>PackageVersionConnectionObservableChain & {get:<R extends PackageVersionConnectionRequest>(request: R, defaultValue?:PackageVersionConnection)=>Observable<PackageVersionConnection>})&(PackageVersionConnectionObservableChain & {get:<R extends PackageVersionConnectionRequest>(request: R, defaultValue?:PackageVersionConnection)=>Observable<PackageVersionConnection>})}


/** Information about a specific package version. */
export interface PackageVersionPromiseChain{
/** List of files associated with this package version */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering of the returned package files. */
orderBy?: (PackageFileOrder|null)})=>PackageFileConnectionPromiseChain & {get:<R extends PackageFileConnectionRequest>(request: R, defaultValue?:PackageFileConnection)=>Promise<PackageFileConnection>})&(PackageFileConnectionPromiseChain & {get:<R extends PackageFileConnectionRequest>(request: R, defaultValue?:PackageFileConnection)=>Promise<PackageFileConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The package associated with this version. */
package:(PackagePromiseChain & {get:<R extends PackageRequest>(request: R, defaultValue?:(FieldsSelection<Package, R>|null))=>Promise<(FieldsSelection<Package, R>|null)>}),
/** The platform this version was built for. */
platform:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Whether or not this version is a pre-release. */
preRelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The README of this package version. */
readme:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The release associated with this package version. */
release:(ReleasePromiseChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Promise<(FieldsSelection<Release, R>|null)>}),
/** Statistics about package activity. */
statistics:(PackageVersionStatisticsPromiseChain & {get:<R extends PackageVersionStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersionStatistics, R>|null))=>Promise<(FieldsSelection<PackageVersionStatistics, R>|null)>}),
/** The package version summary. */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The version string. */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Information about a specific package version. */
export interface PackageVersionObservableChain{
/** List of files associated with this package version */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering of the returned package files. */
orderBy?: (PackageFileOrder|null)})=>PackageFileConnectionObservableChain & {get:<R extends PackageFileConnectionRequest>(request: R, defaultValue?:PackageFileConnection)=>Observable<PackageFileConnection>})&(PackageFileConnectionObservableChain & {get:<R extends PackageFileConnectionRequest>(request: R, defaultValue?:PackageFileConnection)=>Observable<PackageFileConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The package associated with this version. */
package:(PackageObservableChain & {get:<R extends PackageRequest>(request: R, defaultValue?:(FieldsSelection<Package, R>|null))=>Observable<(FieldsSelection<Package, R>|null)>}),
/** The platform this version was built for. */
platform:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Whether or not this version is a pre-release. */
preRelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The README of this package version. */
readme:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The release associated with this package version. */
release:(ReleaseObservableChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Observable<(FieldsSelection<Release, R>|null)>}),
/** Statistics about package activity. */
statistics:(PackageVersionStatisticsObservableChain & {get:<R extends PackageVersionStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersionStatistics, R>|null))=>Observable<(FieldsSelection<PackageVersionStatistics, R>|null)>}),
/** The package version summary. */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The version string. */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for PackageFile. */
export interface PackageFileConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PackageFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageFileEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PackageFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageFileRequest>(request: R, defaultValue?:((FieldsSelection<PackageFile, R>|null)[]|null))=>Promise<((FieldsSelection<PackageFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PackageFile. */
export interface PackageFileConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PackageFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageFileEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PackageFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageFileRequest>(request: R, defaultValue?:((FieldsSelection<PackageFile, R>|null)[]|null))=>Observable<((FieldsSelection<PackageFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PackageFileEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackageFilePromiseChain & {get:<R extends PackageFileRequest>(request: R, defaultValue?:(FieldsSelection<PackageFile, R>|null))=>Promise<(FieldsSelection<PackageFile, R>|null)>})}


/** An edge in a connection. */
export interface PackageFileEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackageFileObservableChain & {get:<R extends PackageFileRequest>(request: R, defaultValue?:(FieldsSelection<PackageFile, R>|null))=>Observable<(FieldsSelection<PackageFile, R>|null)>})}


/** A file in a package version. */
export interface PackageFilePromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** MD5 hash of the file. */
md5:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Name of the file. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The package version this file belongs to. */
packageVersion:(PackageVersionPromiseChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Promise<(FieldsSelection<PackageVersion, R>|null)>}),
/** SHA1 hash of the file. */
sha1:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** SHA256 hash of the file. */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Size of the file in bytes. */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** URL to download the asset. */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** A file in a package version. */
export interface PackageFileObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** MD5 hash of the file. */
md5:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Name of the file. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The package version this file belongs to. */
packageVersion:(PackageVersionObservableChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Observable<(FieldsSelection<PackageVersion, R>|null)>}),
/** SHA1 hash of the file. */
sha1:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** SHA256 hash of the file. */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Size of the file in bytes. */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** URL to download the asset. */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Information about pagination in a connection. */
export interface PageInfoPromiseChain{
/** When paginating forwards, the cursor to continue. */
endCursor:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** When paginating forwards, are there more items? */
hasNextPage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When paginating backwards, are there more items? */
hasPreviousPage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When paginating backwards, the cursor to continue. */
startCursor:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Information about pagination in a connection. */
export interface PageInfoObservableChain{
/** When paginating forwards, the cursor to continue. */
endCursor:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** When paginating forwards, are there more items? */
hasNextPage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When paginating backwards, are there more items? */
hasPreviousPage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When paginating backwards, the cursor to continue. */
startCursor:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** A release contains the content for a release. */
export interface ReleasePromiseChain{
/** The author of the release */
author:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The description of the release. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The description of this release rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Promise<(Scalars["HTML"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether or not the release is a draft */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the release is a prerelease */
isPrerelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The title of the release. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the date and time when the release was created. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** List of releases assets which are dependent on this release. */
releaseAssets:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** A list of names to filter the assets by. */
name?: (Scalars["String"]|null)})=>ReleaseAssetConnectionPromiseChain & {get:<R extends ReleaseAssetConnectionRequest>(request: R, defaultValue?:ReleaseAssetConnection)=>Promise<ReleaseAssetConnection>})&(ReleaseAssetConnectionPromiseChain & {get:<R extends ReleaseAssetConnectionRequest>(request: R, defaultValue?:ReleaseAssetConnection)=>Promise<ReleaseAssetConnection>}),
/** The HTTP path for this issue */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A description of the release, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Promise<(Scalars["HTML"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Promise<(Scalars["HTML"]|null)>}),
/** The Git tag the release points to */
tag:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** The name of the release's Git tag */
tagName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this issue */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A release contains the content for a release. */
export interface ReleaseObservableChain{
/** The author of the release */
author:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The description of the release. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The description of this release rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Observable<(Scalars["HTML"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether or not the release is a draft */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the release is a prerelease */
isPrerelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The title of the release. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the date and time when the release was created. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** List of releases assets which are dependent on this release. */
releaseAssets:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** A list of names to filter the assets by. */
name?: (Scalars["String"]|null)})=>ReleaseAssetConnectionObservableChain & {get:<R extends ReleaseAssetConnectionRequest>(request: R, defaultValue?:ReleaseAssetConnection)=>Observable<ReleaseAssetConnection>})&(ReleaseAssetConnectionObservableChain & {get:<R extends ReleaseAssetConnectionRequest>(request: R, defaultValue?:ReleaseAssetConnection)=>Observable<ReleaseAssetConnection>}),
/** The HTTP path for this issue */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A description of the release, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Observable<(Scalars["HTML"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Observable<(Scalars["HTML"]|null)>}),
/** The Git tag the release points to */
tag:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** The name of the release's Git tag */
tagName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this issue */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatablePromiseChain{
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The URL to this resource. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a type that can be retrieved by a URL. */
export interface UniformResourceLocatableObservableChain{
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The URL to this resource. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReleaseAssetEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseAssetEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReleaseAssetEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReleaseAssetRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseAsset, R>|null)[]|null))=>Promise<((FieldsSelection<ReleaseAsset, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ReleaseAsset. */
export interface ReleaseAssetConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReleaseAssetEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseAssetEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReleaseAssetEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReleaseAssetRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseAsset, R>|null)[]|null))=>Observable<((FieldsSelection<ReleaseAsset, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ReleaseAssetEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReleaseAssetPromiseChain & {get:<R extends ReleaseAssetRequest>(request: R, defaultValue?:(FieldsSelection<ReleaseAsset, R>|null))=>Promise<(FieldsSelection<ReleaseAsset, R>|null)>})}


/** An edge in a connection. */
export interface ReleaseAssetEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReleaseAssetObservableChain & {get:<R extends ReleaseAssetRequest>(request: R, defaultValue?:(FieldsSelection<ReleaseAsset, R>|null))=>Observable<(FieldsSelection<ReleaseAsset, R>|null)>})}


/** A release asset contains the content for a release asset. */
export interface ReleaseAssetPromiseChain{
/** The asset's content-type */
contentType:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The number of times this asset was downloaded */
downloadCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the URL where you can download the release asset via the browser. */
downloadUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the title of the release asset. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Release that the asset is associated with */
release:(ReleasePromiseChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Promise<(FieldsSelection<Release, R>|null)>}),
/** The size (in bytes) of the asset */
size:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The user that performed the upload */
uploadedBy:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** Identifies the URL of the release asset. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A release asset contains the content for a release asset. */
export interface ReleaseAssetObservableChain{
/** The asset's content-type */
contentType:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The number of times this asset was downloaded */
downloadCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the URL where you can download the release asset via the browser. */
downloadUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the title of the release asset. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Release that the asset is associated with */
release:(ReleaseObservableChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Observable<(FieldsSelection<Release, R>|null)>}),
/** The size (in bytes) of the asset */
size:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The user that performed the upload */
uploadedBy:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** Identifies the URL of the release asset. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a Git reference. */
export interface RefPromiseChain{
/** A list of pull requests with this ref as the head ref. */
associatedPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The ref name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
prefix:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The repository the ref belongs to. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/**
 * The object the ref points to.
 * 
 * **Upcoming Change on 2019-07-01 UTC**
 * **Description:** Type for `target` will change from `GitObject!` to `GitObject`.
 * **Reason:** The `target` field may return `null` values and is changing to nullable
 */
target:(GitObjectPromiseChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:GitObject)=>Promise<GitObject>})}


/** Represents a Git reference. */
export interface RefObservableChain{
/** A list of pull requests with this ref as the head ref. */
associatedPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The ref name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
prefix:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The repository the ref belongs to. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/**
 * The object the ref points to.
 * 
 * **Upcoming Change on 2019-07-01 UTC**
 * **Description:** Type for `target` will change from `GitObject!` to `GitObject`.
 * **Reason:** The `target` field may return `null` values and is changing to nullable
 */
target:(GitObjectObservableChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:GitObject)=>Observable<GitObject>})}


/** The connection type for PullRequest. */
export interface PullRequestConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestRequest>(request: R, defaultValue?:((FieldsSelection<PullRequest, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequest. */
export interface PullRequestConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestRequest>(request: R, defaultValue?:((FieldsSelection<PullRequest, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** A repository pull request. */
export interface PullRequestPromiseChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Promise<(LockReason|null)>}),
/** The number of additions in this pull request. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** Identifies the base Ref associated with the pull request. */
baseRef:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
baseRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
baseRefOid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The repository associated with this pull request's base Ref. */
baseRepository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether or not the pull request is rebaseable. */
canBeRebased:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The number of changed files in this pull request. */
changedFiles:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The HTTP path for the checks of this pull request. */
checksResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for the checks of this pull request. */
checksUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** `true` if the pull request is closed */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of comments associated with the pull request. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>})&(IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>}),
/** A list of commits present in this pull request's head branch not present in the base branch. */
commits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestCommitConnectionPromiseChain & {get:<R extends PullRequestCommitConnectionRequest>(request: R, defaultValue?:PullRequestCommitConnection)=>Promise<PullRequestCommitConnection>})&(PullRequestCommitConnectionPromiseChain & {get:<R extends PullRequestCommitConnectionRequest>(request: R, defaultValue?:PullRequestCommitConnection)=>Promise<PullRequestCommitConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The number of deletions in this pull request. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The actor who edited this pull request's body. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Lists the files changed within this pull request. */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestChangedFileConnectionPromiseChain & {get:<R extends PullRequestChangedFileConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFileConnection, R>|null))=>Promise<(FieldsSelection<PullRequestChangedFileConnection, R>|null)>})&(PullRequestChangedFileConnectionPromiseChain & {get:<R extends PullRequestChangedFileConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFileConnection, R>|null))=>Promise<(FieldsSelection<PullRequestChangedFileConnection, R>|null)>}),
/** Identifies the head Ref associated with the pull request. */
headRef:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
headRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
headRefOid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The repository associated with this pull request's head Ref. */
headRepository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The owner of the repository associated with this pull request's head Ref. */
headRepositoryOwner:(RepositoryOwnerPromiseChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Promise<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** The hovercard information for this issue */
hovercard:((args?:{
/** Whether or not to include notification contexts */
includeNotificationContexts?: (Scalars["Boolean"]|null)})=>HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>})&(HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The head and base repositories are different. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the pull request is a draft. */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** `true` if the pull request is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates whether maintainers can modify the pull request. */
maintainerCanModify:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The commit that was created when this pull request was merged. */
mergeCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Detailed information about the current pull request merge state status. */
mergeStateStatus:({get:(request?:boolean|number,defaultValue?:MergeStateStatus)=>Promise<MergeStateStatus>}),
/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
mergeable:({get:(request?:boolean|number,defaultValue?:MergeableState)=>Promise<MergeableState>}),
/** Whether or not the pull request was merged. */
merged:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The date and time that the pull request was merged. */
mergedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The actor who merged the pull request. */
mergedBy:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the milestone associated with the pull request. */
milestone:(MilestonePromiseChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Promise<(FieldsSelection<Milestone, R>|null)>}),
/** Identifies the pull request number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of Users that are participating in the Pull Request conversation. */
participants:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** The permalink to the pull request. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/**
 * The commit that GitHub automatically generated to test if this pull request
 * could be merged. This field will not return a value if the pull request is
 * merged, or if the test merge commit is still being generated. See the
 * `mergeable` field for more details on the mergeability of the pull request.
 */
potentialMergeCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** List of project cards associated with this pull request. */
projectCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>})&(ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this pull request. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP path for reverting this pull request. */
revertResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for reverting this pull request. */
revertUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The current status of this pull request with respect to code review. */
reviewDecision:({get:(request?:boolean|number,defaultValue?:(PullRequestReviewDecision|null))=>Promise<(PullRequestReviewDecision|null)>}),
/** A list of review requests associated with the pull request. */
reviewRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReviewRequestConnectionPromiseChain & {get:<R extends ReviewRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequestConnection, R>|null))=>Promise<(FieldsSelection<ReviewRequestConnection, R>|null)>})&(ReviewRequestConnectionPromiseChain & {get:<R extends ReviewRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequestConnection, R>|null))=>Promise<(FieldsSelection<ReviewRequestConnection, R>|null)>}),
/** The list of all review threads for this pull request. */
reviewThreads:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestReviewThreadConnectionPromiseChain & {get:<R extends PullRequestReviewThreadConnectionRequest>(request: R, defaultValue?:PullRequestReviewThreadConnection)=>Promise<PullRequestReviewThreadConnection>})&(PullRequestReviewThreadConnectionPromiseChain & {get:<R extends PullRequestReviewThreadConnectionRequest>(request: R, defaultValue?:PullRequestReviewThreadConnection)=>Promise<PullRequestReviewThreadConnection>}),
/** A list of reviews associated with the pull request. */
reviews:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Filter by author of the review. */
author?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** A list of states to filter the reviews. */
states?: (PullRequestReviewState[]|null)})=>PullRequestReviewConnectionPromiseChain & {get:<R extends PullRequestReviewConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewConnection, R>|null))=>Promise<(FieldsSelection<PullRequestReviewConnection, R>|null)>})&(PullRequestReviewConnectionPromiseChain & {get:<R extends PullRequestReviewConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewConnection, R>|null))=>Promise<(FieldsSelection<PullRequestReviewConnection, R>|null)>}),
/** Identifies the state of the pull request. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestState)=>Promise<PullRequestState>}),
/** A list of reviewer suggestions based on commit history and past review comments. */
suggestedReviewers:({get:<R extends SuggestedReviewerRequest>(request: R, defaultValue?:(SuggestedReviewer|null)[])=>Promise<(SuggestedReviewer|null)[]>}),
/**
 * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
 * A list of events, comments, commits, etc. associated with the pull request.
 */
timeline:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows filtering timeline events by a `since` timestamp. */
since?: (Scalars["DateTime"]|null)})=>PullRequestTimelineConnectionPromiseChain & {get:<R extends PullRequestTimelineConnectionRequest>(request: R, defaultValue?:PullRequestTimelineConnection)=>Promise<PullRequestTimelineConnection>})&(PullRequestTimelineConnectionPromiseChain & {get:<R extends PullRequestTimelineConnectionRequest>(request: R, defaultValue?:PullRequestTimelineConnection)=>Promise<PullRequestTimelineConnection>}),
/** A list of events, comments, commits, etc. associated with the pull request. */
timelineItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter timeline items by type. */
itemTypes?: (PullRequestTimelineItemsItemType[]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter timeline items by a `since` timestamp. */
since?: (Scalars["DateTime"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>PullRequestTimelineItemsConnectionPromiseChain & {get:<R extends PullRequestTimelineItemsConnectionRequest>(request: R, defaultValue?:PullRequestTimelineItemsConnection)=>Promise<PullRequestTimelineItemsConnection>})&(PullRequestTimelineItemsConnectionPromiseChain & {get:<R extends PullRequestTimelineItemsConnectionRequest>(request: R, defaultValue?:PullRequestTimelineItemsConnection)=>Promise<PullRequestTimelineItemsConnection>}),
/** Identifies the pull request title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this pull request. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Whether or not the viewer can apply suggestion. */
viewerCanApplySuggestion:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>})}


/** A repository pull request. */
export interface PullRequestObservableChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Observable<(LockReason|null)>}),
/** The number of additions in this pull request. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** Identifies the base Ref associated with the pull request. */
baseRef:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
baseRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
baseRefOid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The repository associated with this pull request's base Ref. */
baseRepository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether or not the pull request is rebaseable. */
canBeRebased:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The number of changed files in this pull request. */
changedFiles:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The HTTP path for the checks of this pull request. */
checksResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for the checks of this pull request. */
checksUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** `true` if the pull request is closed */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of comments associated with the pull request. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>})&(IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>}),
/** A list of commits present in this pull request's head branch not present in the base branch. */
commits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestCommitConnectionObservableChain & {get:<R extends PullRequestCommitConnectionRequest>(request: R, defaultValue?:PullRequestCommitConnection)=>Observable<PullRequestCommitConnection>})&(PullRequestCommitConnectionObservableChain & {get:<R extends PullRequestCommitConnectionRequest>(request: R, defaultValue?:PullRequestCommitConnection)=>Observable<PullRequestCommitConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The number of deletions in this pull request. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The actor who edited this pull request's body. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Lists the files changed within this pull request. */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestChangedFileConnectionObservableChain & {get:<R extends PullRequestChangedFileConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFileConnection, R>|null))=>Observable<(FieldsSelection<PullRequestChangedFileConnection, R>|null)>})&(PullRequestChangedFileConnectionObservableChain & {get:<R extends PullRequestChangedFileConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFileConnection, R>|null))=>Observable<(FieldsSelection<PullRequestChangedFileConnection, R>|null)>}),
/** Identifies the head Ref associated with the pull request. */
headRef:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
headRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
headRefOid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The repository associated with this pull request's head Ref. */
headRepository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The owner of the repository associated with this pull request's head Ref. */
headRepositoryOwner:(RepositoryOwnerObservableChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Observable<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** The hovercard information for this issue */
hovercard:((args?:{
/** Whether or not to include notification contexts */
includeNotificationContexts?: (Scalars["Boolean"]|null)})=>HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>})&(HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The head and base repositories are different. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the pull request is a draft. */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** `true` if the pull request is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates whether maintainers can modify the pull request. */
maintainerCanModify:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The commit that was created when this pull request was merged. */
mergeCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Detailed information about the current pull request merge state status. */
mergeStateStatus:({get:(request?:boolean|number,defaultValue?:MergeStateStatus)=>Observable<MergeStateStatus>}),
/** Whether or not the pull request can be merged based on the existence of merge conflicts. */
mergeable:({get:(request?:boolean|number,defaultValue?:MergeableState)=>Observable<MergeableState>}),
/** Whether or not the pull request was merged. */
merged:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The date and time that the pull request was merged. */
mergedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The actor who merged the pull request. */
mergedBy:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the milestone associated with the pull request. */
milestone:(MilestoneObservableChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Observable<(FieldsSelection<Milestone, R>|null)>}),
/** Identifies the pull request number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of Users that are participating in the Pull Request conversation. */
participants:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** The permalink to the pull request. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/**
 * The commit that GitHub automatically generated to test if this pull request
 * could be merged. This field will not return a value if the pull request is
 * merged, or if the test merge commit is still being generated. See the
 * `mergeable` field for more details on the mergeability of the pull request.
 */
potentialMergeCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** List of project cards associated with this pull request. */
projectCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>})&(ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this pull request. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP path for reverting this pull request. */
revertResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for reverting this pull request. */
revertUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The current status of this pull request with respect to code review. */
reviewDecision:({get:(request?:boolean|number,defaultValue?:(PullRequestReviewDecision|null))=>Observable<(PullRequestReviewDecision|null)>}),
/** A list of review requests associated with the pull request. */
reviewRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReviewRequestConnectionObservableChain & {get:<R extends ReviewRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequestConnection, R>|null))=>Observable<(FieldsSelection<ReviewRequestConnection, R>|null)>})&(ReviewRequestConnectionObservableChain & {get:<R extends ReviewRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequestConnection, R>|null))=>Observable<(FieldsSelection<ReviewRequestConnection, R>|null)>}),
/** The list of all review threads for this pull request. */
reviewThreads:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestReviewThreadConnectionObservableChain & {get:<R extends PullRequestReviewThreadConnectionRequest>(request: R, defaultValue?:PullRequestReviewThreadConnection)=>Observable<PullRequestReviewThreadConnection>})&(PullRequestReviewThreadConnectionObservableChain & {get:<R extends PullRequestReviewThreadConnectionRequest>(request: R, defaultValue?:PullRequestReviewThreadConnection)=>Observable<PullRequestReviewThreadConnection>}),
/** A list of reviews associated with the pull request. */
reviews:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Filter by author of the review. */
author?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** A list of states to filter the reviews. */
states?: (PullRequestReviewState[]|null)})=>PullRequestReviewConnectionObservableChain & {get:<R extends PullRequestReviewConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewConnection, R>|null))=>Observable<(FieldsSelection<PullRequestReviewConnection, R>|null)>})&(PullRequestReviewConnectionObservableChain & {get:<R extends PullRequestReviewConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewConnection, R>|null))=>Observable<(FieldsSelection<PullRequestReviewConnection, R>|null)>}),
/** Identifies the state of the pull request. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestState)=>Observable<PullRequestState>}),
/** A list of reviewer suggestions based on commit history and past review comments. */
suggestedReviewers:({get:<R extends SuggestedReviewerRequest>(request: R, defaultValue?:(SuggestedReviewer|null)[])=>Observable<(SuggestedReviewer|null)[]>}),
/**
 * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
 * A list of events, comments, commits, etc. associated with the pull request.
 */
timeline:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows filtering timeline events by a `since` timestamp. */
since?: (Scalars["DateTime"]|null)})=>PullRequestTimelineConnectionObservableChain & {get:<R extends PullRequestTimelineConnectionRequest>(request: R, defaultValue?:PullRequestTimelineConnection)=>Observable<PullRequestTimelineConnection>})&(PullRequestTimelineConnectionObservableChain & {get:<R extends PullRequestTimelineConnectionRequest>(request: R, defaultValue?:PullRequestTimelineConnection)=>Observable<PullRequestTimelineConnection>}),
/** A list of events, comments, commits, etc. associated with the pull request. */
timelineItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter timeline items by type. */
itemTypes?: (PullRequestTimelineItemsItemType[]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter timeline items by a `since` timestamp. */
since?: (Scalars["DateTime"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>PullRequestTimelineItemsConnectionObservableChain & {get:<R extends PullRequestTimelineItemsConnectionRequest>(request: R, defaultValue?:PullRequestTimelineItemsConnection)=>Observable<PullRequestTimelineItemsConnection>})&(PullRequestTimelineItemsConnectionObservableChain & {get:<R extends PullRequestTimelineItemsConnectionRequest>(request: R, defaultValue?:PullRequestTimelineItemsConnection)=>Observable<PullRequestTimelineItemsConnection>}),
/** Identifies the pull request title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this pull request. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Whether or not the viewer can apply suggestion. */
viewerCanApplySuggestion:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>})}


/** An object that can have users assigned to it. */
export interface AssignablePromiseChain{
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})}


/** An object that can have users assigned to it. */
export interface AssignableObservableChain{
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})}


/** The connection type for User. */
export interface UserConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Promise<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface UserConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Observable<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user. */
export interface UserEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Represents a user. */
export interface UserEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** An object that can be closed */
export interface ClosablePromiseChain{
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>})}


/** An object that can be closed */
export interface ClosableObservableChain{
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>})}


/** Represents a comment. */
export interface CommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a comment. */
export interface CommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A list of edits to content. */
export interface UserContentEditConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends UserContentEditEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserContentEditEdge, R>|null)[]|null))=>Promise<((FieldsSelection<UserContentEditEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserContentEditRequest>(request: R, defaultValue?:((FieldsSelection<UserContentEdit, R>|null)[]|null))=>Promise<((FieldsSelection<UserContentEdit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A list of edits to content. */
export interface UserContentEditConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends UserContentEditEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserContentEditEdge, R>|null)[]|null))=>Observable<((FieldsSelection<UserContentEditEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserContentEditRequest>(request: R, defaultValue?:((FieldsSelection<UserContentEdit, R>|null)[]|null))=>Observable<((FieldsSelection<UserContentEdit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface UserContentEditEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserContentEditPromiseChain & {get:<R extends UserContentEditRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEdit, R>|null))=>Promise<(FieldsSelection<UserContentEdit, R>|null)>})}


/** An edge in a connection. */
export interface UserContentEditEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserContentEditObservableChain & {get:<R extends UserContentEditRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEdit, R>|null))=>Observable<(FieldsSelection<UserContentEdit, R>|null)>})}


/** An edit on user content */
export interface UserContentEditPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the date and time when the object was deleted. */
deletedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The actor who deleted this content */
deletedBy:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A summary of the changes for this edit */
diff:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** When this content was edited */
editedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The actor who edited this content */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** An edit on user content */
export interface UserContentEditObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the date and time when the object was deleted. */
deletedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The actor who deleted this content */
deletedBy:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A summary of the changes for this edit */
diff:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** When this content was edited */
editedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The actor who edited this content */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** An object that can have labels assigned to it. */
export interface LabelablePromiseChain{
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>})}


/** An object that can have labels assigned to it. */
export interface LabelableObservableChain{
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>})}


/** The connection type for Label. */
export interface LabelConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends LabelEdgeRequest>(request: R, defaultValue?:((FieldsSelection<LabelEdge, R>|null)[]|null))=>Promise<((FieldsSelection<LabelEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends LabelRequest>(request: R, defaultValue?:((FieldsSelection<Label, R>|null)[]|null))=>Promise<((FieldsSelection<Label, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Label. */
export interface LabelConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends LabelEdgeRequest>(request: R, defaultValue?:((FieldsSelection<LabelEdge, R>|null)[]|null))=>Observable<((FieldsSelection<LabelEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends LabelRequest>(request: R, defaultValue?:((FieldsSelection<Label, R>|null)[]|null))=>Observable<((FieldsSelection<Label, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface LabelEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Promise<(FieldsSelection<Label, R>|null)>})}


/** An edge in a connection. */
export interface LabelEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Observable<(FieldsSelection<Label, R>|null)>})}


/** A label for categorizing Issues or Milestones with a given Repository. */
export interface LabelPromiseChain{
/** Identifies the label color. */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the label was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A brief description of this label. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Indicates whether or not this is a default label. */
isDefault:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of issues associated with this label. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>})&(IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>}),
/** Identifies the label name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of pull requests associated with this label. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>}),
/** The repository associated with this label. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this label. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the label was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The HTTP URL for this label. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A label for categorizing Issues or Milestones with a given Repository. */
export interface LabelObservableChain{
/** Identifies the label color. */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the label was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A brief description of this label. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Indicates whether or not this is a default label. */
isDefault:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of issues associated with this label. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>})&(IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>}),
/** Identifies the label name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of pull requests associated with this label. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>}),
/** The repository associated with this label. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this label. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the label was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The HTTP URL for this label. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for Issue. */
export interface IssueConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends IssueEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueEdge, R>|null)[]|null))=>Promise<((FieldsSelection<IssueEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueRequest>(request: R, defaultValue?:((FieldsSelection<Issue, R>|null)[]|null))=>Promise<((FieldsSelection<Issue, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Issue. */
export interface IssueConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends IssueEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueEdge, R>|null)[]|null))=>Observable<((FieldsSelection<IssueEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueRequest>(request: R, defaultValue?:((FieldsSelection<Issue, R>|null)[]|null))=>Observable<((FieldsSelection<Issue, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface IssueEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** An edge in a connection. */
export interface IssueEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface IssuePromiseChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Promise<(LockReason|null)>}),
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** Identifies the body of the issue. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Identifies the body of the issue rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of comments associated with the Issue. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>})&(IssueCommentConnectionPromiseChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Promise<IssueCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** The hovercard information for this issue */
hovercard:((args?:{
/** Whether or not to include notification contexts */
includeNotificationContexts?: (Scalars["Boolean"]|null)})=>HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>})&(HovercardPromiseChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Promise<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** `true` if the object is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the milestone associated with the issue. */
milestone:(MilestonePromiseChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Promise<(FieldsSelection<Milestone, R>|null)>}),
/** Identifies the issue number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of Users that are participating in the Issue conversation. */
participants:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** List of project cards associated with this issue. */
projectCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>})&(ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this issue */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the state of the issue. */
state:({get:(request?:boolean|number,defaultValue?:IssueState)=>Promise<IssueState>}),
/**
 * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
 * A list of events, comments, commits, etc. associated with the issue.
 */
timeline:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows filtering timeline events by a `since` timestamp. */
since?: (Scalars["DateTime"]|null)})=>IssueTimelineConnectionPromiseChain & {get:<R extends IssueTimelineConnectionRequest>(request: R, defaultValue?:IssueTimelineConnection)=>Promise<IssueTimelineConnection>})&(IssueTimelineConnectionPromiseChain & {get:<R extends IssueTimelineConnectionRequest>(request: R, defaultValue?:IssueTimelineConnection)=>Promise<IssueTimelineConnection>}),
/** A list of events, comments, commits, etc. associated with the issue. */
timelineItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter timeline items by type. */
itemTypes?: (IssueTimelineItemsItemType[]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter timeline items by a `since` timestamp. */
since?: (Scalars["DateTime"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>IssueTimelineItemsConnectionPromiseChain & {get:<R extends IssueTimelineItemsConnectionRequest>(request: R, defaultValue?:IssueTimelineItemsConnection)=>Promise<IssueTimelineItemsConnection>})&(IssueTimelineItemsConnectionPromiseChain & {get:<R extends IssueTimelineItemsConnectionRequest>(request: R, defaultValue?:IssueTimelineItemsConnection)=>Promise<IssueTimelineItemsConnection>}),
/** Identifies the issue title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this issue */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>})}


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export interface IssueObservableChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Observable<(LockReason|null)>}),
/** A list of Users assigned to this object. */
assignees:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** Identifies the body of the issue. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Identifies the body of the issue rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of comments associated with the Issue. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>})&(IssueCommentConnectionObservableChain & {get:<R extends IssueCommentConnectionRequest>(request: R, defaultValue?:IssueCommentConnection)=>Observable<IssueCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** The hovercard information for this issue */
hovercard:((args?:{
/** Whether or not to include notification contexts */
includeNotificationContexts?: (Scalars["Boolean"]|null)})=>HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>})&(HovercardObservableChain & {get:<R extends HovercardRequest>(request: R, defaultValue?:Hovercard)=>Observable<Hovercard>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of labels associated with the object. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null)})=>LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** `true` if the object is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the milestone associated with the issue. */
milestone:(MilestoneObservableChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Observable<(FieldsSelection<Milestone, R>|null)>}),
/** Identifies the issue number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of Users that are participating in the Issue conversation. */
participants:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** List of project cards associated with this issue. */
projectCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>})&(ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this issue */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the state of the issue. */
state:({get:(request?:boolean|number,defaultValue?:IssueState)=>Observable<IssueState>}),
/**
 * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
 * A list of events, comments, commits, etc. associated with the issue.
 */
timeline:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows filtering timeline events by a `since` timestamp. */
since?: (Scalars["DateTime"]|null)})=>IssueTimelineConnectionObservableChain & {get:<R extends IssueTimelineConnectionRequest>(request: R, defaultValue?:IssueTimelineConnection)=>Observable<IssueTimelineConnection>})&(IssueTimelineConnectionObservableChain & {get:<R extends IssueTimelineConnectionRequest>(request: R, defaultValue?:IssueTimelineConnection)=>Observable<IssueTimelineConnection>}),
/** A list of events, comments, commits, etc. associated with the issue. */
timelineItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Filter timeline items by type. */
itemTypes?: (IssueTimelineItemsItemType[]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter timeline items by a `since` timestamp. */
since?: (Scalars["DateTime"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>IssueTimelineItemsConnectionObservableChain & {get:<R extends IssueTimelineItemsConnectionRequest>(request: R, defaultValue?:IssueTimelineItemsConnection)=>Observable<IssueTimelineItemsConnection>})&(IssueTimelineItemsConnectionObservableChain & {get:<R extends IssueTimelineItemsConnectionRequest>(request: R, defaultValue?:IssueTimelineItemsConnection)=>Observable<IssueTimelineItemsConnection>}),
/** Identifies the issue title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this issue */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>})}


/** An object that can be locked. */
export interface LockablePromiseChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Promise<(LockReason|null)>}),
/** `true` if the object is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** An object that can be locked. */
export interface LockableObservableChain{
/** Reason that the conversation was locked. */
activeLockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Observable<(LockReason|null)>}),
/** `true` if the object is locked */
locked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Represents a subject that can be reacted on. */
export interface ReactablePromiseChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a subject that can be reacted on. */
export interface ReactableObservableChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroupPromiseChain{
/** Identifies the emoji reaction. */
content:({get:(request?:boolean|number,defaultValue?:ReactionContent)=>Promise<ReactionContent>}),
/** Identifies when the reaction was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The subject that was reacted to. */
subject:(ReactablePromiseChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:Reactable)=>Promise<Reactable>}),
/** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
users:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReactingUserConnectionPromiseChain & {get:<R extends ReactingUserConnectionRequest>(request: R, defaultValue?:ReactingUserConnection)=>Promise<ReactingUserConnection>})&(ReactingUserConnectionPromiseChain & {get:<R extends ReactingUserConnectionRequest>(request: R, defaultValue?:ReactingUserConnection)=>Promise<ReactingUserConnection>}),
/** Whether or not the authenticated user has left a reaction on the subject. */
viewerHasReacted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A group of emoji reactions to a particular piece of content. */
export interface ReactionGroupObservableChain{
/** Identifies the emoji reaction. */
content:({get:(request?:boolean|number,defaultValue?:ReactionContent)=>Observable<ReactionContent>}),
/** Identifies when the reaction was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The subject that was reacted to. */
subject:(ReactableObservableChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:Reactable)=>Observable<Reactable>}),
/** Users who have reacted to the reaction subject with the emotion represented by this reaction group */
users:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReactingUserConnectionObservableChain & {get:<R extends ReactingUserConnectionRequest>(request: R, defaultValue?:ReactingUserConnection)=>Observable<ReactingUserConnection>})&(ReactingUserConnectionObservableChain & {get:<R extends ReactingUserConnectionRequest>(request: R, defaultValue?:ReactingUserConnection)=>Observable<ReactingUserConnection>}),
/** Whether or not the authenticated user has left a reaction on the subject. */
viewerHasReacted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for User. */
export interface ReactingUserConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReactingUserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReactingUserEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReactingUserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface ReactingUserConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReactingUserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReactingUserEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReactingUserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user that's made a reaction. */
export interface ReactingUserEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** The moment when the user made the reaction. */
reactedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Represents a user that's made a reaction. */
export interface ReactingUserEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** The moment when the user made the reaction. */
reactedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** A list of reactions that have been left on the subject. */
export interface ReactionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReactionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReactionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReactionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReactionRequest>(request: R, defaultValue?:((FieldsSelection<Reaction, R>|null)[]|null))=>Promise<((FieldsSelection<Reaction, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Whether or not the authenticated user has left a reaction on the subject. */
viewerHasReacted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A list of reactions that have been left on the subject. */
export interface ReactionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReactionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReactionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReactionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReactionRequest>(request: R, defaultValue?:((FieldsSelection<Reaction, R>|null)[]|null))=>Observable<((FieldsSelection<Reaction, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Whether or not the authenticated user has left a reaction on the subject. */
viewerHasReacted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** An edge in a connection. */
export interface ReactionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReactionPromiseChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Promise<(FieldsSelection<Reaction, R>|null)>})}


/** An edge in a connection. */
export interface ReactionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReactionObservableChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Observable<(FieldsSelection<Reaction, R>|null)>})}


/** An emoji reaction to a particular piece of content. */
export interface ReactionPromiseChain{
/** Identifies the emoji reaction. */
content:({get:(request?:boolean|number,defaultValue?:ReactionContent)=>Promise<ReactionContent>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The reactable piece of content */
reactable:(ReactablePromiseChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:Reactable)=>Promise<Reactable>}),
/** Identifies the user who created this reaction. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** An emoji reaction to a particular piece of content. */
export interface ReactionObservableChain{
/** Identifies the emoji reaction. */
content:({get:(request?:boolean|number,defaultValue?:ReactionContent)=>Observable<ReactionContent>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The reactable piece of content */
reactable:(ReactableObservableChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:Reactable)=>Observable<Reactable>}),
/** Identifies the user who created this reaction. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Represents a object that belongs to a repository. */
export interface RepositoryNodePromiseChain{
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** Represents a object that belongs to a repository. */
export interface RepositoryNodeObservableChain{
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** A repository contains the content for a project. */
export interface RepositoryPromiseChain{
/** A list of users that can be assigned to issues in this repository. */
assignableUsers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** A list of branch protection rules for this repository. */
branchProtectionRules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>BranchProtectionRuleConnectionPromiseChain & {get:<R extends BranchProtectionRuleConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConnection)=>Promise<BranchProtectionRuleConnection>})&(BranchProtectionRuleConnectionPromiseChain & {get:<R extends BranchProtectionRuleConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConnection)=>Promise<BranchProtectionRuleConnection>}),
/** Returns the code of conduct for this repository */
codeOfConduct:(CodeOfConductPromiseChain & {get:<R extends CodeOfConductRequest>(request: R, defaultValue?:(FieldsSelection<CodeOfConduct, R>|null))=>Promise<(FieldsSelection<CodeOfConduct, R>|null)>}),
/** A list of collaborators associated with the repository. */
collaborators:((args?:{
/** Collaborators affiliation level with a repository. */
affiliation?: (CollaboratorAffiliation|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>RepositoryCollaboratorConnectionPromiseChain & {get:<R extends RepositoryCollaboratorConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryCollaboratorConnection, R>|null))=>Promise<(FieldsSelection<RepositoryCollaboratorConnection, R>|null)>})&(RepositoryCollaboratorConnectionPromiseChain & {get:<R extends RepositoryCollaboratorConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryCollaboratorConnection, R>|null))=>Promise<(FieldsSelection<RepositoryCollaboratorConnection, R>|null)>}),
/** A list of commit comments associated with the repository. */
commitComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>})&(CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The Ref associated with the repository's default branch. */
defaultBranchRef:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Whether or not branches are automatically deleted when merged in this repository. */
deleteBranchOnMerge:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of dependency manifests contained in the repository */
dependencyGraphManifests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Cursor to paginate dependencies */
dependenciesAfter?: (Scalars["String"]|null),
/** Number of dependencies to fetch */
dependenciesFirst?: (Scalars["Int"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Flag to scope to only manifests with dependencies */
withDependencies?: (Scalars["Boolean"]|null)})=>DependencyGraphManifestConnectionPromiseChain & {get:<R extends DependencyGraphManifestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifestConnection, R>|null))=>Promise<(FieldsSelection<DependencyGraphManifestConnection, R>|null)>})&(DependencyGraphManifestConnectionPromiseChain & {get:<R extends DependencyGraphManifestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifestConnection, R>|null))=>Promise<(FieldsSelection<DependencyGraphManifestConnection, R>|null)>}),
/** A list of deploy keys that are on this repository. */
deployKeys:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DeployKeyConnectionPromiseChain & {get:<R extends DeployKeyConnectionRequest>(request: R, defaultValue?:DeployKeyConnection)=>Promise<DeployKeyConnection>})&(DeployKeyConnectionPromiseChain & {get:<R extends DeployKeyConnectionRequest>(request: R, defaultValue?:DeployKeyConnection)=>Promise<DeployKeyConnection>}),
/** Deployments associated with the repository */
deployments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Environments to list deployments for */
environments?: (Scalars["String"][]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for deployments returned from the connection. */
orderBy?: (DeploymentOrder|null)})=>DeploymentConnectionPromiseChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:DeploymentConnection)=>Promise<DeploymentConnection>})&(DeploymentConnectionPromiseChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:DeploymentConnection)=>Promise<DeploymentConnection>}),
/** The description of the repository. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The description of the repository rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The number of kilobytes this repository occupies on disk. */
diskUsage:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Returns how many forks there are of this repository in the whole network. */
forkCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of direct forked repositories. */
forks:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** The funding links for this repository */
fundingLinks:({get:<R extends FundingLinkRequest>(request: R, defaultValue?:FundingLink[])=>Promise<FundingLink[]>}),
/** Indicates if the repository has issues feature enabled. */
hasIssuesEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has the Projects feature enabled. */
hasProjectsEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has wiki feature enabled. */
hasWikiEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The repository's URL. */
homepageUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Indicates if the repository is unmaintained. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns whether or not this repository disabled. */
isDisabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has been locked or not. */
isLocked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a mirror. */
isMirror:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a template that can be used to generate new repositories. */
isTemplate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns a single issue from the current repository by number. */
issue:((args:{
/** The number for the issue to be returned. */
number: Scalars["Int"]})=>IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>}),
/** Returns a single issue-like object from the current repository by number. */
issueOrPullRequest:((args:{
/** The number for the issue to be returned. */
number: Scalars["Int"]})=>{get:<R extends IssueOrPullRequestRequest>(request: R, defaultValue?:(FieldsSelection<IssueOrPullRequest, R>|null))=>Promise<(FieldsSelection<IssueOrPullRequest, R>|null)>}),
/** A list of issues that have been opened in the repository. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>})&(IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>}),
/** Returns a single label by name */
label:((args:{
/** Label name */
name: Scalars["String"]})=>LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Promise<(FieldsSelection<Label, R>|null)>}),
/** A list of labels associated with the repository. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null),
/** If provided, searches labels by name and description. */
query?: (Scalars["String"]|null)})=>LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionPromiseChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Promise<(FieldsSelection<LabelConnection, R>|null)>}),
/** A list containing a breakdown of the language composition of the repository. */
languages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (LanguageOrder|null)})=>LanguageConnectionPromiseChain & {get:<R extends LanguageConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LanguageConnection, R>|null))=>Promise<(FieldsSelection<LanguageConnection, R>|null)>})&(LanguageConnectionPromiseChain & {get:<R extends LanguageConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LanguageConnection, R>|null))=>Promise<(FieldsSelection<LanguageConnection, R>|null)>}),
/** The license associated with the repository */
licenseInfo:(LicensePromiseChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Promise<(FieldsSelection<License, R>|null)>}),
/** The reason the repository has been locked. */
lockReason:({get:(request?:boolean|number,defaultValue?:(RepositoryLockReason|null))=>Promise<(RepositoryLockReason|null)>}),
/** A list of Users that can be mentioned in the context of the repository. */
mentionableUsers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** Whether or not PRs are merged with a merge commit on this repository. */
mergeCommitAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns a single milestone from the current repository by number. */
milestone:((args:{
/** The number for the milestone to be returned. */
number: Scalars["Int"]})=>MilestonePromiseChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Promise<(FieldsSelection<Milestone, R>|null)>}),
/** A list of milestones associated with the repository. */
milestones:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for milestones. */
orderBy?: (MilestoneOrder|null),
/** Filter by the state of the milestones. */
states?: (MilestoneState[]|null)})=>MilestoneConnectionPromiseChain & {get:<R extends MilestoneConnectionRequest>(request: R, defaultValue?:(FieldsSelection<MilestoneConnection, R>|null))=>Promise<(FieldsSelection<MilestoneConnection, R>|null)>})&(MilestoneConnectionPromiseChain & {get:<R extends MilestoneConnectionRequest>(request: R, defaultValue?:(FieldsSelection<MilestoneConnection, R>|null))=>Promise<(FieldsSelection<MilestoneConnection, R>|null)>}),
/** The repository's original mirror URL. */
mirrorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The name of the repository. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A Git object in the repository */
object:((args?:{
/** A Git revision expression suitable for rev-parse */
expression?: (Scalars["String"]|null),
/** The Git object ID */
oid?: (Scalars["GitObjectID"]|null)})=>GitObjectPromiseChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Promise<(FieldsSelection<GitObject, R>|null)>})&(GitObjectPromiseChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Promise<(FieldsSelection<GitObject, R>|null)>}),
/** The image used to represent this repository in Open Graph data. */
openGraphImageUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The User owner of the repository. */
owner:(RepositoryOwnerPromiseChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:RepositoryOwner)=>Promise<RepositoryOwner>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>})&(PackageConnectionPromiseChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Promise<PackageConnection>}),
/** The repository parent, if this is a fork. */
parent:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** A list of pinned issues for this repository. */
pinnedIssues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PinnedIssueConnectionPromiseChain & {get:<R extends PinnedIssueConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssueConnection, R>|null))=>Promise<(FieldsSelection<PinnedIssueConnection, R>|null)>})&(PinnedIssueConnectionPromiseChain & {get:<R extends PinnedIssueConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssueConnection, R>|null))=>Promise<(FieldsSelection<PinnedIssueConnection, R>|null)>}),
/** The primary language of the repository's code. */
primaryLanguage:(LanguagePromiseChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:(FieldsSelection<Language, R>|null))=>Promise<(FieldsSelection<Language, R>|null)>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>})&(ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>}),
/** The HTTP path listing the repository's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL listing the repository's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Returns a single pull request from the current repository by number. */
pullRequest:((args:{
/** The number for the pull request to be returned. */
number: Scalars["Int"]})=>PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>}),
/** A list of pull requests that have been opened in the repository. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>}),
/** Identifies when the repository was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Whether or not rebase-merging is enabled on this repository. */
rebaseMergeAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Fetch a given ref from the repository */
ref:((args:{
/**
 * The ref to retrieve. Fully qualified matches are checked in order
 * (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
 */
qualifiedName: Scalars["String"]})=>RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Fetch a list of refs from the repository */
refs:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** DEPRECATED: use orderBy. The ordering direction. */
direction?: (OrderDirection|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for refs returned from the connection. */
orderBy?: (RefOrder|null),
/** Filters refs with query on name */
query?: (Scalars["String"]|null),
/** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
refPrefix: Scalars["String"]})=>RefConnectionPromiseChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RefConnection, R>|null))=>Promise<(FieldsSelection<RefConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>}),
/** Lookup a single release given various criteria. */
release:((args:{
/** The name of the Tag the Release was created from */
tagName: Scalars["String"]})=>ReleasePromiseChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Promise<(FieldsSelection<Release, R>|null)>}),
/** List of releases which are dependent on this repository. */
releases:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (ReleaseOrder|null)})=>ReleaseConnectionPromiseChain & {get:<R extends ReleaseConnectionRequest>(request: R, defaultValue?:ReleaseConnection)=>Promise<ReleaseConnection>})&(ReleaseConnectionPromiseChain & {get:<R extends ReleaseConnectionRequest>(request: R, defaultValue?:ReleaseConnection)=>Promise<ReleaseConnection>}),
/** A list of applied repository-topic associations for this repository. */
repositoryTopics:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RepositoryTopicConnectionPromiseChain & {get:<R extends RepositoryTopicConnectionRequest>(request: R, defaultValue?:RepositoryTopicConnection)=>Promise<RepositoryTopicConnection>})&(RepositoryTopicConnectionPromiseChain & {get:<R extends RepositoryTopicConnectionRequest>(request: R, defaultValue?:RepositoryTopicConnection)=>Promise<RepositoryTopicConnection>}),
/** The HTTP path for this repository */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A description of the repository, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Whether or not squash-merging is enabled on this repository. */
squashMergeAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The SSH URL to clone this repository */
sshUrl:({get:(request?:boolean|number,defaultValue?:Scalars["GitSSHRemote"])=>Promise<Scalars["GitSSHRemote"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>})&(StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>}),
/**
 * Returns a list of all submodules in this repository parsed from the
 * .gitmodules file as of the default branch's HEAD commit.
 */
submodules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>SubmoduleConnectionPromiseChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Promise<SubmoduleConnection>})&(SubmoduleConnectionPromiseChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Promise<SubmoduleConnection>}),
/** Temporary authentication token for cloning this repository. */
tempCloneToken:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The repository from which this repository was generated, if any. */
templateRepository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this repository */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
usesCustomOpenGraphImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates whether the viewer has admin permissions on this repository. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates whether the viewer can update the topics of this repository. */
viewerCanUpdateTopics:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
viewerPermission:({get:(request?:boolean|number,defaultValue?:(RepositoryPermission|null))=>Promise<(RepositoryPermission|null)>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>}),
/** A list of vulnerability alerts that are on this repository. */
vulnerabilityAlerts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RepositoryVulnerabilityAlertConnectionPromiseChain & {get:<R extends RepositoryVulnerabilityAlertConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null))=>Promise<(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null)>})&(RepositoryVulnerabilityAlertConnectionPromiseChain & {get:<R extends RepositoryVulnerabilityAlertConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null))=>Promise<(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null)>}),
/** A list of users watching the repository. */
watchers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})}


/** A repository contains the content for a project. */
export interface RepositoryObservableChain{
/** A list of users that can be assigned to issues in this repository. */
assignableUsers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** A list of branch protection rules for this repository. */
branchProtectionRules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>BranchProtectionRuleConnectionObservableChain & {get:<R extends BranchProtectionRuleConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConnection)=>Observable<BranchProtectionRuleConnection>})&(BranchProtectionRuleConnectionObservableChain & {get:<R extends BranchProtectionRuleConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConnection)=>Observable<BranchProtectionRuleConnection>}),
/** Returns the code of conduct for this repository */
codeOfConduct:(CodeOfConductObservableChain & {get:<R extends CodeOfConductRequest>(request: R, defaultValue?:(FieldsSelection<CodeOfConduct, R>|null))=>Observable<(FieldsSelection<CodeOfConduct, R>|null)>}),
/** A list of collaborators associated with the repository. */
collaborators:((args?:{
/** Collaborators affiliation level with a repository. */
affiliation?: (CollaboratorAffiliation|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>RepositoryCollaboratorConnectionObservableChain & {get:<R extends RepositoryCollaboratorConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryCollaboratorConnection, R>|null))=>Observable<(FieldsSelection<RepositoryCollaboratorConnection, R>|null)>})&(RepositoryCollaboratorConnectionObservableChain & {get:<R extends RepositoryCollaboratorConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryCollaboratorConnection, R>|null))=>Observable<(FieldsSelection<RepositoryCollaboratorConnection, R>|null)>}),
/** A list of commit comments associated with the repository. */
commitComments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>})&(CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The Ref associated with the repository's default branch. */
defaultBranchRef:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Whether or not branches are automatically deleted when merged in this repository. */
deleteBranchOnMerge:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of dependency manifests contained in the repository */
dependencyGraphManifests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Cursor to paginate dependencies */
dependenciesAfter?: (Scalars["String"]|null),
/** Number of dependencies to fetch */
dependenciesFirst?: (Scalars["Int"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Flag to scope to only manifests with dependencies */
withDependencies?: (Scalars["Boolean"]|null)})=>DependencyGraphManifestConnectionObservableChain & {get:<R extends DependencyGraphManifestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifestConnection, R>|null))=>Observable<(FieldsSelection<DependencyGraphManifestConnection, R>|null)>})&(DependencyGraphManifestConnectionObservableChain & {get:<R extends DependencyGraphManifestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifestConnection, R>|null))=>Observable<(FieldsSelection<DependencyGraphManifestConnection, R>|null)>}),
/** A list of deploy keys that are on this repository. */
deployKeys:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DeployKeyConnectionObservableChain & {get:<R extends DeployKeyConnectionRequest>(request: R, defaultValue?:DeployKeyConnection)=>Observable<DeployKeyConnection>})&(DeployKeyConnectionObservableChain & {get:<R extends DeployKeyConnectionRequest>(request: R, defaultValue?:DeployKeyConnection)=>Observable<DeployKeyConnection>}),
/** Deployments associated with the repository */
deployments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Environments to list deployments for */
environments?: (Scalars["String"][]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for deployments returned from the connection. */
orderBy?: (DeploymentOrder|null)})=>DeploymentConnectionObservableChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:DeploymentConnection)=>Observable<DeploymentConnection>})&(DeploymentConnectionObservableChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:DeploymentConnection)=>Observable<DeploymentConnection>}),
/** The description of the repository. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The description of the repository rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The number of kilobytes this repository occupies on disk. */
diskUsage:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Returns how many forks there are of this repository in the whole network. */
forkCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of direct forked repositories. */
forks:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** The funding links for this repository */
fundingLinks:({get:<R extends FundingLinkRequest>(request: R, defaultValue?:FundingLink[])=>Observable<FundingLink[]>}),
/** Indicates if the repository has issues feature enabled. */
hasIssuesEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has the Projects feature enabled. */
hasProjectsEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has wiki feature enabled. */
hasWikiEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The repository's URL. */
homepageUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Indicates if the repository is unmaintained. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns whether or not this repository disabled. */
isDisabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has been locked or not. */
isLocked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a mirror. */
isMirror:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a template that can be used to generate new repositories. */
isTemplate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns a single issue from the current repository by number. */
issue:((args:{
/** The number for the issue to be returned. */
number: Scalars["Int"]})=>IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>}),
/** Returns a single issue-like object from the current repository by number. */
issueOrPullRequest:((args:{
/** The number for the issue to be returned. */
number: Scalars["Int"]})=>{get:<R extends IssueOrPullRequestRequest>(request: R, defaultValue?:(FieldsSelection<IssueOrPullRequest, R>|null))=>Observable<(FieldsSelection<IssueOrPullRequest, R>|null)>}),
/** A list of issues that have been opened in the repository. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>})&(IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>}),
/** Returns a single label by name */
label:((args:{
/** Label name */
name: Scalars["String"]})=>LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Observable<(FieldsSelection<Label, R>|null)>}),
/** A list of labels associated with the repository. */
labels:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for labels returned from the connection. */
orderBy?: (LabelOrder|null),
/** If provided, searches labels by name and description. */
query?: (Scalars["String"]|null)})=>LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>})&(LabelConnectionObservableChain & {get:<R extends LabelConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LabelConnection, R>|null))=>Observable<(FieldsSelection<LabelConnection, R>|null)>}),
/** A list containing a breakdown of the language composition of the repository. */
languages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (LanguageOrder|null)})=>LanguageConnectionObservableChain & {get:<R extends LanguageConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LanguageConnection, R>|null))=>Observable<(FieldsSelection<LanguageConnection, R>|null)>})&(LanguageConnectionObservableChain & {get:<R extends LanguageConnectionRequest>(request: R, defaultValue?:(FieldsSelection<LanguageConnection, R>|null))=>Observable<(FieldsSelection<LanguageConnection, R>|null)>}),
/** The license associated with the repository */
licenseInfo:(LicenseObservableChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Observable<(FieldsSelection<License, R>|null)>}),
/** The reason the repository has been locked. */
lockReason:({get:(request?:boolean|number,defaultValue?:(RepositoryLockReason|null))=>Observable<(RepositoryLockReason|null)>}),
/** A list of Users that can be mentioned in the context of the repository. */
mentionableUsers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters users with query on user name and login */
query?: (Scalars["String"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** Whether or not PRs are merged with a merge commit on this repository. */
mergeCommitAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns a single milestone from the current repository by number. */
milestone:((args:{
/** The number for the milestone to be returned. */
number: Scalars["Int"]})=>MilestoneObservableChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Observable<(FieldsSelection<Milestone, R>|null)>}),
/** A list of milestones associated with the repository. */
milestones:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for milestones. */
orderBy?: (MilestoneOrder|null),
/** Filter by the state of the milestones. */
states?: (MilestoneState[]|null)})=>MilestoneConnectionObservableChain & {get:<R extends MilestoneConnectionRequest>(request: R, defaultValue?:(FieldsSelection<MilestoneConnection, R>|null))=>Observable<(FieldsSelection<MilestoneConnection, R>|null)>})&(MilestoneConnectionObservableChain & {get:<R extends MilestoneConnectionRequest>(request: R, defaultValue?:(FieldsSelection<MilestoneConnection, R>|null))=>Observable<(FieldsSelection<MilestoneConnection, R>|null)>}),
/** The repository's original mirror URL. */
mirrorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The name of the repository. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A Git object in the repository */
object:((args?:{
/** A Git revision expression suitable for rev-parse */
expression?: (Scalars["String"]|null),
/** The Git object ID */
oid?: (Scalars["GitObjectID"]|null)})=>GitObjectObservableChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Observable<(FieldsSelection<GitObject, R>|null)>})&(GitObjectObservableChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Observable<(FieldsSelection<GitObject, R>|null)>}),
/** The image used to represent this repository in Open Graph data. */
openGraphImageUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The User owner of the repository. */
owner:(RepositoryOwnerObservableChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:RepositoryOwner)=>Observable<RepositoryOwner>}),
/** A list of packages under the owner. */
packages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Ordering of the returned packages. */
orderBy?: (PackageOrder|null),
/** Find packages in a repository by ID. */
repositoryId?: (Scalars["ID"]|null)})=>PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>})&(PackageConnectionObservableChain & {get:<R extends PackageConnectionRequest>(request: R, defaultValue?:PackageConnection)=>Observable<PackageConnection>}),
/** The repository parent, if this is a fork. */
parent:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** A list of pinned issues for this repository. */
pinnedIssues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PinnedIssueConnectionObservableChain & {get:<R extends PinnedIssueConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssueConnection, R>|null))=>Observable<(FieldsSelection<PinnedIssueConnection, R>|null)>})&(PinnedIssueConnectionObservableChain & {get:<R extends PinnedIssueConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssueConnection, R>|null))=>Observable<(FieldsSelection<PinnedIssueConnection, R>|null)>}),
/** The primary language of the repository's code. */
primaryLanguage:(LanguageObservableChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:(FieldsSelection<Language, R>|null))=>Observable<(FieldsSelection<Language, R>|null)>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>})&(ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>}),
/** The HTTP path listing the repository's projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL listing the repository's projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Returns a single pull request from the current repository by number. */
pullRequest:((args:{
/** The number for the pull request to be returned. */
number: Scalars["Int"]})=>PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>}),
/** A list of pull requests that have been opened in the repository. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>}),
/** Identifies when the repository was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Whether or not rebase-merging is enabled on this repository. */
rebaseMergeAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Fetch a given ref from the repository */
ref:((args:{
/**
 * The ref to retrieve. Fully qualified matches are checked in order
 * (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
 */
qualifiedName: Scalars["String"]})=>RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Fetch a list of refs from the repository */
refs:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** DEPRECATED: use orderBy. The ordering direction. */
direction?: (OrderDirection|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for refs returned from the connection. */
orderBy?: (RefOrder|null),
/** Filters refs with query on name */
query?: (Scalars["String"]|null),
/** A ref name prefix like `refs/heads/`, `refs/tags/`, etc. */
refPrefix: Scalars["String"]})=>RefConnectionObservableChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RefConnection, R>|null))=>Observable<(FieldsSelection<RefConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>}),
/** Lookup a single release given various criteria. */
release:((args:{
/** The name of the Tag the Release was created from */
tagName: Scalars["String"]})=>ReleaseObservableChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Observable<(FieldsSelection<Release, R>|null)>}),
/** List of releases which are dependent on this repository. */
releases:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (ReleaseOrder|null)})=>ReleaseConnectionObservableChain & {get:<R extends ReleaseConnectionRequest>(request: R, defaultValue?:ReleaseConnection)=>Observable<ReleaseConnection>})&(ReleaseConnectionObservableChain & {get:<R extends ReleaseConnectionRequest>(request: R, defaultValue?:ReleaseConnection)=>Observable<ReleaseConnection>}),
/** A list of applied repository-topic associations for this repository. */
repositoryTopics:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RepositoryTopicConnectionObservableChain & {get:<R extends RepositoryTopicConnectionRequest>(request: R, defaultValue?:RepositoryTopicConnection)=>Observable<RepositoryTopicConnection>})&(RepositoryTopicConnectionObservableChain & {get:<R extends RepositoryTopicConnectionRequest>(request: R, defaultValue?:RepositoryTopicConnection)=>Observable<RepositoryTopicConnection>}),
/** The HTTP path for this repository */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A description of the repository, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Whether or not squash-merging is enabled on this repository. */
squashMergeAllowed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The SSH URL to clone this repository */
sshUrl:({get:(request?:boolean|number,defaultValue?:Scalars["GitSSHRemote"])=>Observable<Scalars["GitSSHRemote"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>})&(StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>}),
/**
 * Returns a list of all submodules in this repository parsed from the
 * .gitmodules file as of the default branch's HEAD commit.
 */
submodules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>SubmoduleConnectionObservableChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Observable<SubmoduleConnection>})&(SubmoduleConnectionObservableChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Observable<SubmoduleConnection>}),
/** Temporary authentication token for cloning this repository. */
tempCloneToken:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The repository from which this repository was generated, if any. */
templateRepository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this repository */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
usesCustomOpenGraphImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates whether the viewer has admin permissions on this repository. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates whether the viewer can update the topics of this repository. */
viewerCanUpdateTopics:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
viewerPermission:({get:(request?:boolean|number,defaultValue?:(RepositoryPermission|null))=>Observable<(RepositoryPermission|null)>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>}),
/** A list of vulnerability alerts that are on this repository. */
vulnerabilityAlerts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RepositoryVulnerabilityAlertConnectionObservableChain & {get:<R extends RepositoryVulnerabilityAlertConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null))=>Observable<(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null)>})&(RepositoryVulnerabilityAlertConnectionObservableChain & {get:<R extends RepositoryVulnerabilityAlertConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null))=>Observable<(FieldsSelection<RepositoryVulnerabilityAlertConnection, R>|null)>}),
/** A list of users watching the repository. */
watchers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})}


/** Represents an owner of a Project. */
export interface ProjectOwnerPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>})&(ProjectConnectionPromiseChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Promise<ProjectConnection>}),
/** The HTTP path listing owners projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL listing owners projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents an owner of a Project. */
export interface ProjectOwnerObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Find project by number. */
project:((args:{
/** The project number to find. */
number: Scalars["Int"]})=>ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** A list of projects under the owner. */
projects:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for projects returned from the connection */
orderBy?: (ProjectOrder|null),
/** Query to search projects by, currently only searching by name. */
search?: (Scalars["String"]|null),
/** A list of states to filter the projects by. */
states?: (ProjectState[]|null)})=>ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>})&(ProjectConnectionObservableChain & {get:<R extends ProjectConnectionRequest>(request: R, defaultValue?:ProjectConnection)=>Observable<ProjectConnection>}),
/** The HTTP path listing owners projects */
projectsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL listing owners projects */
projectsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Can the current viewer create new projects on this owner. */
viewerCanCreateProjects:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Projects manage issues, pull requests and notes within a project owner. */
export interface ProjectPromiseChain{
/** The project's description body. */
body:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The projects description body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** List of columns in the project */
columns:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectColumnConnectionPromiseChain & {get:<R extends ProjectColumnConnectionRequest>(request: R, defaultValue?:ProjectColumnConnection)=>Promise<ProjectColumnConnection>})&(ProjectColumnConnectionPromiseChain & {get:<R extends ProjectColumnConnectionRequest>(request: R, defaultValue?:ProjectColumnConnection)=>Promise<ProjectColumnConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The actor who originally created the project. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The project's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The project's number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The project's owner. Currently limited to repositories, organizations, and users. */
owner:(ProjectOwnerPromiseChain & {get:<R extends ProjectOwnerRequest>(request: R, defaultValue?:ProjectOwner)=>Promise<ProjectOwner>}),
/** List of pending cards in this project */
pendingCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>})&(ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>}),
/** The HTTP path for this project */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Whether the project is open or closed. */
state:({get:(request?:boolean|number,defaultValue?:ProjectState)=>Promise<ProjectState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this project */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Projects manage issues, pull requests and notes within a project owner. */
export interface ProjectObservableChain{
/** The project's description body. */
body:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The projects description body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** List of columns in the project */
columns:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectColumnConnectionObservableChain & {get:<R extends ProjectColumnConnectionRequest>(request: R, defaultValue?:ProjectColumnConnection)=>Observable<ProjectColumnConnection>})&(ProjectColumnConnectionObservableChain & {get:<R extends ProjectColumnConnectionRequest>(request: R, defaultValue?:ProjectColumnConnection)=>Observable<ProjectColumnConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The actor who originally created the project. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The project's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The project's number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The project's owner. Currently limited to repositories, organizations, and users. */
owner:(ProjectOwnerObservableChain & {get:<R extends ProjectOwnerRequest>(request: R, defaultValue?:ProjectOwner)=>Observable<ProjectOwner>}),
/** List of pending cards in this project */
pendingCards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>})&(ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>}),
/** The HTTP path for this project */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Whether the project is open or closed. */
state:({get:(request?:boolean|number,defaultValue?:ProjectState)=>Observable<ProjectState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this project */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Entities that can be updated. */
export interface UpdatablePromiseChain{
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Entities that can be updated. */
export interface UpdatableObservableChain{
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for ProjectColumn. */
export interface ProjectColumnConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectColumnEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ProjectColumnEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectColumnRequest>(request: R, defaultValue?:((FieldsSelection<ProjectColumn, R>|null)[]|null))=>Promise<((FieldsSelection<ProjectColumn, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ProjectColumn. */
export interface ProjectColumnConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectColumnEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ProjectColumnEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectColumnRequest>(request: R, defaultValue?:((FieldsSelection<ProjectColumn, R>|null)[]|null))=>Observable<((FieldsSelection<ProjectColumn, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ProjectColumnEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectColumnPromiseChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Promise<(FieldsSelection<ProjectColumn, R>|null)>})}


/** An edge in a connection. */
export interface ProjectColumnEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectColumnObservableChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Observable<(FieldsSelection<ProjectColumn, R>|null)>})}


/** A column inside a project. */
export interface ProjectColumnPromiseChain{
/** List of cards in the column */
cards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>})&(ProjectCardConnectionPromiseChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Promise<ProjectCardConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The project column's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The project that contains this column. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:Project)=>Promise<Project>}),
/** The semantic purpose of the column */
purpose:({get:(request?:boolean|number,defaultValue?:(ProjectColumnPurpose|null))=>Promise<(ProjectColumnPurpose|null)>}),
/** The HTTP path for this project column */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this project column */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A column inside a project. */
export interface ProjectColumnObservableChain{
/** List of cards in the column */
cards:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** A list of archived states to filter the cards by */
archivedStates?: ((ProjectCardArchivedState|null)[]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>})&(ProjectCardConnectionObservableChain & {get:<R extends ProjectCardConnectionRequest>(request: R, defaultValue?:ProjectCardConnection)=>Observable<ProjectCardConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The project column's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The project that contains this column. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:Project)=>Observable<Project>}),
/** The semantic purpose of the column */
purpose:({get:(request?:boolean|number,defaultValue?:(ProjectColumnPurpose|null))=>Observable<(ProjectColumnPurpose|null)>}),
/** The HTTP path for this project column */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this project column */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for ProjectCard. */
export interface ProjectCardConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectCardEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ProjectCardEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectCardRequest>(request: R, defaultValue?:((FieldsSelection<ProjectCard, R>|null)[]|null))=>Promise<((FieldsSelection<ProjectCard, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ProjectCard. */
export interface ProjectCardConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectCardEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ProjectCardEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectCardRequest>(request: R, defaultValue?:((FieldsSelection<ProjectCard, R>|null)[]|null))=>Observable<((FieldsSelection<ProjectCard, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ProjectCardEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>})}


/** An edge in a connection. */
export interface ProjectCardEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>})}


/** A card in a project. */
export interface ProjectCardPromiseChain{
/**
 * The project column this card is associated under. A card may only belong to one
 * project column at a time. The column field will be null if the card is created
 * in a pending state and has yet to be associated with a column. Once cards are
 * associated with a column, they will not become pending in the future.
 */
column:(ProjectColumnPromiseChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Promise<(FieldsSelection<ProjectColumn, R>|null)>}),
/** The card content item */
content:({get:<R extends ProjectCardItemRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardItem, R>|null))=>Promise<(FieldsSelection<ProjectCardItem, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The actor who created this card */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the card is archived */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The card note */
note:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The project that contains this card. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:Project)=>Promise<Project>}),
/** The HTTP path for this card */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The state of ProjectCard */
state:({get:(request?:boolean|number,defaultValue?:(ProjectCardState|null))=>Promise<(ProjectCardState|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this card */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A card in a project. */
export interface ProjectCardObservableChain{
/**
 * The project column this card is associated under. A card may only belong to one
 * project column at a time. The column field will be null if the card is created
 * in a pending state and has yet to be associated with a column. Once cards are
 * associated with a column, they will not become pending in the future.
 */
column:(ProjectColumnObservableChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Observable<(FieldsSelection<ProjectColumn, R>|null)>}),
/** The card content item */
content:({get:<R extends ProjectCardItemRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardItem, R>|null))=>Observable<(FieldsSelection<ProjectCardItem, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The actor who created this card */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the card is archived */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The card note */
note:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The project that contains this card. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:Project)=>Observable<Project>}),
/** The HTTP path for this card */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The state of ProjectCard */
state:({get:(request?:boolean|number,defaultValue?:(ProjectCardState|null))=>Observable<(ProjectCardState|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this card */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A list of projects associated with the owner. */
export interface ProjectConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ProjectEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ProjectEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectRequest>(request: R, defaultValue?:((FieldsSelection<Project, R>|null)[]|null))=>Promise<((FieldsSelection<Project, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A list of projects associated with the owner. */
export interface ProjectConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ProjectEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ProjectEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ProjectEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ProjectRequest>(request: R, defaultValue?:((FieldsSelection<Project, R>|null)[]|null))=>Observable<((FieldsSelection<Project, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ProjectEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** An edge in a connection. */
export interface ProjectEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Represents an owner of a registry package. */
export interface RegistryPackageOwnerPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})}


/** Represents an owner of a registry package. */
export interface RegistryPackageOwnerObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages under the owner.
 */
registryPackages:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find registry package by name. */
name?: (Scalars["String"]|null),
/** Find registry packages by their names. */
names?: ((Scalars["String"]|null)[]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Filter registry package by whether it is publicly visible */
publicOnly?: (Scalars["Boolean"]|null),
/** Filter registry package by type (string). */
registryPackageType?: (Scalars["String"]|null),
/** Find registry packages in a repository. */
repositoryId?: (Scalars["ID"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})}


/** The connection type for RegistryPackage. */
export interface RegistryPackageConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackage, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackage, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RegistryPackage. */
export interface RegistryPackageConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackage, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackage, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RegistryPackageEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackagePromiseChain & {get:<R extends RegistryPackageRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackage, R>|null))=>Promise<(FieldsSelection<RegistryPackage, R>|null)>})}


/** An edge in a connection. */
export interface RegistryPackageEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageObservableChain & {get:<R extends RegistryPackageRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackage, R>|null))=>Observable<(FieldsSelection<RegistryPackage, R>|null)>})}


/** A registry package contains the content for an uploaded package. */
export interface RegistryPackagePromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * The package type color
 */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find the latest version for the package.
 */
latestVersion:(RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the title of the package.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the title of the package, with the owner prefixed.
 */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * Find the package file identified by the guid.
 */
packageFileByGuid:((args:{
/** The unique identifier of the package_file */
guid: Scalars["String"]})=>RegistryPackageFilePromiseChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Promise<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * Find the package file identified by the sha256.
 */
packageFileBySha256:((args:{
/** The SHA256 of the package_file */
sha256: Scalars["String"]})=>RegistryPackageFilePromiseChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Promise<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the type of the package.
 */
packageType:({get:(request?:boolean|number,defaultValue?:RegistryPackageType)=>Promise<RegistryPackageType>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * List the prerelease versions for this package.
 */
preReleaseVersions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageVersionConnectionPromiseChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>})&(RegistryPackageVersionConnectionPromiseChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * The type of the package.
 */
registryPackageType:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * repository that the release is associated with
 */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Statistics about package activity.
 */
statistics:(RegistryPackageStatisticsPromiseChain & {get:<R extends RegistryPackageStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageStatistics, R>|null))=>Promise<(FieldsSelection<RegistryPackageStatistics, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * list of tags for this package
 */
tags:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageTagConnectionPromiseChain & {get:<R extends RegistryPackageTagConnectionRequest>(request: R, defaultValue?:RegistryPackageTagConnection)=>Promise<RegistryPackageTagConnection>})&(RegistryPackageTagConnectionPromiseChain & {get:<R extends RegistryPackageTagConnectionRequest>(request: R, defaultValue?:RegistryPackageTagConnection)=>Promise<RegistryPackageTagConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * List the topics for this package.
 */
topics:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TopicConnectionPromiseChain & {get:<R extends TopicConnectionRequest>(request: R, defaultValue?:(FieldsSelection<TopicConnection, R>|null))=>Promise<(FieldsSelection<TopicConnection, R>|null)>})&(TopicConnectionPromiseChain & {get:<R extends TopicConnectionRequest>(request: R, defaultValue?:(FieldsSelection<TopicConnection, R>|null))=>Promise<(FieldsSelection<TopicConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by version string.
 */
version:((args:{
/** The package version. */
version: Scalars["String"]})=>RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by version string.
 */
versionByPlatform:((args:{
/** Find a registry package for a specific platform. */
platform: Scalars["String"],
/** The package version. */
version: Scalars["String"]})=>RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by manifest SHA256.
 */
versionBySha256:((args:{
/** The package SHA256 digest. */
sha256: Scalars["String"]})=>RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * list of versions for this package
 */
versions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageVersionConnectionPromiseChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:RegistryPackageVersionConnection)=>Promise<RegistryPackageVersionConnection>})&(RegistryPackageVersionConnectionPromiseChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:RegistryPackageVersionConnection)=>Promise<RegistryPackageVersionConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * List package versions with a specific metadatum.
 */
versionsByMetadatum:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter on a specific metadatum. */
metadatum: RegistryPackageMetadatum})=>RegistryPackageVersionConnectionPromiseChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>})}


/** A registry package contains the content for an uploaded package. */
export interface RegistryPackageObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * The package type color
 */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find the latest version for the package.
 */
latestVersion:(RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the title of the package.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the title of the package, with the owner prefixed.
 */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * Find the package file identified by the guid.
 */
packageFileByGuid:((args:{
/** The unique identifier of the package_file */
guid: Scalars["String"]})=>RegistryPackageFileObservableChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Observable<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * Find the package file identified by the sha256.
 */
packageFileBySha256:((args:{
/** The SHA256 of the package_file */
sha256: Scalars["String"]})=>RegistryPackageFileObservableChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Observable<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Identifies the type of the package.
 */
packageType:({get:(request?:boolean|number,defaultValue?:RegistryPackageType)=>Observable<RegistryPackageType>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * List the prerelease versions for this package.
 */
preReleaseVersions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageVersionConnectionObservableChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>})&(RegistryPackageVersionConnectionObservableChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * The type of the package.
 */
registryPackageType:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * repository that the release is associated with
 */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Statistics about package activity.
 */
statistics:(RegistryPackageStatisticsObservableChain & {get:<R extends RegistryPackageStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageStatistics, R>|null))=>Observable<(FieldsSelection<RegistryPackageStatistics, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * list of tags for this package
 */
tags:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageTagConnectionObservableChain & {get:<R extends RegistryPackageTagConnectionRequest>(request: R, defaultValue?:RegistryPackageTagConnection)=>Observable<RegistryPackageTagConnection>})&(RegistryPackageTagConnectionObservableChain & {get:<R extends RegistryPackageTagConnectionRequest>(request: R, defaultValue?:RegistryPackageTagConnection)=>Observable<RegistryPackageTagConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.
 * List the topics for this package.
 */
topics:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TopicConnectionObservableChain & {get:<R extends TopicConnectionRequest>(request: R, defaultValue?:(FieldsSelection<TopicConnection, R>|null))=>Observable<(FieldsSelection<TopicConnection, R>|null)>})&(TopicConnectionObservableChain & {get:<R extends TopicConnectionRequest>(request: R, defaultValue?:(FieldsSelection<TopicConnection, R>|null))=>Observable<(FieldsSelection<TopicConnection, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by version string.
 */
version:((args:{
/** The package version. */
version: Scalars["String"]})=>RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by version string.
 */
versionByPlatform:((args:{
/** Find a registry package for a specific platform. */
platform: Scalars["String"],
/** The package version. */
version: Scalars["String"]})=>RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * Find package version by manifest SHA256.
 */
versionBySha256:((args:{
/** The package SHA256 digest. */
sha256: Scalars["String"]})=>RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * list of versions for this package
 */
versions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageVersionConnectionObservableChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:RegistryPackageVersionConnection)=>Observable<RegistryPackageVersionConnection>})&(RegistryPackageVersionConnectionObservableChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:RegistryPackageVersionConnection)=>Observable<RegistryPackageVersionConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.
 * List package versions with a specific metadatum.
 */
versionsByMetadatum:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter on a specific metadatum. */
metadatum: RegistryPackageMetadatum})=>RegistryPackageVersionConnectionObservableChain & {get:<R extends RegistryPackageVersionConnectionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionConnection, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersionConnection, R>|null)>})}


/** A package version contains the information about a specific package version. */
export interface RegistryPackageVersionPromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Whether or not this version has been deleted.
 */
deleted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * list of dependencies for this package
 */
dependencies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find dependencies by type. */
type?: (RegistryPackageDependencyType|null)})=>RegistryPackageDependencyConnectionPromiseChain & {get:<R extends RegistryPackageDependencyConnectionRequest>(request: R, defaultValue?:RegistryPackageDependencyConnection)=>Promise<RegistryPackageDependencyConnection>})&(RegistryPackageDependencyConnectionPromiseChain & {get:<R extends RegistryPackageDependencyConnectionRequest>(request: R, defaultValue?:RegistryPackageDependencyConnection)=>Promise<RegistryPackageDependencyConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * A file associated with this registry package version
 */
fileByName:((args:{
/** A specific file to find. */
filename: Scalars["String"]})=>RegistryPackageFilePromiseChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Promise<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * List of files associated with this registry package version
 */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageFileConnectionPromiseChain & {get:<R extends RegistryPackageFileConnectionRequest>(request: R, defaultValue?:RegistryPackageFileConnection)=>Promise<RegistryPackageFileConnection>})&(RegistryPackageFileConnectionPromiseChain & {get:<R extends RegistryPackageFileConnectionRequest>(request: R, defaultValue?:RegistryPackageFileConnection)=>Promise<RegistryPackageFileConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * A single line of text to install this package version.
 */
installationCommand:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the package manifest for this package version.
 */
manifest:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the platform this version was built for.
 */
platform:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Indicates whether this version is a pre-release.
 */
preRelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * The README of this package version
 */
readme:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * The HTML README of this package version
 */
readmeHtml:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Promise<(Scalars["HTML"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Registry package associated with this version.
 */
registryPackage:(RegistryPackagePromiseChain & {get:<R extends RegistryPackageRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackage, R>|null))=>Promise<(FieldsSelection<RegistryPackage, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Release associated with this package.
 */
release:(ReleasePromiseChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Promise<(FieldsSelection<Release, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha256.
 */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the size.
 */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Statistics about package activity.
 */
statistics:(RegistryPackageVersionStatisticsPromiseChain & {get:<R extends RegistryPackageVersionStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionStatistics, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersionStatistics, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the package version summary.
 */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Time at which the most recent file upload for this package version finished
 */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the version number.
 */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Can the current viewer edit this Package version.
 */
viewerCanEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A package version contains the information about a specific package version. */
export interface RegistryPackageVersionObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Whether or not this version has been deleted.
 */
deleted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * list of dependencies for this package
 */
dependencies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Find dependencies by type. */
type?: (RegistryPackageDependencyType|null)})=>RegistryPackageDependencyConnectionObservableChain & {get:<R extends RegistryPackageDependencyConnectionRequest>(request: R, defaultValue?:RegistryPackageDependencyConnection)=>Observable<RegistryPackageDependencyConnection>})&(RegistryPackageDependencyConnectionObservableChain & {get:<R extends RegistryPackageDependencyConnectionRequest>(request: R, defaultValue?:RegistryPackageDependencyConnection)=>Observable<RegistryPackageDependencyConnection>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * A file associated with this registry package version
 */
fileByName:((args:{
/** A specific file to find. */
filename: Scalars["String"]})=>RegistryPackageFileObservableChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Observable<(FieldsSelection<RegistryPackageFile, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * List of files associated with this registry package version
 */
files:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>RegistryPackageFileConnectionObservableChain & {get:<R extends RegistryPackageFileConnectionRequest>(request: R, defaultValue?:RegistryPackageFileConnection)=>Observable<RegistryPackageFileConnection>})&(RegistryPackageFileConnectionObservableChain & {get:<R extends RegistryPackageFileConnectionRequest>(request: R, defaultValue?:RegistryPackageFileConnection)=>Observable<RegistryPackageFileConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * A single line of text to install this package version.
 */
installationCommand:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the package manifest for this package version.
 */
manifest:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the platform this version was built for.
 */
platform:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Indicates whether this version is a pre-release.
 */
preRelease:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * The README of this package version
 */
readme:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * The HTML README of this package version
 */
readmeHtml:({get:(request?:boolean|number,defaultValue?:(Scalars["HTML"]|null))=>Observable<(Scalars["HTML"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Registry package associated with this version.
 */
registryPackage:(RegistryPackageObservableChain & {get:<R extends RegistryPackageRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackage, R>|null))=>Observable<(FieldsSelection<RegistryPackage, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Release associated with this package.
 */
release:(ReleaseObservableChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Observable<(FieldsSelection<Release, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha256.
 */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the size.
 */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Statistics about package activity.
 */
statistics:(RegistryPackageVersionStatisticsObservableChain & {get:<R extends RegistryPackageVersionStatisticsRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersionStatistics, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersionStatistics, R>|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the package version summary.
 */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Time at which the most recent file upload for this package version finished
 */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Identifies the version number.
 */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.
 * Can the current viewer edit this Package version.
 */
viewerCanEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for RegistryPackageDependency. */
export interface RegistryPackageDependencyConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageDependencyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageDependencyEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageDependencyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageDependencyRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageDependency, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageDependency, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RegistryPackageDependency. */
export interface RegistryPackageDependencyConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageDependencyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageDependencyEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageDependencyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageDependencyRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageDependency, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageDependency, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RegistryPackageDependencyEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageDependencyPromiseChain & {get:<R extends RegistryPackageDependencyRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageDependency, R>|null))=>Promise<(FieldsSelection<RegistryPackageDependency, R>|null)>})}


/** An edge in a connection. */
export interface RegistryPackageDependencyEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageDependencyObservableChain & {get:<R extends RegistryPackageDependencyRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageDependency, R>|null))=>Observable<(FieldsSelection<RegistryPackageDependency, R>|null)>})}


/** A package dependency contains the information needed to satisfy a dependency. */
export interface RegistryPackageDependencyPromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the type of dependency.
 */
dependencyType:({get:(request?:boolean|number,defaultValue?:RegistryPackageDependencyType)=>Promise<RegistryPackageDependencyType>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the name of the dependency.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the version of the dependency.
 */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A package dependency contains the information needed to satisfy a dependency. */
export interface RegistryPackageDependencyObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the type of dependency.
 */
dependencyType:({get:(request?:boolean|number,defaultValue?:RegistryPackageDependencyType)=>Observable<RegistryPackageDependencyType>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the name of the dependency.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.
 * Identifies the version of the dependency.
 */
version:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** A file in a specific registry package version. */
export interface RegistryPackageFilePromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * A unique identifier for this file.
 */
guid:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the md5.
 */
md5:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * URL to download the asset metadata.
 */
metadataUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Name of the file
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * The package version this file belongs to.
 */
packageVersion:(RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:RegistryPackageVersion)=>Promise<RegistryPackageVersion>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha1.
 */
sha1:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha256.
 */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the size.
 */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * URL to download the asset.
 */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A file in a specific registry package version. */
export interface RegistryPackageFileObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * A unique identifier for this file.
 */
guid:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the md5.
 */
md5:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * URL to download the asset metadata.
 */
metadataUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Name of the file
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * The package version this file belongs to.
 */
packageVersion:(RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:RegistryPackageVersion)=>Observable<RegistryPackageVersion>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha1.
 */
sha1:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the sha256.
 */
sha256:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * Identifies the size.
 */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.
 * URL to download the asset.
 */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for RegistryPackageFile. */
export interface RegistryPackageFileConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageFileEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageFile, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RegistryPackageFile. */
export interface RegistryPackageFileConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageFileEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageFile, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RegistryPackageFileEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageFilePromiseChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Promise<(FieldsSelection<RegistryPackageFile, R>|null)>})}


/** An edge in a connection. */
export interface RegistryPackageFileEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageFileObservableChain & {get:<R extends RegistryPackageFileRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageFile, R>|null))=>Observable<(FieldsSelection<RegistryPackageFile, R>|null)>})}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface RegistryPackageVersionStatisticsPromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this month.
 */
downloadsThisMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this week.
 */
downloadsThisWeek:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this year.
 */
downloadsThisYear:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded today.
 */
downloadsToday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded since it was created.
 */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface RegistryPackageVersionStatisticsObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this month.
 */
downloadsThisMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this week.
 */
downloadsThisWeek:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this year.
 */
downloadsThisYear:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded today.
 */
downloadsToday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded since it was created.
 */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for RegistryPackageVersion. */
export interface RegistryPackageVersionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageVersionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageVersionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageVersionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageVersion, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageVersion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RegistryPackageVersion. */
export interface RegistryPackageVersionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageVersionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageVersionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageVersionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageVersion, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageVersion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RegistryPackageVersionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>})}


/** An edge in a connection. */
export interface RegistryPackageVersionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>})}


/** Represents a object that contains package activity statistics such as downloads. */
export interface RegistryPackageStatisticsPromiseChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this month.
 */
downloadsThisMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this week.
 */
downloadsThisWeek:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this year.
 */
downloadsThisYear:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded today.
 */
downloadsToday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded since it was created.
 */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a object that contains package activity statistics such as downloads. */
export interface RegistryPackageStatisticsObservableChain{
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this month.
 */
downloadsThisMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this week.
 */
downloadsThisWeek:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded this year.
 */
downloadsThisYear:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded today.
 */
downloadsToday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.
 * Number of times the package was downloaded since it was created.
 */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for RegistryPackageTag. */
export interface RegistryPackageTagConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageTagEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageTagEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageTagEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageTagRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageTag, R>|null)[]|null))=>Promise<((FieldsSelection<RegistryPackageTag, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RegistryPackageTag. */
export interface RegistryPackageTagConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RegistryPackageTagEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageTagEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageTagEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RegistryPackageTagRequest>(request: R, defaultValue?:((FieldsSelection<RegistryPackageTag, R>|null)[]|null))=>Observable<((FieldsSelection<RegistryPackageTag, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RegistryPackageTagEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageTagPromiseChain & {get:<R extends RegistryPackageTagRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageTag, R>|null))=>Promise<(FieldsSelection<RegistryPackageTag, R>|null)>})}


/** An edge in a connection. */
export interface RegistryPackageTagEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RegistryPackageTagObservableChain & {get:<R extends RegistryPackageTagRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageTag, R>|null))=>Observable<(FieldsSelection<RegistryPackageTag, R>|null)>})}


/** A version tag contains the mapping between a tag name and a version. */
export interface RegistryPackageTagPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
 * Identifies the tag name of the version.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
 * version that the tag is associated with
 */
version:(RegistryPackageVersionPromiseChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Promise<(FieldsSelection<RegistryPackageVersion, R>|null)>})}


/** A version tag contains the mapping between a tag name and a version. */
export interface RegistryPackageTagObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
 * Identifies the tag name of the version.
 */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.
 * version that the tag is associated with
 */
version:(RegistryPackageVersionObservableChain & {get:<R extends RegistryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<RegistryPackageVersion, R>|null))=>Observable<(FieldsSelection<RegistryPackageVersion, R>|null)>})}


/** The connection type for Topic. */
export interface TopicConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TopicEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TopicEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TopicEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TopicRequest>(request: R, defaultValue?:((FieldsSelection<Topic, R>|null)[]|null))=>Promise<((FieldsSelection<Topic, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Topic. */
export interface TopicConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TopicEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TopicEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TopicEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TopicRequest>(request: R, defaultValue?:((FieldsSelection<Topic, R>|null)[]|null))=>Observable<((FieldsSelection<Topic, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface TopicEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>})}


/** An edge in a connection. */
export interface TopicEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>})}


/** A topic aggregates entities that are related to a subject. */
export interface TopicPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The topic's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * A list of related topics, including aliases of this topic, sorted with the most relevant
 * first. Returns up to 10 Topics.
 */
relatedTopics:((args?:{
/** How many topics to return. */
first?: (Scalars["Int"]|null)})=>{get:<R extends TopicRequest>(request: R, defaultValue?:Topic[])=>Promise<Topic[]>})&({get:<R extends TopicRequest>(request: R, defaultValue?:Topic[])=>Promise<Topic[]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>})&(StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A topic aggregates entities that are related to a subject. */
export interface TopicObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The topic's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * A list of related topics, including aliases of this topic, sorted with the most relevant
 * first. Returns up to 10 Topics.
 */
relatedTopics:((args?:{
/** How many topics to return. */
first?: (Scalars["Int"]|null)})=>{get:<R extends TopicRequest>(request: R, defaultValue?:Topic[])=>Observable<Topic[]>})&({get:<R extends TopicRequest>(request: R, defaultValue?:Topic[])=>Observable<Topic[]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>})&(StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Things that can be starred. */
export interface StarrablePromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>})&(StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Things that can be starred. */
export interface StarrableObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>})&(StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for User. */
export interface StargazerConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends StargazerEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StargazerEdge, R>|null)[]|null))=>Promise<((FieldsSelection<StargazerEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface StargazerConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends StargazerEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StargazerEdge, R>|null)[]|null))=>Observable<((FieldsSelection<StargazerEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user that's starred a repository. */
export interface StargazerEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** Identifies when the item was starred. */
starredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Represents a user that's starred a repository. */
export interface StargazerEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** Identifies when the item was starred. */
starredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** Represents an interface to search packages on an object. */
export interface RegistryPackageSearchPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})&(RegistryPackageConnectionPromiseChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Promise<RegistryPackageConnection>})}


/** Represents an interface to search packages on an object. */
export interface RegistryPackageSearchObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.
 * A list of registry packages for a particular search query.
 */
registryPackagesForQuery:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter registry package by type. */
packageType?: (RegistryPackageType|null),
/** Find registry package by search query. */
query?: (Scalars["String"]|null)})=>RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})&(RegistryPackageConnectionObservableChain & {get:<R extends RegistryPackageConnectionRequest>(request: R, defaultValue?:RegistryPackageConnection)=>Observable<RegistryPackageConnection>})}


/** A subset of repository info. */
export interface RepositoryInfoPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The description of the repository. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The description of the repository rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Returns how many forks there are of this repository in the whole network. */
forkCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Indicates if the repository has issues feature enabled. */
hasIssuesEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has the Projects feature enabled. */
hasProjectsEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has wiki feature enabled. */
hasWikiEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The repository's URL. */
homepageUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** Indicates if the repository is unmaintained. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates if the repository has been locked or not. */
isLocked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a mirror. */
isMirror:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the repository is a template that can be used to generate new repositories. */
isTemplate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The license associated with the repository */
licenseInfo:(LicensePromiseChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Promise<(FieldsSelection<License, R>|null)>}),
/** The reason the repository has been locked. */
lockReason:({get:(request?:boolean|number,defaultValue?:(RepositoryLockReason|null))=>Promise<(RepositoryLockReason|null)>}),
/** The repository's original mirror URL. */
mirrorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The name of the repository. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The image used to represent this repository in Open Graph data. */
openGraphImageUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The User owner of the repository. */
owner:(RepositoryOwnerPromiseChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:RepositoryOwner)=>Promise<RepositoryOwner>}),
/** Identifies when the repository was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The HTTP path for this repository */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A description of the repository, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this repository */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
usesCustomOpenGraphImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A subset of repository info. */
export interface RepositoryInfoObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The description of the repository. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The description of the repository rendered to HTML. */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Returns how many forks there are of this repository in the whole network. */
forkCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Indicates if the repository has issues feature enabled. */
hasIssuesEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has the Projects feature enabled. */
hasProjectsEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has wiki feature enabled. */
hasWikiEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The repository's URL. */
homepageUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** Indicates if the repository is unmaintained. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates if the repository has been locked or not. */
isLocked:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a mirror. */
isMirror:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the repository is a template that can be used to generate new repositories. */
isTemplate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The license associated with the repository */
licenseInfo:(LicenseObservableChain & {get:<R extends LicenseRequest>(request: R, defaultValue?:(FieldsSelection<License, R>|null))=>Observable<(FieldsSelection<License, R>|null)>}),
/** The reason the repository has been locked. */
lockReason:({get:(request?:boolean|number,defaultValue?:(RepositoryLockReason|null))=>Observable<(RepositoryLockReason|null)>}),
/** The repository's original mirror URL. */
mirrorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The name of the repository. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The image used to represent this repository in Open Graph data. */
openGraphImageUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The User owner of the repository. */
owner:(RepositoryOwnerObservableChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:RepositoryOwner)=>Observable<RepositoryOwner>}),
/** Identifies when the repository was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The HTTP path for this repository */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A description of the repository, rendered to HTML without any links in it. */
shortDescriptionHTML:((args?:{
/** How many characters to return. */
limit?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this repository */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
usesCustomOpenGraphImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A repository's open source license */
export interface LicensePromiseChain{
/** The full text of the license */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The conditions set by the license */
conditions:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Promise<(LicenseRule|null)[]>}),
/** A human-readable description of the license */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Whether the license should be featured */
featured:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether the license should be displayed in license pickers */
hidden:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Instructions on how to implement the license */
implementation:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The lowercased SPDX ID of the license */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The limitations set by the license */
limitations:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Promise<(LicenseRule|null)[]>}),
/** The license full name specified by <https://spdx.org/licenses> */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Customary short name if applicable (e.g, GPLv3) */
nickname:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The permissions set by the license */
permissions:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Promise<(LicenseRule|null)[]>}),
/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
pseudoLicense:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Short identifier specified by <https://spdx.org/licenses> */
spdxId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** URL to the license on <https://choosealicense.com> */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** A repository's open source license */
export interface LicenseObservableChain{
/** The full text of the license */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The conditions set by the license */
conditions:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Observable<(LicenseRule|null)[]>}),
/** A human-readable description of the license */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Whether the license should be featured */
featured:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether the license should be displayed in license pickers */
hidden:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Instructions on how to implement the license */
implementation:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The lowercased SPDX ID of the license */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The limitations set by the license */
limitations:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Observable<(LicenseRule|null)[]>}),
/** The license full name specified by <https://spdx.org/licenses> */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Customary short name if applicable (e.g, GPLv3) */
nickname:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The permissions set by the license */
permissions:({get:<R extends LicenseRuleRequest>(request: R, defaultValue?:(LicenseRule|null)[])=>Observable<(LicenseRule|null)[]>}),
/** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
pseudoLicense:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Short identifier specified by <https://spdx.org/licenses> */
spdxId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** URL to the license on <https://choosealicense.com> */
url:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRulePromiseChain{
/** A description of the rule */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The machine-readable rule key */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The human-readable rule label */
label:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Describes a License's conditions, permissions, and limitations */
export interface LicenseRuleObservableChain{
/** A description of the rule */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The machine-readable rule key */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The human-readable rule label */
label:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents an owner of a Repository. */
export interface RepositoryOwnerPromiseChain{
/** A URL pointing to the owner's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>})&(RepositoryConnectionPromiseChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Promise<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The HTTP URL for the owner. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for the owner. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents an owner of a Repository. */
export interface RepositoryOwnerObservableChain{
/** A URL pointing to the owner's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of repositories that the user owns. */
repositories:((args?:{
/**
 * Array of viewer's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * current viewer owns.
 */
affiliations?: ((RepositoryAffiliation|null)[]|null),
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If non-null, filters repositories according to whether they are forks of another repository */
isFork?: (Scalars["Boolean"]|null),
/** If non-null, filters repositories according to whether they have been locked */
isLocked?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories returned from the connection */
orderBy?: (RepositoryOrder|null),
/**
 * Array of owner's affiliation options for repositories returned from the
 * connection. For example, OWNER will include only repositories that the
 * organization or user being viewed owns.
 */
ownerAffiliations?: ((RepositoryAffiliation|null)[]|null),
/** If non-null, filters repositories according to privacy */
privacy?: (RepositoryPrivacy|null)})=>RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>})&(RepositoryConnectionObservableChain & {get:<R extends RepositoryConnectionRequest>(request: R, defaultValue?:RepositoryConnection)=>Observable<RepositoryConnection>}),
/** Find Repository. */
repository:((args:{
/** Name of Repository to find. */
name: Scalars["String"]})=>RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The HTTP URL for the owner. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for the owner. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A list of repositories owned by the subject. */
export interface RepositoryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Promise<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The total size in kilobytes of all repositories in the connection. */
totalDiskUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A list of repositories owned by the subject. */
export interface RepositoryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Observable<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The total size in kilobytes of all repositories in the connection. */
totalDiskUsage:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RepositoryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** An edge in a connection. */
export interface RepositoryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribablePromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>})}


/** Entities that can be subscribed to for web and email notifications. */
export interface SubscribableObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>})}


/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends BranchProtectionRuleEdgeRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleEdge, R>|null)[]|null))=>Promise<((FieldsSelection<BranchProtectionRuleEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRule, R>|null)[]|null))=>Promise<((FieldsSelection<BranchProtectionRule, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for BranchProtectionRule. */
export interface BranchProtectionRuleConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends BranchProtectionRuleEdgeRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleEdge, R>|null)[]|null))=>Observable<((FieldsSelection<BranchProtectionRuleEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRule, R>|null)[]|null))=>Observable<((FieldsSelection<BranchProtectionRule, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface BranchProtectionRuleEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>})}


/** An edge in a connection. */
export interface BranchProtectionRuleEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>})}


/** A branch protection rule. */
export interface BranchProtectionRulePromiseChain{
/** A list of conflicts matching branches protection rule and other branch protection rules */
branchProtectionRuleConflicts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>BranchProtectionRuleConflictConnectionPromiseChain & {get:<R extends BranchProtectionRuleConflictConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConflictConnection)=>Promise<BranchProtectionRuleConflictConnection>})&(BranchProtectionRuleConflictConnectionPromiseChain & {get:<R extends BranchProtectionRuleConflictConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConflictConnection)=>Promise<BranchProtectionRuleConflictConnection>}),
/** The actor who created this branch protection rule. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Will new commits pushed to matching branches dismiss pull request review approvals. */
dismissesStaleReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Can admins overwrite branch protection. */
isAdminEnforced:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Repository refs that are protected by this rule */
matchingRefs:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters refs with query on name */
query?: (Scalars["String"]|null)})=>RefConnectionPromiseChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:RefConnection)=>Promise<RefConnection>})&(RefConnectionPromiseChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:RefConnection)=>Promise<RefConnection>}),
/** Identifies the protection rule pattern. */
pattern:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list push allowances for this branch protection rule. */
pushAllowances:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PushAllowanceConnectionPromiseChain & {get:<R extends PushAllowanceConnectionRequest>(request: R, defaultValue?:PushAllowanceConnection)=>Promise<PushAllowanceConnection>})&(PushAllowanceConnectionPromiseChain & {get:<R extends PushAllowanceConnectionRequest>(request: R, defaultValue?:PushAllowanceConnection)=>Promise<PushAllowanceConnection>}),
/** The repository associated with this branch protection rule. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** Number of approving reviews required to update matching branches. */
requiredApprovingReviewCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
requiredStatusCheckContexts:({get:(request?:boolean|number,defaultValue?:((Scalars["String"]|null)[]|null))=>Promise<((Scalars["String"]|null)[]|null)>}),
/** Are approving reviews required to update matching branches. */
requiresApprovingReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Are reviews from code owners required to update matching branches. */
requiresCodeOwnerReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Are commits required to be signed. */
requiresCommitSignatures:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Are status checks required to update matching branches. */
requiresStatusChecks:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Are branches required to be up to date before merging. */
requiresStrictStatusChecks:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Is pushing to matching branches restricted. */
restrictsPushes:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Is dismissal of pull request reviews restricted. */
restrictsReviewDismissals:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list review dismissal allowances for this branch protection rule. */
reviewDismissalAllowances:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReviewDismissalAllowanceConnectionPromiseChain & {get:<R extends ReviewDismissalAllowanceConnectionRequest>(request: R, defaultValue?:ReviewDismissalAllowanceConnection)=>Promise<ReviewDismissalAllowanceConnection>})&(ReviewDismissalAllowanceConnectionPromiseChain & {get:<R extends ReviewDismissalAllowanceConnectionRequest>(request: R, defaultValue?:ReviewDismissalAllowanceConnection)=>Promise<ReviewDismissalAllowanceConnection>})}


/** A branch protection rule. */
export interface BranchProtectionRuleObservableChain{
/** A list of conflicts matching branches protection rule and other branch protection rules */
branchProtectionRuleConflicts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>BranchProtectionRuleConflictConnectionObservableChain & {get:<R extends BranchProtectionRuleConflictConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConflictConnection)=>Observable<BranchProtectionRuleConflictConnection>})&(BranchProtectionRuleConflictConnectionObservableChain & {get:<R extends BranchProtectionRuleConflictConnectionRequest>(request: R, defaultValue?:BranchProtectionRuleConflictConnection)=>Observable<BranchProtectionRuleConflictConnection>}),
/** The actor who created this branch protection rule. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Will new commits pushed to matching branches dismiss pull request review approvals. */
dismissesStaleReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Can admins overwrite branch protection. */
isAdminEnforced:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Repository refs that are protected by this rule */
matchingRefs:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filters refs with query on name */
query?: (Scalars["String"]|null)})=>RefConnectionObservableChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:RefConnection)=>Observable<RefConnection>})&(RefConnectionObservableChain & {get:<R extends RefConnectionRequest>(request: R, defaultValue?:RefConnection)=>Observable<RefConnection>}),
/** Identifies the protection rule pattern. */
pattern:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list push allowances for this branch protection rule. */
pushAllowances:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PushAllowanceConnectionObservableChain & {get:<R extends PushAllowanceConnectionRequest>(request: R, defaultValue?:PushAllowanceConnection)=>Observable<PushAllowanceConnection>})&(PushAllowanceConnectionObservableChain & {get:<R extends PushAllowanceConnectionRequest>(request: R, defaultValue?:PushAllowanceConnection)=>Observable<PushAllowanceConnection>}),
/** The repository associated with this branch protection rule. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** Number of approving reviews required to update matching branches. */
requiredApprovingReviewCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** List of required status check contexts that must pass for commits to be accepted to matching branches. */
requiredStatusCheckContexts:({get:(request?:boolean|number,defaultValue?:((Scalars["String"]|null)[]|null))=>Observable<((Scalars["String"]|null)[]|null)>}),
/** Are approving reviews required to update matching branches. */
requiresApprovingReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Are reviews from code owners required to update matching branches. */
requiresCodeOwnerReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Are commits required to be signed. */
requiresCommitSignatures:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Are status checks required to update matching branches. */
requiresStatusChecks:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Are branches required to be up to date before merging. */
requiresStrictStatusChecks:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Is pushing to matching branches restricted. */
restrictsPushes:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Is dismissal of pull request reviews restricted. */
restrictsReviewDismissals:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list review dismissal allowances for this branch protection rule. */
reviewDismissalAllowances:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ReviewDismissalAllowanceConnectionObservableChain & {get:<R extends ReviewDismissalAllowanceConnectionRequest>(request: R, defaultValue?:ReviewDismissalAllowanceConnection)=>Observable<ReviewDismissalAllowanceConnection>})&(ReviewDismissalAllowanceConnectionObservableChain & {get:<R extends ReviewDismissalAllowanceConnectionRequest>(request: R, defaultValue?:ReviewDismissalAllowanceConnection)=>Observable<ReviewDismissalAllowanceConnection>})}


/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends BranchProtectionRuleConflictEdgeRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleConflictEdge, R>|null)[]|null))=>Promise<((FieldsSelection<BranchProtectionRuleConflictEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends BranchProtectionRuleConflictRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleConflict, R>|null)[]|null))=>Promise<((FieldsSelection<BranchProtectionRuleConflict, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for BranchProtectionRuleConflict. */
export interface BranchProtectionRuleConflictConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends BranchProtectionRuleConflictEdgeRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleConflictEdge, R>|null)[]|null))=>Observable<((FieldsSelection<BranchProtectionRuleConflictEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends BranchProtectionRuleConflictRequest>(request: R, defaultValue?:((FieldsSelection<BranchProtectionRuleConflict, R>|null)[]|null))=>Observable<((FieldsSelection<BranchProtectionRuleConflict, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(BranchProtectionRuleConflictPromiseChain & {get:<R extends BranchProtectionRuleConflictRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRuleConflict, R>|null))=>Promise<(FieldsSelection<BranchProtectionRuleConflict, R>|null)>})}


/** An edge in a connection. */
export interface BranchProtectionRuleConflictEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(BranchProtectionRuleConflictObservableChain & {get:<R extends BranchProtectionRuleConflictRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRuleConflict, R>|null))=>Observable<(FieldsSelection<BranchProtectionRuleConflict, R>|null)>})}


/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflictPromiseChain{
/** Identifies the branch protection rule. */
branchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** Identifies the conflicting branch protection rule. */
conflictingBranchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** Identifies the branch ref that has conflicting rules */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** A conflict between two branch protection rules. */
export interface BranchProtectionRuleConflictObservableChain{
/** Identifies the branch protection rule. */
branchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** Identifies the conflicting branch protection rule. */
conflictingBranchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** Identifies the branch ref that has conflicting rules */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** The connection type for Ref. */
export interface RefConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RefEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RefEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RefEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RefRequest>(request: R, defaultValue?:((FieldsSelection<Ref, R>|null)[]|null))=>Promise<((FieldsSelection<Ref, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Ref. */
export interface RefConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RefEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RefEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RefEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RefRequest>(request: R, defaultValue?:((FieldsSelection<Ref, R>|null)[]|null))=>Observable<((FieldsSelection<Ref, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RefEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** An edge in a connection. */
export interface RefEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** The connection type for PushAllowance. */
export interface PushAllowanceConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PushAllowanceEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PushAllowanceEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PushAllowanceEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PushAllowanceRequest>(request: R, defaultValue?:((FieldsSelection<PushAllowance, R>|null)[]|null))=>Promise<((FieldsSelection<PushAllowance, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PushAllowance. */
export interface PushAllowanceConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PushAllowanceEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PushAllowanceEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PushAllowanceEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PushAllowanceRequest>(request: R, defaultValue?:((FieldsSelection<PushAllowance, R>|null)[]|null))=>Observable<((FieldsSelection<PushAllowance, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PushAllowanceEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PushAllowancePromiseChain & {get:<R extends PushAllowanceRequest>(request: R, defaultValue?:(FieldsSelection<PushAllowance, R>|null))=>Promise<(FieldsSelection<PushAllowance, R>|null)>})}


/** An edge in a connection. */
export interface PushAllowanceEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PushAllowanceObservableChain & {get:<R extends PushAllowanceRequest>(request: R, defaultValue?:(FieldsSelection<PushAllowance, R>|null))=>Observable<(FieldsSelection<PushAllowance, R>|null)>})}


/** A team, user or app who has the ability to push to a protected branch. */
export interface PushAllowancePromiseChain{
/** The actor that can push. */
actor:({get:<R extends PushAllowanceActorRequest>(request: R, defaultValue?:(FieldsSelection<PushAllowanceActor, R>|null))=>Promise<(FieldsSelection<PushAllowanceActor, R>|null)>}),
/** Identifies the branch protection rule associated with the allowed user or team. */
branchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** A team, user or app who has the ability to push to a protected branch. */
export interface PushAllowanceObservableChain{
/** The actor that can push. */
actor:({get:<R extends PushAllowanceActorRequest>(request: R, defaultValue?:(FieldsSelection<PushAllowanceActor, R>|null))=>Observable<(FieldsSelection<PushAllowanceActor, R>|null)>}),
/** Identifies the branch protection rule associated with the allowed user or team. */
branchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** A GitHub App. */
export interface AppPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The description of the app. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The hex color code, without the leading '#', for the logo background. */
logoBackgroundColor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A URL pointing to the app's logo. */
logoUrl:((args?:{
/** The size of the resulting image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The name of the app. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A slug based on the name of the app for use in URLs. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The URL to the app's homepage. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A GitHub App. */
export interface AppObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The description of the app. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The hex color code, without the leading '#', for the logo background. */
logoBackgroundColor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A URL pointing to the app's logo. */
logoUrl:((args?:{
/** The size of the resulting image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The name of the app. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A slug based on the name of the app for use in URLs. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The URL to the app's homepage. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A team of users in an organization. */
export interface TeamPromiseChain{
/** A list of teams that are ancestors of this team. */
ancestors:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>})&(TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>}),
/** A URL pointing to the team's avatar. */
avatarUrl:((args?:{
/** The size in pixels of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** List of child teams belonging to this team */
childTeams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether to list immediate child teams or all descendant child teams. */
immediateOnly?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamOrder|null),
/** User logins to filter by */
userLogins?: (Scalars["String"][]|null)})=>TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>})&(TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>}),
/** The slug corresponding to the organization and team. */
combinedSlug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The description of the team. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Find a team discussion by its number. */
discussion:((args:{
/** The sequence number of the discussion to find. */
number: Scalars["Int"]})=>TeamDiscussionPromiseChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Promise<(FieldsSelection<TeamDiscussion, R>|null)>}),
/** A list of team discussions. */
discussions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If provided, filters discussions according to whether or not they are pinned. */
isPinned?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamDiscussionOrder|null)})=>TeamDiscussionConnectionPromiseChain & {get:<R extends TeamDiscussionConnectionRequest>(request: R, defaultValue?:TeamDiscussionConnection)=>Promise<TeamDiscussionConnection>})&(TeamDiscussionConnectionPromiseChain & {get:<R extends TeamDiscussionConnectionRequest>(request: R, defaultValue?:TeamDiscussionConnection)=>Promise<TeamDiscussionConnection>}),
/** The HTTP path for team discussions */
discussionsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for team discussions */
discussionsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP path for editing this team */
editTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for editing this team */
editTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of pending invitations for users to this team */
invitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationInvitationConnectionPromiseChain & {get:<R extends OrganizationInvitationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitationConnection, R>|null))=>Promise<(FieldsSelection<OrganizationInvitationConnection, R>|null)>})&(OrganizationInvitationConnectionPromiseChain & {get:<R extends OrganizationInvitationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitationConnection, R>|null))=>Promise<(FieldsSelection<OrganizationInvitationConnection, R>|null)>}),
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>})&(UserStatusConnectionPromiseChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Promise<UserStatusConnection>}),
/** A list of users who are members of this team. */
members:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter by membership type */
membership?: (TeamMembershipType|null),
/** Order for the connection. */
orderBy?: (TeamMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** Filter by team member role */
role?: (TeamMemberRole|null)})=>TeamMemberConnectionPromiseChain & {get:<R extends TeamMemberConnectionRequest>(request: R, defaultValue?:TeamMemberConnection)=>Promise<TeamMemberConnection>})&(TeamMemberConnectionPromiseChain & {get:<R extends TeamMemberConnectionRequest>(request: R, defaultValue?:TeamMemberConnection)=>Promise<TeamMemberConnection>}),
/** The HTTP path for the team' members */
membersResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for the team' members */
membersUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The name of the team. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path creating a new team */
newTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL creating a new team */
newTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The organization that owns this team. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Promise<Organization>}),
/** The parent team of the team. */
parentTeam:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The level of privacy the team has. */
privacy:({get:(request?:boolean|number,defaultValue?:TeamPrivacy)=>Promise<TeamPrivacy>}),
/** A list of repositories this team has access to. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for the connection. */
orderBy?: (TeamRepositoryOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>TeamRepositoryConnectionPromiseChain & {get:<R extends TeamRepositoryConnectionRequest>(request: R, defaultValue?:TeamRepositoryConnection)=>Promise<TeamRepositoryConnection>})&(TeamRepositoryConnectionPromiseChain & {get:<R extends TeamRepositoryConnectionRequest>(request: R, defaultValue?:TeamRepositoryConnection)=>Promise<TeamRepositoryConnection>}),
/** The HTTP path for this team's repositories */
repositoriesResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this team's repositories */
repositoriesUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP path for this team */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** What algorithm is used for review assignment for this team */
reviewRequestDelegationAlgorithm:({get:(request?:boolean|number,defaultValue?:(TeamReviewAssignmentAlgorithm|null))=>Promise<(TeamReviewAssignmentAlgorithm|null)>}),
/** True if review assignment is enabled for this team */
reviewRequestDelegationEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** How many team members are required for review assignment for this team */
reviewRequestDelegationMemberCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** When assigning team members via delegation, whether the entire team should be notified as well. */
reviewRequestDelegationNotifyTeam:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The slug corresponding to the team. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this team's teams */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this team's teams */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this team */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Team is adminable by the viewer. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>})}


/** A team of users in an organization. */
export interface TeamObservableChain{
/** A list of teams that are ancestors of this team. */
ancestors:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>})&(TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>}),
/** A URL pointing to the team's avatar. */
avatarUrl:((args?:{
/** The size in pixels of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** List of child teams belonging to this team */
childTeams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether to list immediate child teams or all descendant child teams. */
immediateOnly?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamOrder|null),
/** User logins to filter by */
userLogins?: (Scalars["String"][]|null)})=>TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>})&(TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>}),
/** The slug corresponding to the organization and team. */
combinedSlug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The description of the team. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Find a team discussion by its number. */
discussion:((args:{
/** The sequence number of the discussion to find. */
number: Scalars["Int"]})=>TeamDiscussionObservableChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Observable<(FieldsSelection<TeamDiscussion, R>|null)>}),
/** A list of team discussions. */
discussions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** If provided, filters discussions according to whether or not they are pinned. */
isPinned?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamDiscussionOrder|null)})=>TeamDiscussionConnectionObservableChain & {get:<R extends TeamDiscussionConnectionRequest>(request: R, defaultValue?:TeamDiscussionConnection)=>Observable<TeamDiscussionConnection>})&(TeamDiscussionConnectionObservableChain & {get:<R extends TeamDiscussionConnectionRequest>(request: R, defaultValue?:TeamDiscussionConnection)=>Observable<TeamDiscussionConnection>}),
/** The HTTP path for team discussions */
discussionsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for team discussions */
discussionsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP path for editing this team */
editTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for editing this team */
editTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of pending invitations for users to this team */
invitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationInvitationConnectionObservableChain & {get:<R extends OrganizationInvitationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitationConnection, R>|null))=>Observable<(FieldsSelection<OrganizationInvitationConnection, R>|null)>})&(OrganizationInvitationConnectionObservableChain & {get:<R extends OrganizationInvitationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitationConnection, R>|null))=>Observable<(FieldsSelection<OrganizationInvitationConnection, R>|null)>}),
/** Get the status messages members of this entity have set that are either public or visible only to the organization. */
memberStatuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for user statuses returned from the connection. */
orderBy?: (UserStatusOrder|null)})=>UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>})&(UserStatusConnectionObservableChain & {get:<R extends UserStatusConnectionRequest>(request: R, defaultValue?:UserStatusConnection)=>Observable<UserStatusConnection>}),
/** A list of users who are members of this team. */
members:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter by membership type */
membership?: (TeamMembershipType|null),
/** Order for the connection. */
orderBy?: (TeamMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** Filter by team member role */
role?: (TeamMemberRole|null)})=>TeamMemberConnectionObservableChain & {get:<R extends TeamMemberConnectionRequest>(request: R, defaultValue?:TeamMemberConnection)=>Observable<TeamMemberConnection>})&(TeamMemberConnectionObservableChain & {get:<R extends TeamMemberConnectionRequest>(request: R, defaultValue?:TeamMemberConnection)=>Observable<TeamMemberConnection>}),
/** The HTTP path for the team' members */
membersResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for the team' members */
membersUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The name of the team. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path creating a new team */
newTeamResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL creating a new team */
newTeamUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The organization that owns this team. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Observable<Organization>}),
/** The parent team of the team. */
parentTeam:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The level of privacy the team has. */
privacy:({get:(request?:boolean|number,defaultValue?:TeamPrivacy)=>Observable<TeamPrivacy>}),
/** A list of repositories this team has access to. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for the connection. */
orderBy?: (TeamRepositoryOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>TeamRepositoryConnectionObservableChain & {get:<R extends TeamRepositoryConnectionRequest>(request: R, defaultValue?:TeamRepositoryConnection)=>Observable<TeamRepositoryConnection>})&(TeamRepositoryConnectionObservableChain & {get:<R extends TeamRepositoryConnectionRequest>(request: R, defaultValue?:TeamRepositoryConnection)=>Observable<TeamRepositoryConnection>}),
/** The HTTP path for this team's repositories */
repositoriesResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this team's repositories */
repositoriesUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP path for this team */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** What algorithm is used for review assignment for this team */
reviewRequestDelegationAlgorithm:({get:(request?:boolean|number,defaultValue?:(TeamReviewAssignmentAlgorithm|null))=>Observable<(TeamReviewAssignmentAlgorithm|null)>}),
/** True if review assignment is enabled for this team */
reviewRequestDelegationEnabled:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** How many team members are required for review assignment for this team */
reviewRequestDelegationMemberCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** When assigning team members via delegation, whether the entire team should be notified as well. */
reviewRequestDelegationNotifyTeam:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The slug corresponding to the team. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this team's teams */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this team's teams */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this team */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Team is adminable by the viewer. */
viewerCanAdminister:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>})}


/** The connection type for Team. */
export interface TeamConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TeamEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TeamEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamRequest>(request: R, defaultValue?:((FieldsSelection<Team, R>|null)[]|null))=>Promise<((FieldsSelection<Team, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Team. */
export interface TeamConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TeamEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TeamEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamRequest>(request: R, defaultValue?:((FieldsSelection<Team, R>|null)[]|null))=>Observable<((FieldsSelection<Team, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface TeamEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>})}


/** An edge in a connection. */
export interface TeamEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>})}


/** A team discussion. */
export interface TeamDiscussionPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the discussion's team. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the discussion body hash. */
bodyVersion:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of comments on this discussion. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** When provided, filters the connection such that results begin with the comment with this number. */
fromComment?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamDiscussionCommentOrder|null)})=>TeamDiscussionCommentConnectionPromiseChain & {get:<R extends TeamDiscussionCommentConnectionRequest>(request: R, defaultValue?:TeamDiscussionCommentConnection)=>Promise<TeamDiscussionCommentConnection>})&(TeamDiscussionCommentConnectionPromiseChain & {get:<R extends TeamDiscussionCommentConnectionRequest>(request: R, defaultValue?:TeamDiscussionCommentConnection)=>Promise<TeamDiscussionCommentConnection>}),
/** The HTTP path for discussion comments */
commentsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for discussion comments */
commentsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the discussion is pinned. */
isPinned:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the discussion is only visible to team members and org admins. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the discussion within its team. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The HTTP path for this discussion */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The team that defines the context of this discussion. */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:Team)=>Promise<Team>}),
/** The title of the discussion */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this discussion */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the current viewer can pin this discussion. */
viewerCanPin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>})}


/** A team discussion. */
export interface TeamDiscussionObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the discussion's team. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the discussion body hash. */
bodyVersion:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of comments on this discussion. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** When provided, filters the connection such that results begin with the comment with this number. */
fromComment?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (TeamDiscussionCommentOrder|null)})=>TeamDiscussionCommentConnectionObservableChain & {get:<R extends TeamDiscussionCommentConnectionRequest>(request: R, defaultValue?:TeamDiscussionCommentConnection)=>Observable<TeamDiscussionCommentConnection>})&(TeamDiscussionCommentConnectionObservableChain & {get:<R extends TeamDiscussionCommentConnectionRequest>(request: R, defaultValue?:TeamDiscussionCommentConnection)=>Observable<TeamDiscussionCommentConnection>}),
/** The HTTP path for discussion comments */
commentsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for discussion comments */
commentsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the discussion is pinned. */
isPinned:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the discussion is only visible to team members and org admins. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the discussion within its team. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The HTTP path for this discussion */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The team that defines the context of this discussion. */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:Team)=>Observable<Team>}),
/** The title of the discussion */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this discussion */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the current viewer can pin this discussion. */
viewerCanPin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>})}


/** Entities that can be deleted. */
export interface DeletablePromiseChain{
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Entities that can be deleted. */
export interface DeletableObservableChain{
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Comments that can be updated. */
export interface UpdatableCommentPromiseChain{
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>})}


/** Comments that can be updated. */
export interface UpdatableCommentObservableChain{
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>})}


/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TeamDiscussionCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionCommentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TeamDiscussionCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionComment, R>|null)[]|null))=>Promise<((FieldsSelection<TeamDiscussionComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for TeamDiscussionComment. */
export interface TeamDiscussionCommentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TeamDiscussionCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionCommentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TeamDiscussionCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionComment, R>|null)[]|null))=>Observable<((FieldsSelection<TeamDiscussionComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface TeamDiscussionCommentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamDiscussionCommentPromiseChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Promise<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** An edge in a connection. */
export interface TeamDiscussionCommentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamDiscussionCommentObservableChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Observable<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** A comment on a team discussion. */
export interface TeamDiscussionCommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the comment's team. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The current version of the body content. */
bodyVersion:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The discussion this comment is about. */
discussion:(TeamDiscussionPromiseChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:TeamDiscussion)=>Promise<TeamDiscussion>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the comment number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The HTTP path for this comment */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this comment */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A comment on a team discussion. */
export interface TeamDiscussionCommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the comment's team. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The current version of the body content. */
bodyVersion:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The discussion this comment is about. */
discussion:(TeamDiscussionObservableChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:TeamDiscussion)=>Observable<TeamDiscussion>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the comment number. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The HTTP path for this comment */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this comment */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TeamDiscussionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TeamDiscussionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussion, R>|null)[]|null))=>Promise<((FieldsSelection<TeamDiscussion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for TeamDiscussion. */
export interface TeamDiscussionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TeamDiscussionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TeamDiscussionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:((FieldsSelection<TeamDiscussion, R>|null)[]|null))=>Observable<((FieldsSelection<TeamDiscussion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface TeamDiscussionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamDiscussionPromiseChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Promise<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** An edge in a connection. */
export interface TeamDiscussionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(TeamDiscussionObservableChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Observable<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends OrganizationInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitation, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for OrganizationInvitation. */
export interface OrganizationInvitationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends OrganizationInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitation, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface OrganizationInvitationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationInvitationPromiseChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Promise<(FieldsSelection<OrganizationInvitation, R>|null)>})}


/** An edge in a connection. */
export interface OrganizationInvitationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationInvitationObservableChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Observable<(FieldsSelection<OrganizationInvitation, R>|null)>})}


/** An Invitation for a user to an organization. */
export interface OrganizationInvitationPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The email address of the user invited to the organization. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The type of invitation that was sent (e.g. email, user). */
invitationType:({get:(request?:boolean|number,defaultValue?:OrganizationInvitationType)=>Promise<OrganizationInvitationType>}),
/** The user who was invited to the organization. */
invitee:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** The organization the invite is for */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Promise<Organization>}),
/** The user's pending role in the organization (e.g. member, owner). */
role:({get:(request?:boolean|number,defaultValue?:OrganizationInvitationRole)=>Promise<OrganizationInvitationRole>})}


/** An Invitation for a user to an organization. */
export interface OrganizationInvitationObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The email address of the user invited to the organization. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The type of invitation that was sent (e.g. email, user). */
invitationType:({get:(request?:boolean|number,defaultValue?:OrganizationInvitationType)=>Observable<OrganizationInvitationType>}),
/** The user who was invited to the organization. */
invitee:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** The organization the invite is for */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Observable<Organization>}),
/** The user's pending role in the organization (e.g. member, owner). */
role:({get:(request?:boolean|number,defaultValue?:OrganizationInvitationRole)=>Observable<OrganizationInvitationRole>})}


/** The connection type for User. */
export interface TeamMemberConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TeamMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamMemberEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TeamMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface TeamMemberConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TeamMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamMemberEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TeamMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user who is a member of a team. */
export interface TeamMemberEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path to the organization's member access page. */
memberAccessResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL to the organization's member access page. */
memberAccessUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** The role the member has on the team. */
role:({get:(request?:boolean|number,defaultValue?:TeamMemberRole)=>Promise<TeamMemberRole>})}


/** Represents a user who is a member of a team. */
export interface TeamMemberEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path to the organization's member access page. */
memberAccessResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL to the organization's member access page. */
memberAccessUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** The role the member has on the team. */
role:({get:(request?:boolean|number,defaultValue?:TeamMemberRole)=>Observable<TeamMemberRole>})}


/** The connection type for Repository. */
export interface TeamRepositoryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends TeamRepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamRepositoryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<TeamRepositoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Promise<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Repository. */
export interface TeamRepositoryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends TeamRepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<TeamRepositoryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<TeamRepositoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Observable<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a team repository. */
export interface TeamRepositoryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/**
 * The permission level the team has on the repository
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Promise<RepositoryPermission>})}


/** Represents a team repository. */
export interface TeamRepositoryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/**
 * The permission level the team has on the repository
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Observable<RepositoryPermission>})}


/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReviewDismissalAllowanceEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReviewDismissalAllowanceEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReviewDismissalAllowanceEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReviewDismissalAllowanceRequest>(request: R, defaultValue?:((FieldsSelection<ReviewDismissalAllowance, R>|null)[]|null))=>Promise<((FieldsSelection<ReviewDismissalAllowance, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ReviewDismissalAllowance. */
export interface ReviewDismissalAllowanceConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReviewDismissalAllowanceEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReviewDismissalAllowanceEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReviewDismissalAllowanceEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReviewDismissalAllowanceRequest>(request: R, defaultValue?:((FieldsSelection<ReviewDismissalAllowance, R>|null)[]|null))=>Observable<((FieldsSelection<ReviewDismissalAllowance, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReviewDismissalAllowancePromiseChain & {get:<R extends ReviewDismissalAllowanceRequest>(request: R, defaultValue?:(FieldsSelection<ReviewDismissalAllowance, R>|null))=>Promise<(FieldsSelection<ReviewDismissalAllowance, R>|null)>})}


/** An edge in a connection. */
export interface ReviewDismissalAllowanceEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReviewDismissalAllowanceObservableChain & {get:<R extends ReviewDismissalAllowanceRequest>(request: R, defaultValue?:(FieldsSelection<ReviewDismissalAllowance, R>|null))=>Observable<(FieldsSelection<ReviewDismissalAllowance, R>|null)>})}


/** A team or user who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowancePromiseChain{
/** The actor that can dismiss. */
actor:({get:<R extends ReviewDismissalAllowanceActorRequest>(request: R, defaultValue?:(FieldsSelection<ReviewDismissalAllowanceActor, R>|null))=>Promise<(FieldsSelection<ReviewDismissalAllowanceActor, R>|null)>}),
/** Identifies the branch protection rule associated with the allowed user or team. */
branchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** A team or user who has the ability to dismiss a review on a protected branch. */
export interface ReviewDismissalAllowanceObservableChain{
/** The actor that can dismiss. */
actor:({get:<R extends ReviewDismissalAllowanceActorRequest>(request: R, defaultValue?:(FieldsSelection<ReviewDismissalAllowanceActor, R>|null))=>Observable<(FieldsSelection<ReviewDismissalAllowanceActor, R>|null)>}),
/** Identifies the branch protection rule associated with the allowed user or team. */
branchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** The connection type for User. */
export interface RepositoryCollaboratorConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RepositoryCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryCollaboratorEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface RepositoryCollaboratorConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RepositoryCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryCollaboratorEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/**
 * The permission the user has on the repository.
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Promise<RepositoryPermission>}),
/** A list of sources for the user's access to the repository. */
permissionSources:({get:<R extends PermissionSourceRequest>(request: R, defaultValue?:(PermissionSource[]|null))=>Promise<(PermissionSource[]|null)>})}


/** Represents a user who is a collaborator of a repository. */
export interface RepositoryCollaboratorEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/**
 * The permission the user has on the repository.
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Observable<RepositoryPermission>}),
/** A list of sources for the user's access to the repository. */
permissionSources:({get:<R extends PermissionSourceRequest>(request: R, defaultValue?:(PermissionSource[]|null))=>Observable<(PermissionSource[]|null)>})}


/** A level of permission and source for a user's access to a repository. */
export interface PermissionSourcePromiseChain{
/** The organization the repository belongs to. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Promise<Organization>}),
/** The level of access this source has granted to the user. */
permission:({get:(request?:boolean|number,defaultValue?:DefaultRepositoryPermissionField)=>Promise<DefaultRepositoryPermissionField>}),
/** The source of this permission. */
source:({get:<R extends PermissionGranterRequest>(request: R, defaultValue?:PermissionGranter)=>Promise<PermissionGranter>})}


/** A level of permission and source for a user's access to a repository. */
export interface PermissionSourceObservableChain{
/** The organization the repository belongs to. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:Organization)=>Observable<Organization>}),
/** The level of access this source has granted to the user. */
permission:({get:(request?:boolean|number,defaultValue?:DefaultRepositoryPermissionField)=>Observable<DefaultRepositoryPermissionField>}),
/** The source of this permission. */
source:({get:<R extends PermissionGranterRequest>(request: R, defaultValue?:PermissionGranter)=>Observable<PermissionGranter>})}


/** The connection type for CommitComment. */
export interface CommitCommentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CommitCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitCommentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CommitCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitCommentRequest>(request: R, defaultValue?:((FieldsSelection<CommitComment, R>|null)[]|null))=>Promise<((FieldsSelection<CommitComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CommitComment. */
export interface CommitCommentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CommitCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitCommentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CommitCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitCommentRequest>(request: R, defaultValue?:((FieldsSelection<CommitComment, R>|null)[]|null))=>Observable<((FieldsSelection<CommitComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CommitCommentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CommitCommentPromiseChain & {get:<R extends CommitCommentRequest>(request: R, defaultValue?:(FieldsSelection<CommitComment, R>|null))=>Promise<(FieldsSelection<CommitComment, R>|null)>})}


/** An edge in a connection. */
export interface CommitCommentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CommitCommentObservableChain & {get:<R extends CommitCommentRequest>(request: R, defaultValue?:(FieldsSelection<CommitComment, R>|null))=>Observable<(FieldsSelection<CommitComment, R>|null)>})}


/** Represents a comment on a given Commit. */
export interface CommitCommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** Identifies the comment body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the commit associated with the comment, if the commit exists. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the file path associated with the comment. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the line position associated with the comment. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path permalink for this commit comment. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this commit comment. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a comment on a given Commit. */
export interface CommitCommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** Identifies the comment body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the commit associated with the comment, if the commit exists. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the file path associated with the comment. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the line position associated with the comment. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path permalink for this commit comment. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this commit comment. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Entities that can be minimized. */
export interface MinimizablePromiseChain{
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Entities that can be minimized. */
export interface MinimizableObservableChain{
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Represents a Git commit. */
export interface CommitPromiseChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The number of additions in this commit. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The pull requests associated with a commit */
associatedPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests. */
orderBy?: (PullRequestOrder|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Promise<(FieldsSelection<PullRequestConnection, R>|null)>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Promise<(FieldsSelection<PullRequestConnection, R>|null)>}),
/** Authorship details of the commit. */
author:(GitActorPromiseChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Promise<(FieldsSelection<GitActor, R>|null)>}),
/** Check if the committer and the author match. */
authoredByCommitter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The datetime when this commit was authored. */
authoredDate:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Fetches `git blame` information. */
blame:((args:{
/** The file whose Git blame information you want. */
path: Scalars["String"]})=>BlamePromiseChain & {get:<R extends BlameRequest>(request: R, defaultValue?:Blame)=>Promise<Blame>}),
/** The number of changed files in this commit. */
changedFiles:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The check suites associated with a commit. */
checkSuites:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filters the check suites by this type. */
filterBy?: (CheckSuiteFilter|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckSuiteConnectionPromiseChain & {get:<R extends CheckSuiteConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuiteConnection, R>|null))=>Promise<(FieldsSelection<CheckSuiteConnection, R>|null)>})&(CheckSuiteConnectionPromiseChain & {get:<R extends CheckSuiteConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuiteConnection, R>|null))=>Promise<(FieldsSelection<CheckSuiteConnection, R>|null)>}),
/** Comments made on the commit. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>})&(CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The datetime when this commit was committed. */
committedDate:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if commited via GitHub web UI. */
committedViaWeb:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Committership details of the commit. */
committer:(GitActorPromiseChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Promise<(FieldsSelection<GitActor, R>|null)>}),
/** The number of deletions in this commit. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The deployments associated with a commit. */
deployments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Environments to list deployments for */
environments?: (Scalars["String"][]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for deployments returned from the connection. */
orderBy?: (DeploymentOrder|null)})=>DeploymentConnectionPromiseChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentConnection, R>|null))=>Promise<(FieldsSelection<DeploymentConnection, R>|null)>})&(DeploymentConnectionPromiseChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentConnection, R>|null))=>Promise<(FieldsSelection<DeploymentConnection, R>|null)>}),
/** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
history:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** If non-null, filters history to only show commits with matching authorship. */
author?: (CommitAuthor|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** If non-null, filters history to only show commits touching files under this path. */
path?: (Scalars["String"]|null),
/** Allows specifying a beginning time or date for fetching commits. */
since?: (Scalars["GitTimestamp"]|null),
/** Allows specifying an ending time or date for fetching commits. */
until?: (Scalars["GitTimestamp"]|null)})=>CommitHistoryConnectionPromiseChain & {get:<R extends CommitHistoryConnectionRequest>(request: R, defaultValue?:CommitHistoryConnection)=>Promise<CommitHistoryConnection>})&(CommitHistoryConnectionPromiseChain & {get:<R extends CommitHistoryConnectionRequest>(request: R, defaultValue?:CommitHistoryConnection)=>Promise<CommitHistoryConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The Git commit message */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The Git commit message body */
messageBody:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The commit message body rendered to HTML. */
messageBodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The Git commit message headline */
messageHeadline:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The commit message headline rendered to HTML. */
messageHeadlineHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The organization this commit was made on behalf of. */
onBehalfOf:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The parents of a commit. */
parents:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitConnectionPromiseChain & {get:<R extends CommitConnectionRequest>(request: R, defaultValue?:CommitConnection)=>Promise<CommitConnection>})&(CommitConnectionPromiseChain & {get:<R extends CommitConnectionRequest>(request: R, defaultValue?:CommitConnection)=>Promise<CommitConnection>}),
/** The datetime when this commit was pushed. */
pushedDate:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The Repository this commit belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this commit */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Commit signing information, if present. */
signature:(GitSignaturePromiseChain & {get:<R extends GitSignatureRequest>(request: R, defaultValue?:(FieldsSelection<GitSignature, R>|null))=>Promise<(FieldsSelection<GitSignature, R>|null)>}),
/** Status information for this commit */
status:(StatusPromiseChain & {get:<R extends StatusRequest>(request: R, defaultValue?:(FieldsSelection<Status, R>|null))=>Promise<(FieldsSelection<Status, R>|null)>}),
/** Check and Status rollup information for this commit. */
statusCheckRollup:(StatusCheckRollupPromiseChain & {get:<R extends StatusCheckRollupRequest>(request: R, defaultValue?:(FieldsSelection<StatusCheckRollup, R>|null))=>Promise<(FieldsSelection<StatusCheckRollup, R>|null)>}),
/** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
submodules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>SubmoduleConnectionPromiseChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Promise<SubmoduleConnection>})&(SubmoduleConnectionPromiseChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Promise<SubmoduleConnection>}),
/**
 * Returns a URL to download a tarball archive for a repository.
 * Note: For private repositories, these links are temporary and expire after five minutes.
 */
tarballUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Commit's root Tree */
tree:(TreePromiseChain & {get:<R extends TreeRequest>(request: R, defaultValue?:Tree)=>Promise<Tree>}),
/** The HTTP path for the tree of this commit */
treeResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for the tree of this commit */
treeUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this commit */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Promise<(SubscriptionState|null)>}),
/**
 * Returns a URL to download a zipball archive for a repository.
 * Note: For private repositories, these links are temporary and expire after five minutes.
 */
zipballUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a Git commit. */
export interface CommitObservableChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The number of additions in this commit. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The pull requests associated with a commit */
associatedPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests. */
orderBy?: (PullRequestOrder|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Observable<(FieldsSelection<PullRequestConnection, R>|null)>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Observable<(FieldsSelection<PullRequestConnection, R>|null)>}),
/** Authorship details of the commit. */
author:(GitActorObservableChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Observable<(FieldsSelection<GitActor, R>|null)>}),
/** Check if the committer and the author match. */
authoredByCommitter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The datetime when this commit was authored. */
authoredDate:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Fetches `git blame` information. */
blame:((args:{
/** The file whose Git blame information you want. */
path: Scalars["String"]})=>BlameObservableChain & {get:<R extends BlameRequest>(request: R, defaultValue?:Blame)=>Observable<Blame>}),
/** The number of changed files in this commit. */
changedFiles:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The check suites associated with a commit. */
checkSuites:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filters the check suites by this type. */
filterBy?: (CheckSuiteFilter|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckSuiteConnectionObservableChain & {get:<R extends CheckSuiteConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuiteConnection, R>|null))=>Observable<(FieldsSelection<CheckSuiteConnection, R>|null)>})&(CheckSuiteConnectionObservableChain & {get:<R extends CheckSuiteConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuiteConnection, R>|null))=>Observable<(FieldsSelection<CheckSuiteConnection, R>|null)>}),
/** Comments made on the commit. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>})&(CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The datetime when this commit was committed. */
committedDate:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if commited via GitHub web UI. */
committedViaWeb:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Committership details of the commit. */
committer:(GitActorObservableChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Observable<(FieldsSelection<GitActor, R>|null)>}),
/** The number of deletions in this commit. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The deployments associated with a commit. */
deployments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Environments to list deployments for */
environments?: (Scalars["String"][]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for deployments returned from the connection. */
orderBy?: (DeploymentOrder|null)})=>DeploymentConnectionObservableChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentConnection, R>|null))=>Observable<(FieldsSelection<DeploymentConnection, R>|null)>})&(DeploymentConnectionObservableChain & {get:<R extends DeploymentConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentConnection, R>|null))=>Observable<(FieldsSelection<DeploymentConnection, R>|null)>}),
/** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
history:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** If non-null, filters history to only show commits with matching authorship. */
author?: (CommitAuthor|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** If non-null, filters history to only show commits touching files under this path. */
path?: (Scalars["String"]|null),
/** Allows specifying a beginning time or date for fetching commits. */
since?: (Scalars["GitTimestamp"]|null),
/** Allows specifying an ending time or date for fetching commits. */
until?: (Scalars["GitTimestamp"]|null)})=>CommitHistoryConnectionObservableChain & {get:<R extends CommitHistoryConnectionRequest>(request: R, defaultValue?:CommitHistoryConnection)=>Observable<CommitHistoryConnection>})&(CommitHistoryConnectionObservableChain & {get:<R extends CommitHistoryConnectionRequest>(request: R, defaultValue?:CommitHistoryConnection)=>Observable<CommitHistoryConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The Git commit message */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The Git commit message body */
messageBody:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The commit message body rendered to HTML. */
messageBodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The Git commit message headline */
messageHeadline:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The commit message headline rendered to HTML. */
messageHeadlineHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The organization this commit was made on behalf of. */
onBehalfOf:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The parents of a commit. */
parents:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitConnectionObservableChain & {get:<R extends CommitConnectionRequest>(request: R, defaultValue?:CommitConnection)=>Observable<CommitConnection>})&(CommitConnectionObservableChain & {get:<R extends CommitConnectionRequest>(request: R, defaultValue?:CommitConnection)=>Observable<CommitConnection>}),
/** The datetime when this commit was pushed. */
pushedDate:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The Repository this commit belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this commit */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Commit signing information, if present. */
signature:(GitSignatureObservableChain & {get:<R extends GitSignatureRequest>(request: R, defaultValue?:(FieldsSelection<GitSignature, R>|null))=>Observable<(FieldsSelection<GitSignature, R>|null)>}),
/** Status information for this commit */
status:(StatusObservableChain & {get:<R extends StatusRequest>(request: R, defaultValue?:(FieldsSelection<Status, R>|null))=>Observable<(FieldsSelection<Status, R>|null)>}),
/** Check and Status rollup information for this commit. */
statusCheckRollup:(StatusCheckRollupObservableChain & {get:<R extends StatusCheckRollupRequest>(request: R, defaultValue?:(FieldsSelection<StatusCheckRollup, R>|null))=>Observable<(FieldsSelection<StatusCheckRollup, R>|null)>}),
/** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
submodules:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>SubmoduleConnectionObservableChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Observable<SubmoduleConnection>})&(SubmoduleConnectionObservableChain & {get:<R extends SubmoduleConnectionRequest>(request: R, defaultValue?:SubmoduleConnection)=>Observable<SubmoduleConnection>}),
/**
 * Returns a URL to download a tarball archive for a repository.
 * Note: For private repositories, these links are temporary and expire after five minutes.
 */
tarballUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Commit's root Tree */
tree:(TreeObservableChain & {get:<R extends TreeRequest>(request: R, defaultValue?:Tree)=>Observable<Tree>}),
/** The HTTP path for the tree of this commit */
treeResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for the tree of this commit */
treeUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this commit */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Check if the viewer is able to change their subscription status for the repository. */
viewerCanSubscribe:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
viewerSubscription:({get:(request?:boolean|number,defaultValue?:(SubscriptionState|null))=>Observable<(SubscriptionState|null)>}),
/**
 * Returns a URL to download a zipball archive for a repository.
 * Note: For private repositories, these links are temporary and expire after five minutes.
 */
zipballUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a Git object. */
export interface GitObjectPromiseChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** Represents a Git object. */
export interface GitObjectObservableChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActorPromiseChain{
/** A URL pointing to the author's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The timestamp of the Git action (authoring or committing). */
date:({get:(request?:boolean|number,defaultValue?:(Scalars["GitTimestamp"]|null))=>Promise<(Scalars["GitTimestamp"]|null)>}),
/** The email in the Git commit. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The name in the Git commit. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The GitHub user corresponding to the email field. Null if no such user exists. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Represents an actor in a Git commit (ie. an author or committer). */
export interface GitActorObservableChain{
/** A URL pointing to the author's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The timestamp of the Git action (authoring or committing). */
date:({get:(request?:boolean|number,defaultValue?:(Scalars["GitTimestamp"]|null))=>Observable<(Scalars["GitTimestamp"]|null)>}),
/** The email in the Git commit. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The name in the Git commit. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The GitHub user corresponding to the email field. Null if no such user exists. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Represents a Git blame. */
export interface BlamePromiseChain{
/** The list of ranges from a Git blame. */
ranges:({get:<R extends BlameRangeRequest>(request: R, defaultValue?:BlameRange[])=>Promise<BlameRange[]>})}


/** Represents a Git blame. */
export interface BlameObservableChain{
/** The list of ranges from a Git blame. */
ranges:({get:<R extends BlameRangeRequest>(request: R, defaultValue?:BlameRange[])=>Observable<BlameRange[]>})}


/** Represents a range of information from a Git blame. */
export interface BlameRangePromiseChain{
/**
 * Identifies the recency of the change, from 1 (new) to 10 (old). This is
 * calculated as a 2-quantile and determines the length of distance between the
 * median age of all the changes in the file and the recency of the current
 * range's change.
 */
age:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the line author */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Promise<Commit>}),
/** The ending line for the range */
endingLine:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The starting line for the range */
startingLine:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a range of information from a Git blame. */
export interface BlameRangeObservableChain{
/**
 * Identifies the recency of the change, from 1 (new) to 10 (old). This is
 * calculated as a 2-quantile and determines the length of distance between the
 * median age of all the changes in the file and the recency of the current
 * range's change.
 */
age:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the line author */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Observable<Commit>}),
/** The ending line for the range */
endingLine:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The starting line for the range */
startingLine:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for CheckSuite. */
export interface CheckSuiteConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CheckSuiteEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckSuiteEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CheckSuiteEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckSuiteRequest>(request: R, defaultValue?:((FieldsSelection<CheckSuite, R>|null)[]|null))=>Promise<((FieldsSelection<CheckSuite, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CheckSuite. */
export interface CheckSuiteConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CheckSuiteEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckSuiteEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CheckSuiteEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckSuiteRequest>(request: R, defaultValue?:((FieldsSelection<CheckSuite, R>|null)[]|null))=>Observable<((FieldsSelection<CheckSuite, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CheckSuiteEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckSuitePromiseChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Promise<(FieldsSelection<CheckSuite, R>|null)>})}


/** An edge in a connection. */
export interface CheckSuiteEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckSuiteObservableChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Observable<(FieldsSelection<CheckSuite, R>|null)>})}


/** A check suite. */
export interface CheckSuitePromiseChain{
/** The GitHub App which created this check suite. */
app:(AppPromiseChain & {get:<R extends AppRequest>(request: R, defaultValue?:(FieldsSelection<App, R>|null))=>Promise<(FieldsSelection<App, R>|null)>}),
/** The name of the branch for this check suite. */
branch:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** The check runs associated with a check suite. */
checkRuns:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filters the check runs by this type. */
filterBy?: (CheckRunFilter|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckRunConnectionPromiseChain & {get:<R extends CheckRunConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckRunConnection, R>|null))=>Promise<(FieldsSelection<CheckRunConnection, R>|null)>})&(CheckRunConnectionPromiseChain & {get:<R extends CheckRunConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckRunConnection, R>|null))=>Promise<(FieldsSelection<CheckRunConnection, R>|null)>}),
/** The commit for this check suite */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Promise<Commit>}),
/** The conclusion of this check suite. */
conclusion:({get:(request?:boolean|number,defaultValue?:(CheckConclusionState|null))=>Promise<(CheckConclusionState|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of open pull requests matching the check suite. */
matchingPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Promise<(FieldsSelection<PullRequestConnection, R>|null)>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Promise<(FieldsSelection<PullRequestConnection, R>|null)>}),
/** The push that triggered this check suite. */
push:(PushPromiseChain & {get:<R extends PushRequest>(request: R, defaultValue?:(FieldsSelection<Push, R>|null))=>Promise<(FieldsSelection<Push, R>|null)>}),
/** The repository associated with this check suite. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this check suite */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The status of this check suite. */
status:({get:(request?:boolean|number,defaultValue?:CheckStatusState)=>Promise<CheckStatusState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this check suite */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A check suite. */
export interface CheckSuiteObservableChain{
/** The GitHub App which created this check suite. */
app:(AppObservableChain & {get:<R extends AppRequest>(request: R, defaultValue?:(FieldsSelection<App, R>|null))=>Observable<(FieldsSelection<App, R>|null)>}),
/** The name of the branch for this check suite. */
branch:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** The check runs associated with a check suite. */
checkRuns:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filters the check runs by this type. */
filterBy?: (CheckRunFilter|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckRunConnectionObservableChain & {get:<R extends CheckRunConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckRunConnection, R>|null))=>Observable<(FieldsSelection<CheckRunConnection, R>|null)>})&(CheckRunConnectionObservableChain & {get:<R extends CheckRunConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckRunConnection, R>|null))=>Observable<(FieldsSelection<CheckRunConnection, R>|null)>}),
/** The commit for this check suite */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Observable<Commit>}),
/** The conclusion of this check suite. */
conclusion:({get:(request?:boolean|number,defaultValue?:(CheckConclusionState|null))=>Observable<(CheckConclusionState|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of open pull requests matching the check suite. */
matchingPullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Observable<(FieldsSelection<PullRequestConnection, R>|null)>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestConnection, R>|null))=>Observable<(FieldsSelection<PullRequestConnection, R>|null)>}),
/** The push that triggered this check suite. */
push:(PushObservableChain & {get:<R extends PushRequest>(request: R, defaultValue?:(FieldsSelection<Push, R>|null))=>Observable<(FieldsSelection<Push, R>|null)>}),
/** The repository associated with this check suite. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this check suite */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The status of this check suite. */
status:({get:(request?:boolean|number,defaultValue?:CheckStatusState)=>Observable<CheckStatusState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this check suite */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for CheckRun. */
export interface CheckRunConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CheckRunEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckRunEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CheckRunEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckRunRequest>(request: R, defaultValue?:((FieldsSelection<CheckRun, R>|null)[]|null))=>Promise<((FieldsSelection<CheckRun, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CheckRun. */
export interface CheckRunConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CheckRunEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckRunEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CheckRunEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckRunRequest>(request: R, defaultValue?:((FieldsSelection<CheckRun, R>|null)[]|null))=>Observable<((FieldsSelection<CheckRun, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CheckRunEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckRunPromiseChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Promise<(FieldsSelection<CheckRun, R>|null)>})}


/** An edge in a connection. */
export interface CheckRunEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckRunObservableChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Observable<(FieldsSelection<CheckRun, R>|null)>})}


/** A check run. */
export interface CheckRunPromiseChain{
/** The check run's annotations */
annotations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckAnnotationConnectionPromiseChain & {get:<R extends CheckAnnotationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotationConnection, R>|null))=>Promise<(FieldsSelection<CheckAnnotationConnection, R>|null)>})&(CheckAnnotationConnectionPromiseChain & {get:<R extends CheckAnnotationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotationConnection, R>|null))=>Promise<(FieldsSelection<CheckAnnotationConnection, R>|null)>}),
/** The check suite that this run is a part of. */
checkSuite:(CheckSuitePromiseChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:CheckSuite)=>Promise<CheckSuite>}),
/** Identifies the date and time when the check run was completed. */
completedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The conclusion of the check run. */
conclusion:({get:(request?:boolean|number,defaultValue?:(CheckConclusionState|null))=>Promise<(CheckConclusionState|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The URL from which to find full details of the check run on the integrator's site. */
detailsUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** A reference for the check run on the integrator's system. */
externalId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the check for this check run. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The permalink to the check run summary. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The repository associated with this check run. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this check run. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the check run was started. */
startedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The current status of the check run. */
status:({get:(request?:boolean|number,defaultValue?:CheckStatusState)=>Promise<CheckStatusState>}),
/** A string representing the check run's summary */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A string representing the check run's text */
text:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A string representing the check run */
title:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this check run. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A check run. */
export interface CheckRunObservableChain{
/** The check run's annotations */
annotations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CheckAnnotationConnectionObservableChain & {get:<R extends CheckAnnotationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotationConnection, R>|null))=>Observable<(FieldsSelection<CheckAnnotationConnection, R>|null)>})&(CheckAnnotationConnectionObservableChain & {get:<R extends CheckAnnotationConnectionRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotationConnection, R>|null))=>Observable<(FieldsSelection<CheckAnnotationConnection, R>|null)>}),
/** The check suite that this run is a part of. */
checkSuite:(CheckSuiteObservableChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:CheckSuite)=>Observable<CheckSuite>}),
/** Identifies the date and time when the check run was completed. */
completedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The conclusion of the check run. */
conclusion:({get:(request?:boolean|number,defaultValue?:(CheckConclusionState|null))=>Observable<(CheckConclusionState|null)>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The URL from which to find full details of the check run on the integrator's site. */
detailsUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** A reference for the check run on the integrator's system. */
externalId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the check for this check run. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The permalink to the check run summary. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The repository associated with this check run. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this check run. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the check run was started. */
startedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The current status of the check run. */
status:({get:(request?:boolean|number,defaultValue?:CheckStatusState)=>Observable<CheckStatusState>}),
/** A string representing the check run's summary */
summary:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A string representing the check run's text */
text:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A string representing the check run */
title:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this check run. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CheckAnnotationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckAnnotationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CheckAnnotationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckAnnotationRequest>(request: R, defaultValue?:((FieldsSelection<CheckAnnotation, R>|null)[]|null))=>Promise<((FieldsSelection<CheckAnnotation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CheckAnnotation. */
export interface CheckAnnotationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CheckAnnotationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CheckAnnotationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CheckAnnotationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CheckAnnotationRequest>(request: R, defaultValue?:((FieldsSelection<CheckAnnotation, R>|null)[]|null))=>Observable<((FieldsSelection<CheckAnnotation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CheckAnnotationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckAnnotationPromiseChain & {get:<R extends CheckAnnotationRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotation, R>|null))=>Promise<(FieldsSelection<CheckAnnotation, R>|null)>})}


/** An edge in a connection. */
export interface CheckAnnotationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CheckAnnotationObservableChain & {get:<R extends CheckAnnotationRequest>(request: R, defaultValue?:(FieldsSelection<CheckAnnotation, R>|null))=>Observable<(FieldsSelection<CheckAnnotation, R>|null)>})}


/** A single check annotation. */
export interface CheckAnnotationPromiseChain{
/** The annotation's severity level. */
annotationLevel:({get:(request?:boolean|number,defaultValue?:(CheckAnnotationLevel|null))=>Promise<(CheckAnnotationLevel|null)>}),
/** The path to the file that this annotation was made on. */
blobUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The position of this annotation. */
location:(CheckAnnotationSpanPromiseChain & {get:<R extends CheckAnnotationSpanRequest>(request: R, defaultValue?:CheckAnnotationSpan)=>Promise<CheckAnnotationSpan>}),
/** The annotation's message. */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The path that this annotation was made on. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Additional information about the annotation. */
rawDetails:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The annotation's title */
title:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** A single check annotation. */
export interface CheckAnnotationObservableChain{
/** The annotation's severity level. */
annotationLevel:({get:(request?:boolean|number,defaultValue?:(CheckAnnotationLevel|null))=>Observable<(CheckAnnotationLevel|null)>}),
/** The path to the file that this annotation was made on. */
blobUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The position of this annotation. */
location:(CheckAnnotationSpanObservableChain & {get:<R extends CheckAnnotationSpanRequest>(request: R, defaultValue?:CheckAnnotationSpan)=>Observable<CheckAnnotationSpan>}),
/** The annotation's message. */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The path that this annotation was made on. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Additional information about the annotation. */
rawDetails:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The annotation's title */
title:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpanPromiseChain{
/** End position (inclusive). */
end:(CheckAnnotationPositionPromiseChain & {get:<R extends CheckAnnotationPositionRequest>(request: R, defaultValue?:CheckAnnotationPosition)=>Promise<CheckAnnotationPosition>}),
/** Start position (inclusive). */
start:(CheckAnnotationPositionPromiseChain & {get:<R extends CheckAnnotationPositionRequest>(request: R, defaultValue?:CheckAnnotationPosition)=>Promise<CheckAnnotationPosition>})}


/** An inclusive pair of positions for a check annotation. */
export interface CheckAnnotationSpanObservableChain{
/** End position (inclusive). */
end:(CheckAnnotationPositionObservableChain & {get:<R extends CheckAnnotationPositionRequest>(request: R, defaultValue?:CheckAnnotationPosition)=>Observable<CheckAnnotationPosition>}),
/** Start position (inclusive). */
start:(CheckAnnotationPositionObservableChain & {get:<R extends CheckAnnotationPositionRequest>(request: R, defaultValue?:CheckAnnotationPosition)=>Observable<CheckAnnotationPosition>})}


/** A character position in a check annotation. */
export interface CheckAnnotationPositionPromiseChain{
/** Column number (1 indexed). */
column:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Line number (1 indexed). */
line:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A character position in a check annotation. */
export interface CheckAnnotationPositionObservableChain{
/** Column number (1 indexed). */
column:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Line number (1 indexed). */
line:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A Git push. */
export interface PushPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The SHA after the push */
nextSha:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Promise<(Scalars["GitObjectID"]|null)>}),
/** The permalink for this push. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The SHA before the push */
previousSha:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Promise<(Scalars["GitObjectID"]|null)>}),
/** The user who pushed */
pusher:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** The repository that was pushed to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** A Git push. */
export interface PushObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The SHA after the push */
nextSha:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Observable<(Scalars["GitObjectID"]|null)>}),
/** The permalink for this push. */
permalink:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The SHA before the push */
previousSha:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Observable<(Scalars["GitObjectID"]|null)>}),
/** The user who pushed */
pusher:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** The repository that was pushed to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** The connection type for Deployment. */
export interface DeploymentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends DeploymentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<DeploymentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeploymentRequest>(request: R, defaultValue?:((FieldsSelection<Deployment, R>|null)[]|null))=>Promise<((FieldsSelection<Deployment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Deployment. */
export interface DeploymentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends DeploymentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<DeploymentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeploymentRequest>(request: R, defaultValue?:((FieldsSelection<Deployment, R>|null)[]|null))=>Observable<((FieldsSelection<Deployment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface DeploymentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeploymentPromiseChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:(FieldsSelection<Deployment, R>|null))=>Promise<(FieldsSelection<Deployment, R>|null)>})}


/** An edge in a connection. */
export interface DeploymentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeploymentObservableChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:(FieldsSelection<Deployment, R>|null))=>Observable<(FieldsSelection<Deployment, R>|null)>})}


/** Represents triggered deployment instance. */
export interface DeploymentPromiseChain{
/** Identifies the commit sha of the deployment. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
commitOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the actor who triggered the deployment. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Promise<Actor>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The deployment description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The latest environment to which this deployment was made. */
environment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The latest environment to which this deployment was made. */
latestEnvironment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The latest status of this deployment. */
latestStatus:(DeploymentStatusPromiseChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Promise<(FieldsSelection<DeploymentStatus, R>|null)>}),
/** The original environment to which this deployment was made. */
originalEnvironment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Extra information that a deployment system might need. */
payload:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the Ref of the deployment, if the deployment was created by ref. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the repository associated with the deployment. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The current state of the deployment. */
state:({get:(request?:boolean|number,defaultValue?:(DeploymentState|null))=>Promise<(DeploymentState|null)>}),
/** A list of statuses associated with the deployment. */
statuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DeploymentStatusConnectionPromiseChain & {get:<R extends DeploymentStatusConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatusConnection, R>|null))=>Promise<(FieldsSelection<DeploymentStatusConnection, R>|null)>})&(DeploymentStatusConnectionPromiseChain & {get:<R extends DeploymentStatusConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatusConnection, R>|null))=>Promise<(FieldsSelection<DeploymentStatusConnection, R>|null)>}),
/** The deployment task. */
task:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Represents triggered deployment instance. */
export interface DeploymentObservableChain{
/** Identifies the commit sha of the deployment. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the oid of the deployment commit, even if the commit has been deleted. */
commitOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the actor who triggered the deployment. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Observable<Actor>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The deployment description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The latest environment to which this deployment was made. */
environment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The latest environment to which this deployment was made. */
latestEnvironment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The latest status of this deployment. */
latestStatus:(DeploymentStatusObservableChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Observable<(FieldsSelection<DeploymentStatus, R>|null)>}),
/** The original environment to which this deployment was made. */
originalEnvironment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Extra information that a deployment system might need. */
payload:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the Ref of the deployment, if the deployment was created by ref. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the repository associated with the deployment. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The current state of the deployment. */
state:({get:(request?:boolean|number,defaultValue?:(DeploymentState|null))=>Observable<(DeploymentState|null)>}),
/** A list of statuses associated with the deployment. */
statuses:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DeploymentStatusConnectionObservableChain & {get:<R extends DeploymentStatusConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatusConnection, R>|null))=>Observable<(FieldsSelection<DeploymentStatusConnection, R>|null)>})&(DeploymentStatusConnectionObservableChain & {get:<R extends DeploymentStatusConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatusConnection, R>|null))=>Observable<(FieldsSelection<DeploymentStatusConnection, R>|null)>}),
/** The deployment task. */
task:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** Describes the status of a given deployment attempt. */
export interface DeploymentStatusPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the actor who triggered the deployment. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Promise<Actor>}),
/** Identifies the deployment associated with status. */
deployment:(DeploymentPromiseChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:Deployment)=>Promise<Deployment>}),
/** Identifies the description of the deployment. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the environment of the deployment at the time of this deployment status */
environment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the environment URL of the deployment. */
environmentUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the log URL of the deployment. */
logUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** Identifies the current state of the deployment. */
state:({get:(request?:boolean|number,defaultValue?:DeploymentStatusState)=>Promise<DeploymentStatusState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Describes the status of a given deployment attempt. */
export interface DeploymentStatusObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the actor who triggered the deployment. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Observable<Actor>}),
/** Identifies the deployment associated with status. */
deployment:(DeploymentObservableChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:Deployment)=>Observable<Deployment>}),
/** Identifies the description of the deployment. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the environment of the deployment at the time of this deployment status */
environment:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the environment URL of the deployment. */
environmentUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the log URL of the deployment. */
logUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** Identifies the current state of the deployment. */
state:({get:(request?:boolean|number,defaultValue?:DeploymentStatusState)=>Observable<DeploymentStatusState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends DeploymentStatusEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentStatusEdge, R>|null)[]|null))=>Promise<((FieldsSelection<DeploymentStatusEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentStatus, R>|null)[]|null))=>Promise<((FieldsSelection<DeploymentStatus, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for DeploymentStatus. */
export interface DeploymentStatusConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends DeploymentStatusEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentStatusEdge, R>|null)[]|null))=>Observable<((FieldsSelection<DeploymentStatusEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:((FieldsSelection<DeploymentStatus, R>|null)[]|null))=>Observable<((FieldsSelection<DeploymentStatus, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface DeploymentStatusEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeploymentStatusPromiseChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Promise<(FieldsSelection<DeploymentStatus, R>|null)>})}


/** An edge in a connection. */
export interface DeploymentStatusEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeploymentStatusObservableChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Observable<(FieldsSelection<DeploymentStatus, R>|null)>})}


/** The connection type for Commit. */
export interface CommitHistoryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitRequest>(request: R, defaultValue?:((FieldsSelection<Commit, R>|null)[]|null))=>Promise<((FieldsSelection<Commit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Commit. */
export interface CommitHistoryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitRequest>(request: R, defaultValue?:((FieldsSelection<Commit, R>|null)[]|null))=>Observable<((FieldsSelection<Commit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CommitEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>})}


/** An edge in a connection. */
export interface CommitEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>})}


/** The connection type for Commit. */
export interface CommitConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitRequest>(request: R, defaultValue?:((FieldsSelection<Commit, R>|null)[]|null))=>Promise<((FieldsSelection<Commit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Commit. */
export interface CommitConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CommitEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CommitRequest>(request: R, defaultValue?:((FieldsSelection<Commit, R>|null)[]|null))=>Observable<((FieldsSelection<Commit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignaturePromiseChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Promise<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export interface GitSignatureObservableChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Observable<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Represents a commit status. */
export interface StatusPromiseChain{
/** The commit this status is attached to. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Looks up an individual status context by context name. */
context:((args:{
/** The context name. */
name: Scalars["String"]})=>StatusContextPromiseChain & {get:<R extends StatusContextRequest>(request: R, defaultValue?:(FieldsSelection<StatusContext, R>|null))=>Promise<(FieldsSelection<StatusContext, R>|null)>}),
/** The individual status contexts for this commit. */
contexts:({get:<R extends StatusContextRequest>(request: R, defaultValue?:StatusContext[])=>Promise<StatusContext[]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The combined commit status. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Promise<StatusState>})}


/** Represents a commit status. */
export interface StatusObservableChain{
/** The commit this status is attached to. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Looks up an individual status context by context name. */
context:((args:{
/** The context name. */
name: Scalars["String"]})=>StatusContextObservableChain & {get:<R extends StatusContextRequest>(request: R, defaultValue?:(FieldsSelection<StatusContext, R>|null))=>Observable<(FieldsSelection<StatusContext, R>|null)>}),
/** The individual status contexts for this commit. */
contexts:({get:<R extends StatusContextRequest>(request: R, defaultValue?:StatusContext[])=>Observable<StatusContext[]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The combined commit status. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Observable<StatusState>})}


/** Represents an individual commit status context */
export interface StatusContextPromiseChain{
/** The avatar of the OAuth application or the user that created the status */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** This commit this status context is attached to. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** The name of this status context. */
context:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The actor who created this status context. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** The description for this status context. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The state of this status context. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Promise<StatusState>}),
/** The URL for this status context. */
targetUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Represents an individual commit status context */
export interface StatusContextObservableChain{
/** The avatar of the OAuth application or the user that created the status */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** This commit this status context is attached to. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** The name of this status context. */
context:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The actor who created this status context. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** The description for this status context. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The state of this status context. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Observable<StatusState>}),
/** The URL for this status context. */
targetUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollupPromiseChain{
/** The commit the status and check runs are attached to. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** A list of status contexts and check runs for this commit. */
contexts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>StatusCheckRollupContextConnectionPromiseChain & {get:<R extends StatusCheckRollupContextConnectionRequest>(request: R, defaultValue?:StatusCheckRollupContextConnection)=>Promise<StatusCheckRollupContextConnection>})&(StatusCheckRollupContextConnectionPromiseChain & {get:<R extends StatusCheckRollupContextConnectionRequest>(request: R, defaultValue?:StatusCheckRollupContextConnection)=>Promise<StatusCheckRollupContextConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The combined status for the commit. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Promise<StatusState>})}


/** Represents the rollup for both the check runs and status for a commit. */
export interface StatusCheckRollupObservableChain{
/** The commit the status and check runs are attached to. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** A list of status contexts and check runs for this commit. */
contexts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>StatusCheckRollupContextConnectionObservableChain & {get:<R extends StatusCheckRollupContextConnectionRequest>(request: R, defaultValue?:StatusCheckRollupContextConnection)=>Observable<StatusCheckRollupContextConnection>})&(StatusCheckRollupContextConnectionObservableChain & {get:<R extends StatusCheckRollupContextConnectionRequest>(request: R, defaultValue?:StatusCheckRollupContextConnection)=>Observable<StatusCheckRollupContextConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The combined status for the commit. */
state:({get:(request?:boolean|number,defaultValue?:StatusState)=>Observable<StatusState>})}


/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends StatusCheckRollupContextEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StatusCheckRollupContextEdge, R>|null)[]|null))=>Promise<((FieldsSelection<StatusCheckRollupContextEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends StatusCheckRollupContextRequest>(request: R, defaultValue?:((FieldsSelection<StatusCheckRollupContext, R>|null)[]|null))=>Promise<((FieldsSelection<StatusCheckRollupContext, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for StatusCheckRollupContext. */
export interface StatusCheckRollupContextConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends StatusCheckRollupContextEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StatusCheckRollupContextEdge, R>|null)[]|null))=>Observable<((FieldsSelection<StatusCheckRollupContextEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends StatusCheckRollupContextRequest>(request: R, defaultValue?:((FieldsSelection<StatusCheckRollupContext, R>|null)[]|null))=>Observable<((FieldsSelection<StatusCheckRollupContext, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface StatusCheckRollupContextEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends StatusCheckRollupContextRequest>(request: R, defaultValue?:(FieldsSelection<StatusCheckRollupContext, R>|null))=>Promise<(FieldsSelection<StatusCheckRollupContext, R>|null)>})}


/** An edge in a connection. */
export interface StatusCheckRollupContextEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends StatusCheckRollupContextRequest>(request: R, defaultValue?:(FieldsSelection<StatusCheckRollupContext, R>|null))=>Observable<(FieldsSelection<StatusCheckRollupContext, R>|null)>})}


/** The connection type for Submodule. */
export interface SubmoduleConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SubmoduleEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SubmoduleEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SubmoduleEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SubmoduleRequest>(request: R, defaultValue?:((FieldsSelection<Submodule, R>|null)[]|null))=>Promise<((FieldsSelection<Submodule, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Submodule. */
export interface SubmoduleConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SubmoduleEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SubmoduleEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SubmoduleEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SubmoduleRequest>(request: R, defaultValue?:((FieldsSelection<Submodule, R>|null)[]|null))=>Observable<((FieldsSelection<Submodule, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SubmoduleEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SubmodulePromiseChain & {get:<R extends SubmoduleRequest>(request: R, defaultValue?:(FieldsSelection<Submodule, R>|null))=>Promise<(FieldsSelection<Submodule, R>|null)>})}


/** An edge in a connection. */
export interface SubmoduleEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SubmoduleObservableChain & {get:<R extends SubmoduleRequest>(request: R, defaultValue?:(FieldsSelection<Submodule, R>|null))=>Observable<(FieldsSelection<Submodule, R>|null)>})}


/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface SubmodulePromiseChain{
/** The branch of the upstream submodule for tracking updates */
branch:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The git URL of the submodule repository */
gitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The name of the submodule in .gitmodules */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The path in the superproject that this submodule is located in */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The commit revision of the subproject repository being tracked by the submodule */
subprojectCommitOid:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Promise<(Scalars["GitObjectID"]|null)>})}


/** A pointer to a repository at a specific revision embedded inside another repository. */
export interface SubmoduleObservableChain{
/** The branch of the upstream submodule for tracking updates */
branch:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The git URL of the submodule repository */
gitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The name of the submodule in .gitmodules */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The path in the superproject that this submodule is located in */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The commit revision of the subproject repository being tracked by the submodule */
subprojectCommitOid:({get:(request?:boolean|number,defaultValue?:(Scalars["GitObjectID"]|null))=>Observable<(Scalars["GitObjectID"]|null)>})}


/** Represents a Git tree. */
export interface TreePromiseChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of tree entries. */
entries:({get:<R extends TreeEntryRequest>(request: R, defaultValue?:(TreeEntry[]|null))=>Promise<(TreeEntry[]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** Represents a Git tree. */
export interface TreeObservableChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of tree entries. */
entries:({get:<R extends TreeEntryRequest>(request: R, defaultValue?:(TreeEntry[]|null))=>Observable<(TreeEntry[]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** Represents a Git tree entry. */
export interface TreeEntryPromiseChain{
/** Entry file mode. */
mode:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Entry file name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Entry file object. */
object:(GitObjectPromiseChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Promise<(FieldsSelection<GitObject, R>|null)>}),
/** Entry file Git object ID. */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The Repository the tree entry belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
submodule:(SubmodulePromiseChain & {get:<R extends SubmoduleRequest>(request: R, defaultValue?:(FieldsSelection<Submodule, R>|null))=>Promise<(FieldsSelection<Submodule, R>|null)>}),
/** Entry file type. */
type:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a Git tree entry. */
export interface TreeEntryObservableChain{
/** Entry file mode. */
mode:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Entry file name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Entry file object. */
object:(GitObjectObservableChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:(FieldsSelection<GitObject, R>|null))=>Observable<(FieldsSelection<GitObject, R>|null)>}),
/** Entry file Git object ID. */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The Repository the tree entry belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
submodule:(SubmoduleObservableChain & {get:<R extends SubmoduleRequest>(request: R, defaultValue?:(FieldsSelection<Submodule, R>|null))=>Observable<(FieldsSelection<Submodule, R>|null)>}),
/** Entry file type. */
type:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for DependencyGraphManifest. */
export interface DependencyGraphManifestConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends DependencyGraphManifestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphManifestEdge, R>|null)[]|null))=>Promise<((FieldsSelection<DependencyGraphManifestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DependencyGraphManifestRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphManifest, R>|null)[]|null))=>Promise<((FieldsSelection<DependencyGraphManifest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for DependencyGraphManifest. */
export interface DependencyGraphManifestConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends DependencyGraphManifestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphManifestEdge, R>|null)[]|null))=>Observable<((FieldsSelection<DependencyGraphManifestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DependencyGraphManifestRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphManifest, R>|null)[]|null))=>Observable<((FieldsSelection<DependencyGraphManifest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface DependencyGraphManifestEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DependencyGraphManifestPromiseChain & {get:<R extends DependencyGraphManifestRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifest, R>|null))=>Promise<(FieldsSelection<DependencyGraphManifest, R>|null)>})}


/** An edge in a connection. */
export interface DependencyGraphManifestEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DependencyGraphManifestObservableChain & {get:<R extends DependencyGraphManifestRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphManifest, R>|null))=>Observable<(FieldsSelection<DependencyGraphManifest, R>|null)>})}


/** Dependency manifest for a repository */
export interface DependencyGraphManifestPromiseChain{
/** Path to view the manifest file blob */
blobPath:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of manifest dependencies */
dependencies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DependencyGraphDependencyConnectionPromiseChain & {get:<R extends DependencyGraphDependencyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependencyConnection, R>|null))=>Promise<(FieldsSelection<DependencyGraphDependencyConnection, R>|null)>})&(DependencyGraphDependencyConnectionPromiseChain & {get:<R extends DependencyGraphDependencyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependencyConnection, R>|null))=>Promise<(FieldsSelection<DependencyGraphDependencyConnection, R>|null)>}),
/** The number of dependencies listed in the manifest */
dependenciesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Is the manifest too big to parse? */
exceedsMaxSize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Fully qualified manifest filename */
filename:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Were we able to parse the manifest? */
parseable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The repository containing the manifest */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** Dependency manifest for a repository */
export interface DependencyGraphManifestObservableChain{
/** Path to view the manifest file blob */
blobPath:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of manifest dependencies */
dependencies:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>DependencyGraphDependencyConnectionObservableChain & {get:<R extends DependencyGraphDependencyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependencyConnection, R>|null))=>Observable<(FieldsSelection<DependencyGraphDependencyConnection, R>|null)>})&(DependencyGraphDependencyConnectionObservableChain & {get:<R extends DependencyGraphDependencyConnectionRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependencyConnection, R>|null))=>Observable<(FieldsSelection<DependencyGraphDependencyConnection, R>|null)>}),
/** The number of dependencies listed in the manifest */
dependenciesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Is the manifest too big to parse? */
exceedsMaxSize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Fully qualified manifest filename */
filename:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Were we able to parse the manifest? */
parseable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The repository containing the manifest */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** The connection type for DependencyGraphDependency. */
export interface DependencyGraphDependencyConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends DependencyGraphDependencyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphDependencyEdge, R>|null)[]|null))=>Promise<((FieldsSelection<DependencyGraphDependencyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DependencyGraphDependencyRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphDependency, R>|null)[]|null))=>Promise<((FieldsSelection<DependencyGraphDependency, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for DependencyGraphDependency. */
export interface DependencyGraphDependencyConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends DependencyGraphDependencyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphDependencyEdge, R>|null)[]|null))=>Observable<((FieldsSelection<DependencyGraphDependencyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DependencyGraphDependencyRequest>(request: R, defaultValue?:((FieldsSelection<DependencyGraphDependency, R>|null)[]|null))=>Observable<((FieldsSelection<DependencyGraphDependency, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface DependencyGraphDependencyEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DependencyGraphDependencyPromiseChain & {get:<R extends DependencyGraphDependencyRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependency, R>|null))=>Promise<(FieldsSelection<DependencyGraphDependency, R>|null)>})}


/** An edge in a connection. */
export interface DependencyGraphDependencyEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DependencyGraphDependencyObservableChain & {get:<R extends DependencyGraphDependencyRequest>(request: R, defaultValue?:(FieldsSelection<DependencyGraphDependency, R>|null))=>Observable<(FieldsSelection<DependencyGraphDependency, R>|null)>})}


/** A dependency manifest entry */
export interface DependencyGraphDependencyPromiseChain{
/** Does the dependency itself have dependencies? */
hasDependencies:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The dependency package manager */
packageManager:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The required package name */
packageName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The repository containing the package */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The dependency version requirements */
requirements:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A dependency manifest entry */
export interface DependencyGraphDependencyObservableChain{
/** Does the dependency itself have dependencies? */
hasDependencies:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The dependency package manager */
packageManager:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The required package name */
packageName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The repository containing the package */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The dependency version requirements */
requirements:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for DeployKey. */
export interface DeployKeyConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends DeployKeyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeployKeyEdge, R>|null)[]|null))=>Promise<((FieldsSelection<DeployKeyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeployKeyRequest>(request: R, defaultValue?:((FieldsSelection<DeployKey, R>|null)[]|null))=>Promise<((FieldsSelection<DeployKey, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for DeployKey. */
export interface DeployKeyConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends DeployKeyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<DeployKeyEdge, R>|null)[]|null))=>Observable<((FieldsSelection<DeployKeyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends DeployKeyRequest>(request: R, defaultValue?:((FieldsSelection<DeployKey, R>|null)[]|null))=>Observable<((FieldsSelection<DeployKey, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface DeployKeyEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeployKeyPromiseChain & {get:<R extends DeployKeyRequest>(request: R, defaultValue?:(FieldsSelection<DeployKey, R>|null))=>Promise<(FieldsSelection<DeployKey, R>|null)>})}


/** An edge in a connection. */
export interface DeployKeyEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(DeployKeyObservableChain & {get:<R extends DeployKeyRequest>(request: R, defaultValue?:(FieldsSelection<DeployKey, R>|null))=>Observable<(FieldsSelection<DeployKey, R>|null)>})}


/** A repository deploy key. */
export interface DeployKeyPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The deploy key. */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether or not the deploy key is read only. */
readOnly:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The deploy key title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether or not the deploy key has been verified. */
verified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A repository deploy key. */
export interface DeployKeyObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The deploy key. */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether or not the deploy key is read only. */
readOnly:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The deploy key title. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether or not the deploy key has been verified. */
verified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A funding platform link for a repository. */
export interface FundingLinkPromiseChain{
/** The funding platform this link is for. */
platform:({get:(request?:boolean|number,defaultValue?:FundingPlatform)=>Promise<FundingPlatform>}),
/** The configured URL for this funding link. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A funding platform link for a repository. */
export interface FundingLinkObservableChain{
/** The funding platform this link is for. */
platform:({get:(request?:boolean|number,defaultValue?:FundingPlatform)=>Observable<FundingPlatform>}),
/** The configured URL for this funding link. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A list of languages associated with the parent. */
export interface LanguageConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends LanguageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<LanguageEdge, R>|null)[]|null))=>Promise<((FieldsSelection<LanguageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends LanguageRequest>(request: R, defaultValue?:((FieldsSelection<Language, R>|null)[]|null))=>Promise<((FieldsSelection<Language, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The total size in bytes of files written in that language. */
totalSize:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A list of languages associated with the parent. */
export interface LanguageConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends LanguageEdgeRequest>(request: R, defaultValue?:((FieldsSelection<LanguageEdge, R>|null)[]|null))=>Observable<((FieldsSelection<LanguageEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends LanguageRequest>(request: R, defaultValue?:((FieldsSelection<Language, R>|null)[]|null))=>Observable<((FieldsSelection<Language, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The total size in bytes of files written in that language. */
totalSize:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents the language of a repository. */
export interface LanguageEdgePromiseChain{cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(LanguagePromiseChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:Language)=>Promise<Language>}),
/** The number of bytes of code written in the language. */
size:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents the language of a repository. */
export interface LanguageEdgeObservableChain{cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(LanguageObservableChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:Language)=>Observable<Language>}),
/** The number of bytes of code written in the language. */
size:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a given language found in repositories. */
export interface LanguagePromiseChain{
/** The color defined for the current language. */
color:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the current language. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a given language found in repositories. */
export interface LanguageObservableChain{
/** The color defined for the current language. */
color:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the current language. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a Milestone object on a given repository. */
export interface MilestonePromiseChain{
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the actor who created the milestone. */
creator:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the description of the milestone. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the due date of the milestone. */
dueOn:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Just for debugging on review-lab */
issuePrioritiesDebug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of issues associated with the milestone. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>})&(IssueConnectionPromiseChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Promise<IssueConnection>}),
/** Identifies the number of the milestone. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of pull requests associated with the milestone. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>})&(PullRequestConnectionPromiseChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Promise<PullRequestConnection>}),
/** The repository associated with this milestone. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this milestone */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the state of the milestone. */
state:({get:(request?:boolean|number,defaultValue?:MilestoneState)=>Promise<MilestoneState>}),
/** Identifies the title of the milestone. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this milestone */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a Milestone object on a given repository. */
export interface MilestoneObservableChain{
/** `true` if the object is closed (definition of closed may depend on type) */
closed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was closed. */
closedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the actor who created the milestone. */
creator:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the description of the milestone. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the due date of the milestone. */
dueOn:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Just for debugging on review-lab */
issuePrioritiesDebug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of issues associated with the milestone. */
issues:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Filtering options for issues returned from the connection. */
filterBy?: (IssueFilters|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for issues returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the issues by. */
states?: (IssueState[]|null)})=>IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>})&(IssueConnectionObservableChain & {get:<R extends IssueConnectionRequest>(request: R, defaultValue?:IssueConnection)=>Observable<IssueConnection>}),
/** Identifies the number of the milestone. */
number:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of pull requests associated with the milestone. */
pullRequests:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** The base ref name to filter the pull requests by. */
baseRefName?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** The head ref name to filter the pull requests by. */
headRefName?: (Scalars["String"]|null),
/** A list of label names to filter the pull requests by. */
labels?: (Scalars["String"][]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pull requests returned from the connection. */
orderBy?: (IssueOrder|null),
/** A list of states to filter the pull requests by. */
states?: (PullRequestState[]|null)})=>PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>})&(PullRequestConnectionObservableChain & {get:<R extends PullRequestConnectionRequest>(request: R, defaultValue?:PullRequestConnection)=>Observable<PullRequestConnection>}),
/** The repository associated with this milestone. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this milestone */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the state of the milestone. */
state:({get:(request?:boolean|number,defaultValue?:MilestoneState)=>Observable<MilestoneState>}),
/** Identifies the title of the milestone. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this milestone */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for Milestone. */
export interface MilestoneConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends MilestoneEdgeRequest>(request: R, defaultValue?:((FieldsSelection<MilestoneEdge, R>|null)[]|null))=>Promise<((FieldsSelection<MilestoneEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends MilestoneRequest>(request: R, defaultValue?:((FieldsSelection<Milestone, R>|null)[]|null))=>Promise<((FieldsSelection<Milestone, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Milestone. */
export interface MilestoneConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends MilestoneEdgeRequest>(request: R, defaultValue?:((FieldsSelection<MilestoneEdge, R>|null)[]|null))=>Observable<((FieldsSelection<MilestoneEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends MilestoneRequest>(request: R, defaultValue?:((FieldsSelection<Milestone, R>|null)[]|null))=>Observable<((FieldsSelection<Milestone, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface MilestoneEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(MilestonePromiseChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Promise<(FieldsSelection<Milestone, R>|null)>})}


/** An edge in a connection. */
export interface MilestoneEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(MilestoneObservableChain & {get:<R extends MilestoneRequest>(request: R, defaultValue?:(FieldsSelection<Milestone, R>|null))=>Observable<(FieldsSelection<Milestone, R>|null)>})}


/** The connection type for PinnedIssue. */
export interface PinnedIssueConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PinnedIssueEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PinnedIssueEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PinnedIssueEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PinnedIssueRequest>(request: R, defaultValue?:((FieldsSelection<PinnedIssue, R>|null)[]|null))=>Promise<((FieldsSelection<PinnedIssue, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PinnedIssue. */
export interface PinnedIssueConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PinnedIssueEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PinnedIssueEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PinnedIssueEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PinnedIssueRequest>(request: R, defaultValue?:((FieldsSelection<PinnedIssue, R>|null)[]|null))=>Observable<((FieldsSelection<PinnedIssue, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PinnedIssueEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PinnedIssuePromiseChain & {get:<R extends PinnedIssueRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssue, R>|null))=>Promise<(FieldsSelection<PinnedIssue, R>|null)>})}


/** An edge in a connection. */
export interface PinnedIssueEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PinnedIssueObservableChain & {get:<R extends PinnedIssueRequest>(request: R, defaultValue?:(FieldsSelection<PinnedIssue, R>|null))=>Observable<(FieldsSelection<PinnedIssue, R>|null)>})}


/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssuePromiseChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The issue that was pinned. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>}),
/** The actor that pinned this issue. */
pinnedBy:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Promise<Actor>}),
/** The repository that this issue was pinned to. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** A Pinned Issue is a issue pinned to a repository's index page. */
export interface PinnedIssueObservableChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The issue that was pinned. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>}),
/** The actor that pinned this issue. */
pinnedBy:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:Actor)=>Observable<Actor>}),
/** The repository that this issue was pinned to. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** The connection type for Release. */
export interface ReleaseConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReleaseEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReleaseEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReleaseRequest>(request: R, defaultValue?:((FieldsSelection<Release, R>|null)[]|null))=>Promise<((FieldsSelection<Release, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Release. */
export interface ReleaseConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReleaseEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReleaseEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReleaseEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReleaseRequest>(request: R, defaultValue?:((FieldsSelection<Release, R>|null)[]|null))=>Observable<((FieldsSelection<Release, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ReleaseEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReleasePromiseChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Promise<(FieldsSelection<Release, R>|null)>})}


/** An edge in a connection. */
export interface ReleaseEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReleaseObservableChain & {get:<R extends ReleaseRequest>(request: R, defaultValue?:(FieldsSelection<Release, R>|null))=>Observable<(FieldsSelection<Release, R>|null)>})}


/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RepositoryTopicEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryTopicEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryTopicEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryTopicRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryTopic, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryTopic, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RepositoryTopic. */
export interface RepositoryTopicConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RepositoryTopicEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryTopicEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryTopicEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryTopicRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryTopic, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryTopic, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RepositoryTopicEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryTopicPromiseChain & {get:<R extends RepositoryTopicRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryTopic, R>|null))=>Promise<(FieldsSelection<RepositoryTopic, R>|null)>})}


/** An edge in a connection. */
export interface RepositoryTopicEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryTopicObservableChain & {get:<R extends RepositoryTopicRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryTopic, R>|null))=>Observable<(FieldsSelection<RepositoryTopic, R>|null)>})}


/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopicPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The HTTP path for this repository-topic. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The topic. */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:Topic)=>Promise<Topic>}),
/** The HTTP URL for this repository-topic. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A repository-topic connects a repository to a topic. */
export interface RepositoryTopicObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The HTTP path for this repository-topic. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The topic. */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:Topic)=>Observable<Topic>}),
/** The HTTP URL for this repository-topic. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RepositoryVulnerabilityAlertEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryVulnerabilityAlertEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryVulnerabilityAlertEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryVulnerabilityAlertRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryVulnerabilityAlert, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryVulnerabilityAlert, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RepositoryVulnerabilityAlert. */
export interface RepositoryVulnerabilityAlertConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RepositoryVulnerabilityAlertEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryVulnerabilityAlertEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryVulnerabilityAlertEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryVulnerabilityAlertRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryVulnerabilityAlert, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryVulnerabilityAlert, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryVulnerabilityAlertPromiseChain & {get:<R extends RepositoryVulnerabilityAlertRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlert, R>|null))=>Promise<(FieldsSelection<RepositoryVulnerabilityAlert, R>|null)>})}


/** An edge in a connection. */
export interface RepositoryVulnerabilityAlertEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryVulnerabilityAlertObservableChain & {get:<R extends RepositoryVulnerabilityAlertRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryVulnerabilityAlert, R>|null))=>Observable<(FieldsSelection<RepositoryVulnerabilityAlert, R>|null)>})}


/** A alert for a repository with an affected vulnerability. */
export interface RepositoryVulnerabilityAlertPromiseChain{
/** When was the alert created? */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The reason the alert was dismissed */
dismissReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** When was the alert dimissed? */
dismissedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The user who dismissed the alert */
dismisser:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The associated repository */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The associated security advisory */
securityAdvisory:(SecurityAdvisoryPromiseChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Promise<(FieldsSelection<SecurityAdvisory, R>|null)>}),
/** The associated security vulnerablity */
securityVulnerability:(SecurityVulnerabilityPromiseChain & {get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:(FieldsSelection<SecurityVulnerability, R>|null))=>Promise<(FieldsSelection<SecurityVulnerability, R>|null)>}),
/** The vulnerable manifest filename */
vulnerableManifestFilename:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The vulnerable manifest path */
vulnerableManifestPath:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The vulnerable requirements */
vulnerableRequirements:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** A alert for a repository with an affected vulnerability. */
export interface RepositoryVulnerabilityAlertObservableChain{
/** When was the alert created? */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The reason the alert was dismissed */
dismissReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** When was the alert dimissed? */
dismissedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The user who dismissed the alert */
dismisser:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The associated repository */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The associated security advisory */
securityAdvisory:(SecurityAdvisoryObservableChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Observable<(FieldsSelection<SecurityAdvisory, R>|null)>}),
/** The associated security vulnerablity */
securityVulnerability:(SecurityVulnerabilityObservableChain & {get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:(FieldsSelection<SecurityVulnerability, R>|null))=>Observable<(FieldsSelection<SecurityVulnerability, R>|null)>}),
/** The vulnerable manifest filename */
vulnerableManifestFilename:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The vulnerable manifest path */
vulnerableManifestPath:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The vulnerable requirements */
vulnerableRequirements:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** A GitHub Security Advisory */
export interface SecurityAdvisoryPromiseChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** This is a long plaintext description of the advisory */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The GitHub Security Advisory ID */
ghsaId:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** A list of identifiers for this advisory */
identifiers:({get:<R extends SecurityAdvisoryIdentifierRequest>(request: R, defaultValue?:SecurityAdvisoryIdentifier[])=>Promise<SecurityAdvisoryIdentifier[]>}),
/** The organization that originated the advisory */
origin:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The permalink for the advisory */
permalink:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** When the advisory was published */
publishedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** A list of references for this advisory */
references:({get:<R extends SecurityAdvisoryReferenceRequest>(request: R, defaultValue?:SecurityAdvisoryReference[])=>Promise<SecurityAdvisoryReference[]>}),
/** The severity of the advisory */
severity:({get:(request?:boolean|number,defaultValue?:SecurityAdvisorySeverity)=>Promise<SecurityAdvisorySeverity>}),
/** A short plaintext summary of the advisory */
summary:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** When the advisory was last updated */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Vulnerabilities associated with this Advisory */
vulnerabilities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** An ecosystem to filter vulnerabilities by. */
ecosystem?: (SecurityAdvisoryEcosystem|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityVulnerabilityOrder|null),
/** A package name to filter vulnerabilities by. */
package?: (Scalars["String"]|null),
/** A list of severities to filter vulnerabilities by. */
severities?: (SecurityAdvisorySeverity[]|null)})=>SecurityVulnerabilityConnectionPromiseChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Promise<SecurityVulnerabilityConnection>})&(SecurityVulnerabilityConnectionPromiseChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Promise<SecurityVulnerabilityConnection>}),
/** When the advisory was withdrawn, if it has been withdrawn */
withdrawnAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>})}


/** A GitHub Security Advisory */
export interface SecurityAdvisoryObservableChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** This is a long plaintext description of the advisory */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The GitHub Security Advisory ID */
ghsaId:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** A list of identifiers for this advisory */
identifiers:({get:<R extends SecurityAdvisoryIdentifierRequest>(request: R, defaultValue?:SecurityAdvisoryIdentifier[])=>Observable<SecurityAdvisoryIdentifier[]>}),
/** The organization that originated the advisory */
origin:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The permalink for the advisory */
permalink:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** When the advisory was published */
publishedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** A list of references for this advisory */
references:({get:<R extends SecurityAdvisoryReferenceRequest>(request: R, defaultValue?:SecurityAdvisoryReference[])=>Observable<SecurityAdvisoryReference[]>}),
/** The severity of the advisory */
severity:({get:(request?:boolean|number,defaultValue?:SecurityAdvisorySeverity)=>Observable<SecurityAdvisorySeverity>}),
/** A short plaintext summary of the advisory */
summary:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** When the advisory was last updated */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Vulnerabilities associated with this Advisory */
vulnerabilities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** An ecosystem to filter vulnerabilities by. */
ecosystem?: (SecurityAdvisoryEcosystem|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for the returned topics. */
orderBy?: (SecurityVulnerabilityOrder|null),
/** A package name to filter vulnerabilities by. */
package?: (Scalars["String"]|null),
/** A list of severities to filter vulnerabilities by. */
severities?: (SecurityAdvisorySeverity[]|null)})=>SecurityVulnerabilityConnectionObservableChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Observable<SecurityVulnerabilityConnection>})&(SecurityVulnerabilityConnectionObservableChain & {get:<R extends SecurityVulnerabilityConnectionRequest>(request: R, defaultValue?:SecurityVulnerabilityConnection)=>Observable<SecurityVulnerabilityConnection>}),
/** When the advisory was withdrawn, if it has been withdrawn */
withdrawnAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>})}


/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifierPromiseChain{
/** The identifier type, e.g. GHSA, CVE */
type:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The identifier */
value:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A GitHub Security Advisory Identifier */
export interface SecurityAdvisoryIdentifierObservableChain{
/** The identifier type, e.g. GHSA, CVE */
type:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The identifier */
value:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReferencePromiseChain{
/** A publicly accessible reference */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A GitHub Security Advisory Reference */
export interface SecurityAdvisoryReferenceObservableChain{
/** A publicly accessible reference */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SecurityVulnerabilityEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SecurityVulnerabilityEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SecurityVulnerabilityEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:((FieldsSelection<SecurityVulnerability, R>|null)[]|null))=>Promise<((FieldsSelection<SecurityVulnerability, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for SecurityVulnerability. */
export interface SecurityVulnerabilityConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SecurityVulnerabilityEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SecurityVulnerabilityEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SecurityVulnerabilityEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:((FieldsSelection<SecurityVulnerability, R>|null)[]|null))=>Observable<((FieldsSelection<SecurityVulnerability, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SecurityVulnerabilityEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SecurityVulnerabilityPromiseChain & {get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:(FieldsSelection<SecurityVulnerability, R>|null))=>Promise<(FieldsSelection<SecurityVulnerability, R>|null)>})}


/** An edge in a connection. */
export interface SecurityVulnerabilityEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SecurityVulnerabilityObservableChain & {get:<R extends SecurityVulnerabilityRequest>(request: R, defaultValue?:(FieldsSelection<SecurityVulnerability, R>|null))=>Observable<(FieldsSelection<SecurityVulnerability, R>|null)>})}


/** An individual vulnerability within an Advisory */
export interface SecurityVulnerabilityPromiseChain{
/** The Advisory associated with this Vulnerability */
advisory:(SecurityAdvisoryPromiseChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:SecurityAdvisory)=>Promise<SecurityAdvisory>}),
/** The first version containing a fix for the vulnerability */
firstPatchedVersion:(SecurityAdvisoryPackageVersionPromiseChain & {get:<R extends SecurityAdvisoryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisoryPackageVersion, R>|null))=>Promise<(FieldsSelection<SecurityAdvisoryPackageVersion, R>|null)>}),
/** A description of the vulnerable package */
package:(SecurityAdvisoryPackagePromiseChain & {get:<R extends SecurityAdvisoryPackageRequest>(request: R, defaultValue?:SecurityAdvisoryPackage)=>Promise<SecurityAdvisoryPackage>}),
/** The severity of the vulnerability within this package */
severity:({get:(request?:boolean|number,defaultValue?:SecurityAdvisorySeverity)=>Promise<SecurityAdvisorySeverity>}),
/** When the vulnerability was last updated */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/**
 * A string that describes the vulnerable package versions.
 * This string follows a basic syntax with a few forms.
 * + `= 0.2.0` denotes a single vulnerable version.
 * + `<= 1.0.8` denotes a version range up to and including the specified version
 * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
 * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
 * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
 */
vulnerableVersionRange:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** An individual vulnerability within an Advisory */
export interface SecurityVulnerabilityObservableChain{
/** The Advisory associated with this Vulnerability */
advisory:(SecurityAdvisoryObservableChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:SecurityAdvisory)=>Observable<SecurityAdvisory>}),
/** The first version containing a fix for the vulnerability */
firstPatchedVersion:(SecurityAdvisoryPackageVersionObservableChain & {get:<R extends SecurityAdvisoryPackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisoryPackageVersion, R>|null))=>Observable<(FieldsSelection<SecurityAdvisoryPackageVersion, R>|null)>}),
/** A description of the vulnerable package */
package:(SecurityAdvisoryPackageObservableChain & {get:<R extends SecurityAdvisoryPackageRequest>(request: R, defaultValue?:SecurityAdvisoryPackage)=>Observable<SecurityAdvisoryPackage>}),
/** The severity of the vulnerability within this package */
severity:({get:(request?:boolean|number,defaultValue?:SecurityAdvisorySeverity)=>Observable<SecurityAdvisorySeverity>}),
/** When the vulnerability was last updated */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/**
 * A string that describes the vulnerable package versions.
 * This string follows a basic syntax with a few forms.
 * + `= 0.2.0` denotes a single vulnerable version.
 * + `<= 1.0.8` denotes a version range up to and including the specified version
 * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
 * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
 * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
 */
vulnerableVersionRange:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** An individual package version */
export interface SecurityAdvisoryPackageVersionPromiseChain{
/** The package name or version */
identifier:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** An individual package version */
export interface SecurityAdvisoryPackageVersionObservableChain{
/** The package name or version */
identifier:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** An individual package */
export interface SecurityAdvisoryPackagePromiseChain{
/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
ecosystem:({get:(request?:boolean|number,defaultValue?:SecurityAdvisoryEcosystem)=>Promise<SecurityAdvisoryEcosystem>}),
/** The package name */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** An individual package */
export interface SecurityAdvisoryPackageObservableChain{
/** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
ecosystem:({get:(request?:boolean|number,defaultValue?:SecurityAdvisoryEcosystem)=>Observable<SecurityAdvisoryEcosystem>}),
/** The package name */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for IssueComment. */
export interface IssueCommentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends IssueCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueCommentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<IssueCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueCommentRequest>(request: R, defaultValue?:((FieldsSelection<IssueComment, R>|null)[]|null))=>Promise<((FieldsSelection<IssueComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for IssueComment. */
export interface IssueCommentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends IssueCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueCommentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<IssueCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueCommentRequest>(request: R, defaultValue?:((FieldsSelection<IssueComment, R>|null)[]|null))=>Observable<((FieldsSelection<IssueComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface IssueCommentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IssueCommentPromiseChain & {get:<R extends IssueCommentRequest>(request: R, defaultValue?:(FieldsSelection<IssueComment, R>|null))=>Promise<(FieldsSelection<IssueComment, R>|null)>})}


/** An edge in a connection. */
export interface IssueCommentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IssueCommentObservableChain & {get:<R extends IssueCommentRequest>(request: R, defaultValue?:(FieldsSelection<IssueComment, R>|null))=>Observable<(FieldsSelection<IssueComment, R>|null)>})}


/** Represents a comment on an Issue. */
export interface IssueCommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the issue associated with the comment. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/**
 * Returns the pull request associated with the comment, if this comment was made on a
 * pull request.
 */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this issue comment */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this issue comment */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a comment on an Issue. */
export interface IssueCommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** The body as Markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the issue associated with the comment. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/**
 * Returns the pull request associated with the comment, if this comment was made on a
 * pull request.
 */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this issue comment */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this issue comment */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Detail needed to display a hovercard for a user */
export interface HovercardPromiseChain{
/** Each of the contexts for this hovercard */
contexts:({get:<R extends HovercardContextRequest>(request: R, defaultValue?:HovercardContext[])=>Promise<HovercardContext[]>})}


/** Detail needed to display a hovercard for a user */
export interface HovercardObservableChain{
/** Each of the contexts for this hovercard */
contexts:({get:<R extends HovercardContextRequest>(request: R, defaultValue?:HovercardContext[])=>Observable<HovercardContext[]>})}


/** An individual line of a hovercard */
export interface HovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** An individual line of a hovercard */
export interface HovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends IssueTimelineItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItemEdge, R>|null)[]|null))=>Promise<((FieldsSelection<IssueTimelineItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueTimelineItemRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItem, R>|null)[]|null))=>Promise<((FieldsSelection<IssueTimelineItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for IssueTimelineItem. */
export interface IssueTimelineConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends IssueTimelineItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItemEdge, R>|null)[]|null))=>Observable<((FieldsSelection<IssueTimelineItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IssueTimelineItemRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItem, R>|null)[]|null))=>Observable<((FieldsSelection<IssueTimelineItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface IssueTimelineItemEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends IssueTimelineItemRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItem, R>|null))=>Promise<(FieldsSelection<IssueTimelineItem, R>|null)>})}


/** An edge in a connection. */
export interface IssueTimelineItemEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends IssueTimelineItemRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItem, R>|null))=>Observable<(FieldsSelection<IssueTimelineItem, R>|null)>})}


/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the assignable associated with the event. */
assignable:(AssignablePromiseChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:Assignable)=>Promise<Assignable>}),
/** Identifies the user or mannequin that was assigned. */
assignee:({get:<R extends AssigneeRequest>(request: R, defaultValue?:(FieldsSelection<Assignee, R>|null))=>Promise<(FieldsSelection<Assignee, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
 * Identifies the user who was assigned.
 */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Represents an 'assigned' event on any assignable object. */
export interface AssignedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the assignable associated with the event. */
assignable:(AssignableObservableChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:Assignable)=>Observable<Assignable>}),
/** Identifies the user or mannequin that was assigned. */
assignee:({get:<R extends AssigneeRequest>(request: R, defaultValue?:(FieldsSelection<Assignee, R>|null))=>Observable<(FieldsSelection<Assignee, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
 * Identifies the user who was assigned.
 */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface BotPromiseChain{
/** A URL pointing to the GitHub App's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this bot */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this bot */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A special type of user which takes actions on behalf of GitHub Apps. */
export interface BotObservableChain{
/** A URL pointing to the GitHub App's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this bot */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this bot */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A placeholder user for attribution of imported data on GitHub. */
export interface MannequinPromiseChain{
/** A URL pointing to the GitHub App's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The mannequin's email on the source instance. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The URL to this resource. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A placeholder user for attribution of imported data on GitHub. */
export interface MannequinObservableChain{
/** A URL pointing to the GitHub App's public avatar. */
avatarUrl:((args?:{
/** The size of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The mannequin's email on the source instance. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The username of the actor. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The URL to this resource. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Object that was closed. */
closable:(ClosablePromiseChain & {get:<R extends ClosableRequest>(request: R, defaultValue?:Closable)=>Promise<Closable>}),
/** Object which triggered the creation of this event. */
closer:({get:<R extends CloserRequest>(request: R, defaultValue?:(FieldsSelection<Closer, R>|null))=>Promise<(FieldsSelection<Closer, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The HTTP path for this closed event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this closed event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a 'closed' event on any `Closable`. */
export interface ClosedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Object that was closed. */
closable:(ClosableObservableChain & {get:<R extends ClosableRequest>(request: R, defaultValue?:Closable)=>Observable<Closable>}),
/** Object which triggered the creation of this event. */
closer:({get:<R extends CloserRequest>(request: R, defaultValue?:(FieldsSelection<Closer, R>|null))=>Observable<(FieldsSelection<Closer, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The HTTP path for this closed event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this closed event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies when the reference was made. */
referencedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP path for this pull request. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Issue or pull request that made the reference. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>}),
/** Issue or pull request to which the reference was made. */
target:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>}),
/** The HTTP URL for this pull request. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Checks if the target will be closed when the source is merged. */
willCloseTarget:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a mention made by one issue or pull request to another. */
export interface CrossReferencedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies when the reference was made. */
referencedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP path for this pull request. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Issue or pull request that made the reference. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>}),
/** Issue or pull request to which the reference was made. */
target:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>}),
/** The HTTP URL for this pull request. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Checks if the target will be closed when the source is merged. */
willCloseTarget:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the milestone title associated with the 'demilestoned' event. */
milestoneTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Object referenced by event. */
subject:({get:<R extends MilestoneItemRequest>(request: R, defaultValue?:MilestoneItem)=>Promise<MilestoneItem>})}


/** Represents a 'demilestoned' event on a given issue or pull request. */
export interface DemilestonedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the milestone title associated with the 'demilestoned' event. */
milestoneTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Object referenced by event. */
subject:({get:<R extends MilestoneItemRequest>(request: R, defaultValue?:MilestoneItem)=>Observable<MilestoneItem>})}


/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the label associated with the 'labeled' event. */
label:(LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:Label)=>Promise<Label>}),
/** Identifies the `Labelable` associated with the event. */
labelable:(LabelablePromiseChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:Labelable)=>Promise<Labelable>})}


/** Represents a 'labeled' event on a given issue or pull request. */
export interface LabeledEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the label associated with the 'labeled' event. */
label:(LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:Label)=>Observable<Label>}),
/** Identifies the `Labelable` associated with the event. */
labelable:(LabelableObservableChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:Labelable)=>Observable<Labelable>})}


/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Reason that the conversation was locked (optional). */
lockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Promise<(LockReason|null)>}),
/** Object that was locked. */
lockable:(LockablePromiseChain & {get:<R extends LockableRequest>(request: R, defaultValue?:Lockable)=>Promise<Lockable>})}


/** Represents a 'locked' event on a given issue or pull request. */
export interface LockedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Reason that the conversation was locked (optional). */
lockReason:({get:(request?:boolean|number,defaultValue?:(LockReason|null))=>Observable<(LockReason|null)>}),
/** Object that was locked. */
lockable:(LockableObservableChain & {get:<R extends LockableRequest>(request: R, defaultValue?:Lockable)=>Observable<Lockable>})}


/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the milestone title associated with the 'milestoned' event. */
milestoneTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Object referenced by event. */
subject:({get:<R extends MilestoneItemRequest>(request: R, defaultValue?:MilestoneItem)=>Promise<MilestoneItem>})}


/** Represents a 'milestoned' event on a given issue or pull request. */
export interface MilestonedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the milestone title associated with the 'milestoned' event. */
milestoneTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Object referenced by event. */
subject:({get:<R extends MilestoneItemRequest>(request: R, defaultValue?:MilestoneItem)=>Observable<MilestoneItem>})}


/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the commit associated with the 'referenced' event. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the repository associated with the 'referenced' event. */
commitRepository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
isDirectReference:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Object referenced by event. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>})}


/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export interface ReferencedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the commit associated with the 'referenced' event. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the repository associated with the 'referenced' event. */
commitRepository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
isDirectReference:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Object referenced by event. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>})}


/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the current title of the issue or pull request. */
currentTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the previous title of the issue or pull request. */
previousTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Subject that was renamed. */
subject:({get:<R extends RenamedTitleSubjectRequest>(request: R, defaultValue?:RenamedTitleSubject)=>Promise<RenamedTitleSubject>})}


/** Represents a 'renamed' event on a given issue or pull request */
export interface RenamedTitleEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the current title of the issue or pull request. */
currentTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the previous title of the issue or pull request. */
previousTitle:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Subject that was renamed. */
subject:({get:<R extends RenamedTitleSubjectRequest>(request: R, defaultValue?:RenamedTitleSubject)=>Observable<RenamedTitleSubject>})}


/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Object that was reopened. */
closable:(ClosablePromiseChain & {get:<R extends ClosableRequest>(request: R, defaultValue?:Closable)=>Promise<Closable>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents a 'reopened' event on any `Closable`. */
export interface ReopenedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Object that was reopened. */
closable:(ClosableObservableChain & {get:<R extends ClosableRequest>(request: R, defaultValue?:Closable)=>Observable<Closable>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Object referenced by event. */
subscribable:(SubscribablePromiseChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:Subscribable)=>Promise<Subscribable>})}


/** Represents a 'subscribed' event on a given `Subscribable`. */
export interface SubscribedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Object referenced by event. */
subscribable:(SubscribableObservableChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:Subscribable)=>Observable<Subscribable>})}


/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The repository this came from */
fromRepository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>})}


/** Represents a 'transferred' event on a given issue or pull request. */
export interface TransferredEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The repository this came from */
fromRepository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>})}


/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the assignable associated with the event. */
assignable:(AssignablePromiseChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:Assignable)=>Promise<Assignable>}),
/** Identifies the user or mannequin that was unassigned. */
assignee:({get:<R extends AssigneeRequest>(request: R, defaultValue?:(FieldsSelection<Assignee, R>|null))=>Promise<(FieldsSelection<Assignee, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
 * Identifies the subject (user) who was unassigned.
 */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Represents an 'unassigned' event on any assignable object. */
export interface UnassignedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the assignable associated with the event. */
assignable:(AssignableObservableChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:Assignable)=>Observable<Assignable>}),
/** Identifies the user or mannequin that was unassigned. */
assignee:({get:<R extends AssigneeRequest>(request: R, defaultValue?:(FieldsSelection<Assignee, R>|null))=>Observable<(FieldsSelection<Assignee, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
 * Identifies the subject (user) who was unassigned.
 */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the label associated with the 'unlabeled' event. */
label:(LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:Label)=>Promise<Label>}),
/** Identifies the `Labelable` associated with the event. */
labelable:(LabelablePromiseChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:Labelable)=>Promise<Labelable>})}


/** Represents an 'unlabeled' event on a given issue or pull request. */
export interface UnlabeledEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the label associated with the 'unlabeled' event. */
label:(LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:Label)=>Observable<Label>}),
/** Identifies the `Labelable` associated with the event. */
labelable:(LabelableObservableChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:Labelable)=>Observable<Labelable>})}


/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Object that was unlocked. */
lockable:(LockablePromiseChain & {get:<R extends LockableRequest>(request: R, defaultValue?:Lockable)=>Promise<Lockable>})}


/** Represents an 'unlocked' event on a given issue or pull request. */
export interface UnlockedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Object that was unlocked. */
lockable:(LockableObservableChain & {get:<R extends LockableRequest>(request: R, defaultValue?:Lockable)=>Observable<Lockable>})}


/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Object referenced by event. */
subscribable:(SubscribablePromiseChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:Subscribable)=>Promise<Subscribable>})}


/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export interface UnsubscribedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Object referenced by event. */
subscribable:(SubscribableObservableChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:Subscribable)=>Observable<Subscribable>})}


/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Number of days that the user was blocked for. */
blockDuration:({get:(request?:boolean|number,defaultValue?:UserBlockDuration)=>Promise<UserBlockDuration>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The user who was blocked. */
subject:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Represents a 'user_blocked' event on a given user. */
export interface UserBlockedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Number of days that the user was blocked for. */
blockDuration:({get:(request?:boolean|number,defaultValue?:UserBlockDuration)=>Observable<UserBlockDuration>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The user who was blocked. */
subject:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends IssueTimelineItemsEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItemsEdge, R>|null)[]|null))=>Promise<((FieldsSelection<IssueTimelineItemsEdge, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before` and `after` filters. */
filteredCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends IssueTimelineItemsRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItems, R>|null)[]|null))=>Promise<((FieldsSelection<IssueTimelineItems, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
pageCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the date and time when the timeline was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** The connection type for IssueTimelineItems. */
export interface IssueTimelineItemsConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends IssueTimelineItemsEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItemsEdge, R>|null)[]|null))=>Observable<((FieldsSelection<IssueTimelineItemsEdge, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before` and `after` filters. */
filteredCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends IssueTimelineItemsRequest>(request: R, defaultValue?:((FieldsSelection<IssueTimelineItems, R>|null)[]|null))=>Observable<((FieldsSelection<IssueTimelineItems, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
pageCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the date and time when the timeline was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** An edge in a connection. */
export interface IssueTimelineItemsEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends IssueTimelineItemsRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItems, R>|null))=>Promise<(FieldsSelection<IssueTimelineItems, R>|null)>})}


/** An edge in a connection. */
export interface IssueTimelineItemsEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends IssueTimelineItemsRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItems, R>|null))=>Observable<(FieldsSelection<IssueTimelineItems, R>|null)>})}


/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a 'added_to_project' event on a given issue or pull request. */
export interface AddedToProjectEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents a 'comment_deleted' event on a given issue or pull request. */
export interface CommentDeletedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Issue or pull request that made the reference. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>}),
/** Issue or pull request which was connected. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>})}


/** Represents a 'connected' event on a given issue or pull request. */
export interface ConnectedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Issue or pull request that made the reference. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>}),
/** Issue or pull request which was connected. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>})}


/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export interface ConvertedNoteToIssueEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Issue or pull request from which the issue was disconnected. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>}),
/** Issue or pull request which was disconnected. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Promise<ReferencedSubject>})}


/** Represents a 'disconnected' event on a given issue or pull request. */
export interface DisconnectedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Reference originated in a different repository. */
isCrossRepository:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Issue or pull request from which the issue was disconnected. */
source:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>}),
/** Issue or pull request which was disconnected. */
subject:({get:<R extends ReferencedSubjectRequest>(request: R, defaultValue?:ReferencedSubject)=>Observable<ReferencedSubject>})}


/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export interface MarkedAsDuplicateEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents a 'mentioned' event on a given issue or pull request. */
export interface MentionedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Column name the issue or pull request was moved from. */
previousProjectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Project referenced by event. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name the issue or pull request was moved to. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export interface MovedColumnsInProjectEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Column name the issue or pull request was moved from. */
previousProjectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Project referenced by event. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** Project card referenced by this project event. */
projectCard:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>}),
/** Column name the issue or pull request was moved to. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>})}


/** Represents a 'pinned' event on a given issue or pull request. */
export interface PinnedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>})}


/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a 'removed_from_project' event on a given issue or pull request. */
export interface RemovedFromProjectEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Project referenced by event. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** Column name referenced by this project event. */
projectColumnName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export interface UnmarkedAsDuplicateEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>})}


/** Represents an 'unpinned' event on a given issue or pull request. */
export interface UnpinnedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the issue associated with the event. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>})}


/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestCommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestCommitEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestCommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestCommit, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestCommit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequestCommit. */
export interface PullRequestCommitConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestCommitEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestCommitEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestCommitEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestCommit, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestCommit, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestCommitEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestCommitPromiseChain & {get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestCommit, R>|null))=>Promise<(FieldsSelection<PullRequestCommit, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestCommitEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestCommitObservableChain & {get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestCommit, R>|null))=>Observable<(FieldsSelection<PullRequestCommit, R>|null)>})}


/** Represents a Git commit part of a pull request. */
export interface PullRequestCommitPromiseChain{
/** The Git commit object */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Promise<Commit>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The pull request this commit belongs to */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The HTTP path for this pull request commit */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this pull request commit */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a Git commit part of a pull request. */
export interface PullRequestCommitObservableChain{
/** The Git commit object */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Observable<Commit>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The pull request this commit belongs to */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The HTTP path for this pull request commit */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this pull request commit */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestChangedFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestChangedFileEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestChangedFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestChangedFileRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestChangedFile, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestChangedFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequestChangedFile. */
export interface PullRequestChangedFileConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestChangedFileEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestChangedFileEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestChangedFileEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestChangedFileRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestChangedFile, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestChangedFile, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestChangedFileEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestChangedFilePromiseChain & {get:<R extends PullRequestChangedFileRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFile, R>|null))=>Promise<(FieldsSelection<PullRequestChangedFile, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestChangedFileEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestChangedFileObservableChain & {get:<R extends PullRequestChangedFileRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestChangedFile, R>|null))=>Observable<(FieldsSelection<PullRequestChangedFile, R>|null)>})}


/** A file changed in a pull request. */
export interface PullRequestChangedFilePromiseChain{
/** The number of additions to the file. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of deletions to the file. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The path of the file. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A file changed in a pull request. */
export interface PullRequestChangedFileObservableChain{
/** The number of additions to the file. */
additions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of deletions to the file. */
deletions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The path of the file. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for ReviewRequest. */
export interface ReviewRequestConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ReviewRequestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReviewRequestEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ReviewRequestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReviewRequestRequest>(request: R, defaultValue?:((FieldsSelection<ReviewRequest, R>|null)[]|null))=>Promise<((FieldsSelection<ReviewRequest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ReviewRequest. */
export interface ReviewRequestConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ReviewRequestEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ReviewRequestEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ReviewRequestEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ReviewRequestRequest>(request: R, defaultValue?:((FieldsSelection<ReviewRequest, R>|null)[]|null))=>Observable<((FieldsSelection<ReviewRequest, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ReviewRequestEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReviewRequestPromiseChain & {get:<R extends ReviewRequestRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequest, R>|null))=>Promise<(FieldsSelection<ReviewRequest, R>|null)>})}


/** An edge in a connection. */
export interface ReviewRequestEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ReviewRequestObservableChain & {get:<R extends ReviewRequestRequest>(request: R, defaultValue?:(FieldsSelection<ReviewRequest, R>|null))=>Observable<(FieldsSelection<ReviewRequest, R>|null)>})}


/** A request for a user to review a pull request. */
export interface ReviewRequestPromiseChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the pull request associated with this review request. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The reviewer that is requested. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Promise<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** A request for a user to review a pull request. */
export interface ReviewRequestObservableChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the pull request associated with this review request. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The reviewer that is requested. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Observable<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewThreadEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewThreadEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReviewThreadEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewThread, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReviewThread, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Review comment threads for a pull request review. */
export interface PullRequestReviewThreadConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewThreadEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewThreadEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReviewThreadEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewThread, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReviewThread, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestReviewThreadEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewThreadPromiseChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Promise<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestReviewThreadEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewThreadObservableChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Observable<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThreadPromiseChain{
/** A list of pull request comments associated with the thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>PullRequestReviewCommentConnectionPromiseChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Promise<PullRequestReviewCommentConnection>})&(PullRequestReviewCommentConnectionPromiseChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Promise<PullRequestReviewCommentConnection>}),
/** The side of the diff on which this thread was placed. */
diffSide:({get:(request?:boolean|number,defaultValue?:DiffSide)=>Promise<DiffSide>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether this thread has been resolved */
isResolved:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The line in the file to which this thread refers */
line:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The original line in the file to which this thread refers. */
originalLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The original start line in the file to which this thread refers (multi-line only). */
originalStartLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies the pull request associated with this thread. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the repository associated with this thread. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The user who resolved this thread */
resolvedBy:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The side of the diff that the first line of the thread starts on (multi-line only) */
startDiffSide:({get:(request?:boolean|number,defaultValue?:(DiffSide|null))=>Promise<(DiffSide|null)>}),
/** The start line in the file to which this thread refers (multi-line only) */
startLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Whether or not the viewer can resolve this thread */
viewerCanResolve:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the viewer can unresolve this thread */
viewerCanUnresolve:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A threaded list of comments for a given pull request. */
export interface PullRequestReviewThreadObservableChain{
/** A list of pull request comments associated with the thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Skips the first _n_ elements in the list. */
skip?: (Scalars["Int"]|null)})=>PullRequestReviewCommentConnectionObservableChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Observable<PullRequestReviewCommentConnection>})&(PullRequestReviewCommentConnectionObservableChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Observable<PullRequestReviewCommentConnection>}),
/** The side of the diff on which this thread was placed. */
diffSide:({get:(request?:boolean|number,defaultValue?:DiffSide)=>Observable<DiffSide>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether this thread has been resolved */
isResolved:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The line in the file to which this thread refers */
line:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The original line in the file to which this thread refers. */
originalLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The original start line in the file to which this thread refers (multi-line only). */
originalStartLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies the pull request associated with this thread. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the repository associated with this thread. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The user who resolved this thread */
resolvedBy:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The side of the diff that the first line of the thread starts on (multi-line only) */
startDiffSide:({get:(request?:boolean|number,defaultValue?:(DiffSide|null))=>Observable<(DiffSide|null)>}),
/** The start line in the file to which this thread refers (multi-line only) */
startLine:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Whether or not the viewer can resolve this thread */
viewerCanResolve:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the viewer can unresolve this thread */
viewerCanUnresolve:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewCommentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReviewCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewComment, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReviewComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequestReviewComment. */
export interface PullRequestReviewCommentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewCommentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReviewCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewComment, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReviewComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestReviewCommentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewCommentPromiseChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Promise<(FieldsSelection<PullRequestReviewComment, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestReviewCommentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewCommentObservableChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Observable<(FieldsSelection<PullRequestReviewComment, R>|null)>})}


/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewCommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** The comment body of this review comment. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The comment body of this review comment rendered as plain text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the commit associated with the comment. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies when the comment was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The diff hunk to which the comment applies. */
diffHunk:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies when the comment was created in a draft state. */
draftedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the original commit associated with the comment. */
originalCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** The original line index in the diff to which the comment applies. */
originalPosition:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies when the comment body is outdated */
outdated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The path to which the comment applies. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The line index in the diff to which the comment applies. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The pull request associated with this review comment. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The pull request review associated with this review comment. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The comment this is a reply to. */
replyTo:(PullRequestReviewCommentPromiseChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Promise<(FieldsSelection<PullRequestReviewComment, R>|null)>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path permalink for this review comment. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the state of the comment. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestReviewCommentState)=>Promise<PullRequestReviewCommentState>}),
/** Identifies when the comment was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this review comment. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A review comment associated with a given repository pull request. */
export interface PullRequestReviewCommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** The comment body of this review comment. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The comment body of this review comment rendered as plain text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the commit associated with the comment. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies when the comment was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The diff hunk to which the comment applies. */
diffHunk:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies when the comment was created in a draft state. */
draftedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the original commit associated with the comment. */
originalCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** The original line index in the diff to which the comment applies. */
originalPosition:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies when the comment body is outdated */
outdated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The path to which the comment applies. */
path:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The line index in the diff to which the comment applies. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The pull request associated with this review comment. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The pull request review associated with this review comment. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The comment this is a reply to. */
replyTo:(PullRequestReviewCommentObservableChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Observable<(FieldsSelection<PullRequestReviewComment, R>|null)>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path permalink for this review comment. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the state of the comment. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestReviewCommentState)=>Observable<PullRequestReviewCommentState>}),
/** Identifies when the comment was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this review comment. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A review object for a given pull request. */
export interface PullRequestReviewPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** Identifies the pull request review body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body of this review rendered as plain text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** A list of review comments for the current pull request review. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestReviewCommentConnectionPromiseChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Promise<PullRequestReviewCommentConnection>})&(PullRequestReviewCommentConnectionPromiseChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Promise<PullRequestReviewCommentConnection>}),
/** Identifies the commit associated with this pull request review. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** A list of teams that this review was made on behalf of. */
onBehalfOf:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>})&(TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the pull request associated with this pull request review. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Promise<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>})&(ReactionConnectionPromiseChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Promise<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path permalink for this PullRequestReview. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the current state of the pull request review. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestReviewState)=>Promise<PullRequestReviewState>}),
/** Identifies when the Pull Request Review was submitted */
submittedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this PullRequestReview. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A review object for a given pull request. */
export interface PullRequestReviewObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the subject of the comment. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** Identifies the pull request review body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body of this review rendered as plain text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** A list of review comments for the current pull request review. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PullRequestReviewCommentConnectionObservableChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Observable<PullRequestReviewCommentConnection>})&(PullRequestReviewCommentConnectionObservableChain & {get:<R extends PullRequestReviewCommentConnectionRequest>(request: R, defaultValue?:PullRequestReviewCommentConnection)=>Observable<PullRequestReviewCommentConnection>}),
/** Identifies the commit associated with this pull request review. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** A list of teams that this review was made on behalf of. */
onBehalfOf:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>})&(TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the pull request associated with this pull request review. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** A list of reactions grouped by content left on the subject. */
reactionGroups:({get:<R extends ReactionGroupRequest>(request: R, defaultValue?:(ReactionGroup[]|null))=>Observable<(ReactionGroup[]|null)>}),
/** A list of Reactions left on the Issue. */
reactions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Allows filtering Reactions by emoji. */
content?: (ReactionContent|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Allows specifying the order in which reactions are returned. */
orderBy?: (ReactionOrder|null)})=>ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>})&(ReactionConnectionObservableChain & {get:<R extends ReactionConnectionRequest>(request: R, defaultValue?:ReactionConnection)=>Observable<ReactionConnection>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path permalink for this PullRequestReview. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the current state of the pull request review. */
state:({get:(request?:boolean|number,defaultValue?:PullRequestReviewState)=>Observable<PullRequestReviewState>}),
/** Identifies when the Pull Request Review was submitted */
submittedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL permalink for this PullRequestReview. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can user react to this subject */
viewerCanReact:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReviewEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReview, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestReview, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequestReview. */
export interface PullRequestReviewConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestReviewEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReviewEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReviewEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestReview, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestReview, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestReviewEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestReviewEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewerPromiseChain{
/** Is this suggestion based on past commits? */
isAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Is this suggestion based on past review comments? */
isCommenter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the user suggested to review the pull request. */
reviewer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** A suggestion to review a pull request based on a user's commit history and review comments. */
export interface SuggestedReviewerObservableChain{
/** Is this suggestion based on past commits? */
isAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Is this suggestion based on past review comments? */
isCommenter:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the user suggested to review the pull request. */
reviewer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestTimelineItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItemEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestTimelineItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestTimelineItemRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItem, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestTimelineItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PullRequestTimelineItem. */
export interface PullRequestTimelineConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestTimelineItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItemEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestTimelineItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestTimelineItemRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItem, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestTimelineItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PullRequestTimelineItemEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PullRequestTimelineItemRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestTimelineItem, R>|null))=>Promise<(FieldsSelection<PullRequestTimelineItem, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestTimelineItemEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PullRequestTimelineItemRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestTimelineItem, R>|null))=>Observable<(FieldsSelection<PullRequestTimelineItem, R>|null)>})}


/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
afterCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
beforeCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export interface BaseRefForcePushedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
afterCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
beforeCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** A thread of comments on a commit. */
export interface CommitCommentThreadPromiseChain{
/** The comments that exist in this thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>})&(CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>}),
/** The commit the comments were made on. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The file the comments were made on. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The position in the diff for the commit that the comment was made on. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** A thread of comments on a commit. */
export interface CommitCommentThreadObservableChain{
/** The comments that exist in this thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>})&(CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>}),
/** The commit the comments were made on. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The file the comments were made on. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The position in the diff for the commit that the comment was made on. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The deployment associated with the 'deployed' event. */
deployment:(DeploymentPromiseChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:Deployment)=>Promise<Deployment>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The ref associated with the 'deployed' event. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** Represents a 'deployed' event on a given pull request. */
export interface DeployedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The deployment associated with the 'deployed' event. */
deployment:(DeploymentObservableChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:Deployment)=>Observable<Deployment>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The ref associated with the 'deployed' event. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The deployment status that updated the deployment environment. */
deploymentStatus:(DeploymentStatusPromiseChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:DeploymentStatus)=>Promise<DeploymentStatus>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents a 'deployment_environment_changed' event on a given pull request. */
export interface DeploymentEnvironmentChangedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The deployment status that updated the deployment environment. */
deploymentStatus:(DeploymentStatusObservableChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:DeploymentStatus)=>Observable<DeploymentStatus>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the Ref associated with the `head_ref_deleted` event. */
headRef:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
headRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents a 'head_ref_deleted' event on a given pull request. */
export interface HeadRefDeletedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the Ref associated with the `head_ref_deleted` event. */
headRef:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
headRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
afterCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
beforeCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export interface HeadRefForcePushedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
afterCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
beforeCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents a 'head_ref_restored' event on a given pull request. */
export interface HeadRefRestoredEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'merged' event on a given pull request. */
export interface MergedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the commit associated with the `merge` event. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the Ref associated with the `merge` event. */
mergeRef:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the Ref associated with the `merge` event. */
mergeRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The HTTP path for this merged event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this merged event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a 'merged' event on a given pull request. */
export interface MergedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the commit associated with the `merge` event. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the Ref associated with the `merge` event. */
mergeRef:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>}),
/** Identifies the name of the Ref associated with the `merge` event. */
mergeRefName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The HTTP path for this merged event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this merged event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Identifies the optional message associated with the 'review_dismissed' event. */
dismissalMessage:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies the optional message associated with the event, rendered to HTML. */
dismissalMessageHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the previous state of the review with the 'review_dismissed' event. */
previousReviewState:({get:(request?:boolean|number,defaultValue?:PullRequestReviewState)=>Promise<PullRequestReviewState>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the commit which caused the review to become stale. */
pullRequestCommit:(PullRequestCommitPromiseChain & {get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestCommit, R>|null))=>Promise<(FieldsSelection<PullRequestCommit, R>|null)>}),
/** The HTTP path for this review dismissed event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Identifies the review associated with the 'review_dismissed' event. */
review:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>}),
/** The HTTP URL for this review dismissed event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a 'review_dismissed' event on a given issue or pull request. */
export interface ReviewDismissedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Identifies the optional message associated with the 'review_dismissed' event. */
dismissalMessage:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies the optional message associated with the event, rendered to HTML. */
dismissalMessageHTML:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the previous state of the review with the 'review_dismissed' event. */
previousReviewState:({get:(request?:boolean|number,defaultValue?:PullRequestReviewState)=>Observable<PullRequestReviewState>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the commit which caused the review to become stale. */
pullRequestCommit:(PullRequestCommitObservableChain & {get:<R extends PullRequestCommitRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestCommit, R>|null))=>Observable<(FieldsSelection<PullRequestCommit, R>|null)>}),
/** The HTTP path for this review dismissed event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Identifies the review associated with the 'review_dismissed' event. */
review:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>}),
/** The HTTP URL for this review dismissed event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the reviewer whose review request was removed. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Promise<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** Represents an 'review_request_removed' event on a given pull request. */
export interface ReviewRequestRemovedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the reviewer whose review request was removed. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Observable<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** Identifies the reviewer whose review was requested. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Promise<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** Represents an 'review_requested' event on a given pull request. */
export interface ReviewRequestedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** Identifies the reviewer whose review was requested. */
requestedReviewer:({get:<R extends RequestedReviewerRequest>(request: R, defaultValue?:(FieldsSelection<RequestedReviewer, R>|null))=>Observable<(FieldsSelection<RequestedReviewer, R>|null)>})}


/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PullRequestTimelineItemsEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItemsEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestTimelineItemsEdge, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before` and `after` filters. */
filteredCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestTimelineItemsRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItems, R>|null)[]|null))=>Promise<((FieldsSelection<PullRequestTimelineItems, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
pageCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the date and time when the timeline was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** The connection type for PullRequestTimelineItems. */
export interface PullRequestTimelineItemsConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PullRequestTimelineItemsEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItemsEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestTimelineItemsEdge, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before` and `after` filters. */
filteredCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends PullRequestTimelineItemsRequest>(request: R, defaultValue?:((FieldsSelection<PullRequestTimelineItems, R>|null)[]|null))=>Observable<((FieldsSelection<PullRequestTimelineItems, R>|null)[]|null)>}),
/** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
pageCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the date and time when the timeline was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** An edge in a connection. */
export interface PullRequestTimelineItemsEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PullRequestTimelineItemsRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestTimelineItems, R>|null))=>Promise<(FieldsSelection<PullRequestTimelineItems, R>|null)>})}


/** An edge in a connection. */
export interface PullRequestTimelineItemsEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PullRequestTimelineItemsRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestTimelineItems, R>|null))=>Observable<(FieldsSelection<PullRequestTimelineItems, R>|null)>})}


/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The new base for this PR */
newBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The old base for this PR */
oldBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export interface AutomaticBaseChangeFailedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The new base for this PR */
newBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The old base for this PR */
oldBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The new base for this PR */
newBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The old base for this PR */
oldBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export interface AutomaticBaseChangeSucceededEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The new base for this PR */
newBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The old base for this PR */
oldBase:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>})}


/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export interface BaseRefChangedEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>})}


/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The HTTP path for this convert to draft event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this convert to draft event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a 'convert_to_draft' event on a given pull request. */
export interface ConvertToDraftEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The HTTP path for this convert to draft event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this convert to draft event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThreadPromiseChain{
/** The comments that exist in this thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>})&(CommitCommentConnectionPromiseChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Promise<CommitCommentConnection>}),
/** The commit the comments were made on. */
commit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Promise<Commit>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The file the comments were made on. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The position in the diff for the commit that the comment was made on. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The pull request this commit comment thread belongs to */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The repository associated with this node. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** Represents a commit comment thread part of a pull request. */
export interface PullRequestCommitCommentThreadObservableChain{
/** The comments that exist in this thread. */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>})&(CommitCommentConnectionObservableChain & {get:<R extends CommitCommentConnectionRequest>(request: R, defaultValue?:CommitCommentConnection)=>Observable<CommitCommentConnection>}),
/** The commit the comments were made on. */
commit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Observable<Commit>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The file the comments were made on. */
path:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The position in the diff for the commit that the comment was made on. */
position:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The pull request this commit comment thread belongs to */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The repository associated with this node. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarkerPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The last commit the viewer has seen. */
lastSeenCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Promise<Commit>}),
/** The pull request to which the marker belongs. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>})}


/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export interface PullRequestRevisionMarkerObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The last commit the viewer has seen. */
lastSeenCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:Commit)=>Observable<Commit>}),
/** The pull request to which the marker belongs. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>})}


/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEventPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The HTTP path for this ready for review event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this ready for review event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** Represents a 'ready_for_review' event on a given pull request. */
export interface ReadyForReviewEventObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** PullRequest referenced by event. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The HTTP path for this ready for review event. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this ready for review event. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatisticsPromiseChain{
/** Number of times the package was downloaded since it was created. */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a object that contains package version activity statistics such as downloads. */
export interface PackageVersionStatisticsObservableChain{
/** Number of times the package was downloaded since it was created. */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatisticsPromiseChain{
/** Number of times the package was downloaded since it was created. */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a object that contains package activity statistics such as downloads. */
export interface PackageStatisticsObservableChain{
/** Number of times the package was downloaded since it was created. */
downloadsTotalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for PackageVersion. */
export interface PackageVersionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PackageVersionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageVersionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PackageVersionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageVersionRequest>(request: R, defaultValue?:((FieldsSelection<PackageVersion, R>|null)[]|null))=>Promise<((FieldsSelection<PackageVersion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PackageVersion. */
export interface PackageVersionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PackageVersionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PackageVersionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PackageVersionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PackageVersionRequest>(request: R, defaultValue?:((FieldsSelection<PackageVersion, R>|null)[]|null))=>Observable<((FieldsSelection<PackageVersion, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PackageVersionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackageVersionPromiseChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Promise<(FieldsSelection<PackageVersion, R>|null)>})}


/** An edge in a connection. */
export interface PackageVersionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PackageVersionObservableChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Observable<(FieldsSelection<PackageVersion, R>|null)>})}


/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwnerPromiseChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The public profile email. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcasePromiseChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Promise<ProfileItemShowcase>}),
/** The public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The public profile website URL. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Represents any entity on GitHub that has a profile page. */
export interface ProfileOwnerObservableChain{
/** Determine if this repository owner has any items that can be pinned to their profile. */
anyPinnableItems:((args?:{
/** Filter to only a particular kind of pinnable item. */
type?: (PinnableItemType|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The public profile email. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * Showcases a selection of repositories and gists that the profile owner has
 * either curated or that have been selected automatically based on popularity.
 */
itemShowcase:(ProfileItemShowcaseObservableChain & {get:<R extends ProfileItemShowcaseRequest>(request: R, defaultValue?:ProfileItemShowcase)=>Observable<ProfileItemShowcase>}),
/** The public profile location. */
location:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The username used to login. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The public profile name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A list of repositories and gists this profile owner can pin to their profile. */
pinnableItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinnable items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** A list of repositories and gists this profile owner has pinned to their profile */
pinnedItems:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Filter the types of pinned items that are returned. */
types?: (PinnableItemType[]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>}),
/** Returns how many more items this profile owner can pin to their profile. */
pinnedItemsRemaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Can the viewer pin repositories and gists to the profile? */
viewerCanChangePinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The public profile website URL. */
websiteUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/**
 * A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own.
 */
export interface ProfileItemShowcasePromiseChain{
/** Whether or not the owner has pinned any repositories or gists. */
hasPinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * The repositories and gists in the showcase. If the profile owner has any
 * pinned items, those will be returned. Otherwise, the profile owner's popular
 * repositories will be returned.
 */
items:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})&(PinnableItemConnectionPromiseChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Promise<PinnableItemConnection>})}


/**
 * A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own.
 */
export interface ProfileItemShowcaseObservableChain{
/** Whether or not the owner has pinned any repositories or gists. */
hasPinnedItems:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * The repositories and gists in the showcase. If the profile owner has any
 * pinned items, those will be returned. Otherwise, the profile owner's popular
 * repositories will be returned.
 */
items:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})&(PinnableItemConnectionObservableChain & {get:<R extends PinnableItemConnectionRequest>(request: R, defaultValue?:PinnableItemConnection)=>Observable<PinnableItemConnection>})}


/** The connection type for PinnableItem. */
export interface PinnableItemConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PinnableItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PinnableItemEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PinnableItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PinnableItemRequest>(request: R, defaultValue?:((FieldsSelection<PinnableItem, R>|null)[]|null))=>Promise<((FieldsSelection<PinnableItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PinnableItem. */
export interface PinnableItemConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PinnableItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PinnableItemEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PinnableItemEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PinnableItemRequest>(request: R, defaultValue?:((FieldsSelection<PinnableItem, R>|null)[]|null))=>Observable<((FieldsSelection<PinnableItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PinnableItemEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PinnableItemRequest>(request: R, defaultValue?:(FieldsSelection<PinnableItem, R>|null))=>Promise<(FieldsSelection<PinnableItem, R>|null)>})}


/** An edge in a connection. */
export interface PinnableItemEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends PinnableItemRequest>(request: R, defaultValue?:(FieldsSelection<PinnableItem, R>|null))=>Observable<(FieldsSelection<PinnableItem, R>|null)>})}


/** A Gist. */
export interface GistPromiseChain{
/** A list of comments associated with the gist */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>GistCommentConnectionPromiseChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Promise<GistCommentConnection>})&(GistCommentConnectionPromiseChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Promise<GistCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The gist description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The files in this gist. */
files:((args?:{
/** The maximum number of files to return. */
limit?: (Scalars["Int"]|null),
/** The oid of the files to return */
oid?: (Scalars["GitObjectID"]|null)})=>{get:<R extends GistFileRequest>(request: R, defaultValue?:((FieldsSelection<GistFile, R>|null)[]|null))=>Promise<((FieldsSelection<GistFile, R>|null)[]|null)>})&({get:<R extends GistFileRequest>(request: R, defaultValue?:((FieldsSelection<GistFile, R>|null)[]|null))=>Promise<((FieldsSelection<GistFile, R>|null)[]|null)>}),
/** A list of forks associated with the gist */
forks:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for gists returned from the connection */
orderBy?: (GistOrder|null)})=>GistConnectionPromiseChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Promise<GistConnection>})&(GistConnectionPromiseChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Promise<GistConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies if the gist is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether the gist is public or not. */
isPublic:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The gist name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The gist owner. */
owner:(RepositoryOwnerPromiseChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Promise<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** Identifies when the gist was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>})&(StargazerConnectionPromiseChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Promise<StargazerConnection>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP URL for this Gist. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A Gist. */
export interface GistObservableChain{
/** A list of comments associated with the gist */
comments:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>GistCommentConnectionObservableChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Observable<GistCommentConnection>})&(GistCommentConnectionObservableChain & {get:<R extends GistCommentConnectionRequest>(request: R, defaultValue?:GistCommentConnection)=>Observable<GistCommentConnection>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The gist description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The files in this gist. */
files:((args?:{
/** The maximum number of files to return. */
limit?: (Scalars["Int"]|null),
/** The oid of the files to return */
oid?: (Scalars["GitObjectID"]|null)})=>{get:<R extends GistFileRequest>(request: R, defaultValue?:((FieldsSelection<GistFile, R>|null)[]|null))=>Observable<((FieldsSelection<GistFile, R>|null)[]|null)>})&({get:<R extends GistFileRequest>(request: R, defaultValue?:((FieldsSelection<GistFile, R>|null)[]|null))=>Observable<((FieldsSelection<GistFile, R>|null)[]|null)>}),
/** A list of forks associated with the gist */
forks:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for gists returned from the connection */
orderBy?: (GistOrder|null)})=>GistConnectionObservableChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Observable<GistConnection>})&(GistConnectionObservableChain & {get:<R extends GistConnectionRequest>(request: R, defaultValue?:GistConnection)=>Observable<GistConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies if the gist is a fork. */
isFork:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether the gist is public or not. */
isPublic:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The gist name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The gist owner. */
owner:(RepositoryOwnerObservableChain & {get:<R extends RepositoryOwnerRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryOwner, R>|null))=>Observable<(FieldsSelection<RepositoryOwner, R>|null)>}),
/** Identifies when the gist was last pushed to. */
pushedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The HTML path to this resource. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** A list of users who have starred this starrable. */
stargazers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Order for connection */
orderBy?: (StarOrder|null)})=>StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>})&(StargazerConnectionObservableChain & {get:<R extends StargazerConnectionRequest>(request: R, defaultValue?:StargazerConnection)=>Observable<StargazerConnection>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP URL for this Gist. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Returns a boolean indicating whether the viewing user has starred this starrable. */
viewerHasStarred:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** The connection type for GistComment. */
export interface GistCommentConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends GistCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<GistCommentEdge, R>|null)[]|null))=>Promise<((FieldsSelection<GistCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends GistCommentRequest>(request: R, defaultValue?:((FieldsSelection<GistComment, R>|null)[]|null))=>Promise<((FieldsSelection<GistComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for GistComment. */
export interface GistCommentConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends GistCommentEdgeRequest>(request: R, defaultValue?:((FieldsSelection<GistCommentEdge, R>|null)[]|null))=>Observable<((FieldsSelection<GistCommentEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends GistCommentRequest>(request: R, defaultValue?:((FieldsSelection<GistComment, R>|null)[]|null))=>Observable<((FieldsSelection<GistComment, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface GistCommentEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(GistCommentPromiseChain & {get:<R extends GistCommentRequest>(request: R, defaultValue?:(FieldsSelection<GistComment, R>|null))=>Promise<(FieldsSelection<GistComment, R>|null)>})}


/** An edge in a connection. */
export interface GistCommentEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(GistCommentObservableChain & {get:<R extends GistCommentRequest>(request: R, defaultValue?:(FieldsSelection<GistComment, R>|null))=>Observable<(FieldsSelection<GistComment, R>|null)>})}


/** Represents a comment on an Gist. */
export interface GistCommentPromiseChain{
/** The actor who authored the comment. */
author:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the gist. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Promise<CommentAuthorAssociation>}),
/** Identifies the comment body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** The associated gist. */
gist:(GistPromiseChain & {get:<R extends GistRequest>(request: R, defaultValue?:Gist)=>Promise<Gist>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionPromiseChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Promise<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Promise<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a comment on an Gist. */
export interface GistCommentObservableChain{
/** The actor who authored the comment. */
author:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** Author's association with the gist. */
authorAssociation:({get:(request?:boolean|number,defaultValue?:CommentAuthorAssociation)=>Observable<CommentAuthorAssociation>}),
/** Identifies the comment body. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The body rendered to text. */
bodyText:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** Check if this comment was created via an email reply. */
createdViaEmail:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The actor who edited the comment. */
editor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** The associated gist. */
gist:(GistObservableChain & {get:<R extends GistRequest>(request: R, defaultValue?:Gist)=>Observable<Gist>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Check if this comment was edited and includes an edit with the creation data */
includesCreatedEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Returns whether or not a comment has been minimized. */
isMinimized:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The moment the editor made the last edit */
lastEditedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Returns why the comment was minimized. */
minimizedReason:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Identifies when the comment was published at. */
publishedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** A list of edits to this content. */
userContentEdits:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>})&(UserContentEditConnectionObservableChain & {get:<R extends UserContentEditConnectionRequest>(request: R, defaultValue?:(FieldsSelection<UserContentEditConnection, R>|null))=>Observable<(FieldsSelection<UserContentEditConnection, R>|null)>}),
/** Check if the current viewer can delete this object. */
viewerCanDelete:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can minimize this object. */
viewerCanMinimize:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Check if the current viewer can update this object. */
viewerCanUpdate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Reasons why the current viewer can not update this comment. */
viewerCannotUpdateReasons:({get:(request?:boolean|number,defaultValue?:CommentCannotUpdateReason[])=>Observable<CommentCannotUpdateReason[]>}),
/** Did the viewer author this comment. */
viewerDidAuthor:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A file in a gist. */
export interface GistFilePromiseChain{
/** The file name encoded to remove characters that are invalid in URL paths. */
encodedName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The gist file encoding. */
encoding:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The file extension from the file name. */
extension:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Indicates if this file is an image. */
isImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether the file's contents were truncated. */
isTruncated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The programming language this file is written in. */
language:(LanguagePromiseChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:(FieldsSelection<Language, R>|null))=>Promise<(FieldsSelection<Language, R>|null)>}),
/** The gist file name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The gist file size in bytes. */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** UTF8 text data or null if the file is binary */
text:((args?:{
/** Optionally truncate the returned file to this length. */
truncate?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** A file in a gist. */
export interface GistFileObservableChain{
/** The file name encoded to remove characters that are invalid in URL paths. */
encodedName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The gist file encoding. */
encoding:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The file extension from the file name. */
extension:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Indicates if this file is an image. */
isImage:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether the file's contents were truncated. */
isTruncated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The programming language this file is written in. */
language:(LanguageObservableChain & {get:<R extends LanguageRequest>(request: R, defaultValue?:(FieldsSelection<Language, R>|null))=>Observable<(FieldsSelection<Language, R>|null)>}),
/** The gist file name. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The gist file size in bytes. */
size:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** UTF8 text data or null if the file is binary */
text:((args?:{
/** Optionally truncate the returned file to this length. */
truncate?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** The connection type for Gist. */
export interface GistConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends GistEdgeRequest>(request: R, defaultValue?:((FieldsSelection<GistEdge, R>|null)[]|null))=>Promise<((FieldsSelection<GistEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends GistRequest>(request: R, defaultValue?:((FieldsSelection<Gist, R>|null)[]|null))=>Promise<((FieldsSelection<Gist, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Gist. */
export interface GistConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends GistEdgeRequest>(request: R, defaultValue?:((FieldsSelection<GistEdge, R>|null)[]|null))=>Observable<((FieldsSelection<GistEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends GistRequest>(request: R, defaultValue?:((FieldsSelection<Gist, R>|null)[]|null))=>Observable<((FieldsSelection<Gist, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface GistEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(GistPromiseChain & {get:<R extends GistRequest>(request: R, defaultValue?:(FieldsSelection<Gist, R>|null))=>Promise<(FieldsSelection<Gist, R>|null)>})}


/** An edge in a connection. */
export interface GistEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(GistObservableChain & {get:<R extends GistRequest>(request: R, defaultValue?:(FieldsSelection<Gist, R>|null))=>Observable<(FieldsSelection<Gist, R>|null)>})}


/** Entities that can be sponsored through GitHub Sponsors */
export interface SponsorablePromiseChain{
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingPromiseChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Promise<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})}


/** Entities that can be sponsored through GitHub Sponsors */
export interface SponsorableObservableChain{
/** The GitHub Sponsors listing for this user. */
sponsorsListing:(SponsorsListingObservableChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsListing, R>|null))=>Observable<(FieldsSelection<SponsorsListing, R>|null)>}),
/** This object's sponsorships as the maintainer. */
sponsorshipsAsMaintainer:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>}),
/** This object's sponsorships as the sponsor. */
sponsorshipsAsSponsor:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})}


/** A GitHub Sponsors listing. */
export interface SponsorsListingPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The full description of the listing. */
fullDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The full description of the listing rendered to HTML. */
fullDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The listing's full name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The short description of the listing. */
shortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The short name of the listing. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The published tiers for this GitHub Sponsors listing. */
tiers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Sponsors tiers returned from the connection. */
orderBy?: (SponsorsTierOrder|null)})=>SponsorsTierConnectionPromiseChain & {get:<R extends SponsorsTierConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierConnection, R>|null))=>Promise<(FieldsSelection<SponsorsTierConnection, R>|null)>})&(SponsorsTierConnectionPromiseChain & {get:<R extends SponsorsTierConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierConnection, R>|null))=>Promise<(FieldsSelection<SponsorsTierConnection, R>|null)>})}


/** A GitHub Sponsors listing. */
export interface SponsorsListingObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The full description of the listing. */
fullDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The full description of the listing rendered to HTML. */
fullDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The listing's full name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The short description of the listing. */
shortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The short name of the listing. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The published tiers for this GitHub Sponsors listing. */
tiers:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Sponsors tiers returned from the connection. */
orderBy?: (SponsorsTierOrder|null)})=>SponsorsTierConnectionObservableChain & {get:<R extends SponsorsTierConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierConnection, R>|null))=>Observable<(FieldsSelection<SponsorsTierConnection, R>|null)>})&(SponsorsTierConnectionObservableChain & {get:<R extends SponsorsTierConnectionRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierConnection, R>|null))=>Observable<(FieldsSelection<SponsorsTierConnection, R>|null)>})}


/** The connection type for SponsorsTier. */
export interface SponsorsTierConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SponsorsTierEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SponsorsTierEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SponsorsTierEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SponsorsTierRequest>(request: R, defaultValue?:((FieldsSelection<SponsorsTier, R>|null)[]|null))=>Promise<((FieldsSelection<SponsorsTier, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for SponsorsTier. */
export interface SponsorsTierConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SponsorsTierEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SponsorsTierEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SponsorsTierEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SponsorsTierRequest>(request: R, defaultValue?:((FieldsSelection<SponsorsTier, R>|null)[]|null))=>Observable<((FieldsSelection<SponsorsTier, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SponsorsTierEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SponsorsTierPromiseChain & {get:<R extends SponsorsTierRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTier, R>|null))=>Promise<(FieldsSelection<SponsorsTier, R>|null)>})}


/** An edge in a connection. */
export interface SponsorsTierEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SponsorsTierObservableChain & {get:<R extends SponsorsTierRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTier, R>|null))=>Observable<(FieldsSelection<SponsorsTier, R>|null)>})}


/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTierPromiseChain{
/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
adminInfo:(SponsorsTierAdminInfoPromiseChain & {get:<R extends SponsorsTierAdminInfoRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierAdminInfo, R>|null))=>Promise<(FieldsSelection<SponsorsTierAdminInfo, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The description of the tier. */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The tier description rendered to HTML */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** How much this tier costs per month in cents. */
monthlyPriceInCents:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How much this tier costs per month in dollars. */
monthlyPriceInDollars:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The name of the tier. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The sponsors listing that this tier belongs to. */
sponsorsListing:(SponsorsListingPromiseChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:SponsorsListing)=>Promise<SponsorsListing>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export interface SponsorsTierObservableChain{
/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
adminInfo:(SponsorsTierAdminInfoObservableChain & {get:<R extends SponsorsTierAdminInfoRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTierAdminInfo, R>|null))=>Observable<(FieldsSelection<SponsorsTierAdminInfo, R>|null)>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The description of the tier. */
description:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The tier description rendered to HTML */
descriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** How much this tier costs per month in cents. */
monthlyPriceInCents:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How much this tier costs per month in dollars. */
monthlyPriceInDollars:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The name of the tier. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The sponsors listing that this tier belongs to. */
sponsorsListing:(SponsorsListingObservableChain & {get:<R extends SponsorsListingRequest>(request: R, defaultValue?:SponsorsListing)=>Observable<SponsorsListing>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfoPromiseChain{
/** The sponsorships associated with this tier. */
sponsorships:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})&(SponsorshipConnectionPromiseChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Promise<SponsorshipConnection>})}


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export interface SponsorsTierAdminInfoObservableChain{
/** The sponsorships associated with this tier. */
sponsorships:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Whether or not to include private sponsorships in the result set */
includePrivate?: (Scalars["Boolean"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/**
 * Ordering options for sponsorships returned from this connection. If left
 * blank, the sponsorships will be ordered based on relevancy to the viewer.
 */
orderBy?: (SponsorshipOrder|null)})=>SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})&(SponsorshipConnectionObservableChain & {get:<R extends SponsorshipConnectionRequest>(request: R, defaultValue?:SponsorshipConnection)=>Observable<SponsorshipConnection>})}


/** The connection type for Sponsorship. */
export interface SponsorshipConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SponsorshipEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SponsorshipEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SponsorshipEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SponsorshipRequest>(request: R, defaultValue?:((FieldsSelection<Sponsorship, R>|null)[]|null))=>Promise<((FieldsSelection<Sponsorship, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Sponsorship. */
export interface SponsorshipConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SponsorshipEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SponsorshipEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SponsorshipEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SponsorshipRequest>(request: R, defaultValue?:((FieldsSelection<Sponsorship, R>|null)[]|null))=>Observable<((FieldsSelection<Sponsorship, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SponsorshipEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SponsorshipPromiseChain & {get:<R extends SponsorshipRequest>(request: R, defaultValue?:(FieldsSelection<Sponsorship, R>|null))=>Promise<(FieldsSelection<Sponsorship, R>|null)>})}


/** An edge in a connection. */
export interface SponsorshipEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SponsorshipObservableChain & {get:<R extends SponsorshipRequest>(request: R, defaultValue?:(FieldsSelection<Sponsorship, R>|null))=>Observable<(FieldsSelection<Sponsorship, R>|null)>})}


/** A sponsorship relationship between a sponsor and a maintainer */
export interface SponsorshipPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
 * The entity that is being sponsored
 */
maintainer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/** The privacy level for this sponsorship. */
privacyLevel:({get:(request?:boolean|number,defaultValue?:SponsorshipPrivacy)=>Promise<SponsorshipPrivacy>}),
/**
 * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
 * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
 */
sponsor:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The user or organization that is sponsoring. Returns null if the sponsorship is private. */
sponsorEntity:({get:<R extends SponsorRequest>(request: R, defaultValue?:(FieldsSelection<Sponsor, R>|null))=>Promise<(FieldsSelection<Sponsor, R>|null)>}),
/** The entity that is being sponsored */
sponsorable:(SponsorablePromiseChain & {get:<R extends SponsorableRequest>(request: R, defaultValue?:Sponsorable)=>Promise<Sponsorable>}),
/** The associated sponsorship tier */
tier:(SponsorsTierPromiseChain & {get:<R extends SponsorsTierRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTier, R>|null))=>Promise<(FieldsSelection<SponsorsTier, R>|null)>})}


/** A sponsorship relationship between a sponsor and a maintainer */
export interface SponsorshipObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
 * The entity that is being sponsored
 */
maintainer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/** The privacy level for this sponsorship. */
privacyLevel:({get:(request?:boolean|number,defaultValue?:SponsorshipPrivacy)=>Observable<SponsorshipPrivacy>}),
/**
 * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
 * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
 */
sponsor:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The user or organization that is sponsoring. Returns null if the sponsorship is private. */
sponsorEntity:({get:<R extends SponsorRequest>(request: R, defaultValue?:(FieldsSelection<Sponsor, R>|null))=>Observable<(FieldsSelection<Sponsor, R>|null)>}),
/** The entity that is being sponsored */
sponsorable:(SponsorableObservableChain & {get:<R extends SponsorableRequest>(request: R, defaultValue?:Sponsorable)=>Observable<Sponsorable>}),
/** The associated sponsorship tier */
tier:(SponsorsTierObservableChain & {get:<R extends SponsorsTierRequest>(request: R, defaultValue?:(FieldsSelection<SponsorsTier, R>|null))=>Observable<(FieldsSelection<SponsorsTier, R>|null)>})}


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollectionPromiseChain{
/** Commit contributions made by the user, grouped by repository. */
commitContributionsByRepository:((args?:{
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends CommitContributionsByRepositoryRequest>(request: R, defaultValue?:CommitContributionsByRepository[])=>Promise<CommitContributionsByRepository[]>})&({get:<R extends CommitContributionsByRepositoryRequest>(request: R, defaultValue?:CommitContributionsByRepository[])=>Promise<CommitContributionsByRepository[]>}),
/** A calendar of this user's contributions on GitHub. */
contributionCalendar:(ContributionCalendarPromiseChain & {get:<R extends ContributionCalendarRequest>(request: R, defaultValue?:ContributionCalendar)=>Promise<ContributionCalendar>}),
/** The years the user has been making contributions with the most recent year first. */
contributionYears:({get:(request?:boolean|number,defaultValue?:Scalars["Int"][])=>Promise<Scalars["Int"][]>}),
/** Determine if this collection's time span ends in the current month. */
doesEndInCurrentMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * The date of the first restricted contribution the user made in this time
 * period. Can only be non-null when the user has enabled private contribution counts.
 */
earliestRestrictedContributionDate:({get:(request?:boolean|number,defaultValue?:(Scalars["Date"]|null))=>Promise<(Scalars["Date"]|null)>}),
/** The ending date and time of this collection. */
endedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/**
 * The first issue the user opened on GitHub. This will be null if that issue was
 * opened outside the collection's time range and ignoreTimeRange is false. If
 * the issue is not visible but the user has opted to show private contributions,
 * a RestrictedContribution will be returned.
 */
firstIssueContribution:({get:<R extends CreatedIssueOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueOrRestrictedContribution, R>|null))=>Promise<(FieldsSelection<CreatedIssueOrRestrictedContribution, R>|null)>}),
/**
 * The first pull request the user opened on GitHub. This will be null if that
 * pull request was opened outside the collection's time range and
 * ignoreTimeRange is not true. If the pull request is not visible but the user
 * has opted to show private contributions, a RestrictedContribution will be returned.
 */
firstPullRequestContribution:({get:<R extends CreatedPullRequestOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestOrRestrictedContribution, R>|null))=>Promise<(FieldsSelection<CreatedPullRequestOrRestrictedContribution, R>|null)>}),
/**
 * The first repository the user created on GitHub. This will be null if that
 * first repository was created outside the collection's time range and
 * ignoreTimeRange is false. If the repository is not visible, then a
 * RestrictedContribution is returned.
 */
firstRepositoryContribution:({get:<R extends CreatedRepositoryOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedRepositoryOrRestrictedContribution, R>|null))=>Promise<(FieldsSelection<CreatedRepositoryOrRestrictedContribution, R>|null)>}),
/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
hasActivityInThePast:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Determine if there are any contributions in this collection. */
hasAnyContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Determine if the user made any contributions in this time frame whose details
 * are not visible because they were made in a private repository. Can only be
 * true if the user enabled private contribution counts.
 */
hasAnyRestrictedContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether or not the collector's time span is all within the same day. */
isSingleDay:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of issues the user opened. */
issueContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first issue ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedIssueContributionConnectionPromiseChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Promise<CreatedIssueContributionConnection>})&(CreatedIssueContributionConnectionPromiseChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Promise<CreatedIssueContributionConnection>}),
/** Issue contributions made by the user, grouped by repository. */
issueContributionsByRepository:((args?:{
/** Should the user's first issue ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends IssueContributionsByRepositoryRequest>(request: R, defaultValue?:IssueContributionsByRepository[])=>Promise<IssueContributionsByRepository[]>})&({get:<R extends IssueContributionsByRepositoryRequest>(request: R, defaultValue?:IssueContributionsByRepository[])=>Promise<IssueContributionsByRepository[]>}),
/**
 * When the user signed up for GitHub. This will be null if that sign up date
 * falls outside the collection's time range and ignoreTimeRange is false.
 */
joinedGitHubContribution:(JoinedGitHubContributionPromiseChain & {get:<R extends JoinedGitHubContributionRequest>(request: R, defaultValue?:(FieldsSelection<JoinedGitHubContribution, R>|null))=>Promise<(FieldsSelection<JoinedGitHubContribution, R>|null)>}),
/**
 * The date of the most recent restricted contribution the user made in this time
 * period. Can only be non-null when the user has enabled private contribution counts.
 */
latestRestrictedContributionDate:({get:(request?:boolean|number,defaultValue?:(Scalars["Date"]|null))=>Promise<(Scalars["Date"]|null)>}),
/**
 * When this collection's time range does not include any activity from the user, use this
 * to get a different collection from an earlier time range that does have activity.
 */
mostRecentCollectionWithActivity:(ContributionsCollectionPromiseChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:(FieldsSelection<ContributionsCollection, R>|null))=>Promise<(FieldsSelection<ContributionsCollection, R>|null)>}),
/**
 * Returns a different contributions collection from an earlier time range than this one
 * that does not have any contributions.
 */
mostRecentCollectionWithoutActivity:(ContributionsCollectionPromiseChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:(FieldsSelection<ContributionsCollection, R>|null))=>Promise<(FieldsSelection<ContributionsCollection, R>|null)>}),
/**
 * The issue the user opened on GitHub that received the most comments in the specified
 * time frame.
 */
popularIssueContribution:(CreatedIssueContributionPromiseChain & {get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueContribution, R>|null))=>Promise<(FieldsSelection<CreatedIssueContribution, R>|null)>}),
/**
 * The pull request the user opened on GitHub that received the most comments in the
 * specified time frame.
 */
popularPullRequestContribution:(CreatedPullRequestContributionPromiseChain & {get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestContribution, R>|null))=>Promise<(FieldsSelection<CreatedPullRequestContribution, R>|null)>}),
/** Pull request contributions made by the user. */
pullRequestContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first pull request ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Promise<CreatedPullRequestContributionConnection>})&(CreatedPullRequestContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Promise<CreatedPullRequestContributionConnection>}),
/** Pull request contributions made by the user, grouped by repository. */
pullRequestContributionsByRepository:((args?:{
/** Should the user's first pull request ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends PullRequestContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestContributionsByRepository[])=>Promise<PullRequestContributionsByRepository[]>})&({get:<R extends PullRequestContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestContributionsByRepository[])=>Promise<PullRequestContributionsByRepository[]>}),
/** Pull request review contributions made by the user. */
pullRequestReviewContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestReviewContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Promise<CreatedPullRequestReviewContributionConnection>})&(CreatedPullRequestReviewContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Promise<CreatedPullRequestReviewContributionConnection>}),
/** Pull request review contributions made by the user, grouped by repository. */
pullRequestReviewContributionsByRepository:((args?:{
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends PullRequestReviewContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestReviewContributionsByRepository[])=>Promise<PullRequestReviewContributionsByRepository[]>})&({get:<R extends PullRequestReviewContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestReviewContributionsByRepository[])=>Promise<PullRequestReviewContributionsByRepository[]>}),
/** A list of repositories owned by the user that the user created in this time range. */
repositoryContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first repository ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedRepositoryContributionConnectionPromiseChain & {get:<R extends CreatedRepositoryContributionConnectionRequest>(request: R, defaultValue?:CreatedRepositoryContributionConnection)=>Promise<CreatedRepositoryContributionConnection>})&(CreatedRepositoryContributionConnectionPromiseChain & {get:<R extends CreatedRepositoryContributionConnectionRequest>(request: R, defaultValue?:CreatedRepositoryContributionConnection)=>Promise<CreatedRepositoryContributionConnection>}),
/**
 * A count of contributions made by the user that the viewer cannot access. Only
 * non-zero when the user has chosen to share their private contribution counts.
 */
restrictedContributionsCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The beginning date and time of this collection. */
startedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** How many commits were made by the user in this time span. */
totalCommitContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many issues the user opened. */
totalIssueContributions:((args?:{
/** Should the user's first issue ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many pull requests the user opened. */
totalPullRequestContributions:((args?:{
/** Should the user's first pull request ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many pull request reviews the user left. */
totalPullRequestReviewContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many different repositories the user committed to. */
totalRepositoriesWithContributedCommits:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many different repositories the user opened issues in. */
totalRepositoriesWithContributedIssues:((args?:{
/** Should the user's first issue ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many different repositories the user left pull request reviews in. */
totalRepositoriesWithContributedPullRequestReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many different repositories the user opened pull requests in. */
totalRepositoriesWithContributedPullRequests:((args?:{
/** Should the user's first pull request ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** How many repositories the user created. */
totalRepositoryContributions:((args?:{
/** Should the user's first repository ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The user who made the contributions in this collection. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export interface ContributionsCollectionObservableChain{
/** Commit contributions made by the user, grouped by repository. */
commitContributionsByRepository:((args?:{
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends CommitContributionsByRepositoryRequest>(request: R, defaultValue?:CommitContributionsByRepository[])=>Observable<CommitContributionsByRepository[]>})&({get:<R extends CommitContributionsByRepositoryRequest>(request: R, defaultValue?:CommitContributionsByRepository[])=>Observable<CommitContributionsByRepository[]>}),
/** A calendar of this user's contributions on GitHub. */
contributionCalendar:(ContributionCalendarObservableChain & {get:<R extends ContributionCalendarRequest>(request: R, defaultValue?:ContributionCalendar)=>Observable<ContributionCalendar>}),
/** The years the user has been making contributions with the most recent year first. */
contributionYears:({get:(request?:boolean|number,defaultValue?:Scalars["Int"][])=>Observable<Scalars["Int"][]>}),
/** Determine if this collection's time span ends in the current month. */
doesEndInCurrentMonth:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * The date of the first restricted contribution the user made in this time
 * period. Can only be non-null when the user has enabled private contribution counts.
 */
earliestRestrictedContributionDate:({get:(request?:boolean|number,defaultValue?:(Scalars["Date"]|null))=>Observable<(Scalars["Date"]|null)>}),
/** The ending date and time of this collection. */
endedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/**
 * The first issue the user opened on GitHub. This will be null if that issue was
 * opened outside the collection's time range and ignoreTimeRange is false. If
 * the issue is not visible but the user has opted to show private contributions,
 * a RestrictedContribution will be returned.
 */
firstIssueContribution:({get:<R extends CreatedIssueOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueOrRestrictedContribution, R>|null))=>Observable<(FieldsSelection<CreatedIssueOrRestrictedContribution, R>|null)>}),
/**
 * The first pull request the user opened on GitHub. This will be null if that
 * pull request was opened outside the collection's time range and
 * ignoreTimeRange is not true. If the pull request is not visible but the user
 * has opted to show private contributions, a RestrictedContribution will be returned.
 */
firstPullRequestContribution:({get:<R extends CreatedPullRequestOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestOrRestrictedContribution, R>|null))=>Observable<(FieldsSelection<CreatedPullRequestOrRestrictedContribution, R>|null)>}),
/**
 * The first repository the user created on GitHub. This will be null if that
 * first repository was created outside the collection's time range and
 * ignoreTimeRange is false. If the repository is not visible, then a
 * RestrictedContribution is returned.
 */
firstRepositoryContribution:({get:<R extends CreatedRepositoryOrRestrictedContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedRepositoryOrRestrictedContribution, R>|null))=>Observable<(FieldsSelection<CreatedRepositoryOrRestrictedContribution, R>|null)>}),
/** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
hasActivityInThePast:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Determine if there are any contributions in this collection. */
hasAnyContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Determine if the user made any contributions in this time frame whose details
 * are not visible because they were made in a private repository. Can only be
 * true if the user enabled private contribution counts.
 */
hasAnyRestrictedContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether or not the collector's time span is all within the same day. */
isSingleDay:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of issues the user opened. */
issueContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first issue ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedIssueContributionConnectionObservableChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Observable<CreatedIssueContributionConnection>})&(CreatedIssueContributionConnectionObservableChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Observable<CreatedIssueContributionConnection>}),
/** Issue contributions made by the user, grouped by repository. */
issueContributionsByRepository:((args?:{
/** Should the user's first issue ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends IssueContributionsByRepositoryRequest>(request: R, defaultValue?:IssueContributionsByRepository[])=>Observable<IssueContributionsByRepository[]>})&({get:<R extends IssueContributionsByRepositoryRequest>(request: R, defaultValue?:IssueContributionsByRepository[])=>Observable<IssueContributionsByRepository[]>}),
/**
 * When the user signed up for GitHub. This will be null if that sign up date
 * falls outside the collection's time range and ignoreTimeRange is false.
 */
joinedGitHubContribution:(JoinedGitHubContributionObservableChain & {get:<R extends JoinedGitHubContributionRequest>(request: R, defaultValue?:(FieldsSelection<JoinedGitHubContribution, R>|null))=>Observable<(FieldsSelection<JoinedGitHubContribution, R>|null)>}),
/**
 * The date of the most recent restricted contribution the user made in this time
 * period. Can only be non-null when the user has enabled private contribution counts.
 */
latestRestrictedContributionDate:({get:(request?:boolean|number,defaultValue?:(Scalars["Date"]|null))=>Observable<(Scalars["Date"]|null)>}),
/**
 * When this collection's time range does not include any activity from the user, use this
 * to get a different collection from an earlier time range that does have activity.
 */
mostRecentCollectionWithActivity:(ContributionsCollectionObservableChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:(FieldsSelection<ContributionsCollection, R>|null))=>Observable<(FieldsSelection<ContributionsCollection, R>|null)>}),
/**
 * Returns a different contributions collection from an earlier time range than this one
 * that does not have any contributions.
 */
mostRecentCollectionWithoutActivity:(ContributionsCollectionObservableChain & {get:<R extends ContributionsCollectionRequest>(request: R, defaultValue?:(FieldsSelection<ContributionsCollection, R>|null))=>Observable<(FieldsSelection<ContributionsCollection, R>|null)>}),
/**
 * The issue the user opened on GitHub that received the most comments in the specified
 * time frame.
 */
popularIssueContribution:(CreatedIssueContributionObservableChain & {get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueContribution, R>|null))=>Observable<(FieldsSelection<CreatedIssueContribution, R>|null)>}),
/**
 * The pull request the user opened on GitHub that received the most comments in the
 * specified time frame.
 */
popularPullRequestContribution:(CreatedPullRequestContributionObservableChain & {get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestContribution, R>|null))=>Observable<(FieldsSelection<CreatedPullRequestContribution, R>|null)>}),
/** Pull request contributions made by the user. */
pullRequestContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first pull request ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestContributionConnectionObservableChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Observable<CreatedPullRequestContributionConnection>})&(CreatedPullRequestContributionConnectionObservableChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Observable<CreatedPullRequestContributionConnection>}),
/** Pull request contributions made by the user, grouped by repository. */
pullRequestContributionsByRepository:((args?:{
/** Should the user's first pull request ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from the result. */
excludePopular?: (Scalars["Boolean"]|null),
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends PullRequestContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestContributionsByRepository[])=>Observable<PullRequestContributionsByRepository[]>})&({get:<R extends PullRequestContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestContributionsByRepository[])=>Observable<PullRequestContributionsByRepository[]>}),
/** Pull request review contributions made by the user. */
pullRequestReviewContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestReviewContributionConnectionObservableChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Observable<CreatedPullRequestReviewContributionConnection>})&(CreatedPullRequestReviewContributionConnectionObservableChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Observable<CreatedPullRequestReviewContributionConnection>}),
/** Pull request review contributions made by the user, grouped by repository. */
pullRequestReviewContributionsByRepository:((args?:{
/** How many repositories should be included. */
maxRepositories?: (Scalars["Int"]|null)})=>{get:<R extends PullRequestReviewContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestReviewContributionsByRepository[])=>Observable<PullRequestReviewContributionsByRepository[]>})&({get:<R extends PullRequestReviewContributionsByRepositoryRequest>(request: R, defaultValue?:PullRequestReviewContributionsByRepository[])=>Observable<PullRequestReviewContributionsByRepository[]>}),
/** A list of repositories owned by the user that the user created in this time range. */
repositoryContributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Should the user's first repository ever be excluded from the result. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedRepositoryContributionConnectionObservableChain & {get:<R extends CreatedRepositoryContributionConnectionRequest>(request: R, defaultValue?:CreatedRepositoryContributionConnection)=>Observable<CreatedRepositoryContributionConnection>})&(CreatedRepositoryContributionConnectionObservableChain & {get:<R extends CreatedRepositoryContributionConnectionRequest>(request: R, defaultValue?:CreatedRepositoryContributionConnection)=>Observable<CreatedRepositoryContributionConnection>}),
/**
 * A count of contributions made by the user that the viewer cannot access. Only
 * non-zero when the user has chosen to share their private contribution counts.
 */
restrictedContributionsCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The beginning date and time of this collection. */
startedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** How many commits were made by the user in this time span. */
totalCommitContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many issues the user opened. */
totalIssueContributions:((args?:{
/** Should the user's first issue ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many pull requests the user opened. */
totalPullRequestContributions:((args?:{
/** Should the user's first pull request ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many pull request reviews the user left. */
totalPullRequestReviewContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many different repositories the user committed to. */
totalRepositoriesWithContributedCommits:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many different repositories the user opened issues in. */
totalRepositoriesWithContributedIssues:((args?:{
/** Should the user's first issue ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented issue be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many different repositories the user left pull request reviews in. */
totalRepositoriesWithContributedPullRequestReviews:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many different repositories the user opened pull requests in. */
totalRepositoriesWithContributedPullRequests:((args?:{
/** Should the user's first pull request ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null),
/** Should the user's most commented pull request be excluded from this count. */
excludePopular?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** How many repositories the user created. */
totalRepositoryContributions:((args?:{
/** Should the user's first repository ever be excluded from this count. */
excludeFirst?: (Scalars["Boolean"]|null)})=>{get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})&({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The user who made the contributions in this collection. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepositoryPromiseChain{
/** The commit contributions, each representing a day. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for commit contributions returned from the connection. */
orderBy?: (CommitContributionOrder|null)})=>CreatedCommitContributionConnectionPromiseChain & {get:<R extends CreatedCommitContributionConnectionRequest>(request: R, defaultValue?:CreatedCommitContributionConnection)=>Promise<CreatedCommitContributionConnection>})&(CreatedCommitContributionConnectionPromiseChain & {get:<R extends CreatedCommitContributionConnectionRequest>(request: R, defaultValue?:CreatedCommitContributionConnection)=>Promise<CreatedCommitContributionConnection>}),
/** The repository in which the commits were made. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for the user's commits to the repository in this time range. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for the user's commits to the repository in this time range. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** This aggregates commits made by a user within one repository. */
export interface CommitContributionsByRepositoryObservableChain{
/** The commit contributions, each representing a day. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for commit contributions returned from the connection. */
orderBy?: (CommitContributionOrder|null)})=>CreatedCommitContributionConnectionObservableChain & {get:<R extends CreatedCommitContributionConnectionRequest>(request: R, defaultValue?:CreatedCommitContributionConnection)=>Observable<CreatedCommitContributionConnection>})&(CreatedCommitContributionConnectionObservableChain & {get:<R extends CreatedCommitContributionConnectionRequest>(request: R, defaultValue?:CreatedCommitContributionConnection)=>Observable<CreatedCommitContributionConnection>}),
/** The repository in which the commits were made. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for the user's commits to the repository in this time range. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for the user's commits to the repository in this time range. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CreatedCommitContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedCommitContributionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedCommitContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedCommitContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedCommitContribution, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedCommitContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of commits across days and repositories in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CreatedCommitContribution. */
export interface CreatedCommitContributionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CreatedCommitContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedCommitContributionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedCommitContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedCommitContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedCommitContribution, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedCommitContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of commits across days and repositories in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CreatedCommitContributionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedCommitContributionPromiseChain & {get:<R extends CreatedCommitContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedCommitContribution, R>|null))=>Promise<(FieldsSelection<CreatedCommitContribution, R>|null)>})}


/** An edge in a connection. */
export interface CreatedCommitContributionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedCommitContributionObservableChain & {get:<R extends CreatedCommitContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedCommitContribution, R>|null))=>Observable<(FieldsSelection<CreatedCommitContribution, R>|null)>})}


/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContributionPromiseChain{
/** How many commits were made on this day to this repository by the user. */
commitCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The repository the user made a commit in. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents the contribution a user made by committing to a repository. */
export interface CreatedCommitContributionObservableChain{
/** How many commits were made on this day to this repository by the user. */
commitCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The repository the user made a commit in. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface ContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents a contribution a user made on GitHub, such as opening an issue. */
export interface ContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendarPromiseChain{
/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
colors:({get:(request?:boolean|number,defaultValue?:Scalars["String"][])=>Promise<Scalars["String"][]>}),
/** Determine if the color set was chosen because it's currently Halloween. */
isHalloween:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of the months of contributions in this calendar. */
months:({get:<R extends ContributionCalendarMonthRequest>(request: R, defaultValue?:ContributionCalendarMonth[])=>Promise<ContributionCalendarMonth[]>}),
/** The count of total contributions in the calendar. */
totalContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of the weeks of contributions in this calendar. */
weeks:({get:<R extends ContributionCalendarWeekRequest>(request: R, defaultValue?:ContributionCalendarWeek[])=>Promise<ContributionCalendarWeek[]>})}


/** A calendar of contributions made on GitHub by a user. */
export interface ContributionCalendarObservableChain{
/** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
colors:({get:(request?:boolean|number,defaultValue?:Scalars["String"][])=>Observable<Scalars["String"][]>}),
/** Determine if the color set was chosen because it's currently Halloween. */
isHalloween:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of the months of contributions in this calendar. */
months:({get:<R extends ContributionCalendarMonthRequest>(request: R, defaultValue?:ContributionCalendarMonth[])=>Observable<ContributionCalendarMonth[]>}),
/** The count of total contributions in the calendar. */
totalContributions:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of the weeks of contributions in this calendar. */
weeks:({get:<R extends ContributionCalendarWeekRequest>(request: R, defaultValue?:ContributionCalendarWeek[])=>Observable<ContributionCalendarWeek[]>})}


/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonthPromiseChain{
/** The date of the first day of this month. */
firstDay:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Promise<Scalars["Date"]>}),
/** The name of the month. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** How many weeks started in this month. */
totalWeeks:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The year the month occurred in. */
year:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A month of contributions in a user's contribution graph. */
export interface ContributionCalendarMonthObservableChain{
/** The date of the first day of this month. */
firstDay:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Observable<Scalars["Date"]>}),
/** The name of the month. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** How many weeks started in this month. */
totalWeeks:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The year the month occurred in. */
year:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeekPromiseChain{
/** The days of contributions in this week. */
contributionDays:({get:<R extends ContributionCalendarDayRequest>(request: R, defaultValue?:ContributionCalendarDay[])=>Promise<ContributionCalendarDay[]>}),
/** The date of the earliest square in this week. */
firstDay:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Promise<Scalars["Date"]>})}


/** A week of contributions in a user's contribution graph. */
export interface ContributionCalendarWeekObservableChain{
/** The days of contributions in this week. */
contributionDays:({get:<R extends ContributionCalendarDayRequest>(request: R, defaultValue?:ContributionCalendarDay[])=>Observable<ContributionCalendarDay[]>}),
/** The date of the earliest square in this week. */
firstDay:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Observable<Scalars["Date"]>})}


/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDayPromiseChain{
/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** How many contributions were made by the user on this day. */
contributionCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The day this square represents. */
date:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Promise<Scalars["Date"]>}),
/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
weekday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Represents a single day of contributions on GitHub by a user. */
export interface ContributionCalendarDayObservableChain{
/** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
color:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** How many contributions were made by the user on this day. */
contributionCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The day this square represents. */
date:({get:(request?:boolean|number,defaultValue?:Scalars["Date"])=>Observable<Scalars["Date"]>}),
/** A number representing which day of the week this square represents, e.g., 1 is Monday. */
weekday:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The issue that was opened. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Promise<Issue>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents the contribution a user made on GitHub by opening an issue. */
export interface CreatedIssueContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The issue that was opened. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:Issue)=>Observable<Issue>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents a private contribution a user made on GitHub. */
export interface RestrictedContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The pull request that was opened. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents the contribution a user made on GitHub by opening a pull request. */
export interface CreatedPullRequestContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The pull request that was opened. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The repository that was created. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents the contribution a user made on GitHub by creating a repository. */
export interface CreatedRepositoryContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The repository that was created. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CreatedIssueContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedIssueContributionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedIssueContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedIssueContribution, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedIssueContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CreatedIssueContribution. */
export interface CreatedIssueContributionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CreatedIssueContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedIssueContributionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedIssueContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedIssueContribution, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedIssueContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CreatedIssueContributionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedIssueContributionPromiseChain & {get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueContribution, R>|null))=>Promise<(FieldsSelection<CreatedIssueContribution, R>|null)>})}


/** An edge in a connection. */
export interface CreatedIssueContributionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedIssueContributionObservableChain & {get:<R extends CreatedIssueContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedIssueContribution, R>|null))=>Observable<(FieldsSelection<CreatedIssueContribution, R>|null)>})}


/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepositoryPromiseChain{
/** The issue contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedIssueContributionConnectionPromiseChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Promise<CreatedIssueContributionConnection>})&(CreatedIssueContributionConnectionPromiseChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Promise<CreatedIssueContributionConnection>}),
/** The repository in which the issues were opened. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** This aggregates issues opened by a user within one repository. */
export interface IssueContributionsByRepositoryObservableChain{
/** The issue contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedIssueContributionConnectionObservableChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Observable<CreatedIssueContributionConnection>})&(CreatedIssueContributionConnectionObservableChain & {get:<R extends CreatedIssueContributionConnectionRequest>(request: R, defaultValue?:CreatedIssueContributionConnection)=>Observable<CreatedIssueContributionConnection>}),
/** The repository in which the issues were opened. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents a user signing up for a GitHub account. */
export interface JoinedGitHubContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CreatedPullRequestContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestContributionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedPullRequestContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestContribution, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedPullRequestContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CreatedPullRequestContribution. */
export interface CreatedPullRequestContributionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CreatedPullRequestContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestContributionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedPullRequestContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestContribution, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedPullRequestContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CreatedPullRequestContributionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedPullRequestContributionPromiseChain & {get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestContribution, R>|null))=>Promise<(FieldsSelection<CreatedPullRequestContribution, R>|null)>})}


/** An edge in a connection. */
export interface CreatedPullRequestContributionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedPullRequestContributionObservableChain & {get:<R extends CreatedPullRequestContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestContribution, R>|null))=>Observable<(FieldsSelection<CreatedPullRequestContribution, R>|null)>})}


/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepositoryPromiseChain{
/** The pull request contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Promise<CreatedPullRequestContributionConnection>})&(CreatedPullRequestContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Promise<CreatedPullRequestContributionConnection>}),
/** The repository in which the pull requests were opened. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** This aggregates pull requests opened by a user within one repository. */
export interface PullRequestContributionsByRepositoryObservableChain{
/** The pull request contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestContributionConnectionObservableChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Observable<CreatedPullRequestContributionConnection>})&(CreatedPullRequestContributionConnectionObservableChain & {get:<R extends CreatedPullRequestContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestContributionConnection)=>Observable<CreatedPullRequestContributionConnection>}),
/** The repository in which the pull requests were opened. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CreatedPullRequestReviewContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestReviewContributionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedPullRequestReviewContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedPullRequestReviewContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestReviewContribution, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedPullRequestReviewContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CreatedPullRequestReviewContribution. */
export interface CreatedPullRequestReviewContributionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CreatedPullRequestReviewContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestReviewContributionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedPullRequestReviewContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedPullRequestReviewContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedPullRequestReviewContribution, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedPullRequestReviewContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedPullRequestReviewContributionPromiseChain & {get:<R extends CreatedPullRequestReviewContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestReviewContribution, R>|null))=>Promise<(FieldsSelection<CreatedPullRequestReviewContribution, R>|null)>})}


/** An edge in a connection. */
export interface CreatedPullRequestReviewContributionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedPullRequestReviewContributionObservableChain & {get:<R extends CreatedPullRequestReviewContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedPullRequestReviewContribution, R>|null))=>Observable<(FieldsSelection<CreatedPullRequestReviewContribution, R>|null)>})}


/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContributionPromiseChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The pull request the user reviewed. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Promise<PullRequest>}),
/** The review the user left on the pull request. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:PullRequestReview)=>Promise<PullRequestReview>}),
/** The repository containing the pull request that the user reviewed. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** Represents the contribution a user made by leaving a review on a pull request. */
export interface CreatedPullRequestReviewContributionObservableChain{
/**
 * Whether this contribution is associated with a record you do not have access to. For
 * example, your own 'first issue' contribution may have been made on a repository you can no
 * longer access.
 */
isRestricted:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** When this contribution was made. */
occurredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The pull request the user reviewed. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:PullRequest)=>Observable<PullRequest>}),
/** The review the user left on the pull request. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:PullRequestReview)=>Observable<PullRequestReview>}),
/** The repository containing the pull request that the user reviewed. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** The HTTP path for this contribution. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this contribution. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The user who made this contribution. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}


/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepositoryPromiseChain{
/** The pull request review contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestReviewContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Promise<CreatedPullRequestReviewContributionConnection>})&(CreatedPullRequestReviewContributionConnectionPromiseChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Promise<CreatedPullRequestReviewContributionConnection>}),
/** The repository in which the pull request reviews were made. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>})}


/** This aggregates pull request reviews made by a user within one repository. */
export interface PullRequestReviewContributionsByRepositoryObservableChain{
/** The pull request review contributions. */
contributions:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for contributions returned from the connection. */
orderBy?: (ContributionOrder|null)})=>CreatedPullRequestReviewContributionConnectionObservableChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Observable<CreatedPullRequestReviewContributionConnection>})&(CreatedPullRequestReviewContributionConnectionObservableChain & {get:<R extends CreatedPullRequestReviewContributionConnectionRequest>(request: R, defaultValue?:CreatedPullRequestReviewContributionConnection)=>Observable<CreatedPullRequestReviewContributionConnection>}),
/** The repository in which the pull request reviews were made. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>})}


/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends CreatedRepositoryContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedRepositoryContributionEdge, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedRepositoryContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedRepositoryContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedRepositoryContribution, R>|null)[]|null))=>Promise<((FieldsSelection<CreatedRepositoryContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for CreatedRepositoryContribution. */
export interface CreatedRepositoryContributionConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends CreatedRepositoryContributionEdgeRequest>(request: R, defaultValue?:((FieldsSelection<CreatedRepositoryContributionEdge, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedRepositoryContributionEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends CreatedRepositoryContributionRequest>(request: R, defaultValue?:((FieldsSelection<CreatedRepositoryContribution, R>|null)[]|null))=>Observable<((FieldsSelection<CreatedRepositoryContribution, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface CreatedRepositoryContributionEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedRepositoryContributionPromiseChain & {get:<R extends CreatedRepositoryContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedRepositoryContribution, R>|null))=>Promise<(FieldsSelection<CreatedRepositoryContribution, R>|null)>})}


/** An edge in a connection. */
export interface CreatedRepositoryContributionEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(CreatedRepositoryContributionObservableChain & {get:<R extends CreatedRepositoryContributionRequest>(request: R, defaultValue?:(FieldsSelection<CreatedRepositoryContribution, R>|null))=>Observable<(FieldsSelection<CreatedRepositoryContribution, R>|null)>})}


/** The connection type for User. */
export interface FollowerConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Promise<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface FollowerConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Observable<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for User. */
export interface FollowingConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Promise<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface FollowingConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends UserEdgeRequest>(request: R, defaultValue?:((FieldsSelection<UserEdge, R>|null)[]|null))=>Observable<((FieldsSelection<UserEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** The connection type for Organization. */
export interface OrganizationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends OrganizationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationRequest>(request: R, defaultValue?:((FieldsSelection<Organization, R>|null)[]|null))=>Promise<((FieldsSelection<Organization, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Organization. */
export interface OrganizationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends OrganizationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationRequest>(request: R, defaultValue?:((FieldsSelection<Organization, R>|null)[]|null))=>Observable<((FieldsSelection<Organization, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface OrganizationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>})}


/** An edge in a connection. */
export interface OrganizationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>})}


/** The connection type for PublicKey. */
export interface PublicKeyConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends PublicKeyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PublicKeyEdge, R>|null)[]|null))=>Promise<((FieldsSelection<PublicKeyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PublicKeyRequest>(request: R, defaultValue?:((FieldsSelection<PublicKey, R>|null)[]|null))=>Promise<((FieldsSelection<PublicKey, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for PublicKey. */
export interface PublicKeyConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends PublicKeyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<PublicKeyEdge, R>|null)[]|null))=>Observable<((FieldsSelection<PublicKeyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends PublicKeyRequest>(request: R, defaultValue?:((FieldsSelection<PublicKey, R>|null)[]|null))=>Observable<((FieldsSelection<PublicKey, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface PublicKeyEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PublicKeyPromiseChain & {get:<R extends PublicKeyRequest>(request: R, defaultValue?:(FieldsSelection<PublicKey, R>|null))=>Promise<(FieldsSelection<PublicKey, R>|null)>})}


/** An edge in a connection. */
export interface PublicKeyEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(PublicKeyObservableChain & {get:<R extends PublicKeyRequest>(request: R, defaultValue?:(FieldsSelection<PublicKey, R>|null))=>Observable<(FieldsSelection<PublicKey, R>|null)>})}


/** A user's public key. */
export interface PublicKeyPromiseChain{
/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
accessedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/**
 * Identifies the date and time when the key was created. Keys created before
 * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
 */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>}),
/** The fingerprint for this PublicKey. */
fingerprint:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
isReadOnly:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The public key string. */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/**
 * Identifies the date and time when the key was updated. Keys created before
 * March 5th, 2014 may have inaccurate values. Values will be null for keys not
 * owned by the user.
 */
updatedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Promise<(Scalars["DateTime"]|null)>})}


/** A user's public key. */
export interface PublicKeyObservableChain{
/** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
accessedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/**
 * Identifies the date and time when the key was created. Keys created before
 * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
 */
createdAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>}),
/** The fingerprint for this PublicKey. */
fingerprint:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
isReadOnly:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The public key string. */
key:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/**
 * Identifies the date and time when the key was updated. Keys created before
 * March 5th, 2014 may have inaccurate values. Values will be null for keys not
 * owned by the user.
 */
updatedAt:({get:(request?:boolean|number,defaultValue?:(Scalars["DateTime"]|null))=>Observable<(Scalars["DateTime"]|null)>})}


/** The connection type for SavedReply. */
export interface SavedReplyConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SavedReplyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SavedReplyEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SavedReplyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SavedReplyRequest>(request: R, defaultValue?:((FieldsSelection<SavedReply, R>|null)[]|null))=>Promise<((FieldsSelection<SavedReply, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for SavedReply. */
export interface SavedReplyConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SavedReplyEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SavedReplyEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SavedReplyEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SavedReplyRequest>(request: R, defaultValue?:((FieldsSelection<SavedReply, R>|null)[]|null))=>Observable<((FieldsSelection<SavedReply, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SavedReplyEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SavedReplyPromiseChain & {get:<R extends SavedReplyRequest>(request: R, defaultValue?:(FieldsSelection<SavedReply, R>|null))=>Promise<(FieldsSelection<SavedReply, R>|null)>})}


/** An edge in a connection. */
export interface SavedReplyEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SavedReplyObservableChain & {get:<R extends SavedReplyRequest>(request: R, defaultValue?:(FieldsSelection<SavedReply, R>|null))=>Observable<(FieldsSelection<SavedReply, R>|null)>})}


/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReplyPromiseChain{
/** The body of the saved reply. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The saved reply body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The title of the saved reply. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user that saved this reply. */
user:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>})}


/** A Saved Reply is text a user can use to reply quickly. */
export interface SavedReplyObservableChain{
/** The body of the saved reply. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The saved reply body rendered to HTML. */
bodyHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The title of the saved reply. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user that saved this reply. */
user:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>})}


/** The connection type for Repository. */
export interface StarredRepositoryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends StarredRepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StarredRepositoryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<StarredRepositoryEdge, R>|null)[]|null)>}),
/** Is the list of stars for this user truncated? This is true for users that have many stars. */
isOverLimit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Promise<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for Repository. */
export interface StarredRepositoryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends StarredRepositoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<StarredRepositoryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<StarredRepositoryEdge, R>|null)[]|null)>}),
/** Is the list of stars for this user truncated? This is true for users that have many stars. */
isOverLimit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryRequest>(request: R, defaultValue?:((FieldsSelection<Repository, R>|null)[]|null))=>Observable<((FieldsSelection<Repository, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a starred repository. */
export interface StarredRepositoryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),node:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** Identifies when the item was starred. */
starredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Represents a starred repository. */
export interface StarredRepositoryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),node:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** Identifies when the item was starred. */
starredAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends OrganizationAuditEntryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationAuditEntryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationAuditEntryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationAuditEntryRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationAuditEntry, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationAuditEntry, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for OrganizationAuditEntry. */
export interface OrganizationAuditEntryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends OrganizationAuditEntryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationAuditEntryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationAuditEntryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationAuditEntryRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationAuditEntry, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationAuditEntry, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface OrganizationAuditEntryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends OrganizationAuditEntryRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationAuditEntry, R>|null))=>Promise<(FieldsSelection<OrganizationAuditEntry, R>|null)>})}


/** An edge in a connection. */
export interface OrganizationAuditEntryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends OrganizationAuditEntryRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationAuditEntry, R>|null))=>Observable<(FieldsSelection<OrganizationAuditEntry, R>|null)>})}


/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a members_can_delete_repos.clear event. */
export interface MembersCanDeleteReposClearAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** An entry in the audit log. */
export interface AuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** An entry in the audit log. */
export interface AuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Location information for an actor */
export interface ActorLocationPromiseChain{
/** City */
city:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Country name */
country:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Country code */
countryCode:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Region name */
region:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Region or state code */
regionCode:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Location information for an actor */
export interface ActorLocationObservableChain{
/** City */
city:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Country name */
country:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Country code */
countryCode:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Region name */
region:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Region or state code */
regionCode:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryDataPromiseChain{
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry containing enterprise account information. */
export interface EnterpriseAuditEntryDataObservableChain{
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryDataPromiseChain{
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action org.* */
export interface OrganizationAuditEntryDataObservableChain{
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a members_can_delete_repos.disable event. */
export interface MembersCanDeleteReposDisableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a members_can_delete_repos.enable event. */
export interface MembersCanDeleteReposEnableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The application URL of the OAuth Application. */
applicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The callback URL of the OAuth Application. */
callbackUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The rate limit of the OAuth Application. */
rateLimit:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The state of the OAuth Application. */
state:({get:(request?:boolean|number,defaultValue?:(OauthApplicationCreateAuditEntryState|null))=>Promise<(OauthApplicationCreateAuditEntryState|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a oauth_application.create event. */
export interface OauthApplicationCreateAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The application URL of the OAuth Application. */
applicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The callback URL of the OAuth Application. */
callbackUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The rate limit of the OAuth Application. */
rateLimit:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The state of the OAuth Application. */
state:({get:(request?:boolean|number,defaultValue?:(OauthApplicationCreateAuditEntryState|null))=>Observable<(OauthApplicationCreateAuditEntryState|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryDataPromiseChain{
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action oauth_application.* */
export interface OauthApplicationAuditEntryDataObservableChain{
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The email address used to invite a billing manager for the organization. */
invitationEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.add_billing_manager */
export interface OrgAddBillingManagerAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The email address used to invite a billing manager for the organization. */
invitationEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The permission level of the member added to the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgAddMemberAuditEntryPermission|null))=>Promise<(OrgAddMemberAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.add_member */
export interface OrgAddMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The permission level of the member added to the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgAddMemberAuditEntryPermission|null))=>Observable<(OrgAddMemberAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The blocked user. */
blockedUser:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The username of the blocked user. */
blockedUserName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the blocked user. */
blockedUserResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the blocked user. */
blockedUserUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.block_user */
export interface OrgBlockUserAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The blocked user. */
blockedUser:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The username of the blocked user. */
blockedUserName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the blocked user. */
blockedUserResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the blocked user. */
blockedUserUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.config.disable_collaborators_only event. */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.config.enable_collaborators_only event. */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The billing plan for the Organization. */
billingPlan:({get:(request?:boolean|number,defaultValue?:(OrgCreateAuditEntryBillingPlan|null))=>Promise<(OrgCreateAuditEntryBillingPlan|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.create event. */
export interface OrgCreateAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The billing plan for the Organization. */
billingPlan:({get:(request?:boolean|number,defaultValue?:(OrgCreateAuditEntryBillingPlan|null))=>Observable<(OrgCreateAuditEntryBillingPlan|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export interface OrgDisableOauthAppRestrictionsAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The SAML provider's digest algorithm URL. */
digestMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The SAML provider's issuer URL. */
issuerUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The SAML provider's signature algorithm URL. */
signatureMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The SAML provider's single sign-on URL. */
singleSignOnUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_saml event. */
export interface OrgDisableSamlAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The SAML provider's digest algorithm URL. */
digestMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The SAML provider's issuer URL. */
issuerUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The SAML provider's signature algorithm URL. */
signatureMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The SAML provider's single sign-on URL. */
singleSignOnUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.disable_two_factor_requirement event. */
export interface OrgDisableTwoFactorRequirementAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export interface OrgEnableOauthAppRestrictionsAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The SAML provider's digest algorithm URL. */
digestMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The SAML provider's issuer URL. */
issuerUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The SAML provider's signature algorithm URL. */
signatureMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The SAML provider's single sign-on URL. */
singleSignOnUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_saml event. */
export interface OrgEnableSamlAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The SAML provider's digest algorithm URL. */
digestMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The SAML provider's issuer URL. */
issuerUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The SAML provider's signature algorithm URL. */
signatureMethodUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The SAML provider's single sign-on URL. */
singleSignOnUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.enable_two_factor_requirement event. */
export interface OrgEnableTwoFactorRequirementAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The email address of the organization invitation. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The organization invitation. */
organizationInvitation:(OrganizationInvitationPromiseChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Promise<(FieldsSelection<OrganizationInvitation, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.invite_member event. */
export interface OrgInviteMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The email address of the organization invitation. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The organization invitation. */
organizationInvitation:(OrganizationInvitationObservableChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Observable<(FieldsSelection<OrganizationInvitation, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.invite_to_business event. */
export interface OrgInviteToBusinessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_approved event. */
export interface OrgOauthAppAccessApprovedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_denied event. */
export interface OrgOauthAppAccessDeniedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.oauth_app_access_requested event. */
export interface OrgOauthAppAccessRequestedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the OAuth Application. */
oauthApplicationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the OAuth Application */
oauthApplicationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the OAuth Application */
oauthApplicationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The reason for the billing manager being removed. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveBillingManagerAuditEntryReason|null))=>Promise<(OrgRemoveBillingManagerAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_billing_manager event. */
export interface OrgRemoveBillingManagerAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The reason for the billing manager being removed. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveBillingManagerAuditEntryReason|null))=>Observable<(OrgRemoveBillingManagerAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The types of membership the member has with the organization. */
membershipTypes:({get:(request?:boolean|number,defaultValue?:(OrgRemoveMemberAuditEntryMembershipType[]|null))=>Promise<(OrgRemoveMemberAuditEntryMembershipType[]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The reason for the member being removed. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveMemberAuditEntryReason|null))=>Promise<(OrgRemoveMemberAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_member event. */
export interface OrgRemoveMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The types of membership the member has with the organization. */
membershipTypes:({get:(request?:boolean|number,defaultValue?:(OrgRemoveMemberAuditEntryMembershipType[]|null))=>Observable<(OrgRemoveMemberAuditEntryMembershipType[]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The reason for the member being removed. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveMemberAuditEntryReason|null))=>Observable<(OrgRemoveMemberAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The types of membership the outside collaborator has with the organization. */
membershipTypes:({get:(request?:boolean|number,defaultValue?:(OrgRemoveOutsideCollaboratorAuditEntryMembershipType[]|null))=>Promise<(OrgRemoveOutsideCollaboratorAuditEntryMembershipType[]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The reason for the outside collaborator being removed from the Organization. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveOutsideCollaboratorAuditEntryReason|null))=>Promise<(OrgRemoveOutsideCollaboratorAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.remove_outside_collaborator event. */
export interface OrgRemoveOutsideCollaboratorAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The types of membership the outside collaborator has with the organization. */
membershipTypes:({get:(request?:boolean|number,defaultValue?:(OrgRemoveOutsideCollaboratorAuditEntryMembershipType[]|null))=>Observable<(OrgRemoveOutsideCollaboratorAuditEntryMembershipType[]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The reason for the outside collaborator being removed from the Organization. */
reason:({get:(request?:boolean|number,defaultValue?:(OrgRemoveOutsideCollaboratorAuditEntryReason|null))=>Observable<(OrgRemoveOutsideCollaboratorAuditEntryReason|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The number of custom email routings for the restored member. */
restoredCustomEmailRoutingsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The number of issue assignemnts for the restored member. */
restoredIssueAssignmentsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** Restored organization membership objects. */
restoredMemberships:({get:<R extends OrgRestoreMemberAuditEntryMembershipRequest>(request: R, defaultValue?:(OrgRestoreMemberAuditEntryMembership[]|null))=>Promise<(OrgRestoreMemberAuditEntryMembership[]|null)>}),
/** The number of restored memberships. */
restoredMembershipsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The number of repositories of the restored member. */
restoredRepositoriesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The number of starred repositories for the restored member. */
restoredRepositoryStarsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The number of watched repositories for the restored member. */
restoredRepositoryWatchesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Promise<(Scalars["Int"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.restore_member event. */
export interface OrgRestoreMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The number of custom email routings for the restored member. */
restoredCustomEmailRoutingsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The number of issue assignemnts for the restored member. */
restoredIssueAssignmentsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** Restored organization membership objects. */
restoredMemberships:({get:<R extends OrgRestoreMemberAuditEntryMembershipRequest>(request: R, defaultValue?:(OrgRestoreMemberAuditEntryMembership[]|null))=>Observable<(OrgRestoreMemberAuditEntryMembership[]|null)>}),
/** The number of restored memberships. */
restoredMembershipsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The number of repositories of the restored member. */
restoredRepositoriesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The number of starred repositories for the restored member. */
restoredRepositoryStarsCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The number of watched repositories for the restored member. */
restoredRepositoryWatchesCount:({get:(request?:boolean|number,defaultValue?:(Scalars["Int"]|null))=>Observable<(Scalars["Int"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataPromiseChain{
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an organization membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryDataObservableChain{
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataPromiseChain{
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for a repository membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryDataObservableChain{
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryDataPromiseChain{
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action repo.* */
export interface RepositoryAuditEntryDataObservableChain{
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryDataPromiseChain{
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for a team membership for org.restore_member actions */
export interface OrgRestoreMemberMembershipTeamAuditEntryDataObservableChain{
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryDataPromiseChain{
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with action team.* */
export interface TeamAuditEntryDataObservableChain{
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user being unblocked by the organization. */
blockedUser:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The username of the blocked user. */
blockedUserName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the blocked user. */
blockedUserResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the blocked user. */
blockedUserUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.unblock_user */
export interface OrgUnblockUserAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user being unblocked by the organization. */
blockedUser:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The username of the blocked user. */
blockedUserName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the blocked user. */
blockedUserResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the blocked user. */
blockedUserUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The new default repository permission level for the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null))=>Promise<(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)>}),
/** The former default repository permission level for the organization. */
permissionWas:({get:(request?:boolean|number,defaultValue?:(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null))=>Promise<(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_default_repository_permission */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The new default repository permission level for the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null))=>Observable<(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)>}),
/** The former default repository permission level for the organization. */
permissionWas:({get:(request?:boolean|number,defaultValue?:(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null))=>Observable<(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The new member permission level for the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberAuditEntryPermission|null))=>Promise<(OrgUpdateMemberAuditEntryPermission|null)>}),
/** The former member permission level for the organization. */
permissionWas:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberAuditEntryPermission|null))=>Promise<(OrgUpdateMemberAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_member event. */
export interface OrgUpdateMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The new member permission level for the organization. */
permission:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberAuditEntryPermission|null))=>Observable<(OrgUpdateMemberAuditEntryPermission|null)>}),
/** The former member permission level for the organization. */
permissionWas:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberAuditEntryPermission|null))=>Observable<(OrgUpdateMemberAuditEntryPermission|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** Can members create repositories in the organization. */
canCreateRepositories:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The permission for visibility level of repositories for this organization. */
visibility:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility|null))=>Promise<(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility|null)>})}


/** Audit log entry for a org.update_member_repository_creation_permission event. */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** Can members create repositories in the organization. */
canCreateRepositories:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The permission for visibility level of repositories for this organization. */
visibility:({get:(request?:boolean|number,defaultValue?:(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility|null))=>Observable<(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility|null)>})}


/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** Can outside collaborators be invited to repositories in the organization. */
canInviteOutsideCollaboratorsToRepositories:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** Can outside collaborators be invited to repositories in the organization. */
canInviteOutsideCollaboratorsToRepositories:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a private_repository_forking.disable event. */
export interface PrivateRepositoryForkingDisableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a private_repository_forking.enable event. */
export interface PrivateRepositoryForkingEnableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoAccessAuditEntryVisibility|null))=>Promise<(RepoAccessAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.access event. */
export interface RepoAccessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoAccessAuditEntryVisibility|null))=>Observable<(RepoAccessAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoAddMemberAuditEntryVisibility|null))=>Promise<(RepoAddMemberAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.add_member event. */
export interface RepoAddMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoAddMemberAuditEntryVisibility|null))=>Observable<(RepoAddMemberAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The name of the topic added to the repository */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.add_topic event. */
export interface RepoAddTopicAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The name of the topic added to the repository */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryDataPromiseChain{
/** The name of the topic added to the repository */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Metadata for an audit entry with a topic. */
export interface TopicAuditEntryDataObservableChain{
/** The name of the topic added to the repository */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoArchivedAuditEntryVisibility|null))=>Promise<(RepoArchivedAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.archived event. */
export interface RepoArchivedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoArchivedAuditEntryVisibility|null))=>Observable<(RepoArchivedAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the change was to enable (true) or disable (false) the merge type */
isEnabled:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The merge method affected by the change */
mergeType:({get:(request?:boolean|number,defaultValue?:(RepoChangeMergeSettingAuditEntryMergeType|null))=>Promise<(RepoChangeMergeSettingAuditEntryMergeType|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.change_merge_setting event. */
export interface RepoChangeMergeSettingAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the change was to enable (true) or disable (false) the merge type */
isEnabled:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The merge method affected by the change */
mergeType:({get:(request?:boolean|number,defaultValue?:(RepoChangeMergeSettingAuditEntryMergeType|null))=>Observable<(RepoChangeMergeSettingAuditEntryMergeType|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export interface RepoConfigDisableAnonymousGitAccessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_collaborators_only event. */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_contributors_only event. */
export interface RepoConfigDisableContributorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export interface RepoConfigEnableAnonymousGitAccessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_collaborators_only event. */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_contributors_only event. */
export interface RepoConfigEnableContributorsOnlyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export interface RepoConfigLockAnonymousGitAccessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The name of the parent repository for this forked repository. */
forkParentName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The name of the root repository for this netork. */
forkSourceName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoCreateAuditEntryVisibility|null))=>Promise<(RepoCreateAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.create event. */
export interface RepoCreateAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The name of the parent repository for this forked repository. */
forkParentName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The name of the root repository for this netork. */
forkSourceName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoCreateAuditEntryVisibility|null))=>Observable<(RepoCreateAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoDestroyAuditEntryVisibility|null))=>Promise<(RepoDestroyAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.destroy event. */
export interface RepoDestroyAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoDestroyAuditEntryVisibility|null))=>Observable<(RepoDestroyAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoRemoveMemberAuditEntryVisibility|null))=>Promise<(RepoRemoveMemberAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.remove_member event. */
export interface RepoRemoveMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The visibility of the repository */
visibility:({get:(request?:boolean|number,defaultValue?:(RepoRemoveMemberAuditEntryVisibility|null))=>Observable<(RepoRemoveMemberAuditEntryVisibility|null)>})}


/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The name of the topic added to the repository */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repo.remove_topic event. */
export interface RepoRemoveTopicAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The name of the topic added to the repository */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>}),
/** The name of the topic added to the repository */
topicName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repository_visibility_change.disable event. */
export interface RepositoryVisibilityChangeDisableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a repository_visibility_change.enable event. */
export interface RepositoryVisibilityChangeEnableAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),
/** The HTTP path for this enterprise. */
enterpriseResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The slug of the enterprise. */
enterpriseSlug:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP URL for this enterprise. */
enterpriseUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.add_member event. */
export interface TeamAddMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.add_repository event. */
export interface TeamAddRepositoryAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The new parent team. */
parentTeam:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the new parent team */
parentTeamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The name of the former parent team */
parentTeamNameWas:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the parent team */
parentTeamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the parent team */
parentTeamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The former parent team. */
parentTeamWas:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The HTTP path for the previous parent team */
parentTeamWasResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the previous parent team */
parentTeamWasUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.change_parent_team event. */
export interface TeamChangeParentTeamAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The new parent team. */
parentTeam:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the new parent team */
parentTeamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The name of the former parent team */
parentTeamNameWas:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the parent team */
parentTeamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the parent team */
parentTeamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The former parent team. */
parentTeamWas:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The HTTP path for the previous parent team */
parentTeamWasResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the previous parent team */
parentTeamWasUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.remove_member event. */
export interface TeamRemoveMemberAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntryPromiseChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Promise<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationPromiseChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Promise<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Promise<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Promise<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** Audit log entry for a team.remove_repository event. */
export interface TeamRemoveRepositoryAuditEntryObservableChain{
/** The action name */
action:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The user who initiated the action */
actor:({get:<R extends AuditEntryActorRequest>(request: R, defaultValue?:(FieldsSelection<AuditEntryActor, R>|null))=>Observable<(FieldsSelection<AuditEntryActor, R>|null)>}),
/** The IP address of the actor */
actorIp:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A readable representation of the actor's location */
actorLocation:(ActorLocationObservableChain & {get:<R extends ActorLocationRequest>(request: R, defaultValue?:(FieldsSelection<ActorLocation, R>|null))=>Observable<(FieldsSelection<ActorLocation, R>|null)>}),
/** The username of the user who initiated the action */
actorLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the actor. */
actorResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the actor. */
actorUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The time the action was initiated */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["PreciseDateTime"])=>Observable<Scalars["PreciseDateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the team was mapped to an LDAP Group. */
isLdapMapped:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The corresponding operation type for the action */
operationType:({get:(request?:boolean|number,defaultValue?:(OperationType|null))=>Observable<(OperationType|null)>}),
/** The Organization associated with the Audit Entry. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The name of the Organization. */
organizationName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the organization */
organizationResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the organization */
organizationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The repository associated with the action */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>}),
/** The name of the repository */
repositoryName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the repository */
repositoryResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the repository */
repositoryUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The team associated with the action */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>}),
/** The name of the team */
teamName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for this team */
teamResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for this team */
teamUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The user affected by the action */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** For actions involving two users, the actor is the initiator and the user is the affected user. */
userLogin:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The HTTP path for the user. */
userResourcePath:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the user. */
userUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends IpAllowListEntryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IpAllowListEntryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<IpAllowListEntryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:((FieldsSelection<IpAllowListEntry, R>|null)[]|null))=>Promise<((FieldsSelection<IpAllowListEntry, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for IpAllowListEntry. */
export interface IpAllowListEntryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends IpAllowListEntryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<IpAllowListEntryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<IpAllowListEntryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:((FieldsSelection<IpAllowListEntry, R>|null)[]|null))=>Observable<((FieldsSelection<IpAllowListEntry, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface IpAllowListEntryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IpAllowListEntryPromiseChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Promise<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** An edge in a connection. */
export interface IpAllowListEntryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(IpAllowListEntryObservableChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Observable<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntryPromiseChain{
/** A single IP address or range of IP addresses in CIDR notation. */
allowListValue:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the entry is currently active. */
isActive:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The name of the IP allow list entry. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The owner of the IP allow list entry. */
owner:({get:<R extends IpAllowListOwnerRequest>(request: R, defaultValue?:IpAllowListOwner)=>Promise<IpAllowListOwner>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** An IP address or range of addresses that is allowed to access an owner's resources. */
export interface IpAllowListEntryObservableChain{
/** A single IP address or range of IP addresses in CIDR notation. */
allowListValue:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the entry is currently active. */
isActive:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The name of the IP allow list entry. */
name:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The owner of the IP allow list entry. */
owner:({get:<R extends IpAllowListOwnerRequest>(request: R, defaultValue?:IpAllowListOwner)=>Observable<IpAllowListOwner>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** The connection type for User. */
export interface OrganizationMemberConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends OrganizationMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationMemberEdge, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface OrganizationMemberConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends OrganizationMemberEdgeRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationMemberEdge, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationMemberEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** Represents a user within an organization. */
export interface OrganizationMemberEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
hasTwoFactorEnabled:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The item at the end of the edge. */
node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The role this user has in the organization. */
role:({get:(request?:boolean|number,defaultValue?:(OrganizationMemberRole|null))=>Promise<(OrganizationMemberRole|null)>})}


/** Represents a user within an organization. */
export interface OrganizationMemberEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
hasTwoFactorEnabled:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The item at the end of the edge. */
node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The role this user has in the organization. */
role:({get:(request?:boolean|number,defaultValue?:(OrganizationMemberRole|null))=>Observable<(OrganizationMemberRole|null)>})}


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export interface OrganizationIdentityProviderPromiseChain{
/** The digest algorithm used to sign SAML requests for the Identity Provider. */
digestMethod:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** External Identities provisioned by this Identity Provider */
externalIdentities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ExternalIdentityConnectionPromiseChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Promise<ExternalIdentityConnection>})&(ExternalIdentityConnectionPromiseChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Promise<ExternalIdentityConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The x509 certificate used by the Identity Provder to sign assertions and responses. */
idpCertificate:({get:(request?:boolean|number,defaultValue?:(Scalars["X509Certificate"]|null))=>Promise<(Scalars["X509Certificate"]|null)>}),
/** The Issuer Entity ID for the SAML Identity Provider */
issuer:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Organization this Identity Provider belongs to */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The signature algorithm used to sign SAML requests for the Identity Provider. */
signatureMethod:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The URL endpoint for the Identity Provider's SAML SSO. */
ssoUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export interface OrganizationIdentityProviderObservableChain{
/** The digest algorithm used to sign SAML requests for the Identity Provider. */
digestMethod:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** External Identities provisioned by this Identity Provider */
externalIdentities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ExternalIdentityConnectionObservableChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Observable<ExternalIdentityConnection>})&(ExternalIdentityConnectionObservableChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Observable<ExternalIdentityConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The x509 certificate used by the Identity Provder to sign assertions and responses. */
idpCertificate:({get:(request?:boolean|number,defaultValue?:(Scalars["X509Certificate"]|null))=>Observable<(Scalars["X509Certificate"]|null)>}),
/** The Issuer Entity ID for the SAML Identity Provider */
issuer:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Organization this Identity Provider belongs to */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The signature algorithm used to sign SAML requests for the Identity Provider. */
signatureMethod:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The URL endpoint for the Identity Provider's SAML SSO. */
ssoUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends ExternalIdentityEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ExternalIdentityEdge, R>|null)[]|null))=>Promise<((FieldsSelection<ExternalIdentityEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ExternalIdentityRequest>(request: R, defaultValue?:((FieldsSelection<ExternalIdentity, R>|null)[]|null))=>Promise<((FieldsSelection<ExternalIdentity, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for ExternalIdentity. */
export interface ExternalIdentityConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends ExternalIdentityEdgeRequest>(request: R, defaultValue?:((FieldsSelection<ExternalIdentityEdge, R>|null)[]|null))=>Observable<((FieldsSelection<ExternalIdentityEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends ExternalIdentityRequest>(request: R, defaultValue?:((FieldsSelection<ExternalIdentity, R>|null)[]|null))=>Observable<((FieldsSelection<ExternalIdentity, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface ExternalIdentityEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ExternalIdentityPromiseChain & {get:<R extends ExternalIdentityRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentity, R>|null))=>Promise<(FieldsSelection<ExternalIdentity, R>|null)>})}


/** An edge in a connection. */
export interface ExternalIdentityEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(ExternalIdentityObservableChain & {get:<R extends ExternalIdentityRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentity, R>|null))=>Observable<(FieldsSelection<ExternalIdentity, R>|null)>})}


/** An external identity provisioned by SAML SSO or SCIM. */
export interface ExternalIdentityPromiseChain{
/** The GUID for this identity */
guid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Organization invitation for this SCIM-provisioned external identity */
organizationInvitation:(OrganizationInvitationPromiseChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Promise<(FieldsSelection<OrganizationInvitation, R>|null)>}),
/** SAML Identity attributes */
samlIdentity:(ExternalIdentitySamlAttributesPromiseChain & {get:<R extends ExternalIdentitySamlAttributesRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentitySamlAttributes, R>|null))=>Promise<(FieldsSelection<ExternalIdentitySamlAttributes, R>|null)>}),
/** SCIM Identity attributes */
scimIdentity:(ExternalIdentityScimAttributesPromiseChain & {get:<R extends ExternalIdentityScimAttributesRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentityScimAttributes, R>|null))=>Promise<(FieldsSelection<ExternalIdentityScimAttributes, R>|null)>}),
/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** An external identity provisioned by SAML SSO or SCIM. */
export interface ExternalIdentityObservableChain{
/** The GUID for this identity */
guid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Organization invitation for this SCIM-provisioned external identity */
organizationInvitation:(OrganizationInvitationObservableChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Observable<(FieldsSelection<OrganizationInvitation, R>|null)>}),
/** SAML Identity attributes */
samlIdentity:(ExternalIdentitySamlAttributesObservableChain & {get:<R extends ExternalIdentitySamlAttributesRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentitySamlAttributes, R>|null))=>Observable<(FieldsSelection<ExternalIdentitySamlAttributes, R>|null)>}),
/** SCIM Identity attributes */
scimIdentity:(ExternalIdentityScimAttributesObservableChain & {get:<R extends ExternalIdentityScimAttributesRequest>(request: R, defaultValue?:(FieldsSelection<ExternalIdentityScimAttributes, R>|null))=>Observable<(FieldsSelection<ExternalIdentityScimAttributes, R>|null)>}),
/** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributesPromiseChain{
/** The NameID of the SAML identity */
nameId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** SAML attributes for the External Identity */
export interface ExternalIdentitySamlAttributesObservableChain{
/** The NameID of the SAML identity */
nameId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributesPromiseChain{
/** The userName of the SCIM identity */
username:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** SCIM attributes for the External Identity */
export interface ExternalIdentityScimAttributesObservableChain{
/** The userName of the SCIM identity */
username:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Enterprise information only visible to enterprise owners. */
export interface EnterpriseOwnerInfoPromiseChain{
/** A list of enterprise organizations configured with the provided action execution capabilities setting value. */
actionExecutionCapabilitySettingOrganizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null)})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>})&(OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** A list of all of the administrators for this enterprise. */
admins:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for administrators returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role to filter by. */
role?: (EnterpriseAdministratorRole|null)})=>EnterpriseAdministratorConnectionPromiseChain & {get:<R extends EnterpriseAdministratorConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorConnection)=>Promise<EnterpriseAdministratorConnection>})&(EnterpriseAdministratorConnectionPromiseChain & {get:<R extends EnterpriseAdministratorConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorConnection)=>Promise<EnterpriseAdministratorConnection>}),
/** A list of users in the enterprise who currently have two-factor authentication disabled. */
affiliatedUsersWithTwoFactorDisabled:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>})&(UserConnectionPromiseChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Promise<UserConnection>}),
/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
affiliatedUsersWithTwoFactorDisabledExist:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
allowPrivateRepositoryForkingSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided private repository forking setting value. */
allowPrivateRepositoryForkingSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for base repository permissions for organizations in this enterprise. */
defaultRepositoryPermissionSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseDefaultRepositoryPermissionSettingValue)=>Promise<EnterpriseDefaultRepositoryPermissionSettingValue>}),
/** A list of enterprise organizations configured with the provided default repository permission. */
defaultRepositoryPermissionSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The permission to find organizations for. */
value: DefaultRepositoryPermissionField})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** Enterprise Server installations owned by the enterprise. */
enterpriseServerInstallations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Whether or not to only return installations discovered via GitHub Connect. */
connectedOnly?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server installations returned. */
orderBy?: (EnterpriseServerInstallationOrder|null)})=>EnterpriseServerInstallationConnectionPromiseChain & {get:<R extends EnterpriseServerInstallationConnectionRequest>(request: R, defaultValue?:EnterpriseServerInstallationConnection)=>Promise<EnterpriseServerInstallationConnection>})&(EnterpriseServerInstallationConnectionPromiseChain & {get:<R extends EnterpriseServerInstallationConnectionRequest>(request: R, defaultValue?:EnterpriseServerInstallationConnection)=>Promise<EnterpriseServerInstallationConnection>}),
/** The setting value for whether the enterprise has an IP allow list enabled. */
ipAllowListEnabledSetting:({get:(request?:boolean|number,defaultValue?:IpAllowListEnabledSettingValue)=>Promise<IpAllowListEnabledSettingValue>}),
/** The IP addresses that are allowed to access resources owned by the enterprise. */
ipAllowListEntries:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for IP allow list entries returned. */
orderBy?: (IpAllowListEntryOrder|null)})=>IpAllowListEntryConnectionPromiseChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Promise<IpAllowListEntryConnection>})&(IpAllowListEntryConnectionPromiseChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Promise<IpAllowListEntryConnection>}),
/** Whether or not the default repository permission is currently being updated. */
isUpdatingDefaultRepositoryPermission:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether the two-factor authentication requirement is currently being enforced. */
isUpdatingTwoFactorRequirement:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * The setting value for whether organization members with admin permissions on a
 * repository can change repository visibility.
 */
membersCanChangeRepositoryVisibilitySetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
membersCanChangeRepositoryVisibilitySettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
membersCanCreateInternalRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create private repositories. */
membersCanCreatePrivateRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create public repositories. */
membersCanCreatePublicRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create repositories. */
membersCanCreateRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(EnterpriseMembersCanCreateRepositoriesSettingValue|null))=>Promise<(EnterpriseMembersCanCreateRepositoriesSettingValue|null)>}),
/** A list of enterprise organizations configured with the provided repository creation setting value. */
membersCanCreateRepositoriesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting to find organizations for. */
value: OrganizationMembersCanCreateRepositoriesSettingValue})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether members with admin permissions for repositories can delete issues. */
membersCanDeleteIssuesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can delete issues setting value. */
membersCanDeleteIssuesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
membersCanDeleteRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
membersCanDeleteRepositoriesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
membersCanInviteCollaboratorsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
membersCanInviteCollaboratorsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
membersCanMakePurchasesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseMembersCanMakePurchasesSettingValue)=>Promise<EnterpriseMembersCanMakePurchasesSettingValue>}),
/** The setting value for whether members with admin permissions for repositories can update protected branches. */
membersCanUpdateProtectedBranchesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
membersCanUpdateProtectedBranchesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether members can view dependency insights. */
membersCanViewDependencyInsightsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
membersCanViewDependencyInsightsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
organizationProjectsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided organization projects setting value. */
organizationProjectsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** A list of outside collaborators across the repositories in the enterprise. */
outsideCollaborators:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The login of one specific outside collaborator. */
login?: (Scalars["String"]|null),
/** Ordering options for outside collaborators returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** Only return outside collaborators on repositories with this visibility. */
visibility?: (RepositoryVisibility|null)})=>EnterpriseOutsideCollaboratorConnectionPromiseChain & {get:<R extends EnterpriseOutsideCollaboratorConnectionRequest>(request: R, defaultValue?:EnterpriseOutsideCollaboratorConnection)=>Promise<EnterpriseOutsideCollaboratorConnection>})&(EnterpriseOutsideCollaboratorConnectionPromiseChain & {get:<R extends EnterpriseOutsideCollaboratorConnectionRequest>(request: R, defaultValue?:EnterpriseOutsideCollaboratorConnection)=>Promise<EnterpriseOutsideCollaboratorConnection>}),
/** A list of pending administrator invitations for the enterprise. */
pendingAdminInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending enterprise administrator invitations returned from the connection. */
orderBy?: (EnterpriseAdministratorInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role to filter by. */
role?: (EnterpriseAdministratorRole|null)})=>EnterpriseAdministratorInvitationConnectionPromiseChain & {get:<R extends EnterpriseAdministratorInvitationConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorInvitationConnection)=>Promise<EnterpriseAdministratorInvitationConnection>})&(EnterpriseAdministratorInvitationConnectionPromiseChain & {get:<R extends EnterpriseAdministratorInvitationConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorInvitationConnection)=>Promise<EnterpriseAdministratorInvitationConnection>}),
/** A list of pending collaborator invitations across the repositories in the enterprise. */
pendingCollaboratorInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending repository collaborator invitations returned from the connection. */
orderBy?: (RepositoryInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>RepositoryInvitationConnectionPromiseChain & {get:<R extends RepositoryInvitationConnectionRequest>(request: R, defaultValue?:RepositoryInvitationConnection)=>Promise<RepositoryInvitationConnection>})&(RepositoryInvitationConnectionPromiseChain & {get:<R extends RepositoryInvitationConnectionRequest>(request: R, defaultValue?:RepositoryInvitationConnection)=>Promise<RepositoryInvitationConnection>}),
/**
 * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
 * A list of pending collaborators across the repositories in the enterprise.
 */
pendingCollaborators:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending repository collaborator invitations returned from the connection. */
orderBy?: (RepositoryInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>EnterprisePendingCollaboratorConnectionPromiseChain & {get:<R extends EnterprisePendingCollaboratorConnectionRequest>(request: R, defaultValue?:EnterprisePendingCollaboratorConnection)=>Promise<EnterprisePendingCollaboratorConnection>})&(EnterprisePendingCollaboratorConnectionPromiseChain & {get:<R extends EnterprisePendingCollaboratorConnectionRequest>(request: R, defaultValue?:EnterprisePendingCollaboratorConnection)=>Promise<EnterprisePendingCollaboratorConnection>}),
/** A list of pending member invitations for organizations in the enterprise. */
pendingMemberInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>EnterprisePendingMemberInvitationConnectionPromiseChain & {get:<R extends EnterprisePendingMemberInvitationConnectionRequest>(request: R, defaultValue?:EnterprisePendingMemberInvitationConnection)=>Promise<EnterprisePendingMemberInvitationConnection>})&(EnterprisePendingMemberInvitationConnectionPromiseChain & {get:<R extends EnterprisePendingMemberInvitationConnectionRequest>(request: R, defaultValue?:EnterprisePendingMemberInvitationConnection)=>Promise<EnterprisePendingMemberInvitationConnection>}),
/** The setting value for whether repository projects are enabled in this enterprise. */
repositoryProjectsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided repository projects setting value. */
repositoryProjectsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The SAML Identity Provider for the enterprise. */
samlIdentityProvider:(EnterpriseIdentityProviderPromiseChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Promise<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>}),
/** A list of enterprise organizations configured with the SAML single sign-on setting value. */
samlIdentityProviderSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: IdentityProviderConfigurationState})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
teamDiscussionsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Promise<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided team discussions setting value. */
teamDiscussionsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
twoFactorRequiredSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledSettingValue)=>Promise<EnterpriseEnabledSettingValue>}),
/** A list of enterprise organizations configured with the two-factor authentication setting value. */
twoFactorRequiredSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>})}


/** Enterprise information only visible to enterprise owners. */
export interface EnterpriseOwnerInfoObservableChain{
/** A list of enterprise organizations configured with the provided action execution capabilities setting value. */
actionExecutionCapabilitySettingOrganizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null)})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>})&(OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** A list of all of the administrators for this enterprise. */
admins:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for administrators returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role to filter by. */
role?: (EnterpriseAdministratorRole|null)})=>EnterpriseAdministratorConnectionObservableChain & {get:<R extends EnterpriseAdministratorConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorConnection)=>Observable<EnterpriseAdministratorConnection>})&(EnterpriseAdministratorConnectionObservableChain & {get:<R extends EnterpriseAdministratorConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorConnection)=>Observable<EnterpriseAdministratorConnection>}),
/** A list of users in the enterprise who currently have two-factor authentication disabled. */
affiliatedUsersWithTwoFactorDisabled:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>})&(UserConnectionObservableChain & {get:<R extends UserConnectionRequest>(request: R, defaultValue?:UserConnection)=>Observable<UserConnection>}),
/** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
affiliatedUsersWithTwoFactorDisabledExist:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
allowPrivateRepositoryForkingSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided private repository forking setting value. */
allowPrivateRepositoryForkingSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for base repository permissions for organizations in this enterprise. */
defaultRepositoryPermissionSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseDefaultRepositoryPermissionSettingValue)=>Observable<EnterpriseDefaultRepositoryPermissionSettingValue>}),
/** A list of enterprise organizations configured with the provided default repository permission. */
defaultRepositoryPermissionSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The permission to find organizations for. */
value: DefaultRepositoryPermissionField})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** Enterprise Server installations owned by the enterprise. */
enterpriseServerInstallations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Whether or not to only return installations discovered via GitHub Connect. */
connectedOnly?: (Scalars["Boolean"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server installations returned. */
orderBy?: (EnterpriseServerInstallationOrder|null)})=>EnterpriseServerInstallationConnectionObservableChain & {get:<R extends EnterpriseServerInstallationConnectionRequest>(request: R, defaultValue?:EnterpriseServerInstallationConnection)=>Observable<EnterpriseServerInstallationConnection>})&(EnterpriseServerInstallationConnectionObservableChain & {get:<R extends EnterpriseServerInstallationConnectionRequest>(request: R, defaultValue?:EnterpriseServerInstallationConnection)=>Observable<EnterpriseServerInstallationConnection>}),
/** The setting value for whether the enterprise has an IP allow list enabled. */
ipAllowListEnabledSetting:({get:(request?:boolean|number,defaultValue?:IpAllowListEnabledSettingValue)=>Observable<IpAllowListEnabledSettingValue>}),
/** The IP addresses that are allowed to access resources owned by the enterprise. */
ipAllowListEntries:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for IP allow list entries returned. */
orderBy?: (IpAllowListEntryOrder|null)})=>IpAllowListEntryConnectionObservableChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Observable<IpAllowListEntryConnection>})&(IpAllowListEntryConnectionObservableChain & {get:<R extends IpAllowListEntryConnectionRequest>(request: R, defaultValue?:IpAllowListEntryConnection)=>Observable<IpAllowListEntryConnection>}),
/** Whether or not the default repository permission is currently being updated. */
isUpdatingDefaultRepositoryPermission:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether the two-factor authentication requirement is currently being enforced. */
isUpdatingTwoFactorRequirement:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * The setting value for whether organization members with admin permissions on a
 * repository can change repository visibility.
 */
membersCanChangeRepositoryVisibilitySetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
membersCanChangeRepositoryVisibilitySettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether members of organizations in the enterprise can create internal repositories. */
membersCanCreateInternalRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create private repositories. */
membersCanCreatePrivateRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create public repositories. */
membersCanCreatePublicRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** The setting value for whether members of organizations in the enterprise can create repositories. */
membersCanCreateRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:(EnterpriseMembersCanCreateRepositoriesSettingValue|null))=>Observable<(EnterpriseMembersCanCreateRepositoriesSettingValue|null)>}),
/** A list of enterprise organizations configured with the provided repository creation setting value. */
membersCanCreateRepositoriesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting to find organizations for. */
value: OrganizationMembersCanCreateRepositoriesSettingValue})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether members with admin permissions for repositories can delete issues. */
membersCanDeleteIssuesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can delete issues setting value. */
membersCanDeleteIssuesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
membersCanDeleteRepositoriesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
membersCanDeleteRepositoriesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
membersCanInviteCollaboratorsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
membersCanInviteCollaboratorsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
membersCanMakePurchasesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseMembersCanMakePurchasesSettingValue)=>Observable<EnterpriseMembersCanMakePurchasesSettingValue>}),
/** The setting value for whether members with admin permissions for repositories can update protected branches. */
membersCanUpdateProtectedBranchesSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
membersCanUpdateProtectedBranchesSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether members can view dependency insights. */
membersCanViewDependencyInsightsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
membersCanViewDependencyInsightsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether organization projects are enabled for organizations in this enterprise. */
organizationProjectsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided organization projects setting value. */
organizationProjectsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** A list of outside collaborators across the repositories in the enterprise. */
outsideCollaborators:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The login of one specific outside collaborator. */
login?: (Scalars["String"]|null),
/** Ordering options for outside collaborators returned from the connection. */
orderBy?: (EnterpriseMemberOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** Only return outside collaborators on repositories with this visibility. */
visibility?: (RepositoryVisibility|null)})=>EnterpriseOutsideCollaboratorConnectionObservableChain & {get:<R extends EnterpriseOutsideCollaboratorConnectionRequest>(request: R, defaultValue?:EnterpriseOutsideCollaboratorConnection)=>Observable<EnterpriseOutsideCollaboratorConnection>})&(EnterpriseOutsideCollaboratorConnectionObservableChain & {get:<R extends EnterpriseOutsideCollaboratorConnectionRequest>(request: R, defaultValue?:EnterpriseOutsideCollaboratorConnection)=>Observable<EnterpriseOutsideCollaboratorConnection>}),
/** A list of pending administrator invitations for the enterprise. */
pendingAdminInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending enterprise administrator invitations returned from the connection. */
orderBy?: (EnterpriseAdministratorInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null),
/** The role to filter by. */
role?: (EnterpriseAdministratorRole|null)})=>EnterpriseAdministratorInvitationConnectionObservableChain & {get:<R extends EnterpriseAdministratorInvitationConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorInvitationConnection)=>Observable<EnterpriseAdministratorInvitationConnection>})&(EnterpriseAdministratorInvitationConnectionObservableChain & {get:<R extends EnterpriseAdministratorInvitationConnectionRequest>(request: R, defaultValue?:EnterpriseAdministratorInvitationConnection)=>Observable<EnterpriseAdministratorInvitationConnection>}),
/** A list of pending collaborator invitations across the repositories in the enterprise. */
pendingCollaboratorInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending repository collaborator invitations returned from the connection. */
orderBy?: (RepositoryInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>RepositoryInvitationConnectionObservableChain & {get:<R extends RepositoryInvitationConnectionRequest>(request: R, defaultValue?:RepositoryInvitationConnection)=>Observable<RepositoryInvitationConnection>})&(RepositoryInvitationConnectionObservableChain & {get:<R extends RepositoryInvitationConnectionRequest>(request: R, defaultValue?:RepositoryInvitationConnection)=>Observable<RepositoryInvitationConnection>}),
/**
 * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
 * A list of pending collaborators across the repositories in the enterprise.
 */
pendingCollaborators:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for pending repository collaborator invitations returned from the connection. */
orderBy?: (RepositoryInvitationOrder|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>EnterprisePendingCollaboratorConnectionObservableChain & {get:<R extends EnterprisePendingCollaboratorConnectionRequest>(request: R, defaultValue?:EnterprisePendingCollaboratorConnection)=>Observable<EnterprisePendingCollaboratorConnection>})&(EnterprisePendingCollaboratorConnectionObservableChain & {get:<R extends EnterprisePendingCollaboratorConnectionRequest>(request: R, defaultValue?:EnterprisePendingCollaboratorConnection)=>Observable<EnterprisePendingCollaboratorConnection>}),
/** A list of pending member invitations for organizations in the enterprise. */
pendingMemberInvitations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** The search string to look for. */
query?: (Scalars["String"]|null)})=>EnterprisePendingMemberInvitationConnectionObservableChain & {get:<R extends EnterprisePendingMemberInvitationConnectionRequest>(request: R, defaultValue?:EnterprisePendingMemberInvitationConnection)=>Observable<EnterprisePendingMemberInvitationConnection>})&(EnterprisePendingMemberInvitationConnectionObservableChain & {get:<R extends EnterprisePendingMemberInvitationConnectionRequest>(request: R, defaultValue?:EnterprisePendingMemberInvitationConnection)=>Observable<EnterprisePendingMemberInvitationConnection>}),
/** The setting value for whether repository projects are enabled in this enterprise. */
repositoryProjectsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided repository projects setting value. */
repositoryProjectsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The SAML Identity Provider for the enterprise. */
samlIdentityProvider:(EnterpriseIdentityProviderObservableChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Observable<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>}),
/** A list of enterprise organizations configured with the SAML single sign-on setting value. */
samlIdentityProviderSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: IdentityProviderConfigurationState})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether team discussions are enabled for organizations in this enterprise. */
teamDiscussionsSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledDisabledSettingValue)=>Observable<EnterpriseEnabledDisabledSettingValue>}),
/** A list of enterprise organizations configured with the provided team discussions setting value. */
teamDiscussionsSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
twoFactorRequiredSetting:({get:(request?:boolean|number,defaultValue?:EnterpriseEnabledSettingValue)=>Observable<EnterpriseEnabledSettingValue>}),
/** A list of enterprise organizations configured with the two-factor authentication setting value. */
twoFactorRequiredSettingOrganizations:((args:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for organizations with this setting. */
orderBy?: (OrganizationOrder|null),
/** The setting value to find organizations for. */
value: Scalars["Boolean"]})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>})}


/** The connection type for User. */
export interface EnterpriseAdministratorConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseAdministratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseAdministratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface EnterpriseAdministratorConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseAdministratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseAdministratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The role of the administrator. */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseAdministratorRole)=>Promise<EnterpriseAdministratorRole>})}


/** A User who is an administrator of an enterprise. */
export interface EnterpriseAdministratorEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The role of the administrator. */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseAdministratorRole)=>Observable<EnterpriseAdministratorRole>})}


/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerInstallationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerInstallationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerInstallationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerInstallation, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerInstallation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseServerInstallation. */
export interface EnterpriseServerInstallationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerInstallationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerInstallationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerInstallationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerInstallation, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerInstallation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseServerInstallationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerInstallationPromiseChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerInstallation, R>|null))=>Promise<(FieldsSelection<EnterpriseServerInstallation, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseServerInstallationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerInstallationObservableChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerInstallation, R>|null))=>Observable<(FieldsSelection<EnterpriseServerInstallation, R>|null)>})}


/** An Enterprise Server installation. */
export interface EnterpriseServerInstallationPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The customer name to which the Enterprise Server installation belongs. */
customerName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The host name of the Enterprise Server installation. */
hostName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
isConnected:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** User accounts on this Enterprise Server installation. */
userAccounts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user accounts returned from the connection. */
orderBy?: (EnterpriseServerUserAccountOrder|null)})=>EnterpriseServerUserAccountConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountConnection)=>Promise<EnterpriseServerUserAccountConnection>})&(EnterpriseServerUserAccountConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountConnection)=>Promise<EnterpriseServerUserAccountConnection>}),
/** User accounts uploads for the Enterprise Server installation. */
userAccountsUploads:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
orderBy?: (EnterpriseServerUserAccountsUploadOrder|null)})=>EnterpriseServerUserAccountsUploadConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountsUploadConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountsUploadConnection)=>Promise<EnterpriseServerUserAccountsUploadConnection>})&(EnterpriseServerUserAccountsUploadConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountsUploadConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountsUploadConnection)=>Promise<EnterpriseServerUserAccountsUploadConnection>})}


/** An Enterprise Server installation. */
export interface EnterpriseServerInstallationObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The customer name to which the Enterprise Server installation belongs. */
customerName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The host name of the Enterprise Server installation. */
hostName:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
isConnected:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** User accounts on this Enterprise Server installation. */
userAccounts:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user accounts returned from the connection. */
orderBy?: (EnterpriseServerUserAccountOrder|null)})=>EnterpriseServerUserAccountConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountConnection)=>Observable<EnterpriseServerUserAccountConnection>})&(EnterpriseServerUserAccountConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountConnection)=>Observable<EnterpriseServerUserAccountConnection>}),
/** User accounts uploads for the Enterprise Server installation. */
userAccountsUploads:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user accounts uploads returned from the connection. */
orderBy?: (EnterpriseServerUserAccountsUploadOrder|null)})=>EnterpriseServerUserAccountsUploadConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountsUploadConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountsUploadConnection)=>Observable<EnterpriseServerUserAccountsUploadConnection>})&(EnterpriseServerUserAccountsUploadConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountsUploadConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountsUploadConnection)=>Observable<EnterpriseServerUserAccountsUploadConnection>})}


/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccountEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccount, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccount, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseServerUserAccount. */
export interface EnterpriseServerUserAccountConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccountEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccount, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccount, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountPromiseChain & {get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccount, R>|null))=>Promise<(FieldsSelection<EnterpriseServerUserAccount, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountObservableChain & {get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccount, R>|null))=>Observable<(FieldsSelection<EnterpriseServerUserAccount, R>|null)>})}


/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** User emails belonging to this user account. */
emails:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user account emails returned from the connection. */
orderBy?: (EnterpriseServerUserAccountEmailOrder|null)})=>EnterpriseServerUserAccountEmailConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountEmailConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountEmailConnection)=>Promise<EnterpriseServerUserAccountEmailConnection>})&(EnterpriseServerUserAccountEmailConnectionPromiseChain & {get:<R extends EnterpriseServerUserAccountEmailConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountEmailConnection)=>Promise<EnterpriseServerUserAccountEmailConnection>}),
/** The Enterprise Server installation on which this user account exists. */
enterpriseServerInstallation:(EnterpriseServerInstallationPromiseChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:EnterpriseServerInstallation)=>Promise<EnterpriseServerInstallation>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Whether the user account is a site administrator on the Enterprise Server installation. */
isSiteAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The login of the user account on the Enterprise Server installation. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The profile name of the user account on the Enterprise Server installation. */
profileName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The date and time when the user account was created on the Enterprise Server installation. */
remoteCreatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The ID of the user account on the Enterprise Server installation. */
remoteUserId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** A user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** User emails belonging to this user account. */
emails:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for Enterprise Server user account emails returned from the connection. */
orderBy?: (EnterpriseServerUserAccountEmailOrder|null)})=>EnterpriseServerUserAccountEmailConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountEmailConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountEmailConnection)=>Observable<EnterpriseServerUserAccountEmailConnection>})&(EnterpriseServerUserAccountEmailConnectionObservableChain & {get:<R extends EnterpriseServerUserAccountEmailConnectionRequest>(request: R, defaultValue?:EnterpriseServerUserAccountEmailConnection)=>Observable<EnterpriseServerUserAccountEmailConnection>}),
/** The Enterprise Server installation on which this user account exists. */
enterpriseServerInstallation:(EnterpriseServerInstallationObservableChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:EnterpriseServerInstallation)=>Observable<EnterpriseServerInstallation>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Whether the user account is a site administrator on the Enterprise Server installation. */
isSiteAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The login of the user account on the Enterprise Server installation. */
login:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The profile name of the user account on the Enterprise Server installation. */
profileName:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The date and time when the user account was created on the Enterprise Server installation. */
remoteCreatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The ID of the user account on the Enterprise Server installation. */
remoteUserId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountEmailEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEmailEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccountEmailEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountEmailRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseServerUserAccountEmail. */
export interface EnterpriseServerUserAccountEmailConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountEmailEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEmailEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccountEmailEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountEmailRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountEmailPromiseChain & {get:<R extends EnterpriseServerUserAccountEmailRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccountEmail, R>|null))=>Promise<(FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountEmailEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountEmailObservableChain & {get:<R extends EnterpriseServerUserAccountEmailRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccountEmail, R>|null))=>Observable<(FieldsSelection<EnterpriseServerUserAccountEmail, R>|null)>})}


/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmailPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The email address. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Indicates whether this is the primary email of the associated user account. */
isPrimary:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The user account to which the email belongs. */
userAccount:(EnterpriseServerUserAccountPromiseChain & {get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:EnterpriseServerUserAccount)=>Promise<EnterpriseServerUserAccount>})}


/** An email belonging to a user account on an Enterprise Server installation. */
export interface EnterpriseServerUserAccountEmailObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The email address. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Indicates whether this is the primary email of the associated user account. */
isPrimary:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The user account to which the email belongs. */
userAccount:(EnterpriseServerUserAccountObservableChain & {get:<R extends EnterpriseServerUserAccountRequest>(request: R, defaultValue?:EnterpriseServerUserAccount)=>Observable<EnterpriseServerUserAccount>})}


/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountsUploadEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountsUploadEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccountsUploadEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountsUploadRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseServerUserAccountsUpload. */
export interface EnterpriseServerUserAccountsUploadConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseServerUserAccountsUploadEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountsUploadEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccountsUploadEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseServerUserAccountsUploadRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountsUploadPromiseChain & {get:<R extends EnterpriseServerUserAccountsUploadRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null))=>Promise<(FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseServerUserAccountsUploadEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseServerUserAccountsUploadObservableChain & {get:<R extends EnterpriseServerUserAccountsUploadRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null))=>Observable<(FieldsSelection<EnterpriseServerUserAccountsUpload, R>|null)>})}


/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUploadPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The enterprise to which this upload belongs. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Promise<Enterprise>}),
/** The Enterprise Server installation for which this upload was generated. */
enterpriseServerInstallation:(EnterpriseServerInstallationPromiseChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:EnterpriseServerInstallation)=>Promise<EnterpriseServerInstallation>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The name of the file uploaded. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The synchronization state of the upload */
syncState:({get:(request?:boolean|number,defaultValue?:EnterpriseServerUserAccountsUploadSyncState)=>Promise<EnterpriseServerUserAccountsUploadSyncState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** A user accounts upload from an Enterprise Server installation. */
export interface EnterpriseServerUserAccountsUploadObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The enterprise to which this upload belongs. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Observable<Enterprise>}),
/** The Enterprise Server installation for which this upload was generated. */
enterpriseServerInstallation:(EnterpriseServerInstallationObservableChain & {get:<R extends EnterpriseServerInstallationRequest>(request: R, defaultValue?:EnterpriseServerInstallation)=>Observable<EnterpriseServerInstallation>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The name of the file uploaded. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The synchronization state of the upload */
syncState:({get:(request?:boolean|number,defaultValue?:EnterpriseServerUserAccountsUploadSyncState)=>Observable<EnterpriseServerUserAccountsUploadSyncState>}),
/** Identifies the date and time when the object was last updated. */
updatedAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseOutsideCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseOutsideCollaboratorEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseOutsideCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface EnterpriseOutsideCollaboratorConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseOutsideCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseOutsideCollaboratorEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseOutsideCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether the outside collaborator does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The enterprise organization repositories this user is a member of. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories. */
orderBy?: (RepositoryOrder|null)})=>EnterpriseRepositoryInfoConnectionPromiseChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Promise<EnterpriseRepositoryInfoConnection>})&(EnterpriseRepositoryInfoConnectionPromiseChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Promise<EnterpriseRepositoryInfoConnection>})}


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export interface EnterpriseOutsideCollaboratorEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether the outside collaborator does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The enterprise organization repositories this user is a member of. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories. */
orderBy?: (RepositoryOrder|null)})=>EnterpriseRepositoryInfoConnectionObservableChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Observable<EnterpriseRepositoryInfoConnection>})&(EnterpriseRepositoryInfoConnectionObservableChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Observable<EnterpriseRepositoryInfoConnection>})}


/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseRepositoryInfoEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseRepositoryInfoEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseRepositoryInfoEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseRepositoryInfoRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseRepositoryInfo, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseRepositoryInfo, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseRepositoryInfo. */
export interface EnterpriseRepositoryInfoConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseRepositoryInfoEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseRepositoryInfoEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseRepositoryInfoEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseRepositoryInfoRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseRepositoryInfo, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseRepositoryInfo, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseRepositoryInfoPromiseChain & {get:<R extends EnterpriseRepositoryInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseRepositoryInfo, R>|null))=>Promise<(FieldsSelection<EnterpriseRepositoryInfo, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseRepositoryInfoEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseRepositoryInfoObservableChain & {get:<R extends EnterpriseRepositoryInfoRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseRepositoryInfo, R>|null))=>Observable<(FieldsSelection<EnterpriseRepositoryInfo, R>|null)>})}


/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfoPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The repository's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A subset of repository information queryable from an enterprise. */
export interface EnterpriseRepositoryInfoObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies if the repository is private. */
isPrivate:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The repository's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The repository's name with owner. */
nameWithOwner:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseAdministratorInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorInvitationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseAdministratorInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorInvitation, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseAdministratorInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseAdministratorInvitation. */
export interface EnterpriseAdministratorInvitationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseAdministratorInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorInvitationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseAdministratorInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseAdministratorInvitation, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseAdministratorInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseAdministratorInvitationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>})}


/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitationPromiseChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>}),
/** The email of the person who was invited to the enterprise. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise the invitation is for. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Promise<Enterprise>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The user who was invited to the enterprise. */
invitee:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The invitee's pending role in the enterprise (owner or billing_manager). */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseAdministratorRole)=>Promise<EnterpriseAdministratorRole>})}


/** An invitation for a user to become an owner or billing manager of an enterprise. */
export interface EnterpriseAdministratorInvitationObservableChain{
/** Identifies the date and time when the object was created. */
createdAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>}),
/** The email of the person who was invited to the enterprise. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise the invitation is for. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:Enterprise)=>Observable<Enterprise>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The user who was invited to the enterprise. */
invitee:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The invitee's pending role in the enterprise (owner or billing_manager). */
role:({get:(request?:boolean|number,defaultValue?:EnterpriseAdministratorRole)=>Observable<EnterpriseAdministratorRole>})}


/** The connection type for RepositoryInvitation. */
export interface RepositoryInvitationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends RepositoryInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryInvitationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryInvitationRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryInvitation, R>|null)[]|null))=>Promise<((FieldsSelection<RepositoryInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for RepositoryInvitation. */
export interface RepositoryInvitationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends RepositoryInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryInvitationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends RepositoryInvitationRequest>(request: R, defaultValue?:((FieldsSelection<RepositoryInvitation, R>|null)[]|null))=>Observable<((FieldsSelection<RepositoryInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface RepositoryInvitationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryInvitationPromiseChain & {get:<R extends RepositoryInvitationRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryInvitation, R>|null))=>Promise<(FieldsSelection<RepositoryInvitation, R>|null)>})}


/** An edge in a connection. */
export interface RepositoryInvitationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(RepositoryInvitationObservableChain & {get:<R extends RepositoryInvitationRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryInvitation, R>|null))=>Observable<(FieldsSelection<RepositoryInvitation, R>|null)>})}


/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitationPromiseChain{
/** The email address that received the invitation. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The user who received the invitation. */
invitee:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>}),
/**
 * The permission granted on this repository by this invitation.
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Promise<RepositoryPermission>}),
/** The Repository the user is invited to. */
repository:(RepositoryInfoPromiseChain & {get:<R extends RepositoryInfoRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryInfo, R>|null))=>Promise<(FieldsSelection<RepositoryInfo, R>|null)>})}


/** An invitation for a user to be added to a repository. */
export interface RepositoryInvitationObservableChain{
/** The email address that received the invitation. */
email:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The user who received the invitation. */
invitee:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The user who created the invitation. */
inviter:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>}),
/**
 * The permission granted on this repository by this invitation.
 * 
 * **Upcoming Change on 2020-10-01 UTC**
 * **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
 * **Reason:** This field may return additional values
 */
permission:({get:(request?:boolean|number,defaultValue?:RepositoryPermission)=>Observable<RepositoryPermission>}),
/** The Repository the user is invited to. */
repository:(RepositoryInfoObservableChain & {get:<R extends RepositoryInfoRequest>(request: R, defaultValue?:(FieldsSelection<RepositoryInfo, R>|null))=>Observable<(FieldsSelection<RepositoryInfo, R>|null)>})}


/** The connection type for User. */
export interface EnterprisePendingCollaboratorConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterprisePendingCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterprisePendingCollaboratorEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterprisePendingCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Promise<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for User. */
export interface EnterprisePendingCollaboratorConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterprisePendingCollaboratorEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterprisePendingCollaboratorEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterprisePendingCollaboratorEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends UserRequest>(request: R, defaultValue?:((FieldsSelection<User, R>|null)[]|null))=>Observable<((FieldsSelection<User, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise. */
export interface EnterprisePendingCollaboratorEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether the invited collaborator does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** The enterprise organization repositories this user is a member of. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories. */
orderBy?: (RepositoryOrder|null)})=>EnterpriseRepositoryInfoConnectionPromiseChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Promise<EnterpriseRepositoryInfoConnection>})&(EnterpriseRepositoryInfoConnectionPromiseChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Promise<EnterpriseRepositoryInfoConnection>})}


/** A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise. */
export interface EnterprisePendingCollaboratorEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether the invited collaborator does not have a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** The enterprise organization repositories this user is a member of. */
repositories:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null),
/** Ordering options for repositories. */
orderBy?: (RepositoryOrder|null)})=>EnterpriseRepositoryInfoConnectionObservableChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Observable<EnterpriseRepositoryInfoConnection>})&(EnterpriseRepositoryInfoConnectionObservableChain & {get:<R extends EnterpriseRepositoryInfoConnectionRequest>(request: R, defaultValue?:EnterpriseRepositoryInfoConnection)=>Observable<EnterpriseRepositoryInfoConnection>})}


/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterprisePendingMemberInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterprisePendingMemberInvitationEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterprisePendingMemberInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitation, R>|null)[]|null))=>Promise<((FieldsSelection<OrganizationInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** Identifies the total count of unique users in the connection. */
totalUniqueUserCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for OrganizationInvitation. */
export interface EnterprisePendingMemberInvitationConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterprisePendingMemberInvitationEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterprisePendingMemberInvitationEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterprisePendingMemberInvitationEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:((FieldsSelection<OrganizationInvitation, R>|null)[]|null))=>Observable<((FieldsSelection<OrganizationInvitation, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** Identifies the total count of unique users in the connection. */
totalUniqueUserCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Whether the invitation has a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(OrganizationInvitationPromiseChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Promise<(FieldsSelection<OrganizationInvitation, R>|null)>})}


/** An invitation to be a member in an enterprise organization. */
export interface EnterprisePendingMemberInvitationEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Whether the invitation has a license for the enterprise. */
isUnlicensed:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The item at the end of the edge. */
node:(OrganizationInvitationObservableChain & {get:<R extends OrganizationInvitationRequest>(request: R, defaultValue?:(FieldsSelection<OrganizationInvitation, R>|null))=>Observable<(FieldsSelection<OrganizationInvitation, R>|null)>})}


/** An identity provider configured to provision identities for an enterprise. */
export interface EnterpriseIdentityProviderPromiseChain{
/** The digest algorithm used to sign SAML requests for the identity provider. */
digestMethod:({get:(request?:boolean|number,defaultValue?:(SamlDigestAlgorithm|null))=>Promise<(SamlDigestAlgorithm|null)>}),
/** The enterprise this identity provider belongs to. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** ExternalIdentities provisioned by this identity provider. */
externalIdentities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ExternalIdentityConnectionPromiseChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Promise<ExternalIdentityConnection>})&(ExternalIdentityConnectionPromiseChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Promise<ExternalIdentityConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The x509 certificate used by the identity provider to sign assertions and responses. */
idpCertificate:({get:(request?:boolean|number,defaultValue?:(Scalars["X509Certificate"]|null))=>Promise<(Scalars["X509Certificate"]|null)>}),
/** The Issuer Entity ID for the SAML identity provider. */
issuer:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
recoveryCodes:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>}),
/** The signature algorithm used to sign SAML requests for the identity provider. */
signatureMethod:({get:(request?:boolean|number,defaultValue?:(SamlSignatureAlgorithm|null))=>Promise<(SamlSignatureAlgorithm|null)>}),
/** The URL endpoint for the identity provider's SAML SSO. */
ssoUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})}


/** An identity provider configured to provision identities for an enterprise. */
export interface EnterpriseIdentityProviderObservableChain{
/** The digest algorithm used to sign SAML requests for the identity provider. */
digestMethod:({get:(request?:boolean|number,defaultValue?:(SamlDigestAlgorithm|null))=>Observable<(SamlDigestAlgorithm|null)>}),
/** The enterprise this identity provider belongs to. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** ExternalIdentities provisioned by this identity provider. */
externalIdentities:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>ExternalIdentityConnectionObservableChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Observable<ExternalIdentityConnection>})&(ExternalIdentityConnectionObservableChain & {get:<R extends ExternalIdentityConnectionRequest>(request: R, defaultValue?:ExternalIdentityConnection)=>Observable<ExternalIdentityConnection>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The x509 certificate used by the identity provider to sign assertions and responses. */
idpCertificate:({get:(request?:boolean|number,defaultValue?:(Scalars["X509Certificate"]|null))=>Observable<(Scalars["X509Certificate"]|null)>}),
/** The Issuer Entity ID for the SAML identity provider. */
issuer:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
recoveryCodes:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>}),
/** The signature algorithm used to sign SAML requests for the identity provider. */
signatureMethod:({get:(request?:boolean|number,defaultValue?:(SamlSignatureAlgorithm|null))=>Observable<(SamlSignatureAlgorithm|null)>}),
/** The URL endpoint for the identity provider's SAML SSO. */
ssoUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})}


/** The connection type for EnterpriseUserAccount. */
export interface EnterpriseUserAccountConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseUserAccountEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseUserAccountEdge, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseUserAccountEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseUserAccountRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseUserAccount, R>|null)[]|null))=>Promise<((FieldsSelection<EnterpriseUserAccount, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for EnterpriseUserAccount. */
export interface EnterpriseUserAccountConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends EnterpriseUserAccountEdgeRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseUserAccountEdge, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseUserAccountEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends EnterpriseUserAccountRequest>(request: R, defaultValue?:((FieldsSelection<EnterpriseUserAccount, R>|null)[]|null))=>Observable<((FieldsSelection<EnterpriseUserAccount, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface EnterpriseUserAccountEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseUserAccountPromiseChain & {get:<R extends EnterpriseUserAccountRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseUserAccount, R>|null))=>Promise<(FieldsSelection<EnterpriseUserAccount, R>|null)>})}


/** An edge in a connection. */
export interface EnterpriseUserAccountEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(EnterpriseUserAccountObservableChain & {get:<R extends EnterpriseUserAccountRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseUserAccount, R>|null))=>Observable<(FieldsSelection<EnterpriseUserAccount, R>|null)>})}


/** A public description of a Marketplace category. */
export interface MarketplaceCategoryPromiseChain{
/** The category's description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The technical description of how apps listed in this category work with GitHub. */
howItWorks:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The category's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** How many Marketplace listings have this as their primary category. */
primaryListingCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The HTTP path for this Marketplace category. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** How many Marketplace listings have this as their secondary category. */
secondaryListingCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The short name of the category used in its URL. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP URL for this Marketplace category. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>})}


/** A public description of a Marketplace category. */
export interface MarketplaceCategoryObservableChain{
/** The category's description. */
description:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The technical description of how apps listed in this category work with GitHub. */
howItWorks:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The category's name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** How many Marketplace listings have this as their primary category. */
primaryListingCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The HTTP path for this Marketplace category. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** How many Marketplace listings have this as their secondary category. */
secondaryListingCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The short name of the category used in its URL. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP URL for this Marketplace category. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>})}


/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListingPromiseChain{
/** The GitHub App this listing represents. */
app:(AppPromiseChain & {get:<R extends AppRequest>(request: R, defaultValue?:(FieldsSelection<App, R>|null))=>Promise<(FieldsSelection<App, R>|null)>}),
/** URL to the listing owner's company site. */
companyUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP path for configuring access to the listing's integration or OAuth app */
configurationResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for configuring access to the listing's integration or OAuth app */
configurationUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** URL to the listing's documentation. */
documentationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The listing's detailed description. */
extendedDescription:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The listing's detailed description rendered to HTML. */
extendedDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** The listing's introductory description. */
fullDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The listing's introductory description rendered to HTML. */
fullDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),
/** Does this listing have any plans with a free trial? */
hasPublishedFreeTrialPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Does this listing have a terms of service link? */
hasTermsOfService:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** A technical description of how this app works with GitHub. */
howItWorks:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The listing's technical description rendered to HTML. */
howItWorksHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Promise<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** URL to install the product to the viewer's account or organization. */
installationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** Whether this listing's app has been installed for the current viewer */
installedForViewer:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this listing has been removed from the Marketplace. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Whether this listing is still an editable draft that has not been submitted
 * for review and is not publicly visible in the Marketplace.
 */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether the product this listing represents is available as part of a paid plan. */
isPaid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this listing has been approved for display in the Marketplace. */
isPublic:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
isRejected:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this listing has been approved for unverified display in the Marketplace. */
isUnverified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
isUnverifiedPending:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
isVerificationPendingFromDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
isVerificationPendingFromUnverified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Whether this listing has been approved for verified display in the Marketplace. */
isVerified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The hex color code, without the leading '#', for the logo background. */
logoBackgroundColor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** URL for the listing's logo image. */
logoUrl:((args?:{
/** The size in pixels of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The listing's full name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The listing's very short description without a trailing period or ampersands. */
normalizedShortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** URL to the listing's detailed pricing. */
pricingUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The category that best describes the listing. */
primaryCategory:(MarketplaceCategoryPromiseChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory)=>Promise<MarketplaceCategory>}),
/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
privacyPolicyUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP path for the Marketplace listing. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The URLs for the listing's screenshots. */
screenshotUrls:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null)[])=>Promise<(Scalars["String"]|null)[]>}),
/** An alternate category that describes the listing. */
secondaryCategory:(MarketplaceCategoryPromiseChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceCategory, R>|null))=>Promise<(FieldsSelection<MarketplaceCategory, R>|null)>}),
/** The listing's very short description. */
shortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The short name of the listing used in its URL. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** URL to the listing's status page. */
statusUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** An email address for support for this listing's app. */
supportEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/**
 * Either a URL or an email address for support for this listing's app, may
 * return an empty string for listings that do not require a support URL.
 */
supportUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** URL to the listing's terms of service. */
termsOfServiceUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Promise<(Scalars["URI"]|null)>}),
/** The HTTP URL for the Marketplace listing. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** Can the current viewer add plans for this Marketplace listing. */
viewerCanAddPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer approve this Marketplace listing. */
viewerCanApprove:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer delist this Marketplace listing. */
viewerCanDelist:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer edit this Marketplace listing. */
viewerCanEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Can the current viewer edit the primary and secondary category of this
 * Marketplace listing.
 */
viewerCanEditCategories:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Can the current viewer edit the plans for this Marketplace listing. */
viewerCanEditPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Can the current viewer return this Marketplace listing to draft state
 * so it becomes editable again.
 */
viewerCanRedraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Can the current viewer reject this Marketplace listing by returning it to
 * an editable draft state or rejecting it entirely.
 */
viewerCanReject:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Can the current viewer request this listing be reviewed for display in
 * the Marketplace as verified.
 */
viewerCanRequestApproval:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates whether the current user has an active subscription to this Marketplace listing. */
viewerHasPurchased:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/**
 * Indicates if the current user has purchased a subscription to this Marketplace listing
 * for all of the organizations the user owns.
 */
viewerHasPurchasedForAllOrganizations:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Does the current viewer role allow them to administer this Marketplace listing. */
viewerIsListingAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** A listing in the GitHub integration marketplace. */
export interface MarketplaceListingObservableChain{
/** The GitHub App this listing represents. */
app:(AppObservableChain & {get:<R extends AppRequest>(request: R, defaultValue?:(FieldsSelection<App, R>|null))=>Observable<(FieldsSelection<App, R>|null)>}),
/** URL to the listing owner's company site. */
companyUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP path for configuring access to the listing's integration or OAuth app */
configurationResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for configuring access to the listing's integration or OAuth app */
configurationUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** URL to the listing's documentation. */
documentationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The listing's detailed description. */
extendedDescription:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The listing's detailed description rendered to HTML. */
extendedDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** The listing's introductory description. */
fullDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The listing's introductory description rendered to HTML. */
fullDescriptionHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),
/** Does this listing have any plans with a free trial? */
hasPublishedFreeTrialPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Does this listing have a terms of service link? */
hasTermsOfService:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** A technical description of how this app works with GitHub. */
howItWorks:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The listing's technical description rendered to HTML. */
howItWorksHTML:({get:(request?:boolean|number,defaultValue?:Scalars["HTML"])=>Observable<Scalars["HTML"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** URL to install the product to the viewer's account or organization. */
installationUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** Whether this listing's app has been installed for the current viewer */
installedForViewer:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this listing has been removed from the Marketplace. */
isArchived:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Whether this listing is still an editable draft that has not been submitted
 * for review and is not publicly visible in the Marketplace.
 */
isDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether the product this listing represents is available as part of a paid plan. */
isPaid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this listing has been approved for display in the Marketplace. */
isPublic:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this listing has been rejected by GitHub for display in the Marketplace. */
isRejected:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this listing has been approved for unverified display in the Marketplace. */
isUnverified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
isUnverifiedPending:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
isVerificationPendingFromDraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
isVerificationPendingFromUnverified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Whether this listing has been approved for verified display in the Marketplace. */
isVerified:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The hex color code, without the leading '#', for the logo background. */
logoBackgroundColor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** URL for the listing's logo image. */
logoUrl:((args?:{
/** The size in pixels of the resulting square image. */
size?: (Scalars["Int"]|null)})=>{get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>})&({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The listing's full name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The listing's very short description without a trailing period or ampersands. */
normalizedShortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** URL to the listing's detailed pricing. */
pricingUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The category that best describes the listing. */
primaryCategory:(MarketplaceCategoryObservableChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:MarketplaceCategory)=>Observable<MarketplaceCategory>}),
/** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
privacyPolicyUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP path for the Marketplace listing. */
resourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The URLs for the listing's screenshots. */
screenshotUrls:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null)[])=>Observable<(Scalars["String"]|null)[]>}),
/** An alternate category that describes the listing. */
secondaryCategory:(MarketplaceCategoryObservableChain & {get:<R extends MarketplaceCategoryRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceCategory, R>|null))=>Observable<(FieldsSelection<MarketplaceCategory, R>|null)>}),
/** The listing's very short description. */
shortDescription:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The short name of the listing used in its URL. */
slug:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** URL to the listing's status page. */
statusUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** An email address for support for this listing's app. */
supportEmail:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/**
 * Either a URL or an email address for support for this listing's app, may
 * return an empty string for listings that do not require a support URL.
 */
supportUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** URL to the listing's terms of service. */
termsOfServiceUrl:({get:(request?:boolean|number,defaultValue?:(Scalars["URI"]|null))=>Observable<(Scalars["URI"]|null)>}),
/** The HTTP URL for the Marketplace listing. */
url:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** Can the current viewer add plans for this Marketplace listing. */
viewerCanAddPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer approve this Marketplace listing. */
viewerCanApprove:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer delist this Marketplace listing. */
viewerCanDelist:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer edit this Marketplace listing. */
viewerCanEdit:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Can the current viewer edit the primary and secondary category of this
 * Marketplace listing.
 */
viewerCanEditCategories:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Can the current viewer edit the plans for this Marketplace listing. */
viewerCanEditPlans:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Can the current viewer return this Marketplace listing to draft state
 * so it becomes editable again.
 */
viewerCanRedraft:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Can the current viewer reject this Marketplace listing by returning it to
 * an editable draft state or rejecting it entirely.
 */
viewerCanReject:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Can the current viewer request this listing be reviewed for display in
 * the Marketplace as verified.
 */
viewerCanRequestApproval:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates whether the current user has an active subscription to this Marketplace listing. */
viewerHasPurchased:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/**
 * Indicates if the current user has purchased a subscription to this Marketplace listing
 * for all of the organizations the user owns.
 */
viewerHasPurchasedForAllOrganizations:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Does the current viewer role allow them to administer this Marketplace listing. */
viewerIsListingAdmin:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Look up Marketplace Listings */
export interface MarketplaceListingConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends MarketplaceListingEdgeRequest>(request: R, defaultValue?:((FieldsSelection<MarketplaceListingEdge, R>|null)[]|null))=>Promise<((FieldsSelection<MarketplaceListingEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:((FieldsSelection<MarketplaceListing, R>|null)[]|null))=>Promise<((FieldsSelection<MarketplaceListing, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** Look up Marketplace Listings */
export interface MarketplaceListingConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends MarketplaceListingEdgeRequest>(request: R, defaultValue?:((FieldsSelection<MarketplaceListingEdge, R>|null)[]|null))=>Observable<((FieldsSelection<MarketplaceListingEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:((FieldsSelection<MarketplaceListing, R>|null)[]|null))=>Observable<((FieldsSelection<MarketplaceListing, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface MarketplaceListingEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(MarketplaceListingPromiseChain & {get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceListing, R>|null))=>Promise<(FieldsSelection<MarketplaceListing, R>|null)>})}


/** An edge in a connection. */
export interface MarketplaceListingEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(MarketplaceListingObservableChain & {get:<R extends MarketplaceListingRequest>(request: R, defaultValue?:(FieldsSelection<MarketplaceListing, R>|null))=>Observable<(FieldsSelection<MarketplaceListing, R>|null)>})}


/** Represents information about the GitHub instance. */
export interface GitHubMetadataPromiseChain{
/** Returns a String that's a SHA of `github-services` */
gitHubServicesSha:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** IP addresses that users connect to for git operations */
gitIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>}),
/** IP addresses that service hooks are sent from */
hookIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>}),
/** IP addresses that the importer connects from */
importerIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>}),
/** Whether or not users are verified */
isPasswordAuthenticationVerifiable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** IP addresses for GitHub Pages' A records */
pagesIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>})}


/** Represents information about the GitHub instance. */
export interface GitHubMetadataObservableChain{
/** Returns a String that's a SHA of `github-services` */
gitHubServicesSha:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** IP addresses that users connect to for git operations */
gitIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>}),
/** IP addresses that service hooks are sent from */
hookIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>}),
/** IP addresses that the importer connects from */
importerIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>}),
/** Whether or not users are verified */
isPasswordAuthenticationVerifiable:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** IP addresses for GitHub Pages' A records */
pagesIpAddresses:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>})}


/** Represents the client's rate limit. */
export interface RateLimitPromiseChain{
/** The point cost for the current query counting against the rate limit. */
cost:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The maximum number of points the client is permitted to consume in a 60 minute window. */
limit:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The maximum number of nodes this query may return */
nodeCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of points remaining in the current rate limit window. */
remaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The time at which the current rate limit window resets in UTC epoch seconds. */
resetAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Promise<Scalars["DateTime"]>})}


/** Represents the client's rate limit. */
export interface RateLimitObservableChain{
/** The point cost for the current query counting against the rate limit. */
cost:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The maximum number of points the client is permitted to consume in a 60 minute window. */
limit:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The maximum number of nodes this query may return */
nodeCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of points remaining in the current rate limit window. */
remaining:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The time at which the current rate limit window resets in UTC epoch seconds. */
resetAt:({get:(request?:boolean|number,defaultValue?:Scalars["DateTime"])=>Observable<Scalars["DateTime"]>})}


/** A list of results that matched against a search query. */
export interface SearchResultItemConnectionPromiseChain{
/** The number of pieces of code that matched the search query. */
codeCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of edges. */
edges:({get:<R extends SearchResultItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SearchResultItemEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SearchResultItemEdge, R>|null)[]|null)>}),
/** The number of issues that matched the search query. */
issueCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends SearchResultItemRequest>(request: R, defaultValue?:((FieldsSelection<SearchResultItem, R>|null)[]|null))=>Promise<((FieldsSelection<SearchResultItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** The number of repositories that matched the search query. */
repositoryCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of users that matched the search query. */
userCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The number of wiki pages that matched the search query. */
wikiCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** A list of results that matched against a search query. */
export interface SearchResultItemConnectionObservableChain{
/** The number of pieces of code that matched the search query. */
codeCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of edges. */
edges:({get:<R extends SearchResultItemEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SearchResultItemEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SearchResultItemEdge, R>|null)[]|null)>}),
/** The number of issues that matched the search query. */
issueCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** A list of nodes. */
nodes:({get:<R extends SearchResultItemRequest>(request: R, defaultValue?:((FieldsSelection<SearchResultItem, R>|null)[]|null))=>Observable<((FieldsSelection<SearchResultItem, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** The number of repositories that matched the search query. */
repositoryCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of users that matched the search query. */
userCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The number of wiki pages that matched the search query. */
wikiCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SearchResultItemEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends SearchResultItemRequest>(request: R, defaultValue?:(FieldsSelection<SearchResultItem, R>|null))=>Promise<(FieldsSelection<SearchResultItem, R>|null)>}),
/** Text matches on the result found. */
textMatches:({get:<R extends TextMatchRequest>(request: R, defaultValue?:((FieldsSelection<TextMatch, R>|null)[]|null))=>Promise<((FieldsSelection<TextMatch, R>|null)[]|null)>})}


/** An edge in a connection. */
export interface SearchResultItemEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:({get:<R extends SearchResultItemRequest>(request: R, defaultValue?:(FieldsSelection<SearchResultItem, R>|null))=>Observable<(FieldsSelection<SearchResultItem, R>|null)>}),
/** Text matches on the result found. */
textMatches:({get:<R extends TextMatchRequest>(request: R, defaultValue?:((FieldsSelection<TextMatch, R>|null)[]|null))=>Observable<((FieldsSelection<TextMatch, R>|null)[]|null)>})}


/** A text match within a search result. */
export interface TextMatchPromiseChain{
/** The specific text fragment within the property matched on. */
fragment:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Highlights within the matched fragment. */
highlights:({get:<R extends TextMatchHighlightRequest>(request: R, defaultValue?:TextMatchHighlight[])=>Promise<TextMatchHighlight[]>}),
/** The property matched on. */
property:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A text match within a search result. */
export interface TextMatchObservableChain{
/** The specific text fragment within the property matched on. */
fragment:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Highlights within the matched fragment. */
highlights:({get:<R extends TextMatchHighlightRequest>(request: R, defaultValue?:TextMatchHighlight[])=>Observable<TextMatchHighlight[]>}),
/** The property matched on. */
property:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a single highlight in a search result match. */
export interface TextMatchHighlightPromiseChain{
/** The indice in the fragment where the matched text begins. */
beginIndice:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The indice in the fragment where the matched text ends. */
endIndice:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The text matched. */
text:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** Represents a single highlight in a search result match. */
export interface TextMatchHighlightObservableChain{
/** The indice in the fragment where the matched text begins. */
beginIndice:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The indice in the fragment where the matched text ends. */
endIndice:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The text matched. */
text:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnectionPromiseChain{
/** A list of edges. */
edges:({get:<R extends SecurityAdvisoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SecurityAdvisoryEdge, R>|null)[]|null))=>Promise<((FieldsSelection<SecurityAdvisoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:((FieldsSelection<SecurityAdvisory, R>|null)[]|null))=>Promise<((FieldsSelection<SecurityAdvisory, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoPromiseChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Promise<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** The connection type for SecurityAdvisory. */
export interface SecurityAdvisoryConnectionObservableChain{
/** A list of edges. */
edges:({get:<R extends SecurityAdvisoryEdgeRequest>(request: R, defaultValue?:((FieldsSelection<SecurityAdvisoryEdge, R>|null)[]|null))=>Observable<((FieldsSelection<SecurityAdvisoryEdge, R>|null)[]|null)>}),
/** A list of nodes. */
nodes:({get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:((FieldsSelection<SecurityAdvisory, R>|null)[]|null))=>Observable<((FieldsSelection<SecurityAdvisory, R>|null)[]|null)>}),
/** Information to aid in pagination. */
pageInfo:(PageInfoObservableChain & {get:<R extends PageInfoRequest>(request: R, defaultValue?:PageInfo)=>Observable<PageInfo>}),
/** Identifies the total count of items in the connection. */
totalCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An edge in a connection. */
export interface SecurityAdvisoryEdgePromiseChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SecurityAdvisoryPromiseChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Promise<(FieldsSelection<SecurityAdvisory, R>|null)>})}


/** An edge in a connection. */
export interface SecurityAdvisoryEdgeObservableChain{
/** A cursor for use in pagination. */
cursor:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The item at the end of the edge. */
node:(SecurityAdvisoryObservableChain & {get:<R extends SecurityAdvisoryRequest>(request: R, defaultValue?:(FieldsSelection<SecurityAdvisory, R>|null))=>Observable<(FieldsSelection<SecurityAdvisory, R>|null)>})}


/** The root query for implementing GraphQL mutations. */
export interface MutationPromiseChain{
/** Accepts a pending invitation for a user to become an administrator of an enterprise. */
acceptEnterpriseAdministratorInvitation:((args:{input: AcceptEnterpriseAdministratorInvitationInput})=>AcceptEnterpriseAdministratorInvitationPayloadPromiseChain & {get:<R extends AcceptEnterpriseAdministratorInvitationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AcceptEnterpriseAdministratorInvitationPayload, R>|null))=>Promise<(FieldsSelection<AcceptEnterpriseAdministratorInvitationPayload, R>|null)>}),
/** Applies a suggested topic to the repository. */
acceptTopicSuggestion:((args:{input: AcceptTopicSuggestionInput})=>AcceptTopicSuggestionPayloadPromiseChain & {get:<R extends AcceptTopicSuggestionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AcceptTopicSuggestionPayload, R>|null))=>Promise<(FieldsSelection<AcceptTopicSuggestionPayload, R>|null)>}),
/** Adds assignees to an assignable object. */
addAssigneesToAssignable:((args:{input: AddAssigneesToAssignableInput})=>AddAssigneesToAssignablePayloadPromiseChain & {get:<R extends AddAssigneesToAssignablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddAssigneesToAssignablePayload, R>|null))=>Promise<(FieldsSelection<AddAssigneesToAssignablePayload, R>|null)>}),
/** Adds a comment to an Issue or Pull Request. */
addComment:((args:{input: AddCommentInput})=>AddCommentPayloadPromiseChain & {get:<R extends AddCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddCommentPayload, R>|null))=>Promise<(FieldsSelection<AddCommentPayload, R>|null)>}),
/** Adds labels to a labelable object. */
addLabelsToLabelable:((args:{input: AddLabelsToLabelableInput})=>AddLabelsToLabelablePayloadPromiseChain & {get:<R extends AddLabelsToLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddLabelsToLabelablePayload, R>|null))=>Promise<(FieldsSelection<AddLabelsToLabelablePayload, R>|null)>}),
/** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
addProjectCard:((args:{input: AddProjectCardInput})=>AddProjectCardPayloadPromiseChain & {get:<R extends AddProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddProjectCardPayload, R>|null))=>Promise<(FieldsSelection<AddProjectCardPayload, R>|null)>}),
/** Adds a column to a Project. */
addProjectColumn:((args:{input: AddProjectColumnInput})=>AddProjectColumnPayloadPromiseChain & {get:<R extends AddProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddProjectColumnPayload, R>|null))=>Promise<(FieldsSelection<AddProjectColumnPayload, R>|null)>}),
/** Adds a review to a Pull Request. */
addPullRequestReview:((args:{input: AddPullRequestReviewInput})=>AddPullRequestReviewPayloadPromiseChain & {get:<R extends AddPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewPayload, R>|null))=>Promise<(FieldsSelection<AddPullRequestReviewPayload, R>|null)>}),
/** Adds a comment to a review. */
addPullRequestReviewComment:((args:{input: AddPullRequestReviewCommentInput})=>AddPullRequestReviewCommentPayloadPromiseChain & {get:<R extends AddPullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewCommentPayload, R>|null))=>Promise<(FieldsSelection<AddPullRequestReviewCommentPayload, R>|null)>}),
/** Adds a new thread to a pending Pull Request Review. */
addPullRequestReviewThread:((args:{input: AddPullRequestReviewThreadInput})=>AddPullRequestReviewThreadPayloadPromiseChain & {get:<R extends AddPullRequestReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewThreadPayload, R>|null))=>Promise<(FieldsSelection<AddPullRequestReviewThreadPayload, R>|null)>}),
/** Adds a reaction to a subject. */
addReaction:((args:{input: AddReactionInput})=>AddReactionPayloadPromiseChain & {get:<R extends AddReactionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddReactionPayload, R>|null))=>Promise<(FieldsSelection<AddReactionPayload, R>|null)>}),
/** Adds a star to a Starrable. */
addStar:((args:{input: AddStarInput})=>AddStarPayloadPromiseChain & {get:<R extends AddStarPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddStarPayload, R>|null))=>Promise<(FieldsSelection<AddStarPayload, R>|null)>}),
/** Marks a repository as archived. */
archiveRepository:((args:{input: ArchiveRepositoryInput})=>ArchiveRepositoryPayloadPromiseChain & {get:<R extends ArchiveRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ArchiveRepositoryPayload, R>|null))=>Promise<(FieldsSelection<ArchiveRepositoryPayload, R>|null)>}),
/** Cancels a pending invitation for an administrator to join an enterprise. */
cancelEnterpriseAdminInvitation:((args:{input: CancelEnterpriseAdminInvitationInput})=>CancelEnterpriseAdminInvitationPayloadPromiseChain & {get:<R extends CancelEnterpriseAdminInvitationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CancelEnterpriseAdminInvitationPayload, R>|null))=>Promise<(FieldsSelection<CancelEnterpriseAdminInvitationPayload, R>|null)>}),
/** Update your status on GitHub. */
changeUserStatus:((args:{input: ChangeUserStatusInput})=>ChangeUserStatusPayloadPromiseChain & {get:<R extends ChangeUserStatusPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ChangeUserStatusPayload, R>|null))=>Promise<(FieldsSelection<ChangeUserStatusPayload, R>|null)>}),
/** Clears all labels from a labelable object. */
clearLabelsFromLabelable:((args:{input: ClearLabelsFromLabelableInput})=>ClearLabelsFromLabelablePayloadPromiseChain & {get:<R extends ClearLabelsFromLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ClearLabelsFromLabelablePayload, R>|null))=>Promise<(FieldsSelection<ClearLabelsFromLabelablePayload, R>|null)>}),
/** Creates a new project by cloning configuration from an existing project. */
cloneProject:((args:{input: CloneProjectInput})=>CloneProjectPayloadPromiseChain & {get:<R extends CloneProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloneProjectPayload, R>|null))=>Promise<(FieldsSelection<CloneProjectPayload, R>|null)>}),
/** Create a new repository with the same files and directory structure as a template repository. */
cloneTemplateRepository:((args:{input: CloneTemplateRepositoryInput})=>CloneTemplateRepositoryPayloadPromiseChain & {get:<R extends CloneTemplateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloneTemplateRepositoryPayload, R>|null))=>Promise<(FieldsSelection<CloneTemplateRepositoryPayload, R>|null)>}),
/** Close an issue. */
closeIssue:((args:{input: CloseIssueInput})=>CloseIssuePayloadPromiseChain & {get:<R extends CloseIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloseIssuePayload, R>|null))=>Promise<(FieldsSelection<CloseIssuePayload, R>|null)>}),
/** Close a pull request. */
closePullRequest:((args:{input: ClosePullRequestInput})=>ClosePullRequestPayloadPromiseChain & {get:<R extends ClosePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ClosePullRequestPayload, R>|null))=>Promise<(FieldsSelection<ClosePullRequestPayload, R>|null)>}),
/** Convert a project note card to one associated with a newly created issue. */
convertProjectCardNoteToIssue:((args:{input: ConvertProjectCardNoteToIssueInput})=>ConvertProjectCardNoteToIssuePayloadPromiseChain & {get:<R extends ConvertProjectCardNoteToIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ConvertProjectCardNoteToIssuePayload, R>|null))=>Promise<(FieldsSelection<ConvertProjectCardNoteToIssuePayload, R>|null)>}),
/** Create a new branch protection rule */
createBranchProtectionRule:((args:{input: CreateBranchProtectionRuleInput})=>CreateBranchProtectionRulePayloadPromiseChain & {get:<R extends CreateBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateBranchProtectionRulePayload, R>|null))=>Promise<(FieldsSelection<CreateBranchProtectionRulePayload, R>|null)>}),
/** Create a check run. */
createCheckRun:((args:{input: CreateCheckRunInput})=>CreateCheckRunPayloadPromiseChain & {get:<R extends CreateCheckRunPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateCheckRunPayload, R>|null))=>Promise<(FieldsSelection<CreateCheckRunPayload, R>|null)>}),
/** Create a check suite */
createCheckSuite:((args:{input: CreateCheckSuiteInput})=>CreateCheckSuitePayloadPromiseChain & {get:<R extends CreateCheckSuitePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateCheckSuitePayload, R>|null))=>Promise<(FieldsSelection<CreateCheckSuitePayload, R>|null)>}),
/** Create a content attachment. */
createContentAttachment:((args:{input: CreateContentAttachmentInput})=>CreateContentAttachmentPayloadPromiseChain & {get:<R extends CreateContentAttachmentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateContentAttachmentPayload, R>|null))=>Promise<(FieldsSelection<CreateContentAttachmentPayload, R>|null)>}),
/** Creates a new deployment event. */
createDeployment:((args:{input: CreateDeploymentInput})=>CreateDeploymentPayloadPromiseChain & {get:<R extends CreateDeploymentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateDeploymentPayload, R>|null))=>Promise<(FieldsSelection<CreateDeploymentPayload, R>|null)>}),
/** Create a deployment status. */
createDeploymentStatus:((args:{input: CreateDeploymentStatusInput})=>CreateDeploymentStatusPayloadPromiseChain & {get:<R extends CreateDeploymentStatusPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateDeploymentStatusPayload, R>|null))=>Promise<(FieldsSelection<CreateDeploymentStatusPayload, R>|null)>}),
/** Creates an organization as part of an enterprise account. */
createEnterpriseOrganization:((args:{input: CreateEnterpriseOrganizationInput})=>CreateEnterpriseOrganizationPayloadPromiseChain & {get:<R extends CreateEnterpriseOrganizationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateEnterpriseOrganizationPayload, R>|null))=>Promise<(FieldsSelection<CreateEnterpriseOrganizationPayload, R>|null)>}),
/** Creates a new IP allow list entry. */
createIpAllowListEntry:((args:{input: CreateIpAllowListEntryInput})=>CreateIpAllowListEntryPayloadPromiseChain & {get:<R extends CreateIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateIpAllowListEntryPayload, R>|null))=>Promise<(FieldsSelection<CreateIpAllowListEntryPayload, R>|null)>}),
/** Creates a new issue. */
createIssue:((args:{input: CreateIssueInput})=>CreateIssuePayloadPromiseChain & {get:<R extends CreateIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateIssuePayload, R>|null))=>Promise<(FieldsSelection<CreateIssuePayload, R>|null)>}),
/** Creates a new label. */
createLabel:((args:{input: CreateLabelInput})=>CreateLabelPayloadPromiseChain & {get:<R extends CreateLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateLabelPayload, R>|null))=>Promise<(FieldsSelection<CreateLabelPayload, R>|null)>}),
/** Creates a new project. */
createProject:((args:{input: CreateProjectInput})=>CreateProjectPayloadPromiseChain & {get:<R extends CreateProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateProjectPayload, R>|null))=>Promise<(FieldsSelection<CreateProjectPayload, R>|null)>}),
/** Create a new pull request */
createPullRequest:((args:{input: CreatePullRequestInput})=>CreatePullRequestPayloadPromiseChain & {get:<R extends CreatePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreatePullRequestPayload, R>|null))=>Promise<(FieldsSelection<CreatePullRequestPayload, R>|null)>}),
/** Create a new Git Ref. */
createRef:((args:{input: CreateRefInput})=>CreateRefPayloadPromiseChain & {get:<R extends CreateRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateRefPayload, R>|null))=>Promise<(FieldsSelection<CreateRefPayload, R>|null)>}),
/** Create a new repository. */
createRepository:((args:{input: CreateRepositoryInput})=>CreateRepositoryPayloadPromiseChain & {get:<R extends CreateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateRepositoryPayload, R>|null))=>Promise<(FieldsSelection<CreateRepositoryPayload, R>|null)>}),
/** Creates a new team discussion. */
createTeamDiscussion:((args:{input: CreateTeamDiscussionInput})=>CreateTeamDiscussionPayloadPromiseChain & {get:<R extends CreateTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateTeamDiscussionPayload, R>|null))=>Promise<(FieldsSelection<CreateTeamDiscussionPayload, R>|null)>}),
/** Creates a new team discussion comment. */
createTeamDiscussionComment:((args:{input: CreateTeamDiscussionCommentInput})=>CreateTeamDiscussionCommentPayloadPromiseChain & {get:<R extends CreateTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateTeamDiscussionCommentPayload, R>|null))=>Promise<(FieldsSelection<CreateTeamDiscussionCommentPayload, R>|null)>}),
/** Rejects a suggested topic for the repository. */
declineTopicSuggestion:((args:{input: DeclineTopicSuggestionInput})=>DeclineTopicSuggestionPayloadPromiseChain & {get:<R extends DeclineTopicSuggestionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeclineTopicSuggestionPayload, R>|null))=>Promise<(FieldsSelection<DeclineTopicSuggestionPayload, R>|null)>}),
/** Delete a branch protection rule */
deleteBranchProtectionRule:((args:{input: DeleteBranchProtectionRuleInput})=>DeleteBranchProtectionRulePayloadPromiseChain & {get:<R extends DeleteBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteBranchProtectionRulePayload, R>|null))=>Promise<(FieldsSelection<DeleteBranchProtectionRulePayload, R>|null)>}),
/** Deletes a deployment. */
deleteDeployment:((args:{input: DeleteDeploymentInput})=>DeleteDeploymentPayloadPromiseChain & {get:<R extends DeleteDeploymentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteDeploymentPayload, R>|null))=>Promise<(FieldsSelection<DeleteDeploymentPayload, R>|null)>}),
/** Deletes an IP allow list entry. */
deleteIpAllowListEntry:((args:{input: DeleteIpAllowListEntryInput})=>DeleteIpAllowListEntryPayloadPromiseChain & {get:<R extends DeleteIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIpAllowListEntryPayload, R>|null))=>Promise<(FieldsSelection<DeleteIpAllowListEntryPayload, R>|null)>}),
/** Deletes an Issue object. */
deleteIssue:((args:{input: DeleteIssueInput})=>DeleteIssuePayloadPromiseChain & {get:<R extends DeleteIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIssuePayload, R>|null))=>Promise<(FieldsSelection<DeleteIssuePayload, R>|null)>}),
/** Deletes an IssueComment object. */
deleteIssueComment:((args:{input: DeleteIssueCommentInput})=>DeleteIssueCommentPayloadPromiseChain & {get:<R extends DeleteIssueCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIssueCommentPayload, R>|null))=>Promise<(FieldsSelection<DeleteIssueCommentPayload, R>|null)>}),
/** Deletes a label. */
deleteLabel:((args:{input: DeleteLabelInput})=>DeleteLabelPayloadPromiseChain & {get:<R extends DeleteLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteLabelPayload, R>|null))=>Promise<(FieldsSelection<DeleteLabelPayload, R>|null)>}),
/** Delete a package version. */
deletePackageVersion:((args:{input: DeletePackageVersionInput})=>DeletePackageVersionPayloadPromiseChain & {get:<R extends DeletePackageVersionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePackageVersionPayload, R>|null))=>Promise<(FieldsSelection<DeletePackageVersionPayload, R>|null)>}),
/** Deletes a project. */
deleteProject:((args:{input: DeleteProjectInput})=>DeleteProjectPayloadPromiseChain & {get:<R extends DeleteProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectPayload, R>|null))=>Promise<(FieldsSelection<DeleteProjectPayload, R>|null)>}),
/** Deletes a project card. */
deleteProjectCard:((args:{input: DeleteProjectCardInput})=>DeleteProjectCardPayloadPromiseChain & {get:<R extends DeleteProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectCardPayload, R>|null))=>Promise<(FieldsSelection<DeleteProjectCardPayload, R>|null)>}),
/** Deletes a project column. */
deleteProjectColumn:((args:{input: DeleteProjectColumnInput})=>DeleteProjectColumnPayloadPromiseChain & {get:<R extends DeleteProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectColumnPayload, R>|null))=>Promise<(FieldsSelection<DeleteProjectColumnPayload, R>|null)>}),
/** Deletes a pull request review. */
deletePullRequestReview:((args:{input: DeletePullRequestReviewInput})=>DeletePullRequestReviewPayloadPromiseChain & {get:<R extends DeletePullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePullRequestReviewPayload, R>|null))=>Promise<(FieldsSelection<DeletePullRequestReviewPayload, R>|null)>}),
/** Deletes a pull request review comment. */
deletePullRequestReviewComment:((args:{input: DeletePullRequestReviewCommentInput})=>DeletePullRequestReviewCommentPayloadPromiseChain & {get:<R extends DeletePullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePullRequestReviewCommentPayload, R>|null))=>Promise<(FieldsSelection<DeletePullRequestReviewCommentPayload, R>|null)>}),
/** Delete a Git Ref. */
deleteRef:((args:{input: DeleteRefInput})=>DeleteRefPayloadPromiseChain & {get:<R extends DeleteRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteRefPayload, R>|null))=>Promise<(FieldsSelection<DeleteRefPayload, R>|null)>}),
/** Deletes a team discussion. */
deleteTeamDiscussion:((args:{input: DeleteTeamDiscussionInput})=>DeleteTeamDiscussionPayloadPromiseChain & {get:<R extends DeleteTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteTeamDiscussionPayload, R>|null))=>Promise<(FieldsSelection<DeleteTeamDiscussionPayload, R>|null)>}),
/** Deletes a team discussion comment. */
deleteTeamDiscussionComment:((args:{input: DeleteTeamDiscussionCommentInput})=>DeleteTeamDiscussionCommentPayloadPromiseChain & {get:<R extends DeleteTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteTeamDiscussionCommentPayload, R>|null))=>Promise<(FieldsSelection<DeleteTeamDiscussionCommentPayload, R>|null)>}),
/** Dismisses an approved or rejected pull request review. */
dismissPullRequestReview:((args:{input: DismissPullRequestReviewInput})=>DismissPullRequestReviewPayloadPromiseChain & {get:<R extends DismissPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DismissPullRequestReviewPayload, R>|null))=>Promise<(FieldsSelection<DismissPullRequestReviewPayload, R>|null)>}),
/** Follow a user. */
followUser:((args:{input: FollowUserInput})=>FollowUserPayloadPromiseChain & {get:<R extends FollowUserPayloadRequest>(request: R, defaultValue?:(FieldsSelection<FollowUserPayload, R>|null))=>Promise<(FieldsSelection<FollowUserPayload, R>|null)>}),
/** Creates a new project by importing columns and a list of issues/PRs. */
importProject:((args:{input: ImportProjectInput})=>ImportProjectPayloadPromiseChain & {get:<R extends ImportProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ImportProjectPayload, R>|null))=>Promise<(FieldsSelection<ImportProjectPayload, R>|null)>}),
/** Invite someone to become an administrator of the enterprise. */
inviteEnterpriseAdmin:((args:{input: InviteEnterpriseAdminInput})=>InviteEnterpriseAdminPayloadPromiseChain & {get:<R extends InviteEnterpriseAdminPayloadRequest>(request: R, defaultValue?:(FieldsSelection<InviteEnterpriseAdminPayload, R>|null))=>Promise<(FieldsSelection<InviteEnterpriseAdminPayload, R>|null)>}),
/** Creates a repository link for a project. */
linkRepositoryToProject:((args:{input: LinkRepositoryToProjectInput})=>LinkRepositoryToProjectPayloadPromiseChain & {get:<R extends LinkRepositoryToProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<LinkRepositoryToProjectPayload, R>|null))=>Promise<(FieldsSelection<LinkRepositoryToProjectPayload, R>|null)>}),
/** Lock a lockable object */
lockLockable:((args:{input: LockLockableInput})=>LockLockablePayloadPromiseChain & {get:<R extends LockLockablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<LockLockablePayload, R>|null))=>Promise<(FieldsSelection<LockLockablePayload, R>|null)>}),
/** Marks a pull request ready for review. */
markPullRequestReadyForReview:((args:{input: MarkPullRequestReadyForReviewInput})=>MarkPullRequestReadyForReviewPayloadPromiseChain & {get:<R extends MarkPullRequestReadyForReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MarkPullRequestReadyForReviewPayload, R>|null))=>Promise<(FieldsSelection<MarkPullRequestReadyForReviewPayload, R>|null)>}),
/** Merge a head into a branch. */
mergeBranch:((args:{input: MergeBranchInput})=>MergeBranchPayloadPromiseChain & {get:<R extends MergeBranchPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MergeBranchPayload, R>|null))=>Promise<(FieldsSelection<MergeBranchPayload, R>|null)>}),
/** Merge a pull request. */
mergePullRequest:((args:{input: MergePullRequestInput})=>MergePullRequestPayloadPromiseChain & {get:<R extends MergePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MergePullRequestPayload, R>|null))=>Promise<(FieldsSelection<MergePullRequestPayload, R>|null)>}),
/** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
minimizeComment:((args:{input: MinimizeCommentInput})=>MinimizeCommentPayloadPromiseChain & {get:<R extends MinimizeCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MinimizeCommentPayload, R>|null))=>Promise<(FieldsSelection<MinimizeCommentPayload, R>|null)>}),
/** Moves a project card to another place. */
moveProjectCard:((args:{input: MoveProjectCardInput})=>MoveProjectCardPayloadPromiseChain & {get:<R extends MoveProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MoveProjectCardPayload, R>|null))=>Promise<(FieldsSelection<MoveProjectCardPayload, R>|null)>}),
/** Moves a project column to another place. */
moveProjectColumn:((args:{input: MoveProjectColumnInput})=>MoveProjectColumnPayloadPromiseChain & {get:<R extends MoveProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MoveProjectColumnPayload, R>|null))=>Promise<(FieldsSelection<MoveProjectColumnPayload, R>|null)>}),
/** Pin an issue to a repository */
pinIssue:((args:{input: PinIssueInput})=>PinIssuePayloadPromiseChain & {get:<R extends PinIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<PinIssuePayload, R>|null))=>Promise<(FieldsSelection<PinIssuePayload, R>|null)>}),
/** Regenerates the identity provider recovery codes for an enterprise */
regenerateEnterpriseIdentityProviderRecoveryCodes:((args:{input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput})=>RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadPromiseChain & {get:<R extends RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, R>|null))=>Promise<(FieldsSelection<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, R>|null)>}),
/** Removes assignees from an assignable object. */
removeAssigneesFromAssignable:((args:{input: RemoveAssigneesFromAssignableInput})=>RemoveAssigneesFromAssignablePayloadPromiseChain & {get:<R extends RemoveAssigneesFromAssignablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveAssigneesFromAssignablePayload, R>|null))=>Promise<(FieldsSelection<RemoveAssigneesFromAssignablePayload, R>|null)>}),
/** Removes an administrator from the enterprise. */
removeEnterpriseAdmin:((args:{input: RemoveEnterpriseAdminInput})=>RemoveEnterpriseAdminPayloadPromiseChain & {get:<R extends RemoveEnterpriseAdminPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseAdminPayload, R>|null))=>Promise<(FieldsSelection<RemoveEnterpriseAdminPayload, R>|null)>}),
/** Removes the identity provider from an enterprise */
removeEnterpriseIdentityProvider:((args:{input: RemoveEnterpriseIdentityProviderInput})=>RemoveEnterpriseIdentityProviderPayloadPromiseChain & {get:<R extends RemoveEnterpriseIdentityProviderPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseIdentityProviderPayload, R>|null))=>Promise<(FieldsSelection<RemoveEnterpriseIdentityProviderPayload, R>|null)>}),
/** Removes an organization from the enterprise */
removeEnterpriseOrganization:((args:{input: RemoveEnterpriseOrganizationInput})=>RemoveEnterpriseOrganizationPayloadPromiseChain & {get:<R extends RemoveEnterpriseOrganizationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseOrganizationPayload, R>|null))=>Promise<(FieldsSelection<RemoveEnterpriseOrganizationPayload, R>|null)>}),
/** Removes labels from a Labelable object. */
removeLabelsFromLabelable:((args:{input: RemoveLabelsFromLabelableInput})=>RemoveLabelsFromLabelablePayloadPromiseChain & {get:<R extends RemoveLabelsFromLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveLabelsFromLabelablePayload, R>|null))=>Promise<(FieldsSelection<RemoveLabelsFromLabelablePayload, R>|null)>}),
/** Removes outside collaborator from all repositories in an organization. */
removeOutsideCollaborator:((args:{input: RemoveOutsideCollaboratorInput})=>RemoveOutsideCollaboratorPayloadPromiseChain & {get:<R extends RemoveOutsideCollaboratorPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveOutsideCollaboratorPayload, R>|null))=>Promise<(FieldsSelection<RemoveOutsideCollaboratorPayload, R>|null)>}),
/** Removes a reaction from a subject. */
removeReaction:((args:{input: RemoveReactionInput})=>RemoveReactionPayloadPromiseChain & {get:<R extends RemoveReactionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveReactionPayload, R>|null))=>Promise<(FieldsSelection<RemoveReactionPayload, R>|null)>}),
/** Removes a star from a Starrable. */
removeStar:((args:{input: RemoveStarInput})=>RemoveStarPayloadPromiseChain & {get:<R extends RemoveStarPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveStarPayload, R>|null))=>Promise<(FieldsSelection<RemoveStarPayload, R>|null)>}),
/** Reopen a issue. */
reopenIssue:((args:{input: ReopenIssueInput})=>ReopenIssuePayloadPromiseChain & {get:<R extends ReopenIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ReopenIssuePayload, R>|null))=>Promise<(FieldsSelection<ReopenIssuePayload, R>|null)>}),
/** Reopen a pull request. */
reopenPullRequest:((args:{input: ReopenPullRequestInput})=>ReopenPullRequestPayloadPromiseChain & {get:<R extends ReopenPullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ReopenPullRequestPayload, R>|null))=>Promise<(FieldsSelection<ReopenPullRequestPayload, R>|null)>}),
/** Set review requests on a pull request. */
requestReviews:((args:{input: RequestReviewsInput})=>RequestReviewsPayloadPromiseChain & {get:<R extends RequestReviewsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RequestReviewsPayload, R>|null))=>Promise<(FieldsSelection<RequestReviewsPayload, R>|null)>}),
/** Rerequests an existing check suite. */
rerequestCheckSuite:((args:{input: RerequestCheckSuiteInput})=>RerequestCheckSuitePayloadPromiseChain & {get:<R extends RerequestCheckSuitePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RerequestCheckSuitePayload, R>|null))=>Promise<(FieldsSelection<RerequestCheckSuitePayload, R>|null)>}),
/** Marks a review thread as resolved. */
resolveReviewThread:((args:{input: ResolveReviewThreadInput})=>ResolveReviewThreadPayloadPromiseChain & {get:<R extends ResolveReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ResolveReviewThreadPayload, R>|null))=>Promise<(FieldsSelection<ResolveReviewThreadPayload, R>|null)>}),
/** Creates or updates the identity provider for an enterprise. */
setEnterpriseIdentityProvider:((args:{input: SetEnterpriseIdentityProviderInput})=>SetEnterpriseIdentityProviderPayloadPromiseChain & {get:<R extends SetEnterpriseIdentityProviderPayloadRequest>(request: R, defaultValue?:(FieldsSelection<SetEnterpriseIdentityProviderPayload, R>|null))=>Promise<(FieldsSelection<SetEnterpriseIdentityProviderPayload, R>|null)>}),
/** Submits a pending pull request review. */
submitPullRequestReview:((args:{input: SubmitPullRequestReviewInput})=>SubmitPullRequestReviewPayloadPromiseChain & {get:<R extends SubmitPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<SubmitPullRequestReviewPayload, R>|null))=>Promise<(FieldsSelection<SubmitPullRequestReviewPayload, R>|null)>}),
/** Transfer an issue to a different repository */
transferIssue:((args:{input: TransferIssueInput})=>TransferIssuePayloadPromiseChain & {get:<R extends TransferIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<TransferIssuePayload, R>|null))=>Promise<(FieldsSelection<TransferIssuePayload, R>|null)>}),
/** Unarchives a repository. */
unarchiveRepository:((args:{input: UnarchiveRepositoryInput})=>UnarchiveRepositoryPayloadPromiseChain & {get:<R extends UnarchiveRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnarchiveRepositoryPayload, R>|null))=>Promise<(FieldsSelection<UnarchiveRepositoryPayload, R>|null)>}),
/** Unfollow a user. */
unfollowUser:((args:{input: UnfollowUserInput})=>UnfollowUserPayloadPromiseChain & {get:<R extends UnfollowUserPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnfollowUserPayload, R>|null))=>Promise<(FieldsSelection<UnfollowUserPayload, R>|null)>}),
/** Deletes a repository link from a project. */
unlinkRepositoryFromProject:((args:{input: UnlinkRepositoryFromProjectInput})=>UnlinkRepositoryFromProjectPayloadPromiseChain & {get:<R extends UnlinkRepositoryFromProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnlinkRepositoryFromProjectPayload, R>|null))=>Promise<(FieldsSelection<UnlinkRepositoryFromProjectPayload, R>|null)>}),
/** Unlock a lockable object */
unlockLockable:((args:{input: UnlockLockableInput})=>UnlockLockablePayloadPromiseChain & {get:<R extends UnlockLockablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnlockLockablePayload, R>|null))=>Promise<(FieldsSelection<UnlockLockablePayload, R>|null)>}),
/** Unmark an issue as a duplicate of another issue. */
unmarkIssueAsDuplicate:((args:{input: UnmarkIssueAsDuplicateInput})=>UnmarkIssueAsDuplicatePayloadPromiseChain & {get:<R extends UnmarkIssueAsDuplicatePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnmarkIssueAsDuplicatePayload, R>|null))=>Promise<(FieldsSelection<UnmarkIssueAsDuplicatePayload, R>|null)>}),
/** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
unminimizeComment:((args:{input: UnminimizeCommentInput})=>UnminimizeCommentPayloadPromiseChain & {get:<R extends UnminimizeCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnminimizeCommentPayload, R>|null))=>Promise<(FieldsSelection<UnminimizeCommentPayload, R>|null)>}),
/** Unpin a pinned issue from a repository */
unpinIssue:((args:{input: UnpinIssueInput})=>UnpinIssuePayloadPromiseChain & {get:<R extends UnpinIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnpinIssuePayload, R>|null))=>Promise<(FieldsSelection<UnpinIssuePayload, R>|null)>}),
/** Marks a review thread as unresolved. */
unresolveReviewThread:((args:{input: UnresolveReviewThreadInput})=>UnresolveReviewThreadPayloadPromiseChain & {get:<R extends UnresolveReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnresolveReviewThreadPayload, R>|null))=>Promise<(FieldsSelection<UnresolveReviewThreadPayload, R>|null)>}),
/** Create a new branch protection rule */
updateBranchProtectionRule:((args:{input: UpdateBranchProtectionRuleInput})=>UpdateBranchProtectionRulePayloadPromiseChain & {get:<R extends UpdateBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateBranchProtectionRulePayload, R>|null))=>Promise<(FieldsSelection<UpdateBranchProtectionRulePayload, R>|null)>}),
/** Update a check run */
updateCheckRun:((args:{input: UpdateCheckRunInput})=>UpdateCheckRunPayloadPromiseChain & {get:<R extends UpdateCheckRunPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateCheckRunPayload, R>|null))=>Promise<(FieldsSelection<UpdateCheckRunPayload, R>|null)>}),
/** Modifies the settings of an existing check suite */
updateCheckSuitePreferences:((args:{input: UpdateCheckSuitePreferencesInput})=>UpdateCheckSuitePreferencesPayloadPromiseChain & {get:<R extends UpdateCheckSuitePreferencesPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateCheckSuitePreferencesPayload, R>|null))=>Promise<(FieldsSelection<UpdateCheckSuitePreferencesPayload, R>|null)>}),
/** Sets the action execution capability setting for an enterprise. */
updateEnterpriseActionExecutionCapabilitySetting:((args:{input: UpdateEnterpriseActionExecutionCapabilitySettingInput})=>UpdateEnterpriseActionExecutionCapabilitySettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseActionExecutionCapabilitySettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseActionExecutionCapabilitySettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseActionExecutionCapabilitySettingPayload, R>|null)>}),
/** Updates the role of an enterprise administrator. */
updateEnterpriseAdministratorRole:((args:{input: UpdateEnterpriseAdministratorRoleInput})=>UpdateEnterpriseAdministratorRolePayloadPromiseChain & {get:<R extends UpdateEnterpriseAdministratorRolePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseAdministratorRolePayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseAdministratorRolePayload, R>|null)>}),
/** Sets whether private repository forks are enabled for an enterprise. */
updateEnterpriseAllowPrivateRepositoryForkingSetting:((args:{input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput})=>UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, R>|null)>}),
/** Sets the default repository permission for organizations in an enterprise. */
updateEnterpriseDefaultRepositoryPermissionSetting:((args:{input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput})=>UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, R>|null)>}),
/** Sets whether organization members with admin permissions on a repository can change repository visibility. */
updateEnterpriseMembersCanChangeRepositoryVisibilitySetting:((args:{input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput})=>UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, R>|null)>}),
/** Sets the members can create repositories setting for an enterprise. */
updateEnterpriseMembersCanCreateRepositoriesSetting:((args:{input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput})=>UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, R>|null)>}),
/** Sets the members can delete issues setting for an enterprise. */
updateEnterpriseMembersCanDeleteIssuesSetting:((args:{input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput})=>UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, R>|null)>}),
/** Sets the members can delete repositories setting for an enterprise. */
updateEnterpriseMembersCanDeleteRepositoriesSetting:((args:{input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput})=>UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, R>|null)>}),
/** Sets whether members can invite collaborators are enabled for an enterprise. */
updateEnterpriseMembersCanInviteCollaboratorsSetting:((args:{input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput})=>UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, R>|null)>}),
/** Sets whether or not an organization admin can make purchases. */
updateEnterpriseMembersCanMakePurchasesSetting:((args:{input: UpdateEnterpriseMembersCanMakePurchasesSettingInput})=>UpdateEnterpriseMembersCanMakePurchasesSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanMakePurchasesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanMakePurchasesSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanMakePurchasesSettingPayload, R>|null)>}),
/** Sets the members can update protected branches setting for an enterprise. */
updateEnterpriseMembersCanUpdateProtectedBranchesSetting:((args:{input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput})=>UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, R>|null)>}),
/** Sets the members can view dependency insights for an enterprise. */
updateEnterpriseMembersCanViewDependencyInsightsSetting:((args:{input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput})=>UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, R>|null)>}),
/** Sets whether organization projects are enabled for an enterprise. */
updateEnterpriseOrganizationProjectsSetting:((args:{input: UpdateEnterpriseOrganizationProjectsSettingInput})=>UpdateEnterpriseOrganizationProjectsSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseOrganizationProjectsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseOrganizationProjectsSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseOrganizationProjectsSettingPayload, R>|null)>}),
/** Updates an enterprise's profile. */
updateEnterpriseProfile:((args:{input: UpdateEnterpriseProfileInput})=>UpdateEnterpriseProfilePayloadPromiseChain & {get:<R extends UpdateEnterpriseProfilePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseProfilePayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseProfilePayload, R>|null)>}),
/** Sets whether repository projects are enabled for a enterprise. */
updateEnterpriseRepositoryProjectsSetting:((args:{input: UpdateEnterpriseRepositoryProjectsSettingInput})=>UpdateEnterpriseRepositoryProjectsSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseRepositoryProjectsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseRepositoryProjectsSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseRepositoryProjectsSettingPayload, R>|null)>}),
/** Sets whether team discussions are enabled for an enterprise. */
updateEnterpriseTeamDiscussionsSetting:((args:{input: UpdateEnterpriseTeamDiscussionsSettingInput})=>UpdateEnterpriseTeamDiscussionsSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseTeamDiscussionsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseTeamDiscussionsSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseTeamDiscussionsSettingPayload, R>|null)>}),
/** Sets whether two factor authentication is required for all users in an enterprise. */
updateEnterpriseTwoFactorAuthenticationRequiredSetting:((args:{input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput})=>UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadPromiseChain & {get:<R extends UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, R>|null)>}),
/** Sets whether an IP allow list is enabled on an owner. */
updateIpAllowListEnabledSetting:((args:{input: UpdateIpAllowListEnabledSettingInput})=>UpdateIpAllowListEnabledSettingPayloadPromiseChain & {get:<R extends UpdateIpAllowListEnabledSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIpAllowListEnabledSettingPayload, R>|null))=>Promise<(FieldsSelection<UpdateIpAllowListEnabledSettingPayload, R>|null)>}),
/** Updates an IP allow list entry. */
updateIpAllowListEntry:((args:{input: UpdateIpAllowListEntryInput})=>UpdateIpAllowListEntryPayloadPromiseChain & {get:<R extends UpdateIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIpAllowListEntryPayload, R>|null))=>Promise<(FieldsSelection<UpdateIpAllowListEntryPayload, R>|null)>}),
/** Updates an Issue. */
updateIssue:((args:{input: UpdateIssueInput})=>UpdateIssuePayloadPromiseChain & {get:<R extends UpdateIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIssuePayload, R>|null))=>Promise<(FieldsSelection<UpdateIssuePayload, R>|null)>}),
/** Updates an IssueComment object. */
updateIssueComment:((args:{input: UpdateIssueCommentInput})=>UpdateIssueCommentPayloadPromiseChain & {get:<R extends UpdateIssueCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIssueCommentPayload, R>|null))=>Promise<(FieldsSelection<UpdateIssueCommentPayload, R>|null)>}),
/** Updates an existing label. */
updateLabel:((args:{input: UpdateLabelInput})=>UpdateLabelPayloadPromiseChain & {get:<R extends UpdateLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateLabelPayload, R>|null))=>Promise<(FieldsSelection<UpdateLabelPayload, R>|null)>}),
/** Updates an existing project. */
updateProject:((args:{input: UpdateProjectInput})=>UpdateProjectPayloadPromiseChain & {get:<R extends UpdateProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectPayload, R>|null))=>Promise<(FieldsSelection<UpdateProjectPayload, R>|null)>}),
/** Updates an existing project card. */
updateProjectCard:((args:{input: UpdateProjectCardInput})=>UpdateProjectCardPayloadPromiseChain & {get:<R extends UpdateProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectCardPayload, R>|null))=>Promise<(FieldsSelection<UpdateProjectCardPayload, R>|null)>}),
/** Updates an existing project column. */
updateProjectColumn:((args:{input: UpdateProjectColumnInput})=>UpdateProjectColumnPayloadPromiseChain & {get:<R extends UpdateProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectColumnPayload, R>|null))=>Promise<(FieldsSelection<UpdateProjectColumnPayload, R>|null)>}),
/** Update a pull request */
updatePullRequest:((args:{input: UpdatePullRequestInput})=>UpdatePullRequestPayloadPromiseChain & {get:<R extends UpdatePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestPayload, R>|null))=>Promise<(FieldsSelection<UpdatePullRequestPayload, R>|null)>}),
/** Updates the body of a pull request review. */
updatePullRequestReview:((args:{input: UpdatePullRequestReviewInput})=>UpdatePullRequestReviewPayloadPromiseChain & {get:<R extends UpdatePullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestReviewPayload, R>|null))=>Promise<(FieldsSelection<UpdatePullRequestReviewPayload, R>|null)>}),
/** Updates a pull request review comment. */
updatePullRequestReviewComment:((args:{input: UpdatePullRequestReviewCommentInput})=>UpdatePullRequestReviewCommentPayloadPromiseChain & {get:<R extends UpdatePullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestReviewCommentPayload, R>|null))=>Promise<(FieldsSelection<UpdatePullRequestReviewCommentPayload, R>|null)>}),
/** Update a Git Ref. */
updateRef:((args:{input: UpdateRefInput})=>UpdateRefPayloadPromiseChain & {get:<R extends UpdateRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRefPayload, R>|null))=>Promise<(FieldsSelection<UpdateRefPayload, R>|null)>}),
/**
 * Creates, updates and/or deletes multiple refs in a repository.
 * 
 * This mutation takes a list of `RefUpdate`s and performs these updates
 * on the repository. All updates are performed atomically, meaning that
 * if one of them is rejected, no other ref will be modified.
 * 
 * `RefUpdate.beforeOid` specifies that the given reference needs to point
 * to the given value before performing any updates. A value of
 * `0000000000000000000000000000000000000000` can be used to verify that
 * the references should not exist.
 * 
 * `RefUpdate.afterOid` specifies the value that the given reference
 * will point to after performing all updates. A value of
 * `0000000000000000000000000000000000000000` can be used to delete a
 * reference.
 * 
 * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
 * for the given reference will be allowed.
 */
updateRefs:((args:{input: UpdateRefsInput})=>UpdateRefsPayloadPromiseChain & {get:<R extends UpdateRefsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRefsPayload, R>|null))=>Promise<(FieldsSelection<UpdateRefsPayload, R>|null)>}),
/** Update information about a repository. */
updateRepository:((args:{input: UpdateRepositoryInput})=>UpdateRepositoryPayloadPromiseChain & {get:<R extends UpdateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRepositoryPayload, R>|null))=>Promise<(FieldsSelection<UpdateRepositoryPayload, R>|null)>}),
/** Updates the state for subscribable subjects. */
updateSubscription:((args:{input: UpdateSubscriptionInput})=>UpdateSubscriptionPayloadPromiseChain & {get:<R extends UpdateSubscriptionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateSubscriptionPayload, R>|null))=>Promise<(FieldsSelection<UpdateSubscriptionPayload, R>|null)>}),
/** Updates a team discussion. */
updateTeamDiscussion:((args:{input: UpdateTeamDiscussionInput})=>UpdateTeamDiscussionPayloadPromiseChain & {get:<R extends UpdateTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamDiscussionPayload, R>|null))=>Promise<(FieldsSelection<UpdateTeamDiscussionPayload, R>|null)>}),
/** Updates a discussion comment. */
updateTeamDiscussionComment:((args:{input: UpdateTeamDiscussionCommentInput})=>UpdateTeamDiscussionCommentPayloadPromiseChain & {get:<R extends UpdateTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamDiscussionCommentPayload, R>|null))=>Promise<(FieldsSelection<UpdateTeamDiscussionCommentPayload, R>|null)>}),
/** Updates team review assignment. */
updateTeamReviewAssignment:((args:{input: UpdateTeamReviewAssignmentInput})=>UpdateTeamReviewAssignmentPayloadPromiseChain & {get:<R extends UpdateTeamReviewAssignmentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamReviewAssignmentPayload, R>|null))=>Promise<(FieldsSelection<UpdateTeamReviewAssignmentPayload, R>|null)>}),
/** Replaces the repository's topics with the given topics. */
updateTopics:((args:{input: UpdateTopicsInput})=>UpdateTopicsPayloadPromiseChain & {get:<R extends UpdateTopicsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTopicsPayload, R>|null))=>Promise<(FieldsSelection<UpdateTopicsPayload, R>|null)>})}


/** The root query for implementing GraphQL mutations. */
export interface MutationObservableChain{
/** Accepts a pending invitation for a user to become an administrator of an enterprise. */
acceptEnterpriseAdministratorInvitation:((args:{input: AcceptEnterpriseAdministratorInvitationInput})=>AcceptEnterpriseAdministratorInvitationPayloadObservableChain & {get:<R extends AcceptEnterpriseAdministratorInvitationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AcceptEnterpriseAdministratorInvitationPayload, R>|null))=>Observable<(FieldsSelection<AcceptEnterpriseAdministratorInvitationPayload, R>|null)>}),
/** Applies a suggested topic to the repository. */
acceptTopicSuggestion:((args:{input: AcceptTopicSuggestionInput})=>AcceptTopicSuggestionPayloadObservableChain & {get:<R extends AcceptTopicSuggestionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AcceptTopicSuggestionPayload, R>|null))=>Observable<(FieldsSelection<AcceptTopicSuggestionPayload, R>|null)>}),
/** Adds assignees to an assignable object. */
addAssigneesToAssignable:((args:{input: AddAssigneesToAssignableInput})=>AddAssigneesToAssignablePayloadObservableChain & {get:<R extends AddAssigneesToAssignablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddAssigneesToAssignablePayload, R>|null))=>Observable<(FieldsSelection<AddAssigneesToAssignablePayload, R>|null)>}),
/** Adds a comment to an Issue or Pull Request. */
addComment:((args:{input: AddCommentInput})=>AddCommentPayloadObservableChain & {get:<R extends AddCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddCommentPayload, R>|null))=>Observable<(FieldsSelection<AddCommentPayload, R>|null)>}),
/** Adds labels to a labelable object. */
addLabelsToLabelable:((args:{input: AddLabelsToLabelableInput})=>AddLabelsToLabelablePayloadObservableChain & {get:<R extends AddLabelsToLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddLabelsToLabelablePayload, R>|null))=>Observable<(FieldsSelection<AddLabelsToLabelablePayload, R>|null)>}),
/** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
addProjectCard:((args:{input: AddProjectCardInput})=>AddProjectCardPayloadObservableChain & {get:<R extends AddProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddProjectCardPayload, R>|null))=>Observable<(FieldsSelection<AddProjectCardPayload, R>|null)>}),
/** Adds a column to a Project. */
addProjectColumn:((args:{input: AddProjectColumnInput})=>AddProjectColumnPayloadObservableChain & {get:<R extends AddProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddProjectColumnPayload, R>|null))=>Observable<(FieldsSelection<AddProjectColumnPayload, R>|null)>}),
/** Adds a review to a Pull Request. */
addPullRequestReview:((args:{input: AddPullRequestReviewInput})=>AddPullRequestReviewPayloadObservableChain & {get:<R extends AddPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewPayload, R>|null))=>Observable<(FieldsSelection<AddPullRequestReviewPayload, R>|null)>}),
/** Adds a comment to a review. */
addPullRequestReviewComment:((args:{input: AddPullRequestReviewCommentInput})=>AddPullRequestReviewCommentPayloadObservableChain & {get:<R extends AddPullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewCommentPayload, R>|null))=>Observable<(FieldsSelection<AddPullRequestReviewCommentPayload, R>|null)>}),
/** Adds a new thread to a pending Pull Request Review. */
addPullRequestReviewThread:((args:{input: AddPullRequestReviewThreadInput})=>AddPullRequestReviewThreadPayloadObservableChain & {get:<R extends AddPullRequestReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddPullRequestReviewThreadPayload, R>|null))=>Observable<(FieldsSelection<AddPullRequestReviewThreadPayload, R>|null)>}),
/** Adds a reaction to a subject. */
addReaction:((args:{input: AddReactionInput})=>AddReactionPayloadObservableChain & {get:<R extends AddReactionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddReactionPayload, R>|null))=>Observable<(FieldsSelection<AddReactionPayload, R>|null)>}),
/** Adds a star to a Starrable. */
addStar:((args:{input: AddStarInput})=>AddStarPayloadObservableChain & {get:<R extends AddStarPayloadRequest>(request: R, defaultValue?:(FieldsSelection<AddStarPayload, R>|null))=>Observable<(FieldsSelection<AddStarPayload, R>|null)>}),
/** Marks a repository as archived. */
archiveRepository:((args:{input: ArchiveRepositoryInput})=>ArchiveRepositoryPayloadObservableChain & {get:<R extends ArchiveRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ArchiveRepositoryPayload, R>|null))=>Observable<(FieldsSelection<ArchiveRepositoryPayload, R>|null)>}),
/** Cancels a pending invitation for an administrator to join an enterprise. */
cancelEnterpriseAdminInvitation:((args:{input: CancelEnterpriseAdminInvitationInput})=>CancelEnterpriseAdminInvitationPayloadObservableChain & {get:<R extends CancelEnterpriseAdminInvitationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CancelEnterpriseAdminInvitationPayload, R>|null))=>Observable<(FieldsSelection<CancelEnterpriseAdminInvitationPayload, R>|null)>}),
/** Update your status on GitHub. */
changeUserStatus:((args:{input: ChangeUserStatusInput})=>ChangeUserStatusPayloadObservableChain & {get:<R extends ChangeUserStatusPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ChangeUserStatusPayload, R>|null))=>Observable<(FieldsSelection<ChangeUserStatusPayload, R>|null)>}),
/** Clears all labels from a labelable object. */
clearLabelsFromLabelable:((args:{input: ClearLabelsFromLabelableInput})=>ClearLabelsFromLabelablePayloadObservableChain & {get:<R extends ClearLabelsFromLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ClearLabelsFromLabelablePayload, R>|null))=>Observable<(FieldsSelection<ClearLabelsFromLabelablePayload, R>|null)>}),
/** Creates a new project by cloning configuration from an existing project. */
cloneProject:((args:{input: CloneProjectInput})=>CloneProjectPayloadObservableChain & {get:<R extends CloneProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloneProjectPayload, R>|null))=>Observable<(FieldsSelection<CloneProjectPayload, R>|null)>}),
/** Create a new repository with the same files and directory structure as a template repository. */
cloneTemplateRepository:((args:{input: CloneTemplateRepositoryInput})=>CloneTemplateRepositoryPayloadObservableChain & {get:<R extends CloneTemplateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloneTemplateRepositoryPayload, R>|null))=>Observable<(FieldsSelection<CloneTemplateRepositoryPayload, R>|null)>}),
/** Close an issue. */
closeIssue:((args:{input: CloseIssueInput})=>CloseIssuePayloadObservableChain & {get:<R extends CloseIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CloseIssuePayload, R>|null))=>Observable<(FieldsSelection<CloseIssuePayload, R>|null)>}),
/** Close a pull request. */
closePullRequest:((args:{input: ClosePullRequestInput})=>ClosePullRequestPayloadObservableChain & {get:<R extends ClosePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ClosePullRequestPayload, R>|null))=>Observable<(FieldsSelection<ClosePullRequestPayload, R>|null)>}),
/** Convert a project note card to one associated with a newly created issue. */
convertProjectCardNoteToIssue:((args:{input: ConvertProjectCardNoteToIssueInput})=>ConvertProjectCardNoteToIssuePayloadObservableChain & {get:<R extends ConvertProjectCardNoteToIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ConvertProjectCardNoteToIssuePayload, R>|null))=>Observable<(FieldsSelection<ConvertProjectCardNoteToIssuePayload, R>|null)>}),
/** Create a new branch protection rule */
createBranchProtectionRule:((args:{input: CreateBranchProtectionRuleInput})=>CreateBranchProtectionRulePayloadObservableChain & {get:<R extends CreateBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateBranchProtectionRulePayload, R>|null))=>Observable<(FieldsSelection<CreateBranchProtectionRulePayload, R>|null)>}),
/** Create a check run. */
createCheckRun:((args:{input: CreateCheckRunInput})=>CreateCheckRunPayloadObservableChain & {get:<R extends CreateCheckRunPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateCheckRunPayload, R>|null))=>Observable<(FieldsSelection<CreateCheckRunPayload, R>|null)>}),
/** Create a check suite */
createCheckSuite:((args:{input: CreateCheckSuiteInput})=>CreateCheckSuitePayloadObservableChain & {get:<R extends CreateCheckSuitePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateCheckSuitePayload, R>|null))=>Observable<(FieldsSelection<CreateCheckSuitePayload, R>|null)>}),
/** Create a content attachment. */
createContentAttachment:((args:{input: CreateContentAttachmentInput})=>CreateContentAttachmentPayloadObservableChain & {get:<R extends CreateContentAttachmentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateContentAttachmentPayload, R>|null))=>Observable<(FieldsSelection<CreateContentAttachmentPayload, R>|null)>}),
/** Creates a new deployment event. */
createDeployment:((args:{input: CreateDeploymentInput})=>CreateDeploymentPayloadObservableChain & {get:<R extends CreateDeploymentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateDeploymentPayload, R>|null))=>Observable<(FieldsSelection<CreateDeploymentPayload, R>|null)>}),
/** Create a deployment status. */
createDeploymentStatus:((args:{input: CreateDeploymentStatusInput})=>CreateDeploymentStatusPayloadObservableChain & {get:<R extends CreateDeploymentStatusPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateDeploymentStatusPayload, R>|null))=>Observable<(FieldsSelection<CreateDeploymentStatusPayload, R>|null)>}),
/** Creates an organization as part of an enterprise account. */
createEnterpriseOrganization:((args:{input: CreateEnterpriseOrganizationInput})=>CreateEnterpriseOrganizationPayloadObservableChain & {get:<R extends CreateEnterpriseOrganizationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateEnterpriseOrganizationPayload, R>|null))=>Observable<(FieldsSelection<CreateEnterpriseOrganizationPayload, R>|null)>}),
/** Creates a new IP allow list entry. */
createIpAllowListEntry:((args:{input: CreateIpAllowListEntryInput})=>CreateIpAllowListEntryPayloadObservableChain & {get:<R extends CreateIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateIpAllowListEntryPayload, R>|null))=>Observable<(FieldsSelection<CreateIpAllowListEntryPayload, R>|null)>}),
/** Creates a new issue. */
createIssue:((args:{input: CreateIssueInput})=>CreateIssuePayloadObservableChain & {get:<R extends CreateIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateIssuePayload, R>|null))=>Observable<(FieldsSelection<CreateIssuePayload, R>|null)>}),
/** Creates a new label. */
createLabel:((args:{input: CreateLabelInput})=>CreateLabelPayloadObservableChain & {get:<R extends CreateLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateLabelPayload, R>|null))=>Observable<(FieldsSelection<CreateLabelPayload, R>|null)>}),
/** Creates a new project. */
createProject:((args:{input: CreateProjectInput})=>CreateProjectPayloadObservableChain & {get:<R extends CreateProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateProjectPayload, R>|null))=>Observable<(FieldsSelection<CreateProjectPayload, R>|null)>}),
/** Create a new pull request */
createPullRequest:((args:{input: CreatePullRequestInput})=>CreatePullRequestPayloadObservableChain & {get:<R extends CreatePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreatePullRequestPayload, R>|null))=>Observable<(FieldsSelection<CreatePullRequestPayload, R>|null)>}),
/** Create a new Git Ref. */
createRef:((args:{input: CreateRefInput})=>CreateRefPayloadObservableChain & {get:<R extends CreateRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateRefPayload, R>|null))=>Observable<(FieldsSelection<CreateRefPayload, R>|null)>}),
/** Create a new repository. */
createRepository:((args:{input: CreateRepositoryInput})=>CreateRepositoryPayloadObservableChain & {get:<R extends CreateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateRepositoryPayload, R>|null))=>Observable<(FieldsSelection<CreateRepositoryPayload, R>|null)>}),
/** Creates a new team discussion. */
createTeamDiscussion:((args:{input: CreateTeamDiscussionInput})=>CreateTeamDiscussionPayloadObservableChain & {get:<R extends CreateTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateTeamDiscussionPayload, R>|null))=>Observable<(FieldsSelection<CreateTeamDiscussionPayload, R>|null)>}),
/** Creates a new team discussion comment. */
createTeamDiscussionComment:((args:{input: CreateTeamDiscussionCommentInput})=>CreateTeamDiscussionCommentPayloadObservableChain & {get:<R extends CreateTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<CreateTeamDiscussionCommentPayload, R>|null))=>Observable<(FieldsSelection<CreateTeamDiscussionCommentPayload, R>|null)>}),
/** Rejects a suggested topic for the repository. */
declineTopicSuggestion:((args:{input: DeclineTopicSuggestionInput})=>DeclineTopicSuggestionPayloadObservableChain & {get:<R extends DeclineTopicSuggestionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeclineTopicSuggestionPayload, R>|null))=>Observable<(FieldsSelection<DeclineTopicSuggestionPayload, R>|null)>}),
/** Delete a branch protection rule */
deleteBranchProtectionRule:((args:{input: DeleteBranchProtectionRuleInput})=>DeleteBranchProtectionRulePayloadObservableChain & {get:<R extends DeleteBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteBranchProtectionRulePayload, R>|null))=>Observable<(FieldsSelection<DeleteBranchProtectionRulePayload, R>|null)>}),
/** Deletes a deployment. */
deleteDeployment:((args:{input: DeleteDeploymentInput})=>DeleteDeploymentPayloadObservableChain & {get:<R extends DeleteDeploymentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteDeploymentPayload, R>|null))=>Observable<(FieldsSelection<DeleteDeploymentPayload, R>|null)>}),
/** Deletes an IP allow list entry. */
deleteIpAllowListEntry:((args:{input: DeleteIpAllowListEntryInput})=>DeleteIpAllowListEntryPayloadObservableChain & {get:<R extends DeleteIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIpAllowListEntryPayload, R>|null))=>Observable<(FieldsSelection<DeleteIpAllowListEntryPayload, R>|null)>}),
/** Deletes an Issue object. */
deleteIssue:((args:{input: DeleteIssueInput})=>DeleteIssuePayloadObservableChain & {get:<R extends DeleteIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIssuePayload, R>|null))=>Observable<(FieldsSelection<DeleteIssuePayload, R>|null)>}),
/** Deletes an IssueComment object. */
deleteIssueComment:((args:{input: DeleteIssueCommentInput})=>DeleteIssueCommentPayloadObservableChain & {get:<R extends DeleteIssueCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteIssueCommentPayload, R>|null))=>Observable<(FieldsSelection<DeleteIssueCommentPayload, R>|null)>}),
/** Deletes a label. */
deleteLabel:((args:{input: DeleteLabelInput})=>DeleteLabelPayloadObservableChain & {get:<R extends DeleteLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteLabelPayload, R>|null))=>Observable<(FieldsSelection<DeleteLabelPayload, R>|null)>}),
/** Delete a package version. */
deletePackageVersion:((args:{input: DeletePackageVersionInput})=>DeletePackageVersionPayloadObservableChain & {get:<R extends DeletePackageVersionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePackageVersionPayload, R>|null))=>Observable<(FieldsSelection<DeletePackageVersionPayload, R>|null)>}),
/** Deletes a project. */
deleteProject:((args:{input: DeleteProjectInput})=>DeleteProjectPayloadObservableChain & {get:<R extends DeleteProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectPayload, R>|null))=>Observable<(FieldsSelection<DeleteProjectPayload, R>|null)>}),
/** Deletes a project card. */
deleteProjectCard:((args:{input: DeleteProjectCardInput})=>DeleteProjectCardPayloadObservableChain & {get:<R extends DeleteProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectCardPayload, R>|null))=>Observable<(FieldsSelection<DeleteProjectCardPayload, R>|null)>}),
/** Deletes a project column. */
deleteProjectColumn:((args:{input: DeleteProjectColumnInput})=>DeleteProjectColumnPayloadObservableChain & {get:<R extends DeleteProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteProjectColumnPayload, R>|null))=>Observable<(FieldsSelection<DeleteProjectColumnPayload, R>|null)>}),
/** Deletes a pull request review. */
deletePullRequestReview:((args:{input: DeletePullRequestReviewInput})=>DeletePullRequestReviewPayloadObservableChain & {get:<R extends DeletePullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePullRequestReviewPayload, R>|null))=>Observable<(FieldsSelection<DeletePullRequestReviewPayload, R>|null)>}),
/** Deletes a pull request review comment. */
deletePullRequestReviewComment:((args:{input: DeletePullRequestReviewCommentInput})=>DeletePullRequestReviewCommentPayloadObservableChain & {get:<R extends DeletePullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeletePullRequestReviewCommentPayload, R>|null))=>Observable<(FieldsSelection<DeletePullRequestReviewCommentPayload, R>|null)>}),
/** Delete a Git Ref. */
deleteRef:((args:{input: DeleteRefInput})=>DeleteRefPayloadObservableChain & {get:<R extends DeleteRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteRefPayload, R>|null))=>Observable<(FieldsSelection<DeleteRefPayload, R>|null)>}),
/** Deletes a team discussion. */
deleteTeamDiscussion:((args:{input: DeleteTeamDiscussionInput})=>DeleteTeamDiscussionPayloadObservableChain & {get:<R extends DeleteTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteTeamDiscussionPayload, R>|null))=>Observable<(FieldsSelection<DeleteTeamDiscussionPayload, R>|null)>}),
/** Deletes a team discussion comment. */
deleteTeamDiscussionComment:((args:{input: DeleteTeamDiscussionCommentInput})=>DeleteTeamDiscussionCommentPayloadObservableChain & {get:<R extends DeleteTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DeleteTeamDiscussionCommentPayload, R>|null))=>Observable<(FieldsSelection<DeleteTeamDiscussionCommentPayload, R>|null)>}),
/** Dismisses an approved or rejected pull request review. */
dismissPullRequestReview:((args:{input: DismissPullRequestReviewInput})=>DismissPullRequestReviewPayloadObservableChain & {get:<R extends DismissPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<DismissPullRequestReviewPayload, R>|null))=>Observable<(FieldsSelection<DismissPullRequestReviewPayload, R>|null)>}),
/** Follow a user. */
followUser:((args:{input: FollowUserInput})=>FollowUserPayloadObservableChain & {get:<R extends FollowUserPayloadRequest>(request: R, defaultValue?:(FieldsSelection<FollowUserPayload, R>|null))=>Observable<(FieldsSelection<FollowUserPayload, R>|null)>}),
/** Creates a new project by importing columns and a list of issues/PRs. */
importProject:((args:{input: ImportProjectInput})=>ImportProjectPayloadObservableChain & {get:<R extends ImportProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ImportProjectPayload, R>|null))=>Observable<(FieldsSelection<ImportProjectPayload, R>|null)>}),
/** Invite someone to become an administrator of the enterprise. */
inviteEnterpriseAdmin:((args:{input: InviteEnterpriseAdminInput})=>InviteEnterpriseAdminPayloadObservableChain & {get:<R extends InviteEnterpriseAdminPayloadRequest>(request: R, defaultValue?:(FieldsSelection<InviteEnterpriseAdminPayload, R>|null))=>Observable<(FieldsSelection<InviteEnterpriseAdminPayload, R>|null)>}),
/** Creates a repository link for a project. */
linkRepositoryToProject:((args:{input: LinkRepositoryToProjectInput})=>LinkRepositoryToProjectPayloadObservableChain & {get:<R extends LinkRepositoryToProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<LinkRepositoryToProjectPayload, R>|null))=>Observable<(FieldsSelection<LinkRepositoryToProjectPayload, R>|null)>}),
/** Lock a lockable object */
lockLockable:((args:{input: LockLockableInput})=>LockLockablePayloadObservableChain & {get:<R extends LockLockablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<LockLockablePayload, R>|null))=>Observable<(FieldsSelection<LockLockablePayload, R>|null)>}),
/** Marks a pull request ready for review. */
markPullRequestReadyForReview:((args:{input: MarkPullRequestReadyForReviewInput})=>MarkPullRequestReadyForReviewPayloadObservableChain & {get:<R extends MarkPullRequestReadyForReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MarkPullRequestReadyForReviewPayload, R>|null))=>Observable<(FieldsSelection<MarkPullRequestReadyForReviewPayload, R>|null)>}),
/** Merge a head into a branch. */
mergeBranch:((args:{input: MergeBranchInput})=>MergeBranchPayloadObservableChain & {get:<R extends MergeBranchPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MergeBranchPayload, R>|null))=>Observable<(FieldsSelection<MergeBranchPayload, R>|null)>}),
/** Merge a pull request. */
mergePullRequest:((args:{input: MergePullRequestInput})=>MergePullRequestPayloadObservableChain & {get:<R extends MergePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MergePullRequestPayload, R>|null))=>Observable<(FieldsSelection<MergePullRequestPayload, R>|null)>}),
/** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
minimizeComment:((args:{input: MinimizeCommentInput})=>MinimizeCommentPayloadObservableChain & {get:<R extends MinimizeCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MinimizeCommentPayload, R>|null))=>Observable<(FieldsSelection<MinimizeCommentPayload, R>|null)>}),
/** Moves a project card to another place. */
moveProjectCard:((args:{input: MoveProjectCardInput})=>MoveProjectCardPayloadObservableChain & {get:<R extends MoveProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MoveProjectCardPayload, R>|null))=>Observable<(FieldsSelection<MoveProjectCardPayload, R>|null)>}),
/** Moves a project column to another place. */
moveProjectColumn:((args:{input: MoveProjectColumnInput})=>MoveProjectColumnPayloadObservableChain & {get:<R extends MoveProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<MoveProjectColumnPayload, R>|null))=>Observable<(FieldsSelection<MoveProjectColumnPayload, R>|null)>}),
/** Pin an issue to a repository */
pinIssue:((args:{input: PinIssueInput})=>PinIssuePayloadObservableChain & {get:<R extends PinIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<PinIssuePayload, R>|null))=>Observable<(FieldsSelection<PinIssuePayload, R>|null)>}),
/** Regenerates the identity provider recovery codes for an enterprise */
regenerateEnterpriseIdentityProviderRecoveryCodes:((args:{input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput})=>RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadObservableChain & {get:<R extends RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, R>|null))=>Observable<(FieldsSelection<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, R>|null)>}),
/** Removes assignees from an assignable object. */
removeAssigneesFromAssignable:((args:{input: RemoveAssigneesFromAssignableInput})=>RemoveAssigneesFromAssignablePayloadObservableChain & {get:<R extends RemoveAssigneesFromAssignablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveAssigneesFromAssignablePayload, R>|null))=>Observable<(FieldsSelection<RemoveAssigneesFromAssignablePayload, R>|null)>}),
/** Removes an administrator from the enterprise. */
removeEnterpriseAdmin:((args:{input: RemoveEnterpriseAdminInput})=>RemoveEnterpriseAdminPayloadObservableChain & {get:<R extends RemoveEnterpriseAdminPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseAdminPayload, R>|null))=>Observable<(FieldsSelection<RemoveEnterpriseAdminPayload, R>|null)>}),
/** Removes the identity provider from an enterprise */
removeEnterpriseIdentityProvider:((args:{input: RemoveEnterpriseIdentityProviderInput})=>RemoveEnterpriseIdentityProviderPayloadObservableChain & {get:<R extends RemoveEnterpriseIdentityProviderPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseIdentityProviderPayload, R>|null))=>Observable<(FieldsSelection<RemoveEnterpriseIdentityProviderPayload, R>|null)>}),
/** Removes an organization from the enterprise */
removeEnterpriseOrganization:((args:{input: RemoveEnterpriseOrganizationInput})=>RemoveEnterpriseOrganizationPayloadObservableChain & {get:<R extends RemoveEnterpriseOrganizationPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveEnterpriseOrganizationPayload, R>|null))=>Observable<(FieldsSelection<RemoveEnterpriseOrganizationPayload, R>|null)>}),
/** Removes labels from a Labelable object. */
removeLabelsFromLabelable:((args:{input: RemoveLabelsFromLabelableInput})=>RemoveLabelsFromLabelablePayloadObservableChain & {get:<R extends RemoveLabelsFromLabelablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveLabelsFromLabelablePayload, R>|null))=>Observable<(FieldsSelection<RemoveLabelsFromLabelablePayload, R>|null)>}),
/** Removes outside collaborator from all repositories in an organization. */
removeOutsideCollaborator:((args:{input: RemoveOutsideCollaboratorInput})=>RemoveOutsideCollaboratorPayloadObservableChain & {get:<R extends RemoveOutsideCollaboratorPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveOutsideCollaboratorPayload, R>|null))=>Observable<(FieldsSelection<RemoveOutsideCollaboratorPayload, R>|null)>}),
/** Removes a reaction from a subject. */
removeReaction:((args:{input: RemoveReactionInput})=>RemoveReactionPayloadObservableChain & {get:<R extends RemoveReactionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveReactionPayload, R>|null))=>Observable<(FieldsSelection<RemoveReactionPayload, R>|null)>}),
/** Removes a star from a Starrable. */
removeStar:((args:{input: RemoveStarInput})=>RemoveStarPayloadObservableChain & {get:<R extends RemoveStarPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RemoveStarPayload, R>|null))=>Observable<(FieldsSelection<RemoveStarPayload, R>|null)>}),
/** Reopen a issue. */
reopenIssue:((args:{input: ReopenIssueInput})=>ReopenIssuePayloadObservableChain & {get:<R extends ReopenIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<ReopenIssuePayload, R>|null))=>Observable<(FieldsSelection<ReopenIssuePayload, R>|null)>}),
/** Reopen a pull request. */
reopenPullRequest:((args:{input: ReopenPullRequestInput})=>ReopenPullRequestPayloadObservableChain & {get:<R extends ReopenPullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ReopenPullRequestPayload, R>|null))=>Observable<(FieldsSelection<ReopenPullRequestPayload, R>|null)>}),
/** Set review requests on a pull request. */
requestReviews:((args:{input: RequestReviewsInput})=>RequestReviewsPayloadObservableChain & {get:<R extends RequestReviewsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<RequestReviewsPayload, R>|null))=>Observable<(FieldsSelection<RequestReviewsPayload, R>|null)>}),
/** Rerequests an existing check suite. */
rerequestCheckSuite:((args:{input: RerequestCheckSuiteInput})=>RerequestCheckSuitePayloadObservableChain & {get:<R extends RerequestCheckSuitePayloadRequest>(request: R, defaultValue?:(FieldsSelection<RerequestCheckSuitePayload, R>|null))=>Observable<(FieldsSelection<RerequestCheckSuitePayload, R>|null)>}),
/** Marks a review thread as resolved. */
resolveReviewThread:((args:{input: ResolveReviewThreadInput})=>ResolveReviewThreadPayloadObservableChain & {get:<R extends ResolveReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<ResolveReviewThreadPayload, R>|null))=>Observable<(FieldsSelection<ResolveReviewThreadPayload, R>|null)>}),
/** Creates or updates the identity provider for an enterprise. */
setEnterpriseIdentityProvider:((args:{input: SetEnterpriseIdentityProviderInput})=>SetEnterpriseIdentityProviderPayloadObservableChain & {get:<R extends SetEnterpriseIdentityProviderPayloadRequest>(request: R, defaultValue?:(FieldsSelection<SetEnterpriseIdentityProviderPayload, R>|null))=>Observable<(FieldsSelection<SetEnterpriseIdentityProviderPayload, R>|null)>}),
/** Submits a pending pull request review. */
submitPullRequestReview:((args:{input: SubmitPullRequestReviewInput})=>SubmitPullRequestReviewPayloadObservableChain & {get:<R extends SubmitPullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<SubmitPullRequestReviewPayload, R>|null))=>Observable<(FieldsSelection<SubmitPullRequestReviewPayload, R>|null)>}),
/** Transfer an issue to a different repository */
transferIssue:((args:{input: TransferIssueInput})=>TransferIssuePayloadObservableChain & {get:<R extends TransferIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<TransferIssuePayload, R>|null))=>Observable<(FieldsSelection<TransferIssuePayload, R>|null)>}),
/** Unarchives a repository. */
unarchiveRepository:((args:{input: UnarchiveRepositoryInput})=>UnarchiveRepositoryPayloadObservableChain & {get:<R extends UnarchiveRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnarchiveRepositoryPayload, R>|null))=>Observable<(FieldsSelection<UnarchiveRepositoryPayload, R>|null)>}),
/** Unfollow a user. */
unfollowUser:((args:{input: UnfollowUserInput})=>UnfollowUserPayloadObservableChain & {get:<R extends UnfollowUserPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnfollowUserPayload, R>|null))=>Observable<(FieldsSelection<UnfollowUserPayload, R>|null)>}),
/** Deletes a repository link from a project. */
unlinkRepositoryFromProject:((args:{input: UnlinkRepositoryFromProjectInput})=>UnlinkRepositoryFromProjectPayloadObservableChain & {get:<R extends UnlinkRepositoryFromProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnlinkRepositoryFromProjectPayload, R>|null))=>Observable<(FieldsSelection<UnlinkRepositoryFromProjectPayload, R>|null)>}),
/** Unlock a lockable object */
unlockLockable:((args:{input: UnlockLockableInput})=>UnlockLockablePayloadObservableChain & {get:<R extends UnlockLockablePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnlockLockablePayload, R>|null))=>Observable<(FieldsSelection<UnlockLockablePayload, R>|null)>}),
/** Unmark an issue as a duplicate of another issue. */
unmarkIssueAsDuplicate:((args:{input: UnmarkIssueAsDuplicateInput})=>UnmarkIssueAsDuplicatePayloadObservableChain & {get:<R extends UnmarkIssueAsDuplicatePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnmarkIssueAsDuplicatePayload, R>|null))=>Observable<(FieldsSelection<UnmarkIssueAsDuplicatePayload, R>|null)>}),
/** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
unminimizeComment:((args:{input: UnminimizeCommentInput})=>UnminimizeCommentPayloadObservableChain & {get:<R extends UnminimizeCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnminimizeCommentPayload, R>|null))=>Observable<(FieldsSelection<UnminimizeCommentPayload, R>|null)>}),
/** Unpin a pinned issue from a repository */
unpinIssue:((args:{input: UnpinIssueInput})=>UnpinIssuePayloadObservableChain & {get:<R extends UnpinIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnpinIssuePayload, R>|null))=>Observable<(FieldsSelection<UnpinIssuePayload, R>|null)>}),
/** Marks a review thread as unresolved. */
unresolveReviewThread:((args:{input: UnresolveReviewThreadInput})=>UnresolveReviewThreadPayloadObservableChain & {get:<R extends UnresolveReviewThreadPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UnresolveReviewThreadPayload, R>|null))=>Observable<(FieldsSelection<UnresolveReviewThreadPayload, R>|null)>}),
/** Create a new branch protection rule */
updateBranchProtectionRule:((args:{input: UpdateBranchProtectionRuleInput})=>UpdateBranchProtectionRulePayloadObservableChain & {get:<R extends UpdateBranchProtectionRulePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateBranchProtectionRulePayload, R>|null))=>Observable<(FieldsSelection<UpdateBranchProtectionRulePayload, R>|null)>}),
/** Update a check run */
updateCheckRun:((args:{input: UpdateCheckRunInput})=>UpdateCheckRunPayloadObservableChain & {get:<R extends UpdateCheckRunPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateCheckRunPayload, R>|null))=>Observable<(FieldsSelection<UpdateCheckRunPayload, R>|null)>}),
/** Modifies the settings of an existing check suite */
updateCheckSuitePreferences:((args:{input: UpdateCheckSuitePreferencesInput})=>UpdateCheckSuitePreferencesPayloadObservableChain & {get:<R extends UpdateCheckSuitePreferencesPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateCheckSuitePreferencesPayload, R>|null))=>Observable<(FieldsSelection<UpdateCheckSuitePreferencesPayload, R>|null)>}),
/** Sets the action execution capability setting for an enterprise. */
updateEnterpriseActionExecutionCapabilitySetting:((args:{input: UpdateEnterpriseActionExecutionCapabilitySettingInput})=>UpdateEnterpriseActionExecutionCapabilitySettingPayloadObservableChain & {get:<R extends UpdateEnterpriseActionExecutionCapabilitySettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseActionExecutionCapabilitySettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseActionExecutionCapabilitySettingPayload, R>|null)>}),
/** Updates the role of an enterprise administrator. */
updateEnterpriseAdministratorRole:((args:{input: UpdateEnterpriseAdministratorRoleInput})=>UpdateEnterpriseAdministratorRolePayloadObservableChain & {get:<R extends UpdateEnterpriseAdministratorRolePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseAdministratorRolePayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseAdministratorRolePayload, R>|null)>}),
/** Sets whether private repository forks are enabled for an enterprise. */
updateEnterpriseAllowPrivateRepositoryForkingSetting:((args:{input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput})=>UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, R>|null)>}),
/** Sets the default repository permission for organizations in an enterprise. */
updateEnterpriseDefaultRepositoryPermissionSetting:((args:{input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput})=>UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, R>|null)>}),
/** Sets whether organization members with admin permissions on a repository can change repository visibility. */
updateEnterpriseMembersCanChangeRepositoryVisibilitySetting:((args:{input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput})=>UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, R>|null)>}),
/** Sets the members can create repositories setting for an enterprise. */
updateEnterpriseMembersCanCreateRepositoriesSetting:((args:{input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput})=>UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, R>|null)>}),
/** Sets the members can delete issues setting for an enterprise. */
updateEnterpriseMembersCanDeleteIssuesSetting:((args:{input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput})=>UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, R>|null)>}),
/** Sets the members can delete repositories setting for an enterprise. */
updateEnterpriseMembersCanDeleteRepositoriesSetting:((args:{input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput})=>UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, R>|null)>}),
/** Sets whether members can invite collaborators are enabled for an enterprise. */
updateEnterpriseMembersCanInviteCollaboratorsSetting:((args:{input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput})=>UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, R>|null)>}),
/** Sets whether or not an organization admin can make purchases. */
updateEnterpriseMembersCanMakePurchasesSetting:((args:{input: UpdateEnterpriseMembersCanMakePurchasesSettingInput})=>UpdateEnterpriseMembersCanMakePurchasesSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanMakePurchasesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanMakePurchasesSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanMakePurchasesSettingPayload, R>|null)>}),
/** Sets the members can update protected branches setting for an enterprise. */
updateEnterpriseMembersCanUpdateProtectedBranchesSetting:((args:{input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput})=>UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, R>|null)>}),
/** Sets the members can view dependency insights for an enterprise. */
updateEnterpriseMembersCanViewDependencyInsightsSetting:((args:{input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput})=>UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, R>|null)>}),
/** Sets whether organization projects are enabled for an enterprise. */
updateEnterpriseOrganizationProjectsSetting:((args:{input: UpdateEnterpriseOrganizationProjectsSettingInput})=>UpdateEnterpriseOrganizationProjectsSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseOrganizationProjectsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseOrganizationProjectsSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseOrganizationProjectsSettingPayload, R>|null)>}),
/** Updates an enterprise's profile. */
updateEnterpriseProfile:((args:{input: UpdateEnterpriseProfileInput})=>UpdateEnterpriseProfilePayloadObservableChain & {get:<R extends UpdateEnterpriseProfilePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseProfilePayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseProfilePayload, R>|null)>}),
/** Sets whether repository projects are enabled for a enterprise. */
updateEnterpriseRepositoryProjectsSetting:((args:{input: UpdateEnterpriseRepositoryProjectsSettingInput})=>UpdateEnterpriseRepositoryProjectsSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseRepositoryProjectsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseRepositoryProjectsSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseRepositoryProjectsSettingPayload, R>|null)>}),
/** Sets whether team discussions are enabled for an enterprise. */
updateEnterpriseTeamDiscussionsSetting:((args:{input: UpdateEnterpriseTeamDiscussionsSettingInput})=>UpdateEnterpriseTeamDiscussionsSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseTeamDiscussionsSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseTeamDiscussionsSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseTeamDiscussionsSettingPayload, R>|null)>}),
/** Sets whether two factor authentication is required for all users in an enterprise. */
updateEnterpriseTwoFactorAuthenticationRequiredSetting:((args:{input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput})=>UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadObservableChain & {get:<R extends UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, R>|null)>}),
/** Sets whether an IP allow list is enabled on an owner. */
updateIpAllowListEnabledSetting:((args:{input: UpdateIpAllowListEnabledSettingInput})=>UpdateIpAllowListEnabledSettingPayloadObservableChain & {get:<R extends UpdateIpAllowListEnabledSettingPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIpAllowListEnabledSettingPayload, R>|null))=>Observable<(FieldsSelection<UpdateIpAllowListEnabledSettingPayload, R>|null)>}),
/** Updates an IP allow list entry. */
updateIpAllowListEntry:((args:{input: UpdateIpAllowListEntryInput})=>UpdateIpAllowListEntryPayloadObservableChain & {get:<R extends UpdateIpAllowListEntryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIpAllowListEntryPayload, R>|null))=>Observable<(FieldsSelection<UpdateIpAllowListEntryPayload, R>|null)>}),
/** Updates an Issue. */
updateIssue:((args:{input: UpdateIssueInput})=>UpdateIssuePayloadObservableChain & {get:<R extends UpdateIssuePayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIssuePayload, R>|null))=>Observable<(FieldsSelection<UpdateIssuePayload, R>|null)>}),
/** Updates an IssueComment object. */
updateIssueComment:((args:{input: UpdateIssueCommentInput})=>UpdateIssueCommentPayloadObservableChain & {get:<R extends UpdateIssueCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateIssueCommentPayload, R>|null))=>Observable<(FieldsSelection<UpdateIssueCommentPayload, R>|null)>}),
/** Updates an existing label. */
updateLabel:((args:{input: UpdateLabelInput})=>UpdateLabelPayloadObservableChain & {get:<R extends UpdateLabelPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateLabelPayload, R>|null))=>Observable<(FieldsSelection<UpdateLabelPayload, R>|null)>}),
/** Updates an existing project. */
updateProject:((args:{input: UpdateProjectInput})=>UpdateProjectPayloadObservableChain & {get:<R extends UpdateProjectPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectPayload, R>|null))=>Observable<(FieldsSelection<UpdateProjectPayload, R>|null)>}),
/** Updates an existing project card. */
updateProjectCard:((args:{input: UpdateProjectCardInput})=>UpdateProjectCardPayloadObservableChain & {get:<R extends UpdateProjectCardPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectCardPayload, R>|null))=>Observable<(FieldsSelection<UpdateProjectCardPayload, R>|null)>}),
/** Updates an existing project column. */
updateProjectColumn:((args:{input: UpdateProjectColumnInput})=>UpdateProjectColumnPayloadObservableChain & {get:<R extends UpdateProjectColumnPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateProjectColumnPayload, R>|null))=>Observable<(FieldsSelection<UpdateProjectColumnPayload, R>|null)>}),
/** Update a pull request */
updatePullRequest:((args:{input: UpdatePullRequestInput})=>UpdatePullRequestPayloadObservableChain & {get:<R extends UpdatePullRequestPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestPayload, R>|null))=>Observable<(FieldsSelection<UpdatePullRequestPayload, R>|null)>}),
/** Updates the body of a pull request review. */
updatePullRequestReview:((args:{input: UpdatePullRequestReviewInput})=>UpdatePullRequestReviewPayloadObservableChain & {get:<R extends UpdatePullRequestReviewPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestReviewPayload, R>|null))=>Observable<(FieldsSelection<UpdatePullRequestReviewPayload, R>|null)>}),
/** Updates a pull request review comment. */
updatePullRequestReviewComment:((args:{input: UpdatePullRequestReviewCommentInput})=>UpdatePullRequestReviewCommentPayloadObservableChain & {get:<R extends UpdatePullRequestReviewCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdatePullRequestReviewCommentPayload, R>|null))=>Observable<(FieldsSelection<UpdatePullRequestReviewCommentPayload, R>|null)>}),
/** Update a Git Ref. */
updateRef:((args:{input: UpdateRefInput})=>UpdateRefPayloadObservableChain & {get:<R extends UpdateRefPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRefPayload, R>|null))=>Observable<(FieldsSelection<UpdateRefPayload, R>|null)>}),
/**
 * Creates, updates and/or deletes multiple refs in a repository.
 * 
 * This mutation takes a list of `RefUpdate`s and performs these updates
 * on the repository. All updates are performed atomically, meaning that
 * if one of them is rejected, no other ref will be modified.
 * 
 * `RefUpdate.beforeOid` specifies that the given reference needs to point
 * to the given value before performing any updates. A value of
 * `0000000000000000000000000000000000000000` can be used to verify that
 * the references should not exist.
 * 
 * `RefUpdate.afterOid` specifies the value that the given reference
 * will point to after performing all updates. A value of
 * `0000000000000000000000000000000000000000` can be used to delete a
 * reference.
 * 
 * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
 * for the given reference will be allowed.
 */
updateRefs:((args:{input: UpdateRefsInput})=>UpdateRefsPayloadObservableChain & {get:<R extends UpdateRefsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRefsPayload, R>|null))=>Observable<(FieldsSelection<UpdateRefsPayload, R>|null)>}),
/** Update information about a repository. */
updateRepository:((args:{input: UpdateRepositoryInput})=>UpdateRepositoryPayloadObservableChain & {get:<R extends UpdateRepositoryPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateRepositoryPayload, R>|null))=>Observable<(FieldsSelection<UpdateRepositoryPayload, R>|null)>}),
/** Updates the state for subscribable subjects. */
updateSubscription:((args:{input: UpdateSubscriptionInput})=>UpdateSubscriptionPayloadObservableChain & {get:<R extends UpdateSubscriptionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateSubscriptionPayload, R>|null))=>Observable<(FieldsSelection<UpdateSubscriptionPayload, R>|null)>}),
/** Updates a team discussion. */
updateTeamDiscussion:((args:{input: UpdateTeamDiscussionInput})=>UpdateTeamDiscussionPayloadObservableChain & {get:<R extends UpdateTeamDiscussionPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamDiscussionPayload, R>|null))=>Observable<(FieldsSelection<UpdateTeamDiscussionPayload, R>|null)>}),
/** Updates a discussion comment. */
updateTeamDiscussionComment:((args:{input: UpdateTeamDiscussionCommentInput})=>UpdateTeamDiscussionCommentPayloadObservableChain & {get:<R extends UpdateTeamDiscussionCommentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamDiscussionCommentPayload, R>|null))=>Observable<(FieldsSelection<UpdateTeamDiscussionCommentPayload, R>|null)>}),
/** Updates team review assignment. */
updateTeamReviewAssignment:((args:{input: UpdateTeamReviewAssignmentInput})=>UpdateTeamReviewAssignmentPayloadObservableChain & {get:<R extends UpdateTeamReviewAssignmentPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTeamReviewAssignmentPayload, R>|null))=>Observable<(FieldsSelection<UpdateTeamReviewAssignmentPayload, R>|null)>}),
/** Replaces the repository's topics with the given topics. */
updateTopics:((args:{input: UpdateTopicsInput})=>UpdateTopicsPayloadObservableChain & {get:<R extends UpdateTopicsPayloadRequest>(request: R, defaultValue?:(FieldsSelection<UpdateTopicsPayload, R>|null))=>Observable<(FieldsSelection<UpdateTopicsPayload, R>|null)>})}


/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The invitation that was accepted. */
invitation:(EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** A message confirming the result of accepting an administrator invitation. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The invitation that was accepted. */
invitation:(EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** A message confirming the result of accepting an administrator invitation. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The accepted topic. */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>})}


/** Autogenerated return type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The accepted topic. */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>})}


/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayloadPromiseChain{
/** The item that was assigned. */
assignable:(AssignablePromiseChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:(FieldsSelection<Assignable, R>|null))=>Promise<(FieldsSelection<Assignable, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignablePayloadObservableChain{
/** The item that was assigned. */
assignable:(AssignableObservableChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:(FieldsSelection<Assignable, R>|null))=>Observable<(FieldsSelection<Assignable, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of AddComment */
export interface AddCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The edge from the subject's comment connection. */
commentEdge:(IssueCommentEdgePromiseChain & {get:<R extends IssueCommentEdgeRequest>(request: R, defaultValue?:(FieldsSelection<IssueCommentEdge, R>|null))=>Promise<(FieldsSelection<IssueCommentEdge, R>|null)>}),
/** The subject */
subject:(NodePromiseChain & {get:<R extends NodeRequest>(request: R, defaultValue?:(FieldsSelection<Node, R>|null))=>Promise<(FieldsSelection<Node, R>|null)>}),
/** The edge from the subject's timeline connection. */
timelineEdge:(IssueTimelineItemEdgePromiseChain & {get:<R extends IssueTimelineItemEdgeRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItemEdge, R>|null))=>Promise<(FieldsSelection<IssueTimelineItemEdge, R>|null)>})}


/** Autogenerated return type of AddComment */
export interface AddCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The edge from the subject's comment connection. */
commentEdge:(IssueCommentEdgeObservableChain & {get:<R extends IssueCommentEdgeRequest>(request: R, defaultValue?:(FieldsSelection<IssueCommentEdge, R>|null))=>Observable<(FieldsSelection<IssueCommentEdge, R>|null)>}),
/** The subject */
subject:(NodeObservableChain & {get:<R extends NodeRequest>(request: R, defaultValue?:(FieldsSelection<Node, R>|null))=>Observable<(FieldsSelection<Node, R>|null)>}),
/** The edge from the subject's timeline connection. */
timelineEdge:(IssueTimelineItemEdgeObservableChain & {get:<R extends IssueTimelineItemEdgeRequest>(request: R, defaultValue?:(FieldsSelection<IssueTimelineItemEdge, R>|null))=>Observable<(FieldsSelection<IssueTimelineItemEdge, R>|null)>})}


/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The item that was labeled. */
labelable:(LabelablePromiseChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Promise<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of AddLabelsToLabelable */
export interface AddLabelsToLabelablePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The item that was labeled. */
labelable:(LabelableObservableChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Observable<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayloadPromiseChain{
/** The edge from the ProjectColumn's card connection. */
cardEdge:(ProjectCardEdgePromiseChain & {get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardEdge, R>|null))=>Promise<(FieldsSelection<ProjectCardEdge, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The ProjectColumn */
projectColumn:(ProjectColumnPromiseChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Promise<(FieldsSelection<ProjectColumn, R>|null)>})}


/** Autogenerated return type of AddProjectCard */
export interface AddProjectCardPayloadObservableChain{
/** The edge from the ProjectColumn's card connection. */
cardEdge:(ProjectCardEdgeObservableChain & {get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardEdge, R>|null))=>Observable<(FieldsSelection<ProjectCardEdge, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The ProjectColumn */
projectColumn:(ProjectColumnObservableChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Observable<(FieldsSelection<ProjectColumn, R>|null)>})}


/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The edge from the project's column connection. */
columnEdge:(ProjectColumnEdgePromiseChain & {get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumnEdge, R>|null))=>Promise<(FieldsSelection<ProjectColumnEdge, R>|null)>}),
/** The project */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of AddProjectColumn */
export interface AddProjectColumnPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The edge from the project's column connection. */
columnEdge:(ProjectColumnEdgeObservableChain & {get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumnEdge, R>|null))=>Observable<(FieldsSelection<ProjectColumnEdge, R>|null)>}),
/** The project */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The newly created pull request review. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>}),
/** The edge from the pull request's review connection. */
reviewEdge:(PullRequestReviewEdgePromiseChain & {get:<R extends PullRequestReviewEdgeRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewEdge, R>|null))=>Promise<(FieldsSelection<PullRequestReviewEdge, R>|null)>})}


/** Autogenerated return type of AddPullRequestReview */
export interface AddPullRequestReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The newly created pull request review. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>}),
/** The edge from the pull request's review connection. */
reviewEdge:(PullRequestReviewEdgeObservableChain & {get:<R extends PullRequestReviewEdgeRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewEdge, R>|null))=>Observable<(FieldsSelection<PullRequestReviewEdge, R>|null)>})}


/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The newly created comment. */
comment:(PullRequestReviewCommentPromiseChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Promise<(FieldsSelection<PullRequestReviewComment, R>|null)>}),
/** The edge from the review's comment connection. */
commentEdge:(PullRequestReviewCommentEdgePromiseChain & {get:<R extends PullRequestReviewCommentEdgeRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewCommentEdge, R>|null))=>Promise<(FieldsSelection<PullRequestReviewCommentEdge, R>|null)>})}


/** Autogenerated return type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The newly created comment. */
comment:(PullRequestReviewCommentObservableChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Observable<(FieldsSelection<PullRequestReviewComment, R>|null)>}),
/** The edge from the review's comment connection. */
commentEdge:(PullRequestReviewCommentEdgeObservableChain & {get:<R extends PullRequestReviewCommentEdgeRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewCommentEdge, R>|null))=>Observable<(FieldsSelection<PullRequestReviewCommentEdge, R>|null)>})}


/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The newly created thread. */
thread:(PullRequestReviewThreadPromiseChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Promise<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The newly created thread. */
thread:(PullRequestReviewThreadObservableChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Observable<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of AddReaction */
export interface AddReactionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The reaction object. */
reaction:(ReactionPromiseChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Promise<(FieldsSelection<Reaction, R>|null)>}),
/** The reactable subject. */
subject:(ReactablePromiseChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:(FieldsSelection<Reactable, R>|null))=>Promise<(FieldsSelection<Reactable, R>|null)>})}


/** Autogenerated return type of AddReaction */
export interface AddReactionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The reaction object. */
reaction:(ReactionObservableChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Observable<(FieldsSelection<Reaction, R>|null)>}),
/** The reactable subject. */
subject:(ReactableObservableChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:(FieldsSelection<Reactable, R>|null))=>Observable<(FieldsSelection<Reactable, R>|null)>})}


/** Autogenerated return type of AddStar */
export interface AddStarPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The starrable. */
starrable:(StarrablePromiseChain & {get:<R extends StarrableRequest>(request: R, defaultValue?:(FieldsSelection<Starrable, R>|null))=>Promise<(FieldsSelection<Starrable, R>|null)>})}


/** Autogenerated return type of AddStar */
export interface AddStarPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The starrable. */
starrable:(StarrableObservableChain & {get:<R extends StarrableRequest>(request: R, defaultValue?:(FieldsSelection<Starrable, R>|null))=>Observable<(FieldsSelection<Starrable, R>|null)>})}


/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The repository that was marked as archived. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of ArchiveRepository */
export interface ArchiveRepositoryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The repository that was marked as archived. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The invitation that was canceled. */
invitation:(EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** A message confirming the result of canceling an administrator invitation. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The invitation that was canceled. */
invitation:(EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>}),
/** A message confirming the result of canceling an administrator invitation. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Your updated status. */
status:(UserStatusPromiseChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Promise<(FieldsSelection<UserStatus, R>|null)>})}


/** Autogenerated return type of ChangeUserStatus */
export interface ChangeUserStatusPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Your updated status. */
status:(UserStatusObservableChain & {get:<R extends UserStatusRequest>(request: R, defaultValue?:(FieldsSelection<UserStatus, R>|null))=>Observable<(FieldsSelection<UserStatus, R>|null)>})}


/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The item that was unlabeled. */
labelable:(LabelablePromiseChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Promise<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelablePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The item that was unlabeled. */
labelable:(LabelableObservableChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Observable<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of CloneProject */
export interface CloneProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The id of the JobStatus for populating cloned fields. */
jobStatusId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new cloned project. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of CloneProject */
export interface CloneProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The id of the JobStatus for populating cloned fields. */
jobStatusId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new cloned project. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of CloneTemplateRepository */
export interface CloneTemplateRepositoryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue that was closed. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of CloseIssue */
export interface CloseIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue that was closed. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request that was closed. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of ClosePullRequest */
export interface ClosePullRequestPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request that was closed. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated ProjectCard. */
projectCard:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>})}


/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated ProjectCard. */
projectCard:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>})}


/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayloadPromiseChain{
/** The newly created BranchProtectionRule. */
branchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRulePayloadObservableChain{
/** The newly created BranchProtectionRule. */
branchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayloadPromiseChain{
/** The newly created check run. */
checkRun:(CheckRunPromiseChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Promise<(FieldsSelection<CheckRun, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateCheckRun */
export interface CreateCheckRunPayloadObservableChain{
/** The newly created check run. */
checkRun:(CheckRunObservableChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Observable<(FieldsSelection<CheckRun, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayloadPromiseChain{
/** The newly created check suite. */
checkSuite:(CheckSuitePromiseChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Promise<(FieldsSelection<CheckSuite, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateCheckSuite */
export interface CreateCheckSuitePayloadObservableChain{
/** The newly created check suite. */
checkSuite:(CheckSuiteObservableChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Observable<(FieldsSelection<CheckSuite, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of CreateContentAttachment */
export interface CreateContentAttachmentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The newly created content attachment. */
contentAttachment:(ContentAttachmentPromiseChain & {get:<R extends ContentAttachmentRequest>(request: R, defaultValue?:(FieldsSelection<ContentAttachment, R>|null))=>Promise<(FieldsSelection<ContentAttachment, R>|null)>})}


/** Autogenerated return type of CreateContentAttachment */
export interface CreateContentAttachmentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The newly created content attachment. */
contentAttachment:(ContentAttachmentObservableChain & {get:<R extends ContentAttachmentRequest>(request: R, defaultValue?:(FieldsSelection<ContentAttachment, R>|null))=>Observable<(FieldsSelection<ContentAttachment, R>|null)>})}


/** A content attachment */
export interface ContentAttachmentPromiseChain{
/** The body text of the content attachment. This parameter supports markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The content reference that the content attachment is attached to. */
contentReference:(ContentReferencePromiseChain & {get:<R extends ContentReferenceRequest>(request: R, defaultValue?:ContentReference)=>Promise<ContentReference>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The title of the content attachment. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A content attachment */
export interface ContentAttachmentObservableChain{
/** The body text of the content attachment. This parameter supports markdown. */
body:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The content reference that the content attachment is attached to. */
contentReference:(ContentReferenceObservableChain & {get:<R extends ContentReferenceRequest>(request: R, defaultValue?:ContentReference)=>Observable<ContentReference>}),
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The title of the content attachment. */
title:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** A content reference */
export interface ContentReferencePromiseChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The reference of the content reference. */
reference:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A content reference */
export interface ContentReferenceObservableChain{
/** Identifies the primary key from the database. */
databaseId:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The reference of the content reference. */
reference:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Autogenerated return type of CreateDeployment */
export interface CreateDeploymentPayloadPromiseChain{
/** True if the default branch has been auto-merged into the deployment ref. */
autoMerged:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new deployment. */
deployment:(DeploymentPromiseChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:(FieldsSelection<Deployment, R>|null))=>Promise<(FieldsSelection<Deployment, R>|null)>})}


/** Autogenerated return type of CreateDeployment */
export interface CreateDeploymentPayloadObservableChain{
/** True if the default branch has been auto-merged into the deployment ref. */
autoMerged:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new deployment. */
deployment:(DeploymentObservableChain & {get:<R extends DeploymentRequest>(request: R, defaultValue?:(FieldsSelection<Deployment, R>|null))=>Observable<(FieldsSelection<Deployment, R>|null)>})}


/** Autogenerated return type of CreateDeploymentStatus */
export interface CreateDeploymentStatusPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new deployment status. */
deploymentStatus:(DeploymentStatusPromiseChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Promise<(FieldsSelection<DeploymentStatus, R>|null)>})}


/** Autogenerated return type of CreateDeploymentStatus */
export interface CreateDeploymentStatusPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new deployment status. */
deploymentStatus:(DeploymentStatusObservableChain & {get:<R extends DeploymentStatusRequest>(request: R, defaultValue?:(FieldsSelection<DeploymentStatus, R>|null))=>Observable<(FieldsSelection<DeploymentStatus, R>|null)>})}


/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise that owns the created organization. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** The organization that was created. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>})}


/** Autogenerated return type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise that owns the created organization. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** The organization that was created. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>})}


/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The IP allow list entry that was created. */
ipAllowListEntry:(IpAllowListEntryPromiseChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Promise<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The IP allow list entry that was created. */
ipAllowListEntry:(IpAllowListEntryObservableChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Observable<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new issue. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of CreateIssue */
export interface CreateIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new issue. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of CreateLabel */
export interface CreateLabelPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new label. */
label:(LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Promise<(FieldsSelection<Label, R>|null)>})}


/** Autogenerated return type of CreateLabel */
export interface CreateLabelPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new label. */
label:(LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Observable<(FieldsSelection<Label, R>|null)>})}


/** Autogenerated return type of CreateProject */
export interface CreateProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new project. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of CreateProject */
export interface CreateProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new project. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new pull request. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of CreatePullRequest */
export interface CreatePullRequestPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new pull request. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of CreateRef */
export interface CreateRefPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The newly created ref. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** Autogenerated return type of CreateRef */
export interface CreateRefPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The newly created ref. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of CreateRepository */
export interface CreateRepositoryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new discussion. */
teamDiscussion:(TeamDiscussionPromiseChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Promise<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** Autogenerated return type of CreateTeamDiscussion */
export interface CreateTeamDiscussionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new discussion. */
teamDiscussion:(TeamDiscussionObservableChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Observable<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new comment. */
teamDiscussionComment:(TeamDiscussionCommentPromiseChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Promise<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** Autogenerated return type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new comment. */
teamDiscussionComment:(TeamDiscussionCommentObservableChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Observable<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The declined topic. */
topic:(TopicPromiseChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Promise<(FieldsSelection<Topic, R>|null)>})}


/** Autogenerated return type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The declined topic. */
topic:(TopicObservableChain & {get:<R extends TopicRequest>(request: R, defaultValue?:(FieldsSelection<Topic, R>|null))=>Observable<(FieldsSelection<Topic, R>|null)>})}


/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRulePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteDeployment */
export interface DeleteDeploymentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The IP allow list entry that was deleted. */
ipAllowListEntry:(IpAllowListEntryPromiseChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Promise<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The IP allow list entry that was deleted. */
ipAllowListEntry:(IpAllowListEntryObservableChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Observable<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The repository the issue belonged to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of DeleteIssue */
export interface DeleteIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The repository the issue belonged to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteIssueComment */
export interface DeleteIssueCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteLabel */
export interface DeleteLabelPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteLabel */
export interface DeleteLabelPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeletePackageVersion */
export interface DeletePackageVersionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Whether or not the operation succeeded. */
success:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Promise<(Scalars["Boolean"]|null)>})}


/** Autogenerated return type of DeletePackageVersion */
export interface DeletePackageVersionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Whether or not the operation succeeded. */
success:({get:(request?:boolean|number,defaultValue?:(Scalars["Boolean"]|null))=>Observable<(Scalars["Boolean"]|null)>})}


/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The repository or organization the project was removed from. */
owner:(ProjectOwnerPromiseChain & {get:<R extends ProjectOwnerRequest>(request: R, defaultValue?:(FieldsSelection<ProjectOwner, R>|null))=>Promise<(FieldsSelection<ProjectOwner, R>|null)>})}


/** Autogenerated return type of DeleteProject */
export interface DeleteProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The repository or organization the project was removed from. */
owner:(ProjectOwnerObservableChain & {get:<R extends ProjectOwnerRequest>(request: R, defaultValue?:(FieldsSelection<ProjectOwner, R>|null))=>Observable<(FieldsSelection<ProjectOwner, R>|null)>})}


/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The column the deleted card was in. */
column:(ProjectColumnPromiseChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Promise<(FieldsSelection<ProjectColumn, R>|null)>}),
/** The deleted card ID. */
deletedCardId:({get:(request?:boolean|number,defaultValue?:(Scalars["ID"]|null))=>Promise<(Scalars["ID"]|null)>})}


/** Autogenerated return type of DeleteProjectCard */
export interface DeleteProjectCardPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The column the deleted card was in. */
column:(ProjectColumnObservableChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Observable<(FieldsSelection<ProjectColumn, R>|null)>}),
/** The deleted card ID. */
deletedCardId:({get:(request?:boolean|number,defaultValue?:(Scalars["ID"]|null))=>Observable<(Scalars["ID"]|null)>})}


/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The deleted column ID. */
deletedColumnId:({get:(request?:boolean|number,defaultValue?:(Scalars["ID"]|null))=>Promise<(Scalars["ID"]|null)>}),
/** The project the deleted column was in. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of DeleteProjectColumn */
export interface DeleteProjectColumnPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The deleted column ID. */
deletedColumnId:({get:(request?:boolean|number,defaultValue?:(Scalars["ID"]|null))=>Observable<(Scalars["ID"]|null)>}),
/** The project the deleted column was in. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The deleted pull request review. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of DeletePullRequestReview */
export interface DeletePullRequestReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The deleted pull request review. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request review the deleted comment belonged to. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request review the deleted comment belonged to. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteRef */
export interface DeleteRefPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The dismissed pull request review. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of DismissPullRequestReview */
export interface DismissPullRequestReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The dismissed pull request review. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of FollowUser */
export interface FollowUserPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user that was followed. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of FollowUser */
export interface FollowUserPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user that was followed. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of ImportProject */
export interface ImportProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new Project! */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of ImportProject */
export interface ImportProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new Project! */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The created enterprise administrator invitation. */
invitation:(EnterpriseAdministratorInvitationPromiseChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Promise<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>})}


/** Autogenerated return type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The created enterprise administrator invitation. */
invitation:(EnterpriseAdministratorInvitationObservableChain & {get:<R extends EnterpriseAdministratorInvitationRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseAdministratorInvitation, R>|null))=>Observable<(FieldsSelection<EnterpriseAdministratorInvitation, R>|null)>})}


/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The linked Project. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** The linked Repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The linked Project. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** The linked Repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of LockLockable */
export interface LockLockablePayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The item that was locked. */
lockedRecord:(LockablePromiseChain & {get:<R extends LockableRequest>(request: R, defaultValue?:(FieldsSelection<Lockable, R>|null))=>Promise<(FieldsSelection<Lockable, R>|null)>})}


/** Autogenerated return type of LockLockable */
export interface LockLockablePayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The item that was locked. */
lockedRecord:(LockableObservableChain & {get:<R extends LockableRequest>(request: R, defaultValue?:(FieldsSelection<Lockable, R>|null))=>Observable<(FieldsSelection<Lockable, R>|null)>})}


/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request that is ready for review. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request that is ready for review. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The resulting merge Commit. */
mergeCommit:(CommitPromiseChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Promise<(FieldsSelection<Commit, R>|null)>})}


/** Autogenerated return type of MergeBranch */
export interface MergeBranchPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The resulting merge Commit. */
mergeCommit:(CommitObservableChain & {get:<R extends CommitRequest>(request: R, defaultValue?:(FieldsSelection<Commit, R>|null))=>Observable<(FieldsSelection<Commit, R>|null)>})}


/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request that was merged. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of MergePullRequest */
export interface MergePullRequestPayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request that was merged. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The comment that was minimized. */
minimizedComment:(MinimizablePromiseChain & {get:<R extends MinimizableRequest>(request: R, defaultValue?:(FieldsSelection<Minimizable, R>|null))=>Promise<(FieldsSelection<Minimizable, R>|null)>})}


/** Autogenerated return type of MinimizeComment */
export interface MinimizeCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The comment that was minimized. */
minimizedComment:(MinimizableObservableChain & {get:<R extends MinimizableRequest>(request: R, defaultValue?:(FieldsSelection<Minimizable, R>|null))=>Observable<(FieldsSelection<Minimizable, R>|null)>})}


/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayloadPromiseChain{
/** The new edge of the moved card. */
cardEdge:(ProjectCardEdgePromiseChain & {get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardEdge, R>|null))=>Promise<(FieldsSelection<ProjectCardEdge, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of MoveProjectCard */
export interface MoveProjectCardPayloadObservableChain{
/** The new edge of the moved card. */
cardEdge:(ProjectCardEdgeObservableChain & {get:<R extends ProjectCardEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCardEdge, R>|null))=>Observable<(FieldsSelection<ProjectCardEdge, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The new edge of the moved column. */
columnEdge:(ProjectColumnEdgePromiseChain & {get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumnEdge, R>|null))=>Promise<(FieldsSelection<ProjectColumnEdge, R>|null)>})}


/** Autogenerated return type of MoveProjectColumn */
export interface MoveProjectColumnPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The new edge of the moved column. */
columnEdge:(ProjectColumnEdgeObservableChain & {get:<R extends ProjectColumnEdgeRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumnEdge, R>|null))=>Observable<(FieldsSelection<ProjectColumnEdge, R>|null)>})}


/** Autogenerated return type of PinIssue */
export interface PinIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue that was pinned */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of PinIssue */
export interface PinIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue that was pinned */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The identity provider for the enterprise. */
identityProvider:(EnterpriseIdentityProviderPromiseChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Promise<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The identity provider for the enterprise. */
identityProvider:(EnterpriseIdentityProviderObservableChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Observable<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayloadPromiseChain{
/** The item that was unassigned. */
assignable:(AssignablePromiseChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:(FieldsSelection<Assignable, R>|null))=>Promise<(FieldsSelection<Assignable, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignablePayloadObservableChain{
/** The item that was unassigned. */
assignable:(AssignableObservableChain & {get:<R extends AssignableRequest>(request: R, defaultValue?:(FieldsSelection<Assignable, R>|null))=>Observable<(FieldsSelection<Assignable, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayloadPromiseChain{
/** The user who was removed as an administrator. */
admin:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of removing an administrator. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The viewer performing the mutation. */
viewer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminPayloadObservableChain{
/** The user who was removed as an administrator. */
admin:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of removing an administrator. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The viewer performing the mutation. */
viewer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The identity provider that was removed from the enterprise. */
identityProvider:(EnterpriseIdentityProviderPromiseChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Promise<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The identity provider that was removed from the enterprise. */
identityProvider:(EnterpriseIdentityProviderObservableChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Observable<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** The organization that was removed from the enterprise. */
organization:(OrganizationPromiseChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Promise<(FieldsSelection<Organization, R>|null)>}),
/** The viewer performing the mutation. */
viewer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** The organization that was removed from the enterprise. */
organization:(OrganizationObservableChain & {get:<R extends OrganizationRequest>(request: R, defaultValue?:(FieldsSelection<Organization, R>|null))=>Observable<(FieldsSelection<Organization, R>|null)>}),
/** The viewer performing the mutation. */
viewer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The Labelable the labels were removed from. */
labelable:(LabelablePromiseChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Promise<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelablePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The Labelable the labels were removed from. */
labelable:(LabelableObservableChain & {get:<R extends LabelableRequest>(request: R, defaultValue?:(FieldsSelection<Labelable, R>|null))=>Observable<(FieldsSelection<Labelable, R>|null)>})}


/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user that was removed as an outside collaborator. */
removedUser:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user that was removed as an outside collaborator. */
removedUser:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The reaction object. */
reaction:(ReactionPromiseChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Promise<(FieldsSelection<Reaction, R>|null)>}),
/** The reactable subject. */
subject:(ReactablePromiseChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:(FieldsSelection<Reactable, R>|null))=>Promise<(FieldsSelection<Reactable, R>|null)>})}


/** Autogenerated return type of RemoveReaction */
export interface RemoveReactionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The reaction object. */
reaction:(ReactionObservableChain & {get:<R extends ReactionRequest>(request: R, defaultValue?:(FieldsSelection<Reaction, R>|null))=>Observable<(FieldsSelection<Reaction, R>|null)>}),
/** The reactable subject. */
subject:(ReactableObservableChain & {get:<R extends ReactableRequest>(request: R, defaultValue?:(FieldsSelection<Reactable, R>|null))=>Observable<(FieldsSelection<Reactable, R>|null)>})}


/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The starrable. */
starrable:(StarrablePromiseChain & {get:<R extends StarrableRequest>(request: R, defaultValue?:(FieldsSelection<Starrable, R>|null))=>Promise<(FieldsSelection<Starrable, R>|null)>})}


/** Autogenerated return type of RemoveStar */
export interface RemoveStarPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The starrable. */
starrable:(StarrableObservableChain & {get:<R extends StarrableRequest>(request: R, defaultValue?:(FieldsSelection<Starrable, R>|null))=>Observable<(FieldsSelection<Starrable, R>|null)>})}


/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue that was opened. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of ReopenIssue */
export interface ReopenIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue that was opened. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request that was reopened. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of ReopenPullRequest */
export interface ReopenPullRequestPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request that was reopened. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The pull request that is getting requests. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>}),
/** The edge from the pull request to the requested reviewers. */
requestedReviewersEdge:(UserEdgePromiseChain & {get:<R extends UserEdgeRequest>(request: R, defaultValue?:(FieldsSelection<UserEdge, R>|null))=>Promise<(FieldsSelection<UserEdge, R>|null)>})}


/** Autogenerated return type of RequestReviews */
export interface RequestReviewsPayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The pull request that is getting requests. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>}),
/** The edge from the pull request to the requested reviewers. */
requestedReviewersEdge:(UserEdgeObservableChain & {get:<R extends UserEdgeRequest>(request: R, defaultValue?:(FieldsSelection<UserEdge, R>|null))=>Observable<(FieldsSelection<UserEdge, R>|null)>})}


/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayloadPromiseChain{
/** The requested check suite. */
checkSuite:(CheckSuitePromiseChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Promise<(FieldsSelection<CheckSuite, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of RerequestCheckSuite */
export interface RerequestCheckSuitePayloadObservableChain{
/** The requested check suite. */
checkSuite:(CheckSuiteObservableChain & {get:<R extends CheckSuiteRequest>(request: R, defaultValue?:(FieldsSelection<CheckSuite, R>|null))=>Observable<(FieldsSelection<CheckSuite, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The thread to resolve. */
thread:(PullRequestReviewThreadPromiseChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Promise<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of ResolveReviewThread */
export interface ResolveReviewThreadPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The thread to resolve. */
thread:(PullRequestReviewThreadObservableChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Observable<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The identity provider for the enterprise. */
identityProvider:(EnterpriseIdentityProviderPromiseChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Promise<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The identity provider for the enterprise. */
identityProvider:(EnterpriseIdentityProviderObservableChain & {get:<R extends EnterpriseIdentityProviderRequest>(request: R, defaultValue?:(FieldsSelection<EnterpriseIdentityProvider, R>|null))=>Observable<(FieldsSelection<EnterpriseIdentityProvider, R>|null)>})}


/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The submitted pull request review. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The submitted pull request review. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue that was transferred */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of TransferIssue */
export interface TransferIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue that was transferred */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The repository that was unarchived. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UnarchiveRepository */
export interface UnarchiveRepositoryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The repository that was unarchived. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The user that was unfollowed. */
user:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of UnfollowUser */
export interface UnfollowUserPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The user that was unfollowed. */
user:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>})}


/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The linked Project. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>}),
/** The linked Repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The linked Project. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>}),
/** The linked Repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The item that was unlocked. */
unlockedRecord:(LockablePromiseChain & {get:<R extends LockableRequest>(request: R, defaultValue?:(FieldsSelection<Lockable, R>|null))=>Promise<(FieldsSelection<Lockable, R>|null)>})}


/** Autogenerated return type of UnlockLockable */
export interface UnlockLockablePayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The item that was unlocked. */
unlockedRecord:(LockableObservableChain & {get:<R extends LockableRequest>(request: R, defaultValue?:(FieldsSelection<Lockable, R>|null))=>Observable<(FieldsSelection<Lockable, R>|null)>})}


/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue or pull request that was marked as a duplicate. */
duplicate:({get:<R extends IssueOrPullRequestRequest>(request: R, defaultValue?:(FieldsSelection<IssueOrPullRequest, R>|null))=>Promise<(FieldsSelection<IssueOrPullRequest, R>|null)>})}


/** Autogenerated return type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicatePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue or pull request that was marked as a duplicate. */
duplicate:({get:<R extends IssueOrPullRequestRequest>(request: R, defaultValue?:(FieldsSelection<IssueOrPullRequest, R>|null))=>Observable<(FieldsSelection<IssueOrPullRequest, R>|null)>})}


/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The comment that was unminimized. */
unminimizedComment:(MinimizablePromiseChain & {get:<R extends MinimizableRequest>(request: R, defaultValue?:(FieldsSelection<Minimizable, R>|null))=>Promise<(FieldsSelection<Minimizable, R>|null)>})}


/** Autogenerated return type of UnminimizeComment */
export interface UnminimizeCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The comment that was unminimized. */
unminimizedComment:(MinimizableObservableChain & {get:<R extends MinimizableRequest>(request: R, defaultValue?:(FieldsSelection<Minimizable, R>|null))=>Observable<(FieldsSelection<Minimizable, R>|null)>})}


/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue that was unpinned */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of UnpinIssue */
export interface UnpinIssuePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue that was unpinned */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The thread to resolve. */
thread:(PullRequestReviewThreadPromiseChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Promise<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of UnresolveReviewThread */
export interface UnresolveReviewThreadPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The thread to resolve. */
thread:(PullRequestReviewThreadObservableChain & {get:<R extends PullRequestReviewThreadRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewThread, R>|null))=>Observable<(FieldsSelection<PullRequestReviewThread, R>|null)>})}


/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayloadPromiseChain{
/** The newly created BranchProtectionRule. */
branchProtectionRule:(BranchProtectionRulePromiseChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Promise<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRulePayloadObservableChain{
/** The newly created BranchProtectionRule. */
branchProtectionRule:(BranchProtectionRuleObservableChain & {get:<R extends BranchProtectionRuleRequest>(request: R, defaultValue?:(FieldsSelection<BranchProtectionRule, R>|null))=>Observable<(FieldsSelection<BranchProtectionRule, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayloadPromiseChain{
/** The updated check run. */
checkRun:(CheckRunPromiseChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Promise<(FieldsSelection<CheckRun, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateCheckRun */
export interface UpdateCheckRunPayloadObservableChain{
/** The updated check run. */
checkRun:(CheckRunObservableChain & {get:<R extends CheckRunRequest>(request: R, defaultValue?:(FieldsSelection<CheckRun, R>|null))=>Observable<(FieldsSelection<CheckRun, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting */
export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated action execution capability setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the action execution capability setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting */
export interface UpdateEnterpriseActionExecutionCapabilitySettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated action execution capability setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the action execution capability setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** A message confirming the result of changing the administrator's role. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRolePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** A message confirming the result of changing the administrator's role. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated allow private repository forking setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the allow private repository forking setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated allow private repository forking setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the allow private repository forking setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated default repository permission setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the default repository permission setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated default repository permission setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the default repository permission setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can change repository visibility setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can change repository visibility setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can change repository visibility setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can change repository visibility setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can create repositories setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can create repositories setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can create repositories setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can create repositories setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can delete issues setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can delete issues setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can delete issues setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can delete issues setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can delete repositories setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can delete repositories setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can delete repositories setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can delete repositories setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can invite collaborators setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can invite collaborators setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can invite collaborators setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can invite collaborators setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can make purchases setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can make purchases setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can make purchases setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can make purchases setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can update protected branches setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can update protected branches setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can update protected branches setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can update protected branches setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can view dependency insights setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can view dependency insights setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated members can view dependency insights setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the members can view dependency insights setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated organization projects setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the organization projects setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated organization projects setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the organization projects setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>})}


/** Autogenerated return type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfilePayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated enterprise. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>})}


/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated repository projects setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the repository projects setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated repository projects setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the repository projects setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated team discussions setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the team discussions setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated team discussions setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the team discussions setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The enterprise with the updated two factor authentication required setting. */
enterprise:(EnterprisePromiseChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Promise<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the two factor authentication required setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The enterprise with the updated two factor authentication required setting. */
enterprise:(EnterpriseObservableChain & {get:<R extends EnterpriseRequest>(request: R, defaultValue?:(FieldsSelection<Enterprise, R>|null))=>Observable<(FieldsSelection<Enterprise, R>|null)>}),
/** A message confirming the result of updating the two factor authentication required setting. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The IP allow list owner on which the setting was updated. */
owner:({get:<R extends IpAllowListOwnerRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListOwner, R>|null))=>Promise<(FieldsSelection<IpAllowListOwner, R>|null)>})}


/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The IP allow list owner on which the setting was updated. */
owner:({get:<R extends IpAllowListOwnerRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListOwner, R>|null))=>Observable<(FieldsSelection<IpAllowListOwner, R>|null)>})}


/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The IP allow list entry that was updated. */
ipAllowListEntry:(IpAllowListEntryPromiseChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Promise<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The IP allow list entry that was updated. */
ipAllowListEntry:(IpAllowListEntryObservableChain & {get:<R extends IpAllowListEntryRequest>(request: R, defaultValue?:(FieldsSelection<IpAllowListEntry, R>|null))=>Observable<(FieldsSelection<IpAllowListEntry, R>|null)>})}


/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The issue. */
issue:(IssuePromiseChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Promise<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of UpdateIssue */
export interface UpdateIssuePayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The issue. */
issue:(IssueObservableChain & {get:<R extends IssueRequest>(request: R, defaultValue?:(FieldsSelection<Issue, R>|null))=>Observable<(FieldsSelection<Issue, R>|null)>})}


/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated comment. */
issueComment:(IssueCommentPromiseChain & {get:<R extends IssueCommentRequest>(request: R, defaultValue?:(FieldsSelection<IssueComment, R>|null))=>Promise<(FieldsSelection<IssueComment, R>|null)>})}


/** Autogenerated return type of UpdateIssueComment */
export interface UpdateIssueCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated comment. */
issueComment:(IssueCommentObservableChain & {get:<R extends IssueCommentRequest>(request: R, defaultValue?:(FieldsSelection<IssueComment, R>|null))=>Observable<(FieldsSelection<IssueComment, R>|null)>})}


/** Autogenerated return type of UpdateLabel */
export interface UpdateLabelPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated label. */
label:(LabelPromiseChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Promise<(FieldsSelection<Label, R>|null)>})}


/** Autogenerated return type of UpdateLabel */
export interface UpdateLabelPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated label. */
label:(LabelObservableChain & {get:<R extends LabelRequest>(request: R, defaultValue?:(FieldsSelection<Label, R>|null))=>Observable<(FieldsSelection<Label, R>|null)>})}


/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated project. */
project:(ProjectPromiseChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Promise<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of UpdateProject */
export interface UpdateProjectPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated project. */
project:(ProjectObservableChain & {get:<R extends ProjectRequest>(request: R, defaultValue?:(FieldsSelection<Project, R>|null))=>Observable<(FieldsSelection<Project, R>|null)>})}


/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated ProjectCard. */
projectCard:(ProjectCardPromiseChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Promise<(FieldsSelection<ProjectCard, R>|null)>})}


/** Autogenerated return type of UpdateProjectCard */
export interface UpdateProjectCardPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated ProjectCard. */
projectCard:(ProjectCardObservableChain & {get:<R extends ProjectCardRequest>(request: R, defaultValue?:(FieldsSelection<ProjectCard, R>|null))=>Observable<(FieldsSelection<ProjectCard, R>|null)>})}


/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated project column. */
projectColumn:(ProjectColumnPromiseChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Promise<(FieldsSelection<ProjectColumn, R>|null)>})}


/** Autogenerated return type of UpdateProjectColumn */
export interface UpdateProjectColumnPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated project column. */
projectColumn:(ProjectColumnObservableChain & {get:<R extends ProjectColumnRequest>(request: R, defaultValue?:(FieldsSelection<ProjectColumn, R>|null))=>Observable<(FieldsSelection<ProjectColumn, R>|null)>})}


/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayloadPromiseChain{
/** Identifies the actor who performed the event. */
actor:(ActorPromiseChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Promise<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated pull request. */
pullRequest:(PullRequestPromiseChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Promise<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of UpdatePullRequest */
export interface UpdatePullRequestPayloadObservableChain{
/** Identifies the actor who performed the event. */
actor:(ActorObservableChain & {get:<R extends ActorRequest>(request: R, defaultValue?:(FieldsSelection<Actor, R>|null))=>Observable<(FieldsSelection<Actor, R>|null)>}),
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated pull request. */
pullRequest:(PullRequestObservableChain & {get:<R extends PullRequestRequest>(request: R, defaultValue?:(FieldsSelection<PullRequest, R>|null))=>Observable<(FieldsSelection<PullRequest, R>|null)>})}


/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated pull request review. */
pullRequestReview:(PullRequestReviewPromiseChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Promise<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated pull request review. */
pullRequestReview:(PullRequestReviewObservableChain & {get:<R extends PullRequestReviewRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReview, R>|null))=>Observable<(FieldsSelection<PullRequestReview, R>|null)>})}


/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated comment. */
pullRequestReviewComment:(PullRequestReviewCommentPromiseChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Promise<(FieldsSelection<PullRequestReviewComment, R>|null)>})}


/** Autogenerated return type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated comment. */
pullRequestReviewComment:(PullRequestReviewCommentObservableChain & {get:<R extends PullRequestReviewCommentRequest>(request: R, defaultValue?:(FieldsSelection<PullRequestReviewComment, R>|null))=>Observable<(FieldsSelection<PullRequestReviewComment, R>|null)>})}


/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated Ref. */
ref:(RefPromiseChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Promise<(FieldsSelection<Ref, R>|null)>})}


/** Autogenerated return type of UpdateRef */
export interface UpdateRefPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated Ref. */
ref:(RefObservableChain & {get:<R extends RefRequest>(request: R, defaultValue?:(FieldsSelection<Ref, R>|null))=>Observable<(FieldsSelection<Ref, R>|null)>})}


/** Autogenerated return type of UpdateRefs */
export interface UpdateRefsPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateRefs */
export interface UpdateRefsPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UpdateRepository */
export interface UpdateRepositoryPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The input subscribable entity. */
subscribable:(SubscribablePromiseChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:(FieldsSelection<Subscribable, R>|null))=>Promise<(FieldsSelection<Subscribable, R>|null)>})}


/** Autogenerated return type of UpdateSubscription */
export interface UpdateSubscriptionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The input subscribable entity. */
subscribable:(SubscribableObservableChain & {get:<R extends SubscribableRequest>(request: R, defaultValue?:(FieldsSelection<Subscribable, R>|null))=>Observable<(FieldsSelection<Subscribable, R>|null)>})}


/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated discussion. */
teamDiscussion:(TeamDiscussionPromiseChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Promise<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** Autogenerated return type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated discussion. */
teamDiscussion:(TeamDiscussionObservableChain & {get:<R extends TeamDiscussionRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussion, R>|null))=>Observable<(FieldsSelection<TeamDiscussion, R>|null)>})}


/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The updated comment. */
teamDiscussionComment:(TeamDiscussionCommentPromiseChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Promise<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** Autogenerated return type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The updated comment. */
teamDiscussionComment:(TeamDiscussionCommentObservableChain & {get:<R extends TeamDiscussionCommentRequest>(request: R, defaultValue?:(FieldsSelection<TeamDiscussionComment, R>|null))=>Observable<(FieldsSelection<TeamDiscussionComment, R>|null)>})}


/** Autogenerated return type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The team that was modified */
team:(TeamPromiseChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Promise<(FieldsSelection<Team, R>|null)>})}


/** Autogenerated return type of UpdateTeamReviewAssignment */
export interface UpdateTeamReviewAssignmentPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The team that was modified */
team:(TeamObservableChain & {get:<R extends TeamRequest>(request: R, defaultValue?:(FieldsSelection<Team, R>|null))=>Observable<(FieldsSelection<Team, R>|null)>})}


/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayloadPromiseChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Names of the provided topics that are not valid. */
invalidTopicNames:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Promise<(Scalars["String"][]|null)>}),
/** The updated repository. */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Promise<(FieldsSelection<Repository, R>|null)>})}


/** Autogenerated return type of UpdateTopics */
export interface UpdateTopicsPayloadObservableChain{
/** A unique identifier for the client performing the mutation. */
clientMutationId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Names of the provided topics that are not valid. */
invalidTopicNames:({get:(request?:boolean|number,defaultValue?:(Scalars["String"][]|null))=>Observable<(Scalars["String"][]|null)>}),
/** The updated repository. */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:(FieldsSelection<Repository, R>|null))=>Observable<(FieldsSelection<Repository, R>|null)>})}


/** Represents a Git blob. */
export interface BlobPromiseChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Byte size of Blob object */
byteSize:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/**
 * Indicates whether the Blob is binary or text
 * 
 * **Upcoming Change on 2019-07-01 UTC**
 * **Description:** Type for `isBinary` will change from `Boolean!` to `Boolean`.
 * **Reason:** The `isBinary` field may return `null` when it cannot determine if a Blob is binary.
 */
isBinary:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Indicates whether the contents is truncated */
isTruncated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** UTF8 text data or null if the Blob is binary */
text:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>})}


/** Represents a Git blob. */
export interface BlobObservableChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Byte size of Blob object */
byteSize:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/**
 * Indicates whether the Blob is binary or text
 * 
 * **Upcoming Change on 2019-07-01 UTC**
 * **Description:** Type for `isBinary` will change from `Boolean!` to `Boolean`.
 * **Reason:** The `isBinary` field may return `null` when it cannot determine if a Blob is binary.
 */
isBinary:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Indicates whether the contents is truncated */
isTruncated:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** UTF8 text data or null if the Blob is binary */
text:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>})}


/** A generic hovercard context with a message and icon */
export interface GenericHovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>})}


/** A generic hovercard context with a message and icon */
export interface GenericHovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>})}


/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignaturePromiseChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Hex-encoded ID of the key that signed this object. */
keyId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Promise<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents a GPG signature on a Commit or Tag. */
export interface GpgSignatureObservableChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Hex-encoded ID of the key that signed this object. */
keyId:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Observable<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Teams in this organization the user is a member of that are relevant */
relevantTeams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>})&(TeamConnectionPromiseChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Promise<TeamConnection>}),
/** The path for the full team list for this user */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The URL for the full team list for this user */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The total number of teams the user is on in the organization */
totalTeamCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** An organization teams hovercard context */
export interface OrganizationTeamsHovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Teams in this organization the user is a member of that are relevant */
relevantTeams:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>})&(TeamConnectionObservableChain & {get:<R extends TeamConnectionRequest>(request: R, defaultValue?:TeamConnection)=>Observable<TeamConnection>}),
/** The path for the full team list for this user */
teamsResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The URL for the full team list for this user */
teamsUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The total number of teams the user is on in the organization */
totalTeamCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** An organization list hovercard context */
export interface OrganizationsHovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Organizations this user is a member of that are relevant */
relevantOrganizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>})&(OrganizationConnectionPromiseChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Promise<OrganizationConnection>}),
/** The total number of organizations this user is in */
totalOrganizationCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Promise<Scalars["Int"]>})}


/** An organization list hovercard context */
export interface OrganizationsHovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Organizations this user is a member of that are relevant */
relevantOrganizations:((args?:{
/** Returns the elements in the list that come after the specified cursor. */
after?: (Scalars["String"]|null),
/** Returns the elements in the list that come before the specified cursor. */
before?: (Scalars["String"]|null),
/** Returns the first _n_ elements from the list. */
first?: (Scalars["Int"]|null),
/** Returns the last _n_ elements from the list. */
last?: (Scalars["Int"]|null)})=>OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>})&(OrganizationConnectionObservableChain & {get:<R extends OrganizationConnectionRequest>(request: R, defaultValue?:OrganizationConnection)=>Observable<OrganizationConnection>}),
/** The total number of organizations this user is in */
totalOrganizationCount:({get:(request?:boolean|number,defaultValue?:Scalars["Int"])=>Observable<Scalars["Int"]>})}


/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTagPromiseChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** Identifies the tag name of the version. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Version that the tag is associated with. */
version:(PackageVersionPromiseChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Promise<(FieldsSelection<PackageVersion, R>|null)>})}


/** A version tag contains the mapping between a tag name and a version. */
export interface PackageTagObservableChain{id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** Identifies the tag name of the version. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Version that the tag is associated with. */
version:(PackageVersionObservableChain & {get:<R extends PackageVersionRequest>(request: R, defaultValue?:(FieldsSelection<PackageVersion, R>|null))=>Observable<(FieldsSelection<PackageVersion, R>|null)>})}


/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface ReviewStatusHovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The current status of the pull request with respect to code review. */
reviewDecision:({get:(request?:boolean|number,defaultValue?:(PullRequestReviewDecision|null))=>Promise<(PullRequestReviewDecision|null)>})}


/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface ReviewStatusHovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The current status of the pull request with respect to code review. */
reviewDecision:({get:(request?:boolean|number,defaultValue?:(PullRequestReviewDecision|null))=>Observable<(PullRequestReviewDecision|null)>})}


/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignaturePromiseChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Promise<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents an S/MIME signature on a Commit or Tag. */
export interface SmimeSignatureObservableChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Observable<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** Represents a Git tag. */
export interface TagPromiseChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Promise<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Promise<Scalars["ID"]>}),
/** The Git tag message. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Promise<(Scalars["String"]|null)>}),
/** The Git tag name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Promise<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryPromiseChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Promise<Repository>}),
/** Details about the tag author. */
tagger:(GitActorPromiseChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Promise<(FieldsSelection<GitActor, R>|null)>}),
/** The Git object the tag points to. */
target:(GitObjectPromiseChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:GitObject)=>Promise<GitObject>})}


/** Represents a Git tag. */
export interface TagObservableChain{
/** An abbreviated version of the Git object ID */
abbreviatedOid:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The HTTP path for this Git object */
commitResourcePath:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),
/** The HTTP URL for this Git object */
commitUrl:({get:(request?:boolean|number,defaultValue?:Scalars["URI"])=>Observable<Scalars["URI"]>}),id:({get:(request?:boolean|number,defaultValue?:Scalars["ID"])=>Observable<Scalars["ID"]>}),
/** The Git tag message. */
message:({get:(request?:boolean|number,defaultValue?:(Scalars["String"]|null))=>Observable<(Scalars["String"]|null)>}),
/** The Git tag name. */
name:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** The Git object ID */
oid:({get:(request?:boolean|number,defaultValue?:Scalars["GitObjectID"])=>Observable<Scalars["GitObjectID"]>}),
/** The Repository the Git object belongs to */
repository:(RepositoryObservableChain & {get:<R extends RepositoryRequest>(request: R, defaultValue?:Repository)=>Observable<Repository>}),
/** Details about the tag author. */
tagger:(GitActorObservableChain & {get:<R extends GitActorRequest>(request: R, defaultValue?:(FieldsSelection<GitActor, R>|null))=>Observable<(FieldsSelection<GitActor, R>|null)>}),
/** The Git object the tag points to. */
target:(GitObjectObservableChain & {get:<R extends GitObjectRequest>(request: R, defaultValue?:GitObject)=>Observable<GitObject>})}


/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignaturePromiseChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Promise<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Promise<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Promise<Scalars["Boolean"]>})}


/** Represents an unknown signature on a Commit or Tag. */
export interface UnknownSignatureObservableChain{
/** Email used to sign this object. */
email:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** True if the signature is valid and verified by GitHub. */
isValid:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>}),
/** Payload for GPG signing object. Raw ODB object without the signature header. */
payload:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** ASCII-armored signature header from object. */
signature:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** GitHub user corresponding to the email signing this commit. */
signer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:(FieldsSelection<User, R>|null))=>Observable<(FieldsSelection<User, R>|null)>}),
/**
 * The state of this signature. `VALID` if signature is valid and verified by
 * GitHub, otherwise represents reason why signature is considered invalid.
 */
state:({get:(request?:boolean|number,defaultValue?:GitSignatureState)=>Observable<GitSignatureState>}),
/** True if the signature was made with GitHub's signing key. */
wasSignedByGitHub:({get:(request?:boolean|number,defaultValue?:Scalars["Boolean"])=>Observable<Scalars["Boolean"]>})}


/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContextPromiseChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Promise<Scalars["String"]>}),
/** Identifies the user who is related to this context. */
viewer:(UserPromiseChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Promise<User>})}


/** A hovercard context with a message describing how the viewer is related. */
export interface ViewerHovercardContextObservableChain{
/** A string describing this context */
message:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** An octicon to accompany this context */
octicon:({get:(request?:boolean|number,defaultValue?:Scalars["String"])=>Observable<Scalars["String"]>}),
/** Identifies the user who is related to this context. */
viewer:(UserObservableChain & {get:<R extends UserRequest>(request: R, defaultValue?:User)=>Observable<User>})}